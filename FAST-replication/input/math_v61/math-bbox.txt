public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); // The following exception was thrown during execution in test generation try { int int6 = poissonDistributionImpl1.inverseCumulativeProbability((double) (byte) 10); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); int int3 = poissonDistributionImpl1.getDomainUpperBound((double) (short) 0); // The following exception was thrown during execution in test generation try { double double6 = poissonDistributionImpl1.cumulativeProbability(Double.NaN, (-1.5574077246549023d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647); }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.probability(100.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.941866060050443E-159d + "'", double8 == 3.941866060050443E-159d); }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.0d, (int) '4'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): mean (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); // The following exception was thrown during execution in test generation try { double double9 = poissonDistributionImpl1.cumulativeProbability(10.0d, (double) (byte) 1); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); // The following exception was thrown during execution in test generation try { double double4 = poissonDistributionImpl2.cumulativeProbability((int) (short) 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Continued fraction convergents failed to converge for value 100"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); // The following exception was thrown during execution in test generation try { int int12 = poissonDistributionImpl1.inverseCumulativeProbability((-0.10342451229184121d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; double double6 = randomDataImpl4.nextT(5.656854249492381d); // The following exception was thrown during execution in test generation try { int int10 = randomDataImpl4.nextHypergeometric((int) (short) 10, (int) (byte) 0, (int) 'a'); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.4356592083234563d + "'", double6 == 0.4356592083234563d); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 0); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.36787944117146065d + "'", double8 == 0.36787944117146065d); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { long long16 = randomDataImpl13.nextSecureLong(2147483647L, (long) 'a'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 2,147,483,647 is larger than, or equal to, the maximum (97): lower bound (2,147,483,647) must be strictly less than upper bound (97)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; double double6 = randomDataImpl4.nextT(5.656854249492381d); // The following exception was thrown during execution in test generation try { long long8 = randomDataImpl4.nextPoisson((-0.04336495540712863d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.043 is smaller than, or equal to, the minimum (0): mean (-0.043)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5119442819698615d + "'", double6 == 0.5119442819698615d); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-2.5459021783676956d), (-1.207854600801523d), (int) 'a'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -2.546 is smaller than, or equal to, the minimum (0): mean (-2.546)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); int int12 = poissonDistributionImpl1.getDomainUpperBound((-0.5063656411097588d)); double double13 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); // The following exception was thrown during execution in test generation try { int int10 = poissonDistributionImpl1.inverseCumulativeProbability(1.0190743989225088d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); // The following exception was thrown during execution in test generation try { int int18 = randomDataImpl5.nextBinomial((int) (byte) -1, (double) 'a'); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 612.1683136863576d + "'", double7 == 612.1683136863576d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { long long7 = randomDataImpl4.nextLong((long) (byte) 1, (long) (-1)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 1 is larger than, or equal to, the maximum (-1): lower bound (1) must be strictly less than upper bound (-1)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); double double12 = poissonDistributionImpl1.probability(100); int int14 = poissonDistributionImpl1.inverseCumulativeProbability(0.06680720126885803d); // The following exception was thrown during execution in test generation try { int int16 = poissonDistributionImpl1.inverseCumulativeProbability((double) (byte) 100); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.0d, 0.4925042174359671d, 1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): mean (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-0.7853981633974483d), (-1.5574077246549023d), (int) (byte) 100); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.785 is smaller than, or equal to, the minimum (0): mean (-0.785)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); double double12 = poissonDistributionImpl1.probability(100); // The following exception was thrown during execution in test generation try { double double15 = poissonDistributionImpl1.cumulativeProbability(1.5551841930150851d, 1.0190743989225088d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); int int12 = poissonDistributionImpl1.getDomainLowerBound(2.164067214887496d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); // The following exception was thrown during execution in test generation try { int int14 = poissonDistributionImpl1.inverseCumulativeProbability(1.7976931348623157E308d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); // The following exception was thrown during execution in test generation try { double double13 = poissonDistributionImpl1.cumulativeProbability((int) (byte) 10, 0); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100); // The following exception was thrown during execution in test generation try { double double4 = poissonDistributionImpl1.cumulativeProbability(0.0021073229577450916d, (-0.5872139151569291d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; int int15 = poissonDistributionImpl1.getDomainUpperBound(2.5722962688314924E-6d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); int int12 = poissonDistributionImpl1.getDomainUpperBound((-0.5063656411097588d)); int int13 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); // flaky:     org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); poissonDistributionImpl1.reseedRandomGenerator(0L); // The following exception was thrown during execution in test generation try { double double11 = poissonDistributionImpl1.cumulativeProbability((-0.05276668818524178d), (-0.5872139151569291d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double4 = poissonDistributionImpl2.normalApproximateProbability(0); // The following exception was thrown during execution in test generation try { double double7 = poissonDistributionImpl2.cumulativeProbability((double) 42L, (-0.18404532627671905d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); double double12 = poissonDistributionImpl1.probability(0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117144233d + "'", double12 == 0.36787944117144233d); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; double double6 = randomDataImpl4.nextT(5.656854249492381d); long long8 = randomDataImpl4.nextPoisson(4.4895039227874735E-8d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.7534689855041378d) + "'", double6 == (-0.7534689855041378d)); org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); double double14 = poissonDistributionImpl1.cumulativeProbability((double) (-1)); // The following exception was thrown during execution in test generation try { int int16 = poissonDistributionImpl1.inverseCumulativeProbability((-0.7534689855041378d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100); double double3 = poissonDistributionImpl1.probability(0.9999999899522336d); double double5 = poissonDistributionImpl1.probability((-1)); // The following exception was thrown during execution in test generation try { double double8 = poissonDistributionImpl1.cumulativeProbability((-0.4673841036516608d), (-0.04336495540712863d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); double double11 = poissonDistributionImpl1.probability(0.0d); double double12 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.36787944117144233d + "'", double11 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); int int12 = poissonDistributionImpl1.getDomainUpperBound((-0.5063656411097588d)); double double15 = poissonDistributionImpl1.cumulativeProbability((-1), 1); // The following exception was thrown during execution in test generation try { int[] intArray17 = poissonDistributionImpl1.sample((int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7357588823428858d + "'", double15 == 0.7357588823428858d); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { double double10 = randomDataImpl7.nextGamma((double) 31, 0.0d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-0.9314434025787122d), (int) 'a'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.931 is smaller than, or equal to, the minimum (0): mean (-0.931)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double18 = randomDataImpl5.nextWeibull(0.2930641738000717d, 0.4925042174359671d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl20 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double22 = poissonDistributionImpl20.probability(100); double double24 = poissonDistributionImpl20.normalApproximateProbability(2147483647); double double27 = poissonDistributionImpl20.cumulativeProbability((int) (short) 10, 2147483647); double double29 = poissonDistributionImpl20.normalApproximateProbability((int) (byte) -1); int int30 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl20); double double32 = randomDataImpl5.nextExponential((double) ' '); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 590.1217756384684d + "'", double7 == 590.1217756384684d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); // flaky:     org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.8282195779455327d + "'", double18 == 0.8282195779455327d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.941866060050443E-159d + "'", double22 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.1142547828857374E-7d + "'", double27 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.06680720126885803d + "'", double29 == 0.06680720126885803d); // flaky:     org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); // flaky:     org.junit.Assert.assertTrue("'" + double32 + "' != '" + 68.40720380691614d + "'", double32 == 68.40720380691614d); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { int[] intArray7 = randomDataImpl4.nextPermutation((int) (byte) 0, 2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 2 is larger than the maximum (0): permutation size (2) exceeds permuation domain (0)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(1.2221998187075216d, (double) (-1.0f), 0); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainUpperBound((double) 2147483647L); double double11 = poissonDistributionImpl1.normalApproximateProbability(0); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.308537538725987d + "'", double11 == 0.308537538725987d); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); int int8 = poissonDistributionImpl1.getDomainLowerBound((-0.9501789451592945d)); int[] intArray10 = poissonDistributionImpl1.sample((int) ' '); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertNotNull(intArray10); // flaky:     org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 1, 0, 2, 2, 2, 0, 1, 4, 0, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 3, 3, 0, 1, 1, 0, 1, 2, 1]"); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double3 = poissonDistributionImpl2.getMean(); double double5 = poissonDistributionImpl2.probability(1); // The following exception was thrown during execution in test generation try { double double7 = poissonDistributionImpl2.cumulativeProbability((int) (short) 100); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: maximal number of iterations (0) exceeded"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.720075976020796E-42d + "'", double5 == 3.720075976020796E-42d); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-1)); double double5 = poissonDistributionImpl2.getMean(); // The following exception was thrown during execution in test generation try { int int7 = poissonDistributionImpl2.inverseCumulativeProbability((-0.3744285675311057d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 52.0d + "'", double5 == 52.0d); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); double double8 = poissonDistributionImpl1.cumulativeProbability((double) (-1.0f), 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.36787944117146065d + "'", double8 == 0.36787944117146065d); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6564770073333787d, (-0.7534689855041378d), (int) (short) 100); // The following exception was thrown during execution in test generation try { double double5 = poissonDistributionImpl3.cumulativeProbability(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: maximal number of iterations (100) exceeded"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); poissonDistributionImpl1.reseedRandomGenerator((long) 108); double double14 = poissonDistributionImpl1.cumulativeProbability((int) (short) 100); double double16 = poissonDistributionImpl1.cumulativeProbability(0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117146065d + "'", double16 == 0.36787944117146065d); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.inverseCumulativeProbability(0.85822264930882d); double double11 = poissonDistributionImpl1.probability(4.762613918721343d); double double13 = poissonDistributionImpl1.probability((double) 2147483647L); int int15 = poissonDistributionImpl1.getDomainLowerBound(0.47712125471966244d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); int int6 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); // flaky:     org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); double double7 = poissonDistributionImpl1.getMean(); // The following exception was thrown during execution in test generation try { double double10 = poissonDistributionImpl1.cumulativeProbability(0.06929810837522998d, (double) 0); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double4 = poissonDistributionImpl2.normalApproximateProbability(0); // The following exception was thrown during execution in test generation try { double double6 = poissonDistributionImpl2.cumulativeProbability(1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Continued fraction convergents failed to converge for value 100"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-0.12296910173947198d), 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.123 is smaller than, or equal to, the minimum (0): mean (-0.123)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(Double.POSITIVE_INFINITY, 0.0d); double double3 = poissonDistributionImpl2.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(3.941866060050443E-159d, (int) (byte) 0); // The following exception was thrown during execution in test generation try { double double4 = poissonDistributionImpl2.cumulativeProbability(1.5426522143184942d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: maximal number of iterations (0) exceeded"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.0d, 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): mean (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100); double double3 = poissonDistributionImpl1.probability(0.9999999899522336d); double double5 = poissonDistributionImpl1.probability((int) (short) 10); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0251532120868618E-30d + "'", double5 == 1.0251532120868618E-30d); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6246292191371761d, 114.31880956042181d); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5d, 0.10400365104880639d, (int) (short) 1); double double5 = poissonDistributionImpl3.normalApproximateProbability((int) (byte) 1); double double7 = poissonDistributionImpl3.probability(572.9577951308232d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9213503964748575d + "'", double5 == 0.9213503964748575d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); int int11 = poissonDistributionImpl1.sample(); // The following exception was thrown during execution in test generation try { int int13 = poissonDistributionImpl1.inverseCumulativeProbability((double) 844785); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); double double14 = poissonDistributionImpl1.cumulativeProbability((double) (-1)); double double16 = poissonDistributionImpl1.probability((double) (byte) 0); double double18 = poissonDistributionImpl1.cumulativeProbability((-0.7148414578669797d)); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117144233d + "'", double16 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; long long6 = randomDataImpl4.nextPoisson(0.4194139451537116d); // The following exception was thrown during execution in test generation try { double double9 = randomDataImpl4.nextGaussian((-1.7540630599962477d), (-0.7880014968389955d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.788 is smaller than, or equal to, the minimum (0): standard deviation (-0.788)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double17 = poissonDistributionImpl9.cumulativeProbability(10000000); double double20 = poissonDistributionImpl9.cumulativeProbability(0.0d, 0.0d); double double22 = poissonDistributionImpl9.cumulativeProbability((int) (byte) 10); double double23 = poissonDistributionImpl9.getMean(); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 568.0462096409312d + "'", double7 == 568.0462096409312d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.36787944117146065d + "'", double20 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9999999899522336d + "'", double22 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); int int12 = poissonDistributionImpl1.inverseCumulativeProbability(0.14003537305923877d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); int int3 = poissonDistributionImpl1.getDomainUpperBound((double) (short) 0); double double4 = poissonDistributionImpl1.getMean(); double double6 = poissonDistributionImpl1.cumulativeProbability(0.7357588823428858d); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound(0.9014110163717823d); // The following exception was thrown during execution in test generation try { double double19 = poissonDistributionImpl1.cumulativeProbability(2.6881171418161356E43d, (-364.7393755555635d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-3.7635303525966806d), (-0.4673841036516608d), 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -3.764 is smaller than, or equal to, the minimum (0): mean (-3.764)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6564770073333787d, (-0.7534689855041378d), (int) (short) 100); double double5 = poissonDistributionImpl3.normalApproximateProbability(0); // The following exception was thrown during execution in test generation try { double double7 = poissonDistributionImpl3.cumulativeProbability(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: maximal number of iterations (100) exceeded"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.4234301409057203d + "'", double5 == 0.4234301409057203d); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.probability(100); // The following exception was thrown during execution in test generation try { int int8 = poissonDistributionImpl1.inverseCumulativeProbability(1.0806339911283105d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.941866060050443E-159d + "'", double6 == 3.941866060050443E-159d); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; long long6 = randomDataImpl4.nextPoisson(0.4194139451537116d); double double9 = randomDataImpl4.nextGamma(2.6593984616112802d, 0.9937903346742238d); // The following exception was thrown during execution in test generation try { long long12 = randomDataImpl4.nextSecureLong(0L, 0L); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 0 is larger than, or equal to, the maximum (0): lower bound (0) must be strictly less than upper bound (0)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); // flaky:     org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8465684155157288d + "'", double9 == 0.8465684155157288d); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { int[] intArray16 = randomDataImpl13.nextPermutation(2, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 10 is larger than the maximum (2): permutation size (10) exceeds permuation domain (2)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.938124312256864d, 0.3899356327042469d, 0); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double18 = randomDataImpl5.nextWeibull(0.2930641738000717d, 0.4925042174359671d); // The following exception was thrown during execution in test generation try { java.lang.String str20 = randomDataImpl5.nextHexString(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): length (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 582.0873648943793d + "'", double7 == 582.0873648943793d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); // flaky:     org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.4468701524151414d + "'", double18 == 0.4468701524151414d); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound((double) ' '); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; double double19 = poissonDistributionImpl1.probability(100); // The following exception was thrown during execution in test generation try { double double22 = poissonDistributionImpl1.cumulativeProbability(593.9053572049485d, 1.5858848923609055d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(randomDataImpl17); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.941866060050443E-159d + "'", double19 == 3.941866060050443E-159d); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.inverseCumulativeProbability(0.85822264930882d); double double11 = poissonDistributionImpl1.probability(4.762613918721343d); double double13 = poissonDistributionImpl1.probability(0.31738700241670326d); double double15 = poissonDistributionImpl1.cumulativeProbability((int) (short) 100); double double16 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); double double8 = poissonDistributionImpl1.cumulativeProbability((-1.0870302912451684d), 0.47712125471966244d); double double9 = poissonDistributionImpl1.getMean(); double double11 = poissonDistributionImpl1.cumulativeProbability(10000000); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.36787944117146065d + "'", double8 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5d); java.lang.Class<?> wildcardClass2 = poissonDistributionImpl1.getClass(); org.junit.Assert.assertNotNull(wildcardClass2); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double18 = randomDataImpl5.nextWeibull(0.2930641738000717d, 0.4925042174359671d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl20 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double22 = poissonDistributionImpl20.probability(100); double double24 = poissonDistributionImpl20.normalApproximateProbability(2147483647); double double27 = poissonDistributionImpl20.cumulativeProbability((int) (short) 10, 2147483647); double double29 = poissonDistributionImpl20.normalApproximateProbability((int) (byte) -1); int int30 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl20); double double33 = poissonDistributionImpl20.cumulativeProbability((int) (byte) 10, (int) ' '); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 631.3954374438053d + "'", double7 == 631.3954374438053d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); // flaky:     org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.32947338752667243d + "'", double18 == 0.32947338752667243d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.941866060050443E-159d + "'", double22 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.1142547828857374E-7d + "'", double27 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.06680720126885803d + "'", double29 == 0.06680720126885803d); // flaky:     org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.1142547828857374E-7d + "'", double33 == 1.1142547828857374E-7d); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6564770073333787d, (-0.7534689855041378d), (int) (short) 100); int int5 = poissonDistributionImpl3.getDomainUpperBound(0.4003827058782961d); int int6 = poissonDistributionImpl3.sample(); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647); // flaky:     org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); double double4 = randomDataImpl1.nextUniform((-0.12296910173947198d), 0.38027637262405517d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl8 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6564770073333787d, (-0.7534689855041378d), (int) (short) 100); double double10 = poissonDistributionImpl8.normalApproximateProbability(0); // The following exception was thrown during execution in test generation try { int int11 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl8); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: maximal number of iterations (100) exceeded"); } catch (org.apache.commons.math.FunctionEvaluationException e) { // Expected exception. } // flaky:     org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.2779126769758983d + "'", double4 == 0.2779126769758983d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.4234301409057203d + "'", double10 == 0.4234301409057203d); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); double double12 = poissonDistributionImpl1.cumulativeProbability(0); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117146065d + "'", double12 == 0.36787944117146065d); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(1.555184193015085d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.7357588823428858d + "'", double10 == 0.7357588823428858d); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.0d, 7); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): mean (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double4 = poissonDistributionImpl2.normalApproximateProbability(0); int int6 = poissonDistributionImpl2.getDomainLowerBound(1.6406870697463487d); int[] intArray8 = poissonDistributionImpl2.sample(0); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]"); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double17 = poissonDistributionImpl9.cumulativeProbability(10000000); double double20 = poissonDistributionImpl9.cumulativeProbability(0.0d, 0.0d); double double22 = poissonDistributionImpl9.cumulativeProbability((int) (byte) 10); int int24 = poissonDistributionImpl9.inverseCumulativeProbability(0.36787944117146065d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 553.9141611695554d + "'", double7 == 553.9141611695554d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.36787944117146065d + "'", double20 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9999999899522336d + "'", double22 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); // The following exception was thrown during execution in test generation try { double double13 = poissonDistributionImpl1.cumulativeProbability((-0.9730869162075215d), (double) (short) -1); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(100.31196146694707d); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); int int3 = poissonDistributionImpl1.getDomainUpperBound((double) (short) 0); double double4 = poissonDistributionImpl1.getMean(); double double5 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound((double) ' '); double double17 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; double double10 = randomDataImpl7.nextWeibull(3.430736374087032E10d, 2.0878348689268407d); long long12 = randomDataImpl7.nextPoisson(42.879806762648634d); // The following exception was thrown during execution in test generation try { long long15 = randomDataImpl7.nextSecureLong(69L, (long) (short) -1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 69 is larger than, or equal to, the maximum (-1): lower bound (69) must be strictly less than upper bound (-1)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.0878348688495327d + "'", double10 == 2.0878348688495327d); // flaky:     org.junit.Assert.assertTrue("'" + long12 + "' != '" + 38L + "'", long12 == 38L); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { int int15 = poissonDistributionImpl1.inverseCumulativeProbability((-2.0350218741518478d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); poissonDistributionImpl1.reseedRandomGenerator(0L); int int9 = poissonDistributionImpl1.sample(); int int10 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); poissonDistributionImpl1.reseedRandomGenerator(0L); double double10 = poissonDistributionImpl1.probability(0); int int12 = poissonDistributionImpl1.getDomainUpperBound(116.25481454655774d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117144233d + "'", double10 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl6 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double8 = normalDistributionImpl6.density((java.lang.Double) 100.0d); double double9 = normalDistributionImpl6.getMean(); double double10 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl6); randomDataImpl5.reSeedSecure((long) (byte) 1); int int15 = randomDataImpl5.nextZipf(3, 0.4849214332324801d); long long18 = randomDataImpl5.nextSecureLong((long) (short) 0, (long) 1); randomDataImpl5.reSeed(); long long22 = randomDataImpl5.nextLong((long) (-1), 2L); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl24 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double26 = poissonDistributionImpl24.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl27 = poissonDistributionImpl24.randomData; int int29 = poissonDistributionImpl24.inverseCumulativeProbability(0.0d); int int30 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl24); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.10774786703015163d + "'", double10 == 0.10774786703015163d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); // flaky:     org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L); // flaky:     org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3.941866060050443E-159d + "'", double26 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl27); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); // flaky:     org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); int int12 = poissonDistributionImpl1.getDomainLowerBound((-0.7531344911940551d)); double double15 = poissonDistributionImpl1.cumulativeProbability(3.04148991607407d, (double) 30L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.01898815687615274d + "'", double15 == 0.01898815687615274d); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-27.889356548750253d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -27.889 is smaller than, or equal to, the minimum (0): mean (-27.889)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5d); double double3 = poissonDistributionImpl1.normalApproximateProbability((int) (short) -1); double double5 = poissonDistributionImpl1.probability(10); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.07864960352514244d + "'", double3 == 0.07864960352514244d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.632261621956627E-10d + "'", double5 == 1.632261621956627E-10d); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); int int4 = poissonDistributionImpl1.sample(); // The following exception was thrown during execution in test generation try { double double7 = poissonDistributionImpl1.cumulativeProbability(1565197, 12); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); // flaky:     org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); double double7 = poissonDistributionImpl1.getMean(); double double9 = poissonDistributionImpl1.probability(66); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 6.758204490611066E-94d + "'", double9 == 6.758204490611066E-94d); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 29L, 2.5729148168449405d); double double4 = poissonDistributionImpl2.probability((double) 18L); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.008361476369318738d + "'", double4 == 0.008361476369318738d); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); double double11 = poissonDistributionImpl1.probability(0.0d); double double13 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.36787944117144233d + "'", double11 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.308537538725987d + "'", double13 == 0.308537538725987d); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(614.4704208761831d); double double3 = poissonDistributionImpl1.probability(52); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.7151005413705508E-190d + "'", double3 == 1.7151005413705508E-190d); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(43.636130838093536d, 100.73512494149897d, 108); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0.9999999958776927d); double double8 = poissonDistributionImpl1.normalApproximateProbability(3); int int10 = poissonDistributionImpl1.getDomainUpperBound(4.641588833612779d); // The following exception was thrown during execution in test generation try { int int12 = poissonDistributionImpl1.inverseCumulativeProbability(1.3564303006046416d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9937903346742238d + "'", double8 == 0.9937903346742238d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(83.39706539520998d, 86); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; double double10 = randomDataImpl7.nextWeibull(3.430736374087032E10d, 2.0878348689268407d); java.lang.String str12 = randomDataImpl7.nextHexString(100); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.0878348687287582d + "'", double10 == 2.0878348687287582d); // flaky:     org.junit.Assert.assertEquals("'" + str12 + "' != '" + "b4302ea931e5bcdd52a37ba194d5dfdb65bad4c52d117505be30ee7f096395258e435bbd460c8c97a9ba78b13288b98818d4" + "'", str12, "b4302ea931e5bcdd52a37ba194d5dfdb65bad4c52d117505be30ee7f096395258e435bbd460c8c97a9ba78b13288b98818d4"); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6931471805599453d, (int) (short) 1); int int3 = poissonDistributionImpl2.sample(); // The following exception was thrown during execution in test generation try { double double6 = poissonDistributionImpl2.cumulativeProbability((-0.28727288807984297d), 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: maximal number of iterations (1) exceeded"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } // flaky:     org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.getDomainLowerBound((-0.1617659083592266d)); double double8 = poissonDistributionImpl1.normalApproximateProbability(6862160); // The following exception was thrown during execution in test generation try { double double11 = poissonDistributionImpl1.cumulativeProbability((double) 31L, 0.0d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double4 = poissonDistributionImpl2.normalApproximateProbability(0); int int6 = poissonDistributionImpl2.getDomainLowerBound(1.6406870697463487d); // The following exception was thrown during execution in test generation try { double double8 = poissonDistributionImpl2.cumulativeProbability((int) (byte) 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Continued fraction convergents failed to converge for value 100"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; int int14 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); // flaky:     org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): mean (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.inverseCumulativeProbability(0.85822264930882d); double double11 = poissonDistributionImpl1.probability(4.762613918721343d); double double13 = poissonDistributionImpl1.probability((double) 2147483647L); double double16 = poissonDistributionImpl1.cumulativeProbability(0.0d, 0.5403023058681398d); double double18 = poissonDistributionImpl1.normalApproximateProbability(100); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117146065d + "'", double16 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); double double13 = poissonDistributionImpl1.cumulativeProbability((int) (short) 0, 0); double double16 = poissonDistributionImpl1.cumulativeProbability(1, (int) (short) 100); double double18 = poissonDistributionImpl1.probability((int) 'a'); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.36787944117146065d + "'", double13 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.6321205588285393d + "'", double16 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.8243984514608465E-153d + "'", double18 == 3.8243984514608465E-153d); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); int int12 = poissonDistributionImpl1.getDomainLowerBound((-0.7531344911940551d)); double double14 = poissonDistributionImpl1.probability(0); double double16 = poissonDistributionImpl1.probability(0.39894228040143026d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.36787944117144233d + "'", double14 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(1.0422345456402626d, 0); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); double double11 = poissonDistributionImpl1.probability(0.0d); double double13 = poissonDistributionImpl1.cumulativeProbability(48); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.36787944117144233d + "'", double11 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double17 = poissonDistributionImpl9.cumulativeProbability(10000000); double double19 = poissonDistributionImpl9.normalApproximateProbability((-1)); int int21 = poissonDistributionImpl9.getDomainUpperBound(0.0d); double double23 = poissonDistributionImpl9.cumulativeProbability(7); org.apache.commons.math.random.RandomDataImpl randomDataImpl24 = poissonDistributionImpl9.randomData; org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 548.4574973833304d + "'", double7 == 548.4574973833304d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.06680720126885803d + "'", double19 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9999897508033253d + "'", double23 == 0.9999897508033253d); org.junit.Assert.assertNotNull(randomDataImpl24); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); poissonDistributionImpl1.reseedRandomGenerator((long) 108); double double15 = poissonDistributionImpl1.cumulativeProbability(51, 844785); java.lang.Class<?> wildcardClass16 = poissonDistributionImpl1.getClass(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(wildcardClass16); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; double double9 = poissonDistributionImpl1.cumulativeProbability(10); double double11 = poissonDistributionImpl1.normalApproximateProbability(1565197); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9999999899522336d + "'", double9 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainUpperBound((double) 2147483647L); poissonDistributionImpl1.reseedRandomGenerator(66L); int int13 = poissonDistributionImpl1.inverseCumulativeProbability((double) (byte) 0); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); double double6 = poissonDistributionImpl1.getMean(); int int7 = poissonDistributionImpl1.sample(); double double9 = poissonDistributionImpl1.probability(1.5607966601082315d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 9223372036854775807L); // The following exception was thrown during execution in test generation try { int int3 = poissonDistributionImpl1.inverseCumulativeProbability((double) 66); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); int int7 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1)); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double3 = poissonDistributionImpl2.getMean(); double double5 = poissonDistributionImpl2.probability(1); int int6 = poissonDistributionImpl2.sample(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.720075976020796E-42d + "'", double5 == 3.720075976020796E-42d); // flaky:     org.junit.Assert.assertTrue("'" + int6 + "' != '" + 96 + "'", int6 == 96); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { double double10 = poissonDistributionImpl1.cumulativeProbability(844785, 0); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0.9999999958776927d); double double8 = poissonDistributionImpl1.normalApproximateProbability(3); int int10 = poissonDistributionImpl1.getDomainUpperBound(0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9937903346742238d + "'", double8 == 0.9937903346742238d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound((double) ' '); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { double double20 = poissonDistributionImpl1.cumulativeProbability((int) ' ', 0); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(randomDataImpl17); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); double double13 = poissonDistributionImpl1.cumulativeProbability((int) (short) 0, 0); double double16 = poissonDistributionImpl1.cumulativeProbability(1, (int) (short) 100); poissonDistributionImpl1.reseedRandomGenerator((long) 'a'); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.36787944117146065d + "'", double13 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.6321205588285393d + "'", double16 == 0.6321205588285393d); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl2 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double4 = normalDistributionImpl2.cumulativeProbability((double) (byte) 10); double double5 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl2); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl7 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double10 = poissonDistributionImpl7.cumulativeProbability((double) 1L, (double) 100L); double double12 = poissonDistributionImpl7.cumulativeProbability(0); double double14 = poissonDistributionImpl7.normalApproximateProbability((int) (byte) -1); double double16 = poissonDistributionImpl7.cumulativeProbability((int) '4'); int int17 = poissonDistributionImpl7.sample(); int int18 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl7); double double21 = randomDataImpl1.nextGaussian((-0.47093222618459063d), 8.706621142874209d); // The following exception was thrown during execution in test generation try { long long24 = randomDataImpl1.nextLong((long) 1108008, 2L); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 1,108,008 is larger than, or equal to, the maximum (2): lower bound (1,108,008) must be strictly less than upper bound (2)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.6164704857113975d + "'", double5 == 0.6164704857113975d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.6321205588285393d + "'", double10 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117146065d + "'", double12 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.06680720126885803d + "'", double14 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3); // flaky:     org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); // flaky:     org.junit.Assert.assertTrue("'" + double21 + "' != '" + 6.922169004965981d + "'", double21 == 6.922169004965981d); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100); int int2 = poissonDistributionImpl1.sample(); int int4 = poissonDistributionImpl1.getDomainLowerBound(0.9238853122786159d); int int5 = poissonDistributionImpl1.sample(); // flaky:     org.junit.Assert.assertTrue("'" + int2 + "' != '" + 105 + "'", int2 == 105); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int5 + "' != '" + 98 + "'", int5 == 98); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { double double9 = randomDataImpl7.nextChiSquare(0.0d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); double double16 = poissonDistributionImpl1.cumulativeProbability(0); // The following exception was thrown during execution in test generation try { double double19 = poissonDistributionImpl1.cumulativeProbability(86, 0); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117146065d + "'", double16 == 0.36787944117146065d); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); double double8 = poissonDistributionImpl1.cumulativeProbability((-1.0870302912451684d), 0.47712125471966244d); double double9 = poissonDistributionImpl1.getMean(); int int11 = poissonDistributionImpl1.getDomainUpperBound(985680.4407314587d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.36787944117146065d + "'", double8 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); int int12 = poissonDistributionImpl1.getDomainLowerBound((-0.7531344911940551d)); double double14 = poissonDistributionImpl1.probability(0); // The following exception was thrown during execution in test generation try { double double17 = poissonDistributionImpl1.cumulativeProbability(186864, 108); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.36787944117144233d + "'", double14 == 0.36787944117144233d); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double17 = poissonDistributionImpl9.cumulativeProbability(10000000); double double19 = poissonDistributionImpl9.normalApproximateProbability((-1)); int int21 = poissonDistributionImpl9.getDomainUpperBound(0.0d); int int23 = poissonDistributionImpl9.inverseCumulativeProbability(0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 576.9522295411717d + "'", double7 == 576.9522295411717d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.06680720126885803d + "'", double19 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647); org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1)); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double3 = poissonDistributionImpl2.getMean(); double double5 = poissonDistributionImpl2.probability(1); org.apache.commons.math.random.RandomDataImpl randomDataImpl6 = poissonDistributionImpl2.randomData; int int10 = randomDataImpl6.nextHypergeometric(60, (int) (short) 10, (int) ' '); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.720075976020796E-42d + "'", double5 == 3.720075976020796E-42d); org.junit.Assert.assertNotNull(randomDataImpl6); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-1)); poissonDistributionImpl2.reseedRandomGenerator(16L); double double8 = poissonDistributionImpl2.probability((double) 34); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0019527022227375538d + "'", double8 == 0.0019527022227375538d); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.inverseCumulativeProbability(0.85822264930882d); double double11 = poissonDistributionImpl1.probability(4.762613918721343d); int int13 = poissonDistributionImpl1.getDomainUpperBound((-1.7540630599962477d)); double double16 = poissonDistributionImpl1.cumulativeProbability((int) (byte) -1, 108); int int18 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); double double20 = poissonDistributionImpl1.cumulativeProbability((-1.1696764552645635d)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5403023058681399d, (-0.27769304627179253d)); double double4 = poissonDistributionImpl2.probability(17.27245511419795d); double double6 = poissonDistributionImpl2.probability(99.13154645400108d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl6 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double8 = normalDistributionImpl6.density((java.lang.Double) 100.0d); double double9 = normalDistributionImpl6.getMean(); double double10 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl6); long long13 = randomDataImpl5.nextLong((long) (short) 1, (long) (short) 100); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl14 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double16 = normalDistributionImpl14.density((java.lang.Double) 100.0d); double double17 = normalDistributionImpl14.getMean(); double double18 = normalDistributionImpl14.getMean(); double double19 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl14); randomDataImpl5.reSeed((long) (byte) 1); double double24 = randomDataImpl5.nextUniform(0.2930641738000717d, 812.156551123258d); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl25 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double27 = normalDistributionImpl25.density((java.lang.Double) 100.0d); double double29 = normalDistributionImpl25.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl30 = normalDistributionImpl25.randomData; double double32 = randomDataImpl30.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl34 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double36 = poissonDistributionImpl34.probability(100); double double39 = poissonDistributionImpl34.cumulativeProbability(0.0d, (double) 'a'); int int40 = randomDataImpl30.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl34); double double43 = randomDataImpl30.nextWeibull(0.2930641738000717d, 0.4925042174359671d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl45 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double47 = poissonDistributionImpl45.probability(100); double double49 = poissonDistributionImpl45.normalApproximateProbability(2147483647); double double52 = poissonDistributionImpl45.cumulativeProbability((int) (short) 10, 2147483647); double double54 = poissonDistributionImpl45.normalApproximateProbability((int) (byte) -1); int int55 = randomDataImpl30.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl45); int int56 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl45); double double58 = poissonDistributionImpl45.probability(9703232); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.7936626092744135d + "'", double10 == 0.7936626092744135d); // flaky:     org.junit.Assert.assertTrue("'" + long13 + "' != '" + 99L + "'", long13 == 99L); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.36220233062264423d) + "'", double19 == (-0.36220233062264423d)); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 593.6663806134848d + "'", double24 == 593.6663806134848d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.24197072451914337d + "'", double29 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl30); // flaky:     org.junit.Assert.assertTrue("'" + double32 + "' != '" + 599.5826040747659d + "'", double32 == 599.5826040747659d); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.941866060050443E-159d + "'", double36 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1); // flaky:     org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.004107608396441554d + "'", double43 == 0.004107608396441554d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3.941866060050443E-159d + "'", double47 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.1142547828857374E-7d + "'", double52 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.06680720126885803d + "'", double54 == 0.06680720126885803d); // flaky:     org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); int int4 = poissonDistributionImpl1.sample(); double double7 = poissonDistributionImpl1.cumulativeProbability(89, 7432864); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); // flaky:     org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.probability(100.32425841150517d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(5.656854249492381d); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; long long6 = randomDataImpl4.nextPoisson(0.4194139451537116d); double double9 = randomDataImpl4.nextGamma(2.6593984616112802d, 0.9937903346742238d); // The following exception was thrown during execution in test generation try { double double12 = randomDataImpl4.nextUniform(1.4560709405486472d, 1.2221998187075218d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 1.456 is larger than, or equal to, the maximum (1.222): lower bound (1.456) must be strictly less than upper bound (1.222)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L); // flaky:     org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.051897113700156d + "'", double9 == 1.051897113700156d); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6931471805599453d, (int) (short) 1); // The following exception was thrown during execution in test generation try { int int4 = poissonDistributionImpl2.inverseCumulativeProbability(1.0251532120868618E-30d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: maximal number of iterations (1) exceeded"); } catch (org.apache.commons.math.FunctionEvaluationException e) { // Expected exception. } }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound((double) ' '); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; double double19 = poissonDistributionImpl1.probability(100); int int20 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(randomDataImpl17); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.941866060050443E-159d + "'", double19 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int5 = poissonDistributionImpl1.sample(); double double8 = poissonDistributionImpl1.cumulativeProbability(0.5789527014473835d, (double) 100); double double10 = poissonDistributionImpl1.probability(3.9116227652145885d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.6321205588285393d + "'", double8 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); poissonDistributionImpl1.reseedRandomGenerator(0L); // The following exception was thrown during execution in test generation try { double double11 = poissonDistributionImpl1.cumulativeProbability(0.2440351621206197d, (-0.6293977666581311d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-1)); int int6 = poissonDistributionImpl2.getDomainLowerBound((-0.17739400468773303d)); double double8 = poissonDistributionImpl2.cumulativeProbability(1.1643428520428265d); int int10 = poissonDistributionImpl2.getDomainUpperBound((double) 128L); int int11 = poissonDistributionImpl2.sample(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.3834479069238827E-21d + "'", double8 == 1.3834479069238827E-21d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); // flaky:     org.junit.Assert.assertTrue("'" + int11 + "' != '" + 57 + "'", int11 == 57); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) '4', (int) (short) 0); // The following exception was thrown during execution in test generation try { int int4 = poissonDistributionImpl2.inverseCumulativeProbability((double) 1108008); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; long long6 = randomDataImpl4.nextPoisson(0.4194139451537116d); double double9 = randomDataImpl4.nextGaussian((double) 10.0f, (double) (short) 100); double double12 = randomDataImpl4.nextGaussian((-0.5410786873689865d), (double) 52); // The following exception was thrown during execution in test generation try { double double14 = randomDataImpl4.nextExponential((-0.8292101271379335d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.829 is smaller than, or equal to, the minimum (0): mean (-0.829)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); // flaky:     org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-140.44679867532932d) + "'", double9 == (-140.44679867532932d)); // flaky:     org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-10.851452334730368d) + "'", double12 == (-10.851452334730368d)); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); int int12 = poissonDistributionImpl1.getDomainLowerBound((-0.7531344911940551d)); double double14 = poissonDistributionImpl1.probability((-0.9501789451592945d)); double double16 = poissonDistributionImpl1.probability(7092238); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6240474076765692d); double double3 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.07738188098587934d + "'", double3 == 0.07738188098587934d); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.9014110163717823d, (int) (short) -1); double double3 = poissonDistributionImpl2.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.9014110163717823d + "'", double3 == 0.9014110163717823d); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.9238853122786159d, 46); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); poissonDistributionImpl1.reseedRandomGenerator(0L); double double10 = poissonDistributionImpl1.probability(10000000); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); double double11 = poissonDistributionImpl1.probability(0.0d); int int13 = poissonDistributionImpl1.getDomainLowerBound(0.248672111195961d); int int15 = poissonDistributionImpl1.getDomainLowerBound(0.35273059057024947d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.36787944117144233d + "'", double11 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); double double8 = poissonDistributionImpl1.cumulativeProbability((-1.0870302912451684d), 0.47712125471966244d); double double9 = poissonDistributionImpl1.getMean(); int int11 = poissonDistributionImpl1.getDomainUpperBound((-1.7942705279814837d)); int int13 = poissonDistributionImpl1.getDomainLowerBound(0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.36787944117146065d + "'", double8 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); int int12 = poissonDistributionImpl1.getDomainUpperBound((-0.5063656411097588d)); double double14 = poissonDistributionImpl1.probability(100); int int16 = poissonDistributionImpl1.getDomainUpperBound(0.142948745358914d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.941866060050443E-159d + "'", double14 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl2 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double4 = normalDistributionImpl2.cumulativeProbability((double) (byte) 10); double double5 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl2); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl7 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double10 = poissonDistributionImpl7.cumulativeProbability((double) 1L, (double) 100L); double double12 = poissonDistributionImpl7.cumulativeProbability(0); double double14 = poissonDistributionImpl7.normalApproximateProbability((int) (byte) -1); double double16 = poissonDistributionImpl7.cumulativeProbability((int) '4'); int int17 = poissonDistributionImpl7.sample(); int int18 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl7); double double21 = randomDataImpl1.nextGaussian((-0.47093222618459063d), 8.706621142874209d); double double24 = randomDataImpl1.nextUniform(0.7615941559557649d, (double) 74L); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1.084046552296989d) + "'", double5 == (-1.084046552296989d)); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.6321205588285393d + "'", double10 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117146065d + "'", double12 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.06680720126885803d + "'", double14 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); // flaky:     org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-13.362671521883925d) + "'", double21 == (-13.362671521883925d)); // flaky:     org.junit.Assert.assertTrue("'" + double24 + "' != '" + 41.14151760127741d + "'", double24 == 41.14151760127741d); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-1)); int int6 = poissonDistributionImpl2.getDomainLowerBound((-0.17739400468773303d)); double double8 = poissonDistributionImpl2.cumulativeProbability(1.1643428520428265d); int int10 = poissonDistributionImpl2.getDomainUpperBound(0.39894228040143026d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.3834479069238827E-21d + "'", double8 == 1.3834479069238827E-21d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(1.3534097966303924d, 99.04467467011315d, 129); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-0.36651292058166435d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.367 is smaller than, or equal to, the minimum (0): mean (-0.367)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6564770073333787d, (-0.7534689855041378d), (int) (short) 100); double double5 = poissonDistributionImpl3.normalApproximateProbability(89); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.0d, 0.0d, 57); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): mean (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); int int3 = poissonDistributionImpl1.getDomainUpperBound((double) (short) 0); int int5 = poissonDistributionImpl1.getDomainLowerBound(0.3596375654125127d); double double7 = poissonDistributionImpl1.probability(2.0126213261736259E242d); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); double double14 = poissonDistributionImpl1.cumulativeProbability(10); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.9999999899522336d + "'", double14 == 0.9999999899522336d); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); double double16 = poissonDistributionImpl1.cumulativeProbability(0); int int17 = poissonDistributionImpl1.sample(); double double19 = poissonDistributionImpl1.cumulativeProbability(24); // The following exception was thrown during execution in test generation try { double double22 = poissonDistributionImpl1.cumulativeProbability((double) 97L, 0.31738700241670326d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117146065d + "'", double16 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); double double14 = poissonDistributionImpl1.cumulativeProbability((double) (-1)); double double16 = poissonDistributionImpl1.probability((-1)); double double18 = poissonDistributionImpl1.probability((-0.7772100563230903d)); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); long long18 = randomDataImpl5.nextLong(52L, 60L); double double21 = randomDataImpl5.nextCauchy(0.18116021952662198d, (double) 1); // The following exception was thrown during execution in test generation try { int int24 = randomDataImpl5.nextSecureInt(48, 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 48 is larger than, or equal to, the maximum (0): lower bound (48) must be strictly less than upper bound (0)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 554.4068459182583d + "'", double7 == 554.4068459182583d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); // flaky:     org.junit.Assert.assertTrue("'" + long18 + "' != '" + 57L + "'", long18 == 57L); // flaky:     org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0408003152561758d + "'", double21 == 1.0408003152561758d); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); double double8 = poissonDistributionImpl1.cumulativeProbability((-1.0870302912451684d), 0.47712125471966244d); double double10 = poissonDistributionImpl1.probability(0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.36787944117146065d + "'", double8 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117144233d + "'", double10 == 0.36787944117144233d); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double17 = poissonDistributionImpl9.cumulativeProbability((double) 55L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 556.0680330409584d + "'", double7 == 556.0680330409584d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound((double) ' '); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { double double20 = poissonDistributionImpl1.cumulativeProbability(108, 54); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(randomDataImpl17); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound((double) ' '); int int17 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double3 = poissonDistributionImpl2.getMean(); double double4 = poissonDistributionImpl2.getMean(); int int6 = poissonDistributionImpl2.getDomainLowerBound(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl2.randomData; org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertNotNull(randomDataImpl7); }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5d); double double3 = poissonDistributionImpl1.normalApproximateProbability((int) (short) -1); double double4 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.07864960352514244d + "'", double3 == 0.07864960352514244d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.5d + "'", double4 == 0.5d); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainUpperBound((double) 2147483647L); poissonDistributionImpl1.reseedRandomGenerator(66L); double double14 = poissonDistributionImpl1.cumulativeProbability(0, 96); int int16 = poissonDistributionImpl1.getDomainLowerBound((-0.8924617384065663d)); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; double double10 = randomDataImpl7.nextWeibull(3.430736374087032E10d, 2.0878348689268407d); double double12 = randomDataImpl7.nextT(0.2419707245191434d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.087834868877128d + "'", double10 == 2.087834868877128d); // flaky:     org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.1102749655166307d + "'", double12 == 0.1102749655166307d); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.015611499573953436d, 5.699573249784173d); double double4 = poissonDistributionImpl2.cumulativeProbability(4); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.9999999999923922d + "'", double4 == 0.9999999999923922d); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double17 = poissonDistributionImpl9.cumulativeProbability(10000000); double double19 = poissonDistributionImpl9.cumulativeProbability(0); double double22 = poissonDistributionImpl9.cumulativeProbability(0.0d, 0.48656760131299903d); int int24 = poissonDistributionImpl9.getDomainLowerBound(35.23346405691215d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 584.6781282556448d + "'", double7 == 584.6781282556448d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.36787944117146065d + "'", double19 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.36787944117146065d + "'", double22 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.9014110163717823d, (int) (short) -1); // The following exception was thrown during execution in test generation try { double double4 = poissonDistributionImpl2.cumulativeProbability(5.345891027618216d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: maximal number of iterations (-1) exceeded"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); double double13 = poissonDistributionImpl1.cumulativeProbability((int) (short) 0, 0); double double16 = poissonDistributionImpl1.cumulativeProbability(1, (int) (short) 100); double double18 = poissonDistributionImpl1.cumulativeProbability(10000000); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.36787944117146065d + "'", double13 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.6321205588285393d + "'", double16 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainLowerBound(0.12308411467852295d); int int9 = poissonDistributionImpl1.getDomainUpperBound((-2.4621505057366684d)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl6 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double8 = normalDistributionImpl6.density((java.lang.Double) 100.0d); double double9 = normalDistributionImpl6.getMean(); double double10 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl6); randomDataImpl5.reSeedSecure((long) (byte) 1); int int15 = randomDataImpl5.nextZipf(3, 0.4849214332324801d); double double18 = randomDataImpl5.nextGaussian(593.9053572378232d, 1.1920928955078125E-7d); randomDataImpl5.reSeed(0L); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl21 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double23 = normalDistributionImpl21.density((java.lang.Double) 100.0d); double double25 = normalDistributionImpl21.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl26 = normalDistributionImpl21.randomData; org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl27 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double29 = normalDistributionImpl27.density((java.lang.Double) 100.0d); double double30 = normalDistributionImpl27.getMean(); double double31 = randomDataImpl26.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl27); randomDataImpl26.reSeedSecure((long) (byte) 1); int int36 = randomDataImpl26.nextZipf(3, 0.4849214332324801d); long long39 = randomDataImpl26.nextSecureLong((long) (short) 0, (long) 1); randomDataImpl26.reSeed(); long long43 = randomDataImpl26.nextLong((long) (-1), 2L); int int46 = randomDataImpl26.nextPascal((int) (short) 10, 0.08904502638040439d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl48 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double50 = poissonDistributionImpl48.probability(100); double double52 = poissonDistributionImpl48.normalApproximateProbability(2147483647); int int54 = poissonDistributionImpl48.getDomainUpperBound((double) 10L); int int56 = poissonDistributionImpl48.getDomainLowerBound(3.141592653589793d); int int57 = poissonDistributionImpl48.sample(); int int58 = randomDataImpl26.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl48); int int59 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl48); double double60 = poissonDistributionImpl48.getMean(); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.28566807802108873d + "'", double10 == 0.28566807802108873d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); // flaky:     org.junit.Assert.assertTrue("'" + double18 + "' != '" + 593.9053574080506d + "'", double18 == 593.9053574080506d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.24197072451914337d + "'", double25 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl26); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.28543422477289365d + "'", double31 == 0.28543422477289365d); // flaky:     org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2); // flaky:     org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L); // flaky:     org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L); // flaky:     org.junit.Assert.assertTrue("'" + int46 + "' != '" + 186 + "'", int46 == 186); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 3.941866060050443E-159d + "'", double50 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2147483647 + "'", int54 == 2147483647); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1); // flaky:     org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1); org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d); }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(6.758204490611066E-94d, 4.033789588108382d, 3257539); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); long long18 = randomDataImpl5.nextLong(52L, 60L); double double21 = randomDataImpl5.nextCauchy(0.18116021952662198d, (double) 1); java.lang.String str23 = randomDataImpl5.nextSecureHexString((int) ' '); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 576.2140738462908d + "'", double7 == 576.2140738462908d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3); // flaky:     org.junit.Assert.assertTrue("'" + long18 + "' != '" + 55L + "'", long18 == 55L); // flaky:     org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-3.920891858411741d) + "'", double21 == (-3.920891858411741d)); // flaky:     org.junit.Assert.assertEquals("'" + str23 + "' != '" + "45beb336909d35812231e85590303ffa" + "'", str23, "45beb336909d35812231e85590303ffa"); }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound((double) ' '); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; double double19 = poissonDistributionImpl1.probability(100); double double21 = poissonDistributionImpl1.probability(89); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(randomDataImpl17); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.941866060050443E-159d + "'", double19 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.2284979428742054E-137d + "'", double21 == 2.2284979428742054E-137d); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl6 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double8 = normalDistributionImpl6.density((java.lang.Double) 100.0d); double double9 = normalDistributionImpl6.getMean(); double double10 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl6); long long13 = randomDataImpl5.nextLong((long) (short) 1, (long) (short) 100); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl14 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double16 = normalDistributionImpl14.density((java.lang.Double) 100.0d); double double17 = normalDistributionImpl14.getMean(); double double18 = normalDistributionImpl14.getMean(); double double19 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl14); randomDataImpl5.reSeed((long) (byte) 1); double double24 = randomDataImpl5.nextUniform(0.2930641738000717d, 812.156551123258d); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl25 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double27 = normalDistributionImpl25.density((java.lang.Double) 100.0d); double double29 = normalDistributionImpl25.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl30 = normalDistributionImpl25.randomData; double double32 = randomDataImpl30.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl34 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double36 = poissonDistributionImpl34.probability(100); double double39 = poissonDistributionImpl34.cumulativeProbability(0.0d, (double) 'a'); int int40 = randomDataImpl30.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl34); double double43 = randomDataImpl30.nextWeibull(0.2930641738000717d, 0.4925042174359671d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl45 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double47 = poissonDistributionImpl45.probability(100); double double49 = poissonDistributionImpl45.normalApproximateProbability(2147483647); double double52 = poissonDistributionImpl45.cumulativeProbability((int) (short) 10, 2147483647); double double54 = poissonDistributionImpl45.normalApproximateProbability((int) (byte) -1); int int55 = randomDataImpl30.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl45); int int56 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl45); // The following exception was thrown during execution in test generation try { double double59 = randomDataImpl5.nextBeta((-0.622992721130644d), 1.0368842103159936d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.FunctionEvaluationException; message: Cumulative probability function returned NaN for argument 0.208 p = 0.208"); } catch (org.apache.commons.math.FunctionEvaluationException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.09063965524396857d + "'", double10 == 0.09063965524396857d); // flaky:     org.junit.Assert.assertTrue("'" + long13 + "' != '" + 78L + "'", long13 == 78L); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.4111823319275892d + "'", double19 == 0.4111823319275892d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 593.6663806134848d + "'", double24 == 593.6663806134848d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.24197072451914337d + "'", double29 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl30); // flaky:     org.junit.Assert.assertTrue("'" + double32 + "' != '" + 575.3552849815876d + "'", double32 == 575.3552849815876d); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 3.941866060050443E-159d + "'", double36 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3); // flaky:     org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.005042670110168954d + "'", double43 == 0.005042670110168954d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 3.941866060050443E-159d + "'", double47 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.1142547828857374E-7d + "'", double52 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.06680720126885803d + "'", double54 == 0.06680720126885803d); // flaky:     org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1); org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1); }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5d); double double4 = poissonDistributionImpl1.cumulativeProbability(0, 100); double double6 = poissonDistributionImpl1.probability(0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.6065306597126334d + "'", double6 == 0.6065306597126334d); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); int int3 = poissonDistributionImpl2.sample(); double double5 = poissonDistributionImpl2.cumulativeProbability(1.9233181644854171d); // flaky:     org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.3834479069238827E-21d + "'", double5 == 1.3834479069238827E-21d); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(99.22495072257823d, 0.24712452682051894d); int int4 = poissonDistributionImpl2.getDomainLowerBound((-0.9501789451592945d)); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl2 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double4 = normalDistributionImpl2.cumulativeProbability((double) (byte) 10); double double5 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl2); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl7 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double10 = poissonDistributionImpl7.cumulativeProbability((double) 1L, (double) 100L); double double12 = poissonDistributionImpl7.cumulativeProbability(0); double double14 = poissonDistributionImpl7.normalApproximateProbability((int) (byte) -1); double double16 = poissonDistributionImpl7.cumulativeProbability((int) '4'); int int17 = poissonDistributionImpl7.sample(); int int18 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl7); randomDataImpl1.reSeed(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.1701409760865529d + "'", double5 == 1.1701409760865529d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.6321205588285393d + "'", double10 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117146065d + "'", double12 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.06680720126885803d + "'", double14 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2); // flaky:     org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); int int9 = poissonDistributionImpl1.getDomainLowerBound((double) 65L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1)); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); poissonDistributionImpl1.reseedRandomGenerator((long) 108); double double14 = poissonDistributionImpl1.cumulativeProbability(2147483647); double double16 = poissonDistributionImpl1.cumulativeProbability(2); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { int int21 = randomDataImpl17.nextHypergeometric(0, 74, 81); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.919698602928607d + "'", double16 == 0.919698602928607d); org.junit.Assert.assertNotNull(randomDataImpl17); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(1.1343550212608544d); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); poissonDistributionImpl1.reseedRandomGenerator((long) 108); double double14 = poissonDistributionImpl1.cumulativeProbability(2147483647); double double16 = poissonDistributionImpl1.cumulativeProbability(2); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { double double20 = randomDataImpl17.nextWeibull(6.321723590696283E-7d, (double) (-1L)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.919698602928607d + "'", double16 == 0.919698602928607d); org.junit.Assert.assertNotNull(randomDataImpl17); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); double double13 = poissonDistributionImpl1.cumulativeProbability((int) (short) 0, 0); org.apache.commons.math.random.RandomDataImpl randomDataImpl14 = poissonDistributionImpl1.randomData; double double16 = poissonDistributionImpl1.cumulativeProbability((int) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) 81); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.36787944117146065d + "'", double13 == 0.36787944117146065d); org.junit.Assert.assertNotNull(randomDataImpl14); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double3 = poissonDistributionImpl2.getMean(); // The following exception was thrown during execution in test generation try { double double6 = poissonDistributionImpl2.cumulativeProbability(107.249318068326d, 0.0d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); double double4 = randomDataImpl1.nextUniform((-0.7853981633974483d), 0.962217362072003d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl6 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double8 = poissonDistributionImpl6.probability(100); double double10 = poissonDistributionImpl6.normalApproximateProbability(2147483647); double double13 = poissonDistributionImpl6.cumulativeProbability((int) (short) 10, 2147483647); double double15 = poissonDistributionImpl6.probability((-1.207854600801523d)); double double17 = poissonDistributionImpl6.probability(100); int int19 = poissonDistributionImpl6.inverseCumulativeProbability(0.06680720126885803d); int int20 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl6); java.lang.String str22 = randomDataImpl1.nextHexString(60); // flaky:     org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.304945844683425d + "'", double4 == 0.304945844683425d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.941866060050443E-159d + "'", double8 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.1142547828857374E-7d + "'", double13 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.941866060050443E-159d + "'", double17 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); // flaky:     org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); // flaky:     org.junit.Assert.assertEquals("'" + str22 + "' != '" + "edcc087fba7ce254500c685d0d6128c1de237e29229f468b84c308ef97df" + "'", str22, "edcc087fba7ce254500c685d0d6128c1de237e29229f468b84c308ef97df"); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); double double14 = poissonDistributionImpl1.normalApproximateProbability(49); int int16 = poissonDistributionImpl1.getDomainLowerBound((-1.5574077246549023d)); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); // The following exception was thrown during execution in test generation try { int int8 = poissonDistributionImpl1.inverseCumulativeProbability((-1.2901906460575272d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.probability(1.131024151762108d); double double12 = poissonDistributionImpl1.normalApproximateProbability(2); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.9331927987311419d + "'", double12 == 0.9331927987311419d); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-0.19521837093832897d), (double) 89); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.195 is smaller than, or equal to, the minimum (0): mean (-0.195)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; long long6 = randomDataImpl4.nextPoisson(0.4194139451537116d); double double9 = randomDataImpl4.nextGamma(2.6593984616112802d, 0.9937903346742238d); // The following exception was thrown during execution in test generation try { long long12 = randomDataImpl4.nextSecureLong(97L, (long) (short) 1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 97 is larger than, or equal to, the maximum (1): lower bound (97) must be strictly less than upper bound (1)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L); // flaky:     org.junit.Assert.assertTrue("'" + double9 + "' != '" + 4.857347287701908d + "'", double9 == 4.857347287701908d); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainUpperBound((-0.2367216168375328d)); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl6 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double8 = normalDistributionImpl6.density((java.lang.Double) 100.0d); double double9 = normalDistributionImpl6.getMean(); double double10 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl6); randomDataImpl5.reSeedSecure((long) (byte) 1); long long15 = randomDataImpl5.nextLong((long) 1, (long) ' '); double double18 = randomDataImpl5.nextUniform(1.0623120756348339d, (double) 86L); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl20 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double22 = poissonDistributionImpl20.probability(100); double double24 = poissonDistributionImpl20.normalApproximateProbability(2147483647); int int26 = poissonDistributionImpl20.getDomainUpperBound((double) 10L); int int28 = poissonDistributionImpl20.getDomainLowerBound(3.141592653589793d); int int29 = poissonDistributionImpl20.sample(); int int30 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl20); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.5794689508393163d + "'", double10 == 0.5794689508393163d); // flaky:     org.junit.Assert.assertTrue("'" + long15 + "' != '" + 5L + "'", long15 == 5L); // flaky:     org.junit.Assert.assertTrue("'" + double18 + "' != '" + 61.6248131378894d + "'", double18 == 61.6248131378894d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.941866060050443E-159d + "'", double22 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2147483647 + "'", int26 == 2147483647); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); // flaky:     org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); int int12 = poissonDistributionImpl1.getDomainUpperBound((-0.5063656411097588d)); double double14 = poissonDistributionImpl1.probability(100); double double16 = poissonDistributionImpl1.cumulativeProbability(3.1911890201610937d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.941866060050443E-159d + "'", double14 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.9810118431238473d + "'", double16 == 0.9810118431238473d); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.015611499573953436d, 5.699573249784173d); double double5 = poissonDistributionImpl2.cumulativeProbability(0.8354297910850215d, 81.41619663227057d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.015369673202604406d + "'", double5 == 0.015369673202604406d); }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; long long6 = randomDataImpl4.nextPoisson(0.4194139451537116d); double double9 = randomDataImpl4.nextGamma(2.6593984616112802d, 0.9937903346742238d); // The following exception was thrown during execution in test generation try { java.lang.String str11 = randomDataImpl4.nextHexString(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): length (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); // flaky:     org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.2461781985639466d + "'", double9 == 3.2461781985639466d); }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double18 = randomDataImpl5.nextWeibull(0.2930641738000717d, 0.4925042174359671d); // The following exception was thrown during execution in test generation try { java.lang.String str20 = randomDataImpl5.nextSecureHexString((int) (byte) -1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0): length (-1)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 547.1449662227392d + "'", double7 == 547.1449662227392d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); // flaky:     org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.16060735835651d + "'", double18 == 3.16060735835651d); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.probability(100); java.lang.Class<?> wildcardClass7 = poissonDistributionImpl1.getClass(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.941866060050443E-159d + "'", double6 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); // The following exception was thrown during execution in test generation try { double double9 = poissonDistributionImpl1.cumulativeProbability(36.941458435411754d, 1.4210854715202004E-14d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); double double6 = poissonDistributionImpl1.getMean(); poissonDistributionImpl1.reseedRandomGenerator(1564722L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) '4', (int) (short) 0); // The following exception was thrown during execution in test generation try { double double4 = poissonDistributionImpl2.cumulativeProbability(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Continued fraction convergents failed to converge for value 52"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainUpperBound((double) 2147483647L); poissonDistributionImpl1.reseedRandomGenerator(66L); int int13 = poissonDistributionImpl1.getDomainUpperBound(1.2597284809259754d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); long long18 = randomDataImpl5.nextLong(52L, 60L); double double21 = randomDataImpl5.nextCauchy(0.18116021952662198d, (double) 1); int[] intArray24 = randomDataImpl5.nextPermutation(57, 49); // The following exception was thrown during execution in test generation try { double double27 = randomDataImpl5.nextWeibull((-1.1087359948888835d), 5.345891027618216d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 531.2027739589392d + "'", double7 == 531.2027739589392d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); // flaky:     org.junit.Assert.assertTrue("'" + long18 + "' != '" + 56L + "'", long18 == 56L); // flaky:     org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.288548195170122d + "'", double21 == 0.288548195170122d); org.junit.Assert.assertNotNull(intArray24); // flaky:     org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[35, 23, 55, 6, 41, 34, 46, 19, 43, 48, 47, 15, 37, 12, 27, 21, 9, 30, 40, 56, 8, 3, 4, 36, 39, 2, 18, 17, 22, 52, 31, 20, 29, 26, 53, 11, 33, 49, 13, 51, 42, 44, 14, 10, 28, 16, 24, 45, 38]"); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; int int10 = randomDataImpl7.nextInt(0, (int) ' '); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.inverseCumulativeProbability(0.85822264930882d); double double11 = poissonDistributionImpl1.probability(4.762613918721343d); int int13 = poissonDistributionImpl1.getDomainUpperBound((-1.7540630599962477d)); double double16 = poissonDistributionImpl1.cumulativeProbability((int) (byte) -1, 108); int int18 = poissonDistributionImpl1.getDomainLowerBound(0.5403023058681399d); double double20 = poissonDistributionImpl1.probability(48); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2.963444035277866E-62d + "'", double20 == 2.963444035277866E-62d); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainUpperBound((double) 2147483647L); double double11 = poissonDistributionImpl1.cumulativeProbability(61); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6240474076765692d, (double) 9223372036854775807L); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); double double4 = randomDataImpl1.nextUniform((-0.7853981633974483d), 0.962217362072003d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl6 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double8 = poissonDistributionImpl6.probability(100); double double10 = poissonDistributionImpl6.normalApproximateProbability(2147483647); double double13 = poissonDistributionImpl6.cumulativeProbability((int) (short) 10, 2147483647); double double15 = poissonDistributionImpl6.probability((-1.207854600801523d)); double double17 = poissonDistributionImpl6.probability(100); int int19 = poissonDistributionImpl6.inverseCumulativeProbability(0.06680720126885803d); int int20 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl6); // The following exception was thrown during execution in test generation try { java.lang.String str22 = randomDataImpl1.nextSecureHexString((int) (short) -1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0): length (-1)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } // flaky:     org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.20307102058404058d) + "'", double4 == (-0.20307102058404058d)); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.941866060050443E-159d + "'", double8 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.1142547828857374E-7d + "'", double13 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.941866060050443E-159d + "'", double17 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); // flaky:     org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(Double.POSITIVE_INFINITY, 0.0d); poissonDistributionImpl2.reseedRandomGenerator((long) (-1)); double double5 = poissonDistributionImpl2.getMean(); // The following exception was thrown during execution in test generation try { double double7 = poissonDistributionImpl2.cumulativeProbability(98.57286612709936d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.ConvergenceException; message: Continued fraction diverged to NaN for value ?"); } catch (org.apache.commons.math.ConvergenceException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); int int12 = poissonDistributionImpl1.getDomainLowerBound((-0.7531344911940551d)); double double14 = poissonDistributionImpl1.probability((-0.9501789451592945d)); int int16 = poissonDistributionImpl1.getDomainUpperBound((double) 2.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2147483647 + "'", int16 == 2147483647); }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(99.22495072257823d, 0.24712452682051894d); double double4 = poissonDistributionImpl2.cumulativeProbability(0.00900404914276215d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 8.07516553960908E-44d + "'", double4 == 8.07516553960908E-44d); }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-1)); int int6 = poissonDistributionImpl2.getDomainLowerBound((-0.17739400468773303d)); double double8 = poissonDistributionImpl2.cumulativeProbability(1.1643428520428265d); int int10 = poissonDistributionImpl2.getDomainUpperBound((double) 128L); int int11 = poissonDistributionImpl2.sample(); double double13 = poissonDistributionImpl2.probability(0.0d); int int14 = poissonDistributionImpl2.sample(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.3834479069238827E-21d + "'", double8 == 1.3834479069238827E-21d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); // flaky:     org.junit.Assert.assertTrue("'" + int11 + "' != '" + 56 + "'", int11 == 56); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 2.6102790696677047E-23d + "'", double13 == 2.6102790696677047E-23d); // flaky:     org.junit.Assert.assertTrue("'" + int14 + "' != '" + 49 + "'", int14 == 49); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(Double.POSITIVE_INFINITY, 0.0d); poissonDistributionImpl2.reseedRandomGenerator((long) (-1)); // The following exception was thrown during execution in test generation try { double double6 = poissonDistributionImpl2.cumulativeProbability(8265245); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.ConvergenceException; message: Continued fraction diverged to NaN for value ?"); } catch (org.apache.commons.math.ConvergenceException e) { // Expected exception. } }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; double double14 = poissonDistributionImpl1.getMean(); double double15 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); double double8 = poissonDistributionImpl1.probability(0.3899356327042469d); int int10 = poissonDistributionImpl1.getDomainUpperBound((-0.7880014968389955d)); // The following exception was thrown during execution in test generation try { double double13 = poissonDistributionImpl1.cumulativeProbability((double) 81, 1.154454295666692d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; long long6 = randomDataImpl4.nextPoisson(0.4194139451537116d); double double9 = randomDataImpl4.nextGamma(2.6593984616112802d, 0.9937903346742238d); int int12 = randomDataImpl4.nextInt((int) (short) -1, 100); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); // flaky:     org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.9237535658542833d + "'", double9 == 1.9237535658542833d); // flaky:     org.junit.Assert.assertTrue("'" + int12 + "' != '" + 85 + "'", int12 == 85); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); int int12 = poissonDistributionImpl1.getDomainLowerBound((-0.7531344911940551d)); double double14 = poissonDistributionImpl1.cumulativeProbability((-0.07691157771994986d)); int int16 = poissonDistributionImpl1.inverseCumulativeProbability(0.9862458459105484d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double17 = poissonDistributionImpl9.cumulativeProbability(10000000); double double19 = poissonDistributionImpl9.normalApproximateProbability((-1)); double double22 = poissonDistributionImpl9.cumulativeProbability((int) (byte) 1, 2); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 618.0955454446142d + "'", double7 == 618.0955454446142d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.06680720126885803d + "'", double19 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.5518191617571463d + "'", double22 == 0.5518191617571463d); }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.9999999999999999d, 129); double double4 = poissonDistributionImpl2.cumulativeProbability(3258243); double double7 = poissonDistributionImpl2.cumulativeProbability((int) (short) 10, 105); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.1142547828857374E-7d + "'", double7 == 1.1142547828857374E-7d); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5d, 0.10400365104880639d, (int) (short) 1); double double5 = poissonDistributionImpl3.probability((double) 844785L); double double6 = poissonDistributionImpl3.getMean(); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.5d + "'", double6 == 0.5d); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) '4', (int) (short) 0); double double4 = poissonDistributionImpl2.normalApproximateProbability(129); double double6 = poissonDistributionImpl2.probability(0.36842577779469854d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); poissonDistributionImpl1.reseedRandomGenerator((long) 108); double double14 = poissonDistributionImpl1.normalApproximateProbability((int) '#'); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.getDomainLowerBound((-0.1617659083592266d)); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) 'a'); double double11 = poissonDistributionImpl1.cumulativeProbability(98, 2147483647); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(3.8243984514608465E-153d, 0); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); int int12 = poissonDistributionImpl1.getDomainUpperBound((-0.5063656411097588d)); double double15 = poissonDistributionImpl1.cumulativeProbability((-1), 1); double double17 = poissonDistributionImpl1.cumulativeProbability(86); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7357588823428858d + "'", double15 == 0.7357588823428858d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); double double8 = poissonDistributionImpl1.probability(0.3899356327042469d); int int10 = poissonDistributionImpl1.getDomainLowerBound((-0.9815160292328889d)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(3.141592653589793d, 0.0d); }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); double double13 = poissonDistributionImpl1.cumulativeProbability((int) (short) 0, 0); double double15 = poissonDistributionImpl1.probability(0.0017385910778376639d); double double17 = poissonDistributionImpl1.normalApproximateProbability((int) (short) 10); int int19 = poissonDistributionImpl1.inverseCumulativeProbability(0.8354297910850215d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.36787944117146065d + "'", double13 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); int int4 = poissonDistributionImpl1.sample(); poissonDistributionImpl1.reseedRandomGenerator(9223372036854775807L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); // flaky:     org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); }
public void test243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test243"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; double double10 = randomDataImpl7.nextWeibull(3.430736374087032E10d, 2.0878348689268407d); long long13 = randomDataImpl7.nextLong((long) 4, 1564722L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.0878348688641313d + "'", double10 == 2.0878348688641313d); // flaky:     org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1152492L + "'", long13 == 1152492L); }
public void test244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test244"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); double double12 = poissonDistributionImpl1.probability(100); int int14 = poissonDistributionImpl1.inverseCumulativeProbability(0.06680720126885803d); double double15 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); }
public void test245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test245"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double3 = poissonDistributionImpl2.getMean(); double double5 = poissonDistributionImpl2.probability(1); org.apache.commons.math.random.RandomDataImpl randomDataImpl6 = poissonDistributionImpl2.randomData; // The following exception was thrown during execution in test generation try { int[] intArray9 = randomDataImpl6.nextPermutation(31, 56); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: 56 is larger than the maximum (31): permutation size (56) exceeds permuation domain (31)"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 100.0d + "'", double3 == 100.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.720075976020796E-42d + "'", double5 == 3.720075976020796E-42d); org.junit.Assert.assertNotNull(randomDataImpl6); }
public void test246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test246"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(31.836346239513436d); // The following exception was thrown during execution in test generation try { double double4 = poissonDistributionImpl1.cumulativeProbability(10000000, 100); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } }
public void test247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test247"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.normalApproximateProbability(81); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); }
public void test248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test248"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); int int12 = poissonDistributionImpl1.getDomainUpperBound((double) (-1.0f)); int int13 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.06680720126885803d + "'", double10 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); // flaky:     org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); }
public void test249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test249"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl6 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double8 = normalDistributionImpl6.density((java.lang.Double) 100.0d); double double9 = normalDistributionImpl6.getMean(); double double10 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl6); randomDataImpl5.reSeedSecure((long) (byte) 1); int int15 = randomDataImpl5.nextZipf(3, 0.4849214332324801d); long long18 = randomDataImpl5.nextSecureLong((long) (short) 0, (long) 1); randomDataImpl5.reSeed(); long long22 = randomDataImpl5.nextLong((long) (-1), 2L); int int25 = randomDataImpl5.nextPascal((int) (short) 10, 0.08904502638040439d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl27 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double29 = poissonDistributionImpl27.probability(100); double double31 = poissonDistributionImpl27.normalApproximateProbability(2147483647); int int33 = poissonDistributionImpl27.getDomainUpperBound((double) 10L); int int35 = poissonDistributionImpl27.getDomainLowerBound(3.141592653589793d); int int36 = poissonDistributionImpl27.sample(); int int37 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl27); randomDataImpl5.reSeedSecure((long) 108); org.apache.commons.math.distribution.ContinuousDistribution continuousDistribution40 = null; // The following exception was thrown during execution in test generation try { double double41 = randomDataImpl5.nextInversionDeviate(continuousDistribution40); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.20320943170865266d + "'", double10 == 0.20320943170865266d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2); // flaky:     org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L); // flaky:     org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L); // flaky:     org.junit.Assert.assertTrue("'" + int25 + "' != '" + 116 + "'", int25 == 116); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.941866060050443E-159d + "'", double29 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2); // flaky:     org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3); }
public void test250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test250"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); double double16 = poissonDistributionImpl1.cumulativeProbability(0); int[] intArray18 = poissonDistributionImpl1.sample(0); double double20 = poissonDistributionImpl1.probability(0); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117146065d + "'", double16 == 0.36787944117146065d); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[]"); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.36787944117144233d + "'", double20 == 0.36787944117144233d); }
public void test251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test251"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double17 = poissonDistributionImpl9.cumulativeProbability(10000000); double double19 = poissonDistributionImpl9.normalApproximateProbability((-1)); int int21 = poissonDistributionImpl9.getDomainUpperBound(0.0d); double double23 = poissonDistributionImpl9.probability(0.47712125471966244d); int int25 = poissonDistributionImpl9.getDomainLowerBound(0.9213503964748575d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 573.4071804825626d + "'", double7 == 573.4071804825626d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.06680720126885803d + "'", double19 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0); }
public void test252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test252"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainUpperBound((double) 2147483647L); poissonDistributionImpl1.reseedRandomGenerator(66L); double double13 = poissonDistributionImpl1.probability(36.941458435411754d); int int15 = poissonDistributionImpl1.getDomainUpperBound(99.13154645400108d); int int17 = poissonDistributionImpl1.inverseCumulativeProbability(0.2609616519766456d); int int19 = poissonDistributionImpl1.inverseCumulativeProbability(0.03192048122541507d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); }
public void test253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test253"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double4 = poissonDistributionImpl2.normalApproximateProbability(0); double double6 = poissonDistributionImpl2.cumulativeProbability((-1.5883572333189264d)); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl2.randomData; org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(randomDataImpl7); }
public void test254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test254"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(0.0d); double double5 = poissonDistributionImpl1.cumulativeProbability(6862160); int int7 = poissonDistributionImpl1.getDomainUpperBound((-1.4422552891800533d)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.36787944117144233d + "'", double3 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); }
public void test255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test255"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); double double8 = poissonDistributionImpl1.cumulativeProbability((-1.0870302912451684d), 0.47712125471966244d); double double9 = poissonDistributionImpl1.getMean(); int int11 = poissonDistributionImpl1.getDomainUpperBound((-1.7942705279814837d)); int int13 = poissonDistributionImpl1.getDomainUpperBound(7.579902847457086d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.36787944117146065d + "'", double8 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647); }
public void test256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test256"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); // The following exception was thrown during execution in test generation try { double double9 = poissonDistributionImpl1.cumulativeProbability(0.85822264930882d, 0.0d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); }
public void test257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test257"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); int int12 = poissonDistributionImpl1.getDomainUpperBound((-0.5063656411097588d)); double double15 = poissonDistributionImpl1.cumulativeProbability((-1), 1); double double17 = poissonDistributionImpl1.probability(3.994326923844116d); double double19 = poissonDistributionImpl1.normalApproximateProbability((-1)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2147483647 + "'", int12 == 2147483647); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7357588823428858d + "'", double15 == 0.7357588823428858d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.06680720126885803d + "'", double19 == 0.06680720126885803d); }
public void test258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test258"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; int int16 = randomDataImpl13.nextSecureInt(19, 108); // The following exception was thrown during execution in test generation try { double double18 = randomDataImpl13.nextT((-0.23805215957741346d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); // flaky:     org.junit.Assert.assertTrue("'" + int16 + "' != '" + 42 + "'", int16 == 42); }
public void test259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test259"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); double double8 = poissonDistributionImpl1.probability(0.3899356327042469d); int int10 = poissonDistributionImpl1.getDomainUpperBound((-0.7880014968389955d)); double double12 = poissonDistributionImpl1.cumulativeProbability(108); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); }
public void test260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test260"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl6 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double8 = normalDistributionImpl6.density((java.lang.Double) 100.0d); double double9 = normalDistributionImpl6.getMean(); double double10 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl6); randomDataImpl5.reSeedSecure((long) (byte) 1); int int15 = randomDataImpl5.nextZipf(3, 0.4849214332324801d); long long18 = randomDataImpl5.nextSecureLong((long) (short) 0, (long) 1); randomDataImpl5.reSeed(); long long22 = randomDataImpl5.nextLong((long) (-1), 2L); int int25 = randomDataImpl5.nextPascal((int) (short) 10, 0.08904502638040439d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl27 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double29 = poissonDistributionImpl27.probability(100); double double31 = poissonDistributionImpl27.normalApproximateProbability(2147483647); int int33 = poissonDistributionImpl27.getDomainUpperBound((double) 10L); int int35 = poissonDistributionImpl27.getDomainLowerBound(3.141592653589793d); int int36 = poissonDistributionImpl27.sample(); int int37 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl27); double double39 = randomDataImpl5.nextExponential((double) 33L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.5232524567176216d + "'", double10 == 1.5232524567176216d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2); // flaky:     org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L); // flaky:     org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L); // flaky:     org.junit.Assert.assertTrue("'" + int25 + "' != '" + 109 + "'", int25 == 109); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.941866060050443E-159d + "'", double29 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2147483647 + "'", int33 == 2147483647); org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2); // flaky:     org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0); // flaky:     org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.51214536343131d + "'", double39 == 52.51214536343131d); }
public void test261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test261"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); double double8 = poissonDistributionImpl1.probability(0.3899356327042469d); int int10 = poissonDistributionImpl1.getDomainUpperBound((-0.7880014968389955d)); double double13 = poissonDistributionImpl1.cumulativeProbability(1, 85); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.6321205588285393d + "'", double13 == 0.6321205588285393d); }
public void test262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test262"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); double double4 = randomDataImpl1.nextUniform((-0.7853981633974483d), 0.962217362072003d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl6 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double8 = poissonDistributionImpl6.probability(100); double double10 = poissonDistributionImpl6.normalApproximateProbability(2147483647); double double13 = poissonDistributionImpl6.cumulativeProbability((int) (short) 10, 2147483647); double double15 = poissonDistributionImpl6.probability((-1.207854600801523d)); double double17 = poissonDistributionImpl6.probability(100); int int19 = poissonDistributionImpl6.inverseCumulativeProbability(0.06680720126885803d); int int20 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl6); poissonDistributionImpl6.reseedRandomGenerator(129L); double double24 = poissonDistributionImpl6.cumulativeProbability(54); // flaky:     org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.8448435030004939d + "'", double4 == 0.8448435030004939d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.941866060050443E-159d + "'", double8 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.1142547828857374E-7d + "'", double13 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.941866060050443E-159d + "'", double17 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); // flaky:     org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d); }
public void test263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test263"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); int int3 = poissonDistributionImpl1.getDomainUpperBound((double) (short) 0); int int5 = poissonDistributionImpl1.getDomainUpperBound((-1.0224059380017507d)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647); }
public void test264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test264"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) '4', (int) (short) 0); // The following exception was thrown during execution in test generation try { double double4 = poissonDistributionImpl2.cumulativeProbability(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Continued fraction convergents failed to converge for value 52"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } }
public void test265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test265"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(12.995175231370865d, (-1.8574114166194975d), 89); }
public void test266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test266"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.inverseCumulativeProbability(0.85822264930882d); double double11 = poissonDistributionImpl1.probability(4.762613918721343d); double double13 = poissonDistributionImpl1.probability(0.31738700241670326d); double double15 = poissonDistributionImpl1.cumulativeProbability((int) (short) 100); double double16 = poissonDistributionImpl1.getMean(); double double19 = poissonDistributionImpl1.cumulativeProbability(108, 186864); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); }
public void test267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test267"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.28543422477289365d); }
public void test268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test268"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.probability(100); double double9 = poissonDistributionImpl1.cumulativeProbability(0.08563392409367526d, (double) 94L); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.941866060050443E-159d + "'", double6 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.6321205588285393d + "'", double9 == 0.6321205588285393d); }
public void test269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test269"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double8 = randomDataImpl5.nextCauchy(0.5403023058681398d, 2.718281828459045d); double double11 = randomDataImpl5.nextGaussian((double) (byte) 100, 0.8354297910850215d); double double14 = randomDataImpl5.nextF(1.332659372694601d, 0.9088519918096143d); randomDataImpl5.reSeedSecure(32L); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl18 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double20 = poissonDistributionImpl18.probability(100); double double22 = poissonDistributionImpl18.cumulativeProbability(10); int int23 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl18); // The following exception was thrown during execution in test generation try { int int26 = randomDataImpl5.nextZipf(115, 0.0d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.140418345532116d + "'", double8 == 3.140418345532116d); // flaky:     org.junit.Assert.assertTrue("'" + double11 + "' != '" + 99.72335738104775d + "'", double11 == 99.72335738104775d); // flaky:     org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2.5005168796131754d + "'", double14 == 2.5005168796131754d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.941866060050443E-159d + "'", double20 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9999999899522336d + "'", double22 == 0.9999999899522336d); // flaky:     org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2); }
public void test270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test270"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5999899069173406d, 1.0822740835725053d); }
public void test271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test271"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); double double14 = poissonDistributionImpl1.cumulativeProbability((double) (-1)); double double16 = poissonDistributionImpl1.probability((double) (byte) 0); double double19 = poissonDistributionImpl1.cumulativeProbability((int) (byte) 100, 2147483647); double double21 = poissonDistributionImpl1.probability(99.67903295823915d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117144233d + "'", double16 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); }
public void test272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test272"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6240474076765692d, 0); double double3 = poissonDistributionImpl2.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.6240474076765692d + "'", double3 == 0.6240474076765692d); }
public void test273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test273"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl2 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double4 = normalDistributionImpl2.cumulativeProbability((double) (byte) 10); double double5 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl2); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl7 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double10 = poissonDistributionImpl7.cumulativeProbability((double) 1L, (double) 100L); double double12 = poissonDistributionImpl7.cumulativeProbability(0); double double14 = poissonDistributionImpl7.normalApproximateProbability((int) (byte) -1); double double16 = poissonDistributionImpl7.cumulativeProbability((int) '4'); int int17 = poissonDistributionImpl7.sample(); int int18 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl7); double double20 = poissonDistributionImpl7.normalApproximateProbability((int) (short) 10); double double22 = poissonDistributionImpl7.normalApproximateProbability((int) (byte) 10); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.5558951896457232d + "'", double5 == 0.5558951896457232d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.6321205588285393d + "'", double10 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117146065d + "'", double12 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.06680720126885803d + "'", double14 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3); // flaky:     org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); }
public void test274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test274"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); double double14 = poissonDistributionImpl1.normalApproximateProbability(49); int int16 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); }
public void test275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test275"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; double double14 = poissonDistributionImpl1.getMean(); double double16 = poissonDistributionImpl1.cumulativeProbability(0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117146065d + "'", double16 == 0.36787944117146065d); }
public void test276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test276"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.inverseCumulativeProbability(0.85822264930882d); double double11 = poissonDistributionImpl1.probability(4.762613918721343d); int int13 = poissonDistributionImpl1.getDomainUpperBound((-1.7540630599962477d)); double double15 = poissonDistributionImpl1.probability(60); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 4.4211033641445156E-83d + "'", double15 == 4.4211033641445156E-83d); }
public void test277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test277"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); int int8 = poissonDistributionImpl1.getDomainLowerBound((-0.9501789451592945d)); double double9 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d); }
public void test278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test278"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(534.2951592545095d); int int3 = poissonDistributionImpl1.getDomainLowerBound((-1.264199519017718d)); double double5 = poissonDistributionImpl1.probability(0.10479227212063016d); // The following exception was thrown during execution in test generation try { int int7 = poissonDistributionImpl1.inverseCumulativeProbability((-0.28727288807984297d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test279"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); // The following exception was thrown during execution in test generation try { int int8 = poissonDistributionImpl1.inverseCumulativeProbability((-0.23966948306718705d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test280"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.6381480754000609d); }
public void test281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test281"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); int int2 = poissonDistributionImpl1.sample(); // flaky:     org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test282"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound((double) ' '); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; randomDataImpl17.reSeedSecure(); // The following exception was thrown during execution in test generation try { double double20 = randomDataImpl17.nextExponential(0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): mean (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(randomDataImpl17); }
public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(5.1682037937235705d, 0.0d, (int) (short) 1); double double4 = poissonDistributionImpl3.getMean(); // The following exception was thrown during execution in test generation try { double double7 = poissonDistributionImpl3.cumulativeProbability((-1.0113603355998957d), 0.8184513581243977d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Continued fraction convergents failed to converge for value 5.168"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.1682037937235705d + "'", double4 == 5.1682037937235705d); }
public void test284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test284"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); poissonDistributionImpl1.reseedRandomGenerator((long) 108); double double14 = poissonDistributionImpl1.cumulativeProbability(2147483647); double double16 = poissonDistributionImpl1.cumulativeProbability(2); int[] intArray18 = poissonDistributionImpl1.sample(24); double double20 = poissonDistributionImpl1.probability(96); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.919698602928607d + "'", double16 == 0.919698602928607d); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 3]"); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.709666497917257E-151d + "'", double20 == 3.709666497917257E-151d); }
public void test285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test285"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); double double12 = poissonDistributionImpl1.probability(100); double double15 = poissonDistributionImpl1.cumulativeProbability((-1), 3258243); double double16 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); }
public void test286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test286"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-1)); int int6 = poissonDistributionImpl2.getDomainLowerBound((-0.17739400468773303d)); double double8 = poissonDistributionImpl2.cumulativeProbability(1.1643428520428265d); int int10 = poissonDistributionImpl2.getDomainLowerBound((-0.7544489644994905d)); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.3834479069238827E-21d + "'", double8 == 1.3834479069238827E-21d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); }
public void test287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test287"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); int int8 = poissonDistributionImpl1.getDomainLowerBound((-0.9501789451592945d)); int int9 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test288"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; double double10 = randomDataImpl7.nextWeibull(3.430736374087032E10d, 2.0878348689268407d); double double13 = randomDataImpl7.nextWeibull((double) 49, 0.708228680388187d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.0878348688850714d + "'", double10 == 2.0878348688850714d); // flaky:     org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.6995007389818411d + "'", double13 == 0.6995007389818411d); }
public void test289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test289"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); int int3 = poissonDistributionImpl1.getDomainUpperBound((double) (short) 0); double double4 = poissonDistributionImpl1.getMean(); int[] intArray6 = poissonDistributionImpl1.sample(52); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2147483647 + "'", int3 == 2147483647); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); org.junit.Assert.assertNotNull(intArray6); // flaky:     org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1, 2, 1, 1, 0, 3, 0, 0, 0, 0, 0, 1, 2, 0, 2, 1, 2, 1, 2, 0, 1, 0, 1, 0, 0, 0, 1, 5, 0, 0, 0, 2, 3, 0, 1, 2, 1, 2, 1, 0, 2, 1, 2, 2, 0, 0, 1, 0, 0, 0, 1, 2]"); }
public void test290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test290"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double17 = poissonDistributionImpl9.cumulativeProbability(10000000); double double19 = poissonDistributionImpl9.normalApproximateProbability((-1)); int int21 = poissonDistributionImpl9.getDomainUpperBound(0.0d); double double23 = poissonDistributionImpl9.cumulativeProbability(7); int int24 = poissonDistributionImpl9.sample(); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 537.6537736743788d + "'", double7 == 537.6537736743788d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.06680720126885803d + "'", double19 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2147483647 + "'", int21 == 2147483647); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9999897508033253d + "'", double23 == 0.9999897508033253d); // flaky:     org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0); }
public void test291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test291"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(1.3325218072717584d, 0.0d, (-1)); }
public void test292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test292"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) 1); int int10 = poissonDistributionImpl1.getDomainUpperBound((double) 10); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.691462461274013d + "'", double8 == 0.691462461274013d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); }
public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.cumulativeProbability(10); double double6 = poissonDistributionImpl1.getMean(); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainLowerBound(0.0d); double double11 = poissonDistributionImpl1.normalApproximateProbability(1565197); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9999999899522336d + "'", double5 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d); }
public void test294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test294"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5d, 0.10400365104880639d, (int) (short) 1); int[] intArray5 = poissonDistributionImpl3.sample(100); double double7 = poissonDistributionImpl3.probability((-0.00810260350101137d)); // The following exception was thrown during execution in test generation try { double double9 = poissonDistributionImpl3.cumulativeProbability(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: maximal number of iterations (1) exceeded"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray5); // flaky:     org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 2, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1, 0, 1, 1, 3, 3, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 2, 0, 1, 0, 0, 2, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 0, 0, 2, 2, 0, 2, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0]"); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test295"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.probability(1.131024151762108d); double double12 = poissonDistributionImpl1.cumulativeProbability((int) (short) 1); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.7357588823428858d + "'", double12 == 0.7357588823428858d); }
public void test296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test296"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); double double4 = randomDataImpl1.nextUniform((-0.7853981633974483d), 0.962217362072003d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl6 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double8 = poissonDistributionImpl6.probability(100); double double10 = poissonDistributionImpl6.normalApproximateProbability(2147483647); double double13 = poissonDistributionImpl6.cumulativeProbability((int) (short) 10, 2147483647); double double15 = poissonDistributionImpl6.probability((-1.207854600801523d)); double double17 = poissonDistributionImpl6.probability(100); int int19 = poissonDistributionImpl6.inverseCumulativeProbability(0.06680720126885803d); int int20 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl6); // The following exception was thrown during execution in test generation try { int int22 = poissonDistributionImpl6.inverseCumulativeProbability((-1.7942705279814837d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } // flaky:     org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.35215382870601053d) + "'", double4 == (-0.35215382870601053d)); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.941866060050443E-159d + "'", double8 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.1142547828857374E-7d + "'", double13 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.941866060050443E-159d + "'", double17 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); // flaky:     org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); }
public void test297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test297"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); double double13 = poissonDistributionImpl1.cumulativeProbability((int) (short) 0, 0); org.apache.commons.math.random.RandomDataImpl randomDataImpl14 = poissonDistributionImpl1.randomData; double double16 = poissonDistributionImpl1.probability(56); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.36787944117146065d + "'", double13 == 0.36787944117146065d); org.junit.Assert.assertNotNull(randomDataImpl14); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 5.174123373539009E-76d + "'", double16 == 5.174123373539009E-76d); }
public void test298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test298"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-1)); double double5 = poissonDistributionImpl2.getMean(); double double7 = poissonDistributionImpl2.cumulativeProbability(31); double double9 = poissonDistributionImpl2.probability(1108008); double double12 = poissonDistributionImpl2.cumulativeProbability(35, 37); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 52.0d + "'", double5 == 52.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0011662327595916614d + "'", double7 == 0.0011662327595916614d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.012981155574234595d + "'", double12 == 0.012981155574234595d); }
public void test299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test299"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; double double14 = poissonDistributionImpl1.getMean(); // The following exception was thrown during execution in test generation try { int int16 = poissonDistributionImpl1.inverseCumulativeProbability(79.87449132856135d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); }
public void test300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test300"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.inverseCumulativeProbability(0.85822264930882d); double double11 = poissonDistributionImpl1.probability(4.762613918721343d); int int13 = poissonDistributionImpl1.getDomainUpperBound((-1.7540630599962477d)); double double15 = poissonDistributionImpl1.probability(0.36744813563931333d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); }
public void test301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test301"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl(2.7885009818368958d); }
public void test302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test302"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); int int9 = poissonDistributionImpl1.getDomainLowerBound((-0.6775270122929458d)); // The following exception was thrown during execution in test generation try { int int11 = poissonDistributionImpl1.inverseCumulativeProbability((-0.39922507356677917d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1)); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test303"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100); double double3 = poissonDistributionImpl1.probability(0.9999999899522336d); double double5 = poissonDistributionImpl1.cumulativeProbability(1.523643349404959d); double double7 = poissonDistributionImpl1.probability(10000000); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.75727673578106E-42d + "'", double5 == 3.75727673578106E-42d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test304"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); double double8 = poissonDistributionImpl1.cumulativeProbability(74); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); }
public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); double double14 = poissonDistributionImpl1.cumulativeProbability((double) (-1)); double double16 = poissonDistributionImpl1.probability((double) (byte) 0); double double18 = poissonDistributionImpl1.cumulativeProbability((int) 'a'); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117144233d + "'", double16 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); }
public void test306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test306"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(Double.POSITIVE_INFINITY, 0.0d); poissonDistributionImpl2.reseedRandomGenerator((long) (-1)); double double5 = poissonDistributionImpl2.getMean(); // The following exception was thrown during execution in test generation try { double double7 = poissonDistributionImpl2.cumulativeProbability((int) 'a'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.ConvergenceException; message: Continued fraction diverged to NaN for value ?"); } catch (org.apache.commons.math.ConvergenceException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY); }
public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); double double14 = poissonDistributionImpl1.normalApproximateProbability(49); int int16 = poissonDistributionImpl1.getDomainLowerBound(520.8046917041861d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); }
public void test308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test308"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); int int12 = poissonDistributionImpl1.getDomainLowerBound(99.01124665425166d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test309"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-1)); double double5 = poissonDistributionImpl2.getMean(); double double8 = poissonDistributionImpl2.cumulativeProbability((int) (short) 0, 31); double double10 = poissonDistributionImpl2.cumulativeProbability(0); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 52.0d + "'", double5 == 52.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0011662327595916614d + "'", double8 == 0.0011662327595916614d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.6102790696677136E-23d + "'", double10 == 2.6102790696677136E-23d); }
public void test310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test310"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(2.6593984616112802d, 0.6770898493360052d, 24); }
public void test311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test311"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainUpperBound((double) 2147483647L); poissonDistributionImpl1.reseedRandomGenerator(66L); double double13 = poissonDistributionImpl1.probability(36.941458435411754d); int int15 = poissonDistributionImpl1.getDomainUpperBound(99.13154645400108d); int int17 = poissonDistributionImpl1.inverseCumulativeProbability(0.2609616519766456d); int int19 = poissonDistributionImpl1.getDomainUpperBound(0.015823175900687235d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2147483647 + "'", int15 == 2147483647); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2147483647 + "'", int19 == 2147483647); }
public void test312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test312"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainUpperBound((double) 2147483647L); poissonDistributionImpl1.reseedRandomGenerator(66L); int int13 = poissonDistributionImpl1.getDomainUpperBound((-1.4198831539577308d)); double double15 = poissonDistributionImpl1.cumulativeProbability(37); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2147483647 + "'", int13 == 2147483647); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); }
public void test313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test313"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double6 = poissonDistributionImpl1.cumulativeProbability(0.0d, (double) 'a'); double double8 = poissonDistributionImpl1.probability(0.3899356327042469d); int int10 = poissonDistributionImpl1.getDomainUpperBound((-0.7880014968389955d)); double double12 = poissonDistributionImpl1.cumulativeProbability(378706); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2147483647 + "'", int10 == 2147483647); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); }
public void test314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test314"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); double double11 = poissonDistributionImpl1.probability(0.0d); int int13 = poissonDistributionImpl1.getDomainLowerBound(0.248672111195961d); int int14 = poissonDistributionImpl1.sample(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.36787944117144233d + "'", double11 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 74L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-0.17378263862829857d)); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); }
public void test316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test316"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); int int3 = poissonDistributionImpl2.sample(); double double5 = poissonDistributionImpl2.cumulativeProbability(3); double double6 = poissonDistributionImpl2.getMean(); // flaky:     org.junit.Assert.assertTrue("'" + int3 + "' != '" + 56 + "'", int3 == 56); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 6.483846199752252E-19d + "'", double5 == 6.483846199752252E-19d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 52.0d + "'", double6 == 52.0d); }
public void test317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test317"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); poissonDistributionImpl1.reseedRandomGenerator((long) 108); double double15 = poissonDistributionImpl1.cumulativeProbability(51, 844785); double double17 = poissonDistributionImpl1.probability((double) 56); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.174123373539009E-76d + "'", double17 == 5.174123373539009E-76d); }
public void test318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test318"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); int int10 = poissonDistributionImpl1.sample(); double double13 = poissonDistributionImpl1.cumulativeProbability((int) (short) 0, 0); double double16 = poissonDistributionImpl1.cumulativeProbability(1, (int) (short) 100); double double18 = poissonDistributionImpl1.cumulativeProbability(9703232); int int20 = poissonDistributionImpl1.getDomainUpperBound(244.53628995917484d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); // flaky:     org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.36787944117146065d + "'", double13 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.6321205588285393d + "'", double16 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2147483647 + "'", int20 == 2147483647); }
public void test319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test319"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) (short) 1, 0.24712452682051894d, (int) (byte) -1); // The following exception was thrown during execution in test generation try { double double5 = poissonDistributionImpl3.cumulativeProbability((int) (short) 100); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: maximal number of iterations (-1) exceeded"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } }
public void test320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test320"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0.9999999958776927d); double double8 = poissonDistributionImpl1.normalApproximateProbability(3); double double10 = poissonDistributionImpl1.probability(60); int int12 = poissonDistributionImpl1.getDomainLowerBound(618.0141627415699d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.9937903346742238d + "'", double8 == 0.9937903346742238d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.4211033641445156E-83d + "'", double10 == 4.4211033641445156E-83d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test321"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.142948745358914d, 85.44181650291267d, 1564722); }
public void test322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test322"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(812.156551123258d, 0.7770704382110356d); int int4 = poissonDistributionImpl2.getDomainUpperBound((-0.30787808039301257d)); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647); }
public void test323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test323"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); double double4 = randomDataImpl1.nextUniform((-0.7853981633974483d), 0.962217362072003d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl6 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double8 = poissonDistributionImpl6.probability(100); double double10 = poissonDistributionImpl6.normalApproximateProbability(2147483647); double double13 = poissonDistributionImpl6.cumulativeProbability((int) (short) 10, 2147483647); double double15 = poissonDistributionImpl6.probability((-1.207854600801523d)); double double17 = poissonDistributionImpl6.probability(100); int int19 = poissonDistributionImpl6.inverseCumulativeProbability(0.06680720126885803d); int int20 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl6); poissonDistributionImpl6.reseedRandomGenerator(129L); double double24 = poissonDistributionImpl6.probability(0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.8903569957937654d + "'", double4 == 0.8903569957937654d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.941866060050443E-159d + "'", double8 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.1142547828857374E-7d + "'", double13 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.941866060050443E-159d + "'", double17 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); // flaky:     org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.36787944117144233d + "'", double24 == 0.36787944117144233d); }
public void test324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test324"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-0.12308411467852295d), 593.9053572049485d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.123 is smaller than, or equal to, the minimum (0): mean (-0.123)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test325"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 52L, 10000000); double double4 = poissonDistributionImpl2.cumulativeProbability((-1)); int int6 = poissonDistributionImpl2.getDomainLowerBound((-0.17739400468773303d)); double double8 = poissonDistributionImpl2.cumulativeProbability(1.1643428520428265d); double double11 = poissonDistributionImpl2.cumulativeProbability(0, 2161860); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.3834479069238827E-21d + "'", double8 == 1.3834479069238827E-21d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d); }
public void test326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test326"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.06929810837522998d, 8265245); int int4 = poissonDistributionImpl2.inverseCumulativeProbability(1.0E-9d); double double6 = poissonDistributionImpl2.cumulativeProbability((double) 2147483647L); double double8 = poissonDistributionImpl2.probability(0.012980426470139595d); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); }
public void test327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test327"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; double double10 = randomDataImpl7.nextWeibull(3.430736374087032E10d, 2.0878348689268407d); double double13 = randomDataImpl7.nextBeta(0.6248471711437631d, 2.993222846126381d); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl14 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double15 = normalDistributionImpl14.sample(); normalDistributionImpl14.setMean(0.0d); double double18 = normalDistributionImpl14.sample(); double double19 = randomDataImpl7.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl14); randomDataImpl7.reSeed(39L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.0878348688442405d + "'", double10 == 2.0878348688442405d); // flaky:     org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.41131103424051685d + "'", double13 == 0.41131103424051685d); // flaky:     org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.27464441665952044d) + "'", double15 == (-0.27464441665952044d)); // flaky:     org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.3878417230723639d + "'", double18 == 0.3878417230723639d); // flaky:     org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.4460868626696481d) + "'", double19 == (-1.4460868626696481d)); }
public void test328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test328"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100.0f, 0); double double4 = poissonDistributionImpl2.normalApproximateProbability(0); double double6 = poissonDistributionImpl2.cumulativeProbability((-1.5883572333189264d)); // The following exception was thrown during execution in test generation try { double double8 = poissonDistributionImpl2.cumulativeProbability(46); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Continued fraction convergents failed to converge for value 100"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test329"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); int int7 = poissonDistributionImpl1.sample(); int int9 = poissonDistributionImpl1.getDomainUpperBound((double) 2147483647L); poissonDistributionImpl1.reseedRandomGenerator(66L); double double14 = poissonDistributionImpl1.cumulativeProbability(0, 96); double double16 = poissonDistributionImpl1.probability((-0.9214141973347212d)); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); // flaky:     org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test330"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.08567997748997765d, 108.27360999027786d, 34); double double5 = poissonDistributionImpl3.cumulativeProbability(2147483647); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); }
public void test331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test331"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double18 = randomDataImpl5.nextWeibull(0.2930641738000717d, 0.4925042174359671d); int int21 = randomDataImpl5.nextInt(35, 86); // The following exception was thrown during execution in test generation try { int int24 = randomDataImpl5.nextBinomial((int) (byte) 100, 2.5729148168449405d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 534.2061137806802d + "'", double7 == 534.2061137806802d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); // flaky:     org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2.101279959074828d + "'", double18 == 2.101279959074828d); // flaky:     org.junit.Assert.assertTrue("'" + int21 + "' != '" + 69 + "'", int21 == 69); }
public void test332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test332"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; double double9 = poissonDistributionImpl1.cumulativeProbability(10); double double11 = poissonDistributionImpl1.cumulativeProbability(49); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9999999899522336d + "'", double9 == 0.9999999899522336d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d); }
public void test333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test333"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl2 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double4 = normalDistributionImpl2.cumulativeProbability((double) (byte) 10); double double5 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl2); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl7 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double10 = poissonDistributionImpl7.cumulativeProbability((double) 1L, (double) 100L); double double12 = poissonDistributionImpl7.cumulativeProbability(0); double double14 = poissonDistributionImpl7.normalApproximateProbability((int) (byte) -1); double double16 = poissonDistributionImpl7.cumulativeProbability((int) '4'); int int17 = poissonDistributionImpl7.sample(); int int18 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl7); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl19 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double20 = normalDistributionImpl19.sample(); double double23 = normalDistributionImpl19.cumulativeProbability(1.0E-9d, (double) (short) 100); normalDistributionImpl19.setStandardDeviation(0.6321205588285393d); org.apache.commons.math.random.RandomDataImpl randomDataImpl26 = normalDistributionImpl19.randomData; double double28 = normalDistributionImpl19.getDomainUpperBound(1.523643349404959d); double double30 = normalDistributionImpl19.getDomainUpperBound((double) 80L); double double32 = normalDistributionImpl19.cumulativeProbability(0.24197072451914337d); double double34 = normalDistributionImpl19.density((java.lang.Double) 1.447011879960675d); double double35 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl19); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.502631588140206d + "'", double5 == 1.502631588140206d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.6321205588285393d + "'", double10 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117146065d + "'", double12 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.06680720126885803d + "'", double14 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); // flaky:     org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2); // flaky:     org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.15176971308459736d + "'", double20 == 0.15176971308459736d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.4999999996010577d + "'", double23 == 0.4999999996010577d); org.junit.Assert.assertNotNull(randomDataImpl26); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.7976931348623157E308d + "'", double28 == 1.7976931348623157E308d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.7976931348623157E308d + "'", double30 == 1.7976931348623157E308d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.649063021701693d + "'", double32 == 0.649063021701693d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.04594352880004537d + "'", double34 == 0.04594352880004537d); // flaky:     org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.2055763802231654d) + "'", double35 == (-1.2055763802231654d)); }
public void test334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test334"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(5.1682037937235705d, 0.0d, (int) (short) 1); double double5 = poissonDistributionImpl3.probability(1); double double7 = poissonDistributionImpl3.normalApproximateProbability(7); // The following exception was thrown during execution in test generation try { double double10 = poissonDistributionImpl3.cumulativeProbability(24, 81); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: maximal number of iterations (1) exceeded"); } catch (org.apache.commons.math.MaxIterationsExceededException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.029431828321553385d + "'", double5 == 0.029431828321553385d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8474837270121409d + "'", double7 == 0.8474837270121409d); }
public void test335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test335"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); org.apache.commons.math.random.RandomDataImpl randomDataImpl13 = poissonDistributionImpl1.randomData; int int16 = randomDataImpl13.nextSecureInt(97, (int) (short) 100); java.lang.String str18 = randomDataImpl13.nextHexString(94); java.lang.String str20 = randomDataImpl13.nextHexString(19); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl13); // flaky:     org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100); // flaky:     org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1d8113a1713af1b328bb3140b9fcee7349ae3f733e3698d2ddf3956fe40d28583168d3bea5999dbac5c04bc5e350e6" + "'", str18, "1d8113a1713af1b328bb3140b9fcee7349ae3f733e3698d2ddf3956fe40d28583168d3bea5999dbac5c04bc5e350e6"); // flaky:     org.junit.Assert.assertEquals("'" + str20 + "' != '" + "f88404504f82b155d35" + "'", str20, "f88404504f82b155d35"); }
public void test336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test336"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 100); double double3 = poissonDistributionImpl1.probability(0.9999999899522336d); double double5 = poissonDistributionImpl1.cumulativeProbability(1.523643349404959d); double double6 = poissonDistributionImpl1.getMean(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.75727673578106E-42d + "'", double5 == 3.75727673578106E-42d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d); }
public void test337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test337"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); int int11 = poissonDistributionImpl1.sample(); double double12 = poissonDistributionImpl1.getMean(); int int14 = poissonDistributionImpl1.getDomainUpperBound(0.32947338752667243d); double double16 = poissonDistributionImpl1.cumulativeProbability(0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2147483647 + "'", int14 == 2147483647); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117146065d + "'", double16 == 0.36787944117146065d); }
public void test338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test338"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); int int7 = poissonDistributionImpl1.getDomainUpperBound((double) 10L); int int9 = poissonDistributionImpl1.getDomainLowerBound(3.141592653589793d); double double11 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) 100); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d); }
public void test339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test339"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(179.01587019732065d, 138.17068981461057d); }
public void test340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test340"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability(0.0d); int int12 = poissonDistributionImpl1.getDomainLowerBound((double) (short) -1); poissonDistributionImpl1.reseedRandomGenerator((long) '#'); int int16 = poissonDistributionImpl1.getDomainLowerBound((double) ' '); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; double double19 = randomDataImpl17.nextT((double) 56L); double double21 = randomDataImpl17.nextExponential(0.9705816396797255d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.36787944117146065d + "'", double10 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertNotNull(randomDataImpl17); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.6110810748069344d + "'", double19 == 0.6110810748069344d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.6797445605133504d + "'", double21 == 0.6797445605133504d); }
public void test341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test341"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl2 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double4 = normalDistributionImpl2.cumulativeProbability((double) (byte) 10); double double5 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl2); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl7 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double10 = poissonDistributionImpl7.cumulativeProbability((double) 1L, (double) 100L); double double12 = poissonDistributionImpl7.cumulativeProbability(0); double double14 = poissonDistributionImpl7.normalApproximateProbability((int) (byte) -1); double double16 = poissonDistributionImpl7.cumulativeProbability((int) '4'); int int17 = poissonDistributionImpl7.sample(); int int18 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl7); // The following exception was thrown during execution in test generation try { java.lang.String str20 = randomDataImpl1.nextHexString(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0): length (0)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-0.07315397437939825d) + "'", double5 == (-0.07315397437939825d)); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.6321205588285393d + "'", double10 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117146065d + "'", double12 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.06680720126885803d + "'", double14 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); // flaky:     org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2); }
public void test342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test342"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.getDomainUpperBound((double) 9223372036854775807L); double double8 = poissonDistributionImpl1.probability(7.579902847457086d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); }
public void test343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test343"); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl0 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double2 = normalDistributionImpl0.density((java.lang.Double) 100.0d); double double4 = normalDistributionImpl0.density((double) 1); org.apache.commons.math.random.RandomDataImpl randomDataImpl5 = normalDistributionImpl0.randomData; double double7 = randomDataImpl5.nextChiSquare(572.9577951308232d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl9 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double11 = poissonDistributionImpl9.probability(100); double double14 = poissonDistributionImpl9.cumulativeProbability(0.0d, (double) 'a'); int int15 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl9); double double18 = randomDataImpl5.nextWeibull(0.2930641738000717d, 0.4925042174359671d); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl20 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double22 = poissonDistributionImpl20.probability(100); double double24 = poissonDistributionImpl20.normalApproximateProbability(2147483647); double double27 = poissonDistributionImpl20.cumulativeProbability((int) (short) 10, 2147483647); double double29 = poissonDistributionImpl20.normalApproximateProbability((int) (byte) -1); int int30 = randomDataImpl5.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl20); poissonDistributionImpl20.reseedRandomGenerator(79L); double double34 = poissonDistributionImpl20.cumulativeProbability(445.3636771583326d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.24197072451914337d + "'", double4 == 0.24197072451914337d); org.junit.Assert.assertNotNull(randomDataImpl5); // flaky:     org.junit.Assert.assertTrue("'" + double7 + "' != '" + 550.4619732919217d + "'", double7 == 550.4619732919217d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.941866060050443E-159d + "'", double11 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2); // flaky:     org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0027067824583939964d + "'", double18 == 0.0027067824583939964d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 3.941866060050443E-159d + "'", double22 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.1142547828857374E-7d + "'", double27 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.06680720126885803d + "'", double29 == 0.06680720126885803d); // flaky:     org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d); }
public void test344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test344"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; long long6 = randomDataImpl4.nextPoisson(0.4194139451537116d); randomDataImpl4.reSeed(); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); }
public void test345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test345"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl2 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.016059405789945882d, 5.3344115463038834E241d); }
public void test346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test346"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double4 = poissonDistributionImpl1.cumulativeProbability((double) 1L, (double) 100L); double double6 = poissonDistributionImpl1.cumulativeProbability(0); double double8 = poissonDistributionImpl1.normalApproximateProbability((int) (byte) -1); double double10 = poissonDistributionImpl1.cumulativeProbability((int) '4'); double double12 = poissonDistributionImpl1.probability((double) 100L); double double14 = poissonDistributionImpl1.cumulativeProbability((double) (-1)); double double16 = poissonDistributionImpl1.probability((double) (byte) 0); double double17 = poissonDistributionImpl1.getMean(); // The following exception was thrown during execution in test generation try { int int19 = poissonDistributionImpl1.inverseCumulativeProbability((double) 33); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6321205588285393d + "'", double4 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.36787944117146065d + "'", double6 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.06680720126885803d + "'", double8 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.941866060050443E-159d + "'", double12 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.36787944117144233d + "'", double16 == 0.36787944117144233d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); }
public void test347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test347"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; int int6 = poissonDistributionImpl1.inverseCumulativeProbability(0.0d); org.apache.commons.math.random.RandomDataImpl randomDataImpl7 = poissonDistributionImpl1.randomData; double double10 = randomDataImpl7.nextWeibull(3.430736374087032E10d, 2.0878348689268407d); double double13 = randomDataImpl7.nextBeta(0.6248471711437631d, 2.993222846126381d); long long15 = randomDataImpl7.nextPoisson(1.3834479069238827E-21d); long long17 = randomDataImpl7.nextPoisson(96.99999999999999d); int int20 = randomDataImpl7.nextPascal(1565197, 0.8882749906690643d); // The following exception was thrown during execution in test generation try { double double22 = randomDataImpl7.nextChiSquare((-11.437118065595987d)); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(randomDataImpl7); // flaky:     org.junit.Assert.assertTrue("'" + double10 + "' != '" + 2.087834868835298d + "'", double10 == 2.087834868835298d); // flaky:     org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.1231525799225962d + "'", double13 == 0.1231525799225962d); org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L); // flaky:     org.junit.Assert.assertTrue("'" + long17 + "' != '" + 99L + "'", long17 == 99L); // flaky:     org.junit.Assert.assertTrue("'" + int20 + "' != '" + 196318 + "'", int20 == 196318); }
public void test348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test348"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); org.apache.commons.math.random.RandomDataImpl randomDataImpl4 = poissonDistributionImpl1.randomData; long long6 = randomDataImpl4.nextPoisson(0.4194139451537116d); double double9 = randomDataImpl4.nextGamma(2.6593984616112802d, 0.9937903346742238d); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl10 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double12 = normalDistributionImpl10.density((java.lang.Double) 100.0d); double double13 = normalDistributionImpl10.getMean(); double double14 = randomDataImpl4.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl10); double double16 = normalDistributionImpl10.getDomainLowerBound(89.58769685352438d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertNotNull(randomDataImpl4); // flaky:     org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L); // flaky:     org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.9129958934566975d + "'", double9 == 3.9129958934566975d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); // flaky:     org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.3201876528117676d) + "'", double14 == (-0.3201876528117676d)); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test349"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl3 = new org.apache.commons.math.distribution.PoissonDistributionImpl(0.5789527014473835d, (-0.8594252029393532d), (int) (short) 10); double double5 = poissonDistributionImpl3.normalApproximateProbability(31); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); }
public void test350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test350"); org.apache.commons.math.random.RandomGenerator randomGenerator0 = null; org.apache.commons.math.random.RandomDataImpl randomDataImpl1 = new org.apache.commons.math.random.RandomDataImpl(randomGenerator0); org.apache.commons.math.distribution.NormalDistributionImpl normalDistributionImpl2 = new org.apache.commons.math.distribution.NormalDistributionImpl(); double double4 = normalDistributionImpl2.cumulativeProbability((double) (byte) 10); double double5 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.ContinuousDistribution) normalDistributionImpl2); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl7 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double10 = poissonDistributionImpl7.cumulativeProbability((double) 1L, (double) 100L); double double12 = poissonDistributionImpl7.cumulativeProbability(0); double double14 = poissonDistributionImpl7.normalApproximateProbability((int) (byte) -1); double double16 = poissonDistributionImpl7.cumulativeProbability((int) '4'); int int17 = poissonDistributionImpl7.sample(); int int18 = randomDataImpl1.nextInversionDeviate((org.apache.commons.math.distribution.IntegerDistribution) poissonDistributionImpl7); double double21 = randomDataImpl1.nextGaussian((-0.47093222618459063d), 8.706621142874209d); // The following exception was thrown during execution in test generation try { double double24 = randomDataImpl1.nextGaussian((-5.322572625293256d), (-0.9152523592151947d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -0.915 is smaller than, or equal to, the minimum (0): standard deviation (-0.915)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.3619857304262746d + "'", double5 == 0.3619857304262746d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.6321205588285393d + "'", double10 == 0.6321205588285393d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.36787944117146065d + "'", double12 == 0.36787944117146065d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.06680720126885803d + "'", double14 == 0.06680720126885803d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); // flaky:     org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); // flaky:     org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2); // flaky:     org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-17.376141944320242d) + "'", double21 == (-17.376141944320242d)); }
public void test351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test351"); // The following exception was thrown during execution in test generation try { org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((-1.6013111273282565d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotStrictlyPositiveException; message: -1.601 is smaller than, or equal to, the minimum (0): mean (-1.601)"); } catch (org.apache.commons.math.exception.NotStrictlyPositiveException e) { // Expected exception. } }
public void test352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test352"); org.apache.commons.math.distribution.PoissonDistributionImpl poissonDistributionImpl1 = new org.apache.commons.math.distribution.PoissonDistributionImpl((double) 1L); double double3 = poissonDistributionImpl1.probability(100); double double5 = poissonDistributionImpl1.normalApproximateProbability(2147483647); double double8 = poissonDistributionImpl1.cumulativeProbability((int) (short) 10, 2147483647); double double10 = poissonDistributionImpl1.probability((-1.207854600801523d)); poissonDistributionImpl1.reseedRandomGenerator((long) 108); double double14 = poissonDistributionImpl1.cumulativeProbability(2147483647); double double16 = poissonDistributionImpl1.cumulativeProbability(2); org.apache.commons.math.random.RandomDataImpl randomDataImpl17 = poissonDistributionImpl1.randomData; // The following exception was thrown during execution in test generation try { int int20 = randomDataImpl17.nextBinomial(806467, 2.694607689281334d); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.941866060050443E-159d + "'", double3 == 3.941866060050443E-159d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.1142547828857374E-7d + "'", double8 == 1.1142547828857374E-7d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.919698602928607d + "'", double16 == 0.919698602928607d); org.junit.Assert.assertNotNull(randomDataImpl17); }
public void test0() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); poissonDistributionImpl0.inverseCumulativeProbability(0.07490822288864472); }
public void test1() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472, 0.07490822288864472); double double0 = poissonDistributionImpl0.getMean(); assertEquals(0.07490822288864472, double0, 0.01); }
public void test2() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); int int0 = poissonDistributionImpl0.sample(); assertEquals(0, int0); assertEquals(0.07490822288864472, poissonDistributionImpl0.getMean(), 0.01); }
public void test3() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2925.312765687821, 1707); double double0 = poissonDistributionImpl0.probability(1457); assertEquals(2.4632418364250662E-199, double0, 0.01); }
public void test4() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); double double0 = poissonDistributionImpl0.normalApproximateProbability(0); assertEquals(0.9398082942215191, double0, 0.01); assertEquals(0.07490822288864472, poissonDistributionImpl0.getMean(), 0.01); }
public void test5() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = null; try { poissonDistributionImpl0 = new PoissonDistributionImpl(-0.0, 0.0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // -0 is smaller than, or equal to, the minimum (0): mean (-0) // verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e); } }
public void test6() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); double double0 = poissonDistributionImpl0.probability((-1)); assertEquals(0.0, double0, 0.01); assertEquals(0.07490822288864472, poissonDistributionImpl0.getMean(), 0.01); }
public void test7() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472); double double0 = poissonDistributionImpl0.probability(0); assertEquals(0.9278286358531357, double0, 0.01); }
public void test8() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1374.35, 1374.35, 2653); double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE); assertEquals(1374.35, poissonDistributionImpl0.getMean(), 0.01); assertEquals(0.0, double0, 0.01); }
public void test9() throws Throwable { PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.07490822288864472, 0.07490822288864472); double double0 = poissonDistributionImpl0.cumulativeProbability((-1), Integer.MAX_VALUE); assertEquals(0.07490822288864472, poissonDistributionImpl0.getMean(), 0.01); assertEquals(1.0, double0, 0.01); }
