public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); org.apache.commons.math3.geometry.euclidean.threed.Line line0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line1 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D0.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double7 = vector3D0.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double14 = vector3D11.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line15 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D0, vector3D13); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathIllegalArgumentException; message: zero norm"); } catch (org.apache.commons.math3.exception.MathIllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector11 = vector3D9.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D7.subtract((double) 0.0f, euclidean3DVector11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector15 = vector3D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = vector3D7.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line17 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D2, vector3D14); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathIllegalArgumentException; message: zero norm"); } catch (org.apache.commons.math3.exception.MathIllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(euclidean3DVector11); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(euclidean3DVector15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D0.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = vector3D0.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector10 = vector3D8.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double12 = vector3D9.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line13 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D7, vector3D11); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathIllegalArgumentException; message: zero norm"); } catch (org.apache.commons.math3.exception.MathIllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(euclidean3DVector10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector75 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector76 = line74.toSpace(euclidean1DVector75); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D0.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D3.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D3, vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.negate(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector18 = vector3D16.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17); double double19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D15, vector3D17); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector20 = vector3D14.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D17.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D17, vector3D23); double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(vector3D12, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector29 = vector3D27.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); double double30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D26, vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D28, vector3D31); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = vector3D34.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D36); boolean boolean40 = vector3D31.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector44 = vector3D42.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D41, vector3D43); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D43, vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D31, vector3D43); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D24.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 10L, vector3D24); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line51 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D9, vector3D50); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathIllegalArgumentException; message: zero norm"); } catch (org.apache.commons.math3.exception.MathIllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(euclidean3DVector18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector20); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(euclidean3DVector29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(euclidean3DVector35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(euclidean3DVector44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertNotNull(vector3D49); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector78 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line76.toSpace(euclidean1DVector78); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector77 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line76.toSpace(euclidean1DVector77); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; double double79 = vector3D78.getDelta(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = vector3D78.scalarMultiply((-17.999999999999996d)); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = vector3D81.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector87 = vector3D85.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); double double88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D84, vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D86, vector3D89); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D92 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector93 = vector3D91.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D92); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D94 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double95 = vector3D92.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D94); double double96 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D89, vector3D94); double double97 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D81, vector3D94); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D98 = vector3D94.orthogonal(); double double99 = line76.getAbscissa(vector3D98); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertTrue(Double.isNaN(double79)); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(euclidean3DVector87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertNotNull(euclidean3DVector93); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d); org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.0d + "'", double97 == 1.0d); org.junit.Assert.assertNotNull(vector3D98); org.junit.Assert.assertTrue(Double.isNaN(double99)); }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.pointAt(0.69532380896874d); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line75.wholeLine(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector79 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line75.toSpace(euclidean1DVector79); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) '#', 10.0d); double double78 = line74.distance(vector3D77); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector79 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = line74.toSpace(euclidean1DVector79); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double78)); }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = line74.getOrigin(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector76 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector77 = line74.toSpace(euclidean1DVector76); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(vector3D75); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line75.pointAt(0.0d); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector82 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector83 = line75.toSpace(euclidean1DVector82); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D81); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = line75.getDirection(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector77 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.toSpace(euclidean1DVector77); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D76); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection81 = null; org.apache.commons.math3.exception.NonMonotonicSequenceException nonMonotonicSequenceException83 = new org.apache.commons.math3.exception.NonMonotonicSequenceException((java.lang.Number) 1.0f, (java.lang.Number) (byte) 10, (int) (byte) -1, orderDirection81, true); boolean boolean84 = nonMonotonicSequenceException83.getStrict(); org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection85 = nonMonotonicSequenceException83.getDirection(); boolean boolean86 = vector3D77.equals((java.lang.Object) orderDirection85); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true); org.junit.Assert.assertNull(orderDirection85); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line78.intersection(line79); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector79 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D80 = line78.toSubSpace(euclidean3DVector79); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector84 = vector3D82.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D83); double double85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D81, vector3D83); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D83, vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector90 = vector3D88.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D89); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double92 = vector3D89.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D91); double double93 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D86, vector3D91); double double94 = vector3D91.getDelta(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D95 = vector3D79.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D91); double double96 = vector3D77.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D95); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(euclidean3DVector80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(euclidean3DVector84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(euclidean3DVector90); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue(Double.isNaN(double96)); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) '#', 10.0d); double double78 = line74.distance(vector3D77); java.lang.Class<?> wildcardClass79 = line74.getClass(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double78)); org.junit.Assert.assertNotNull(wildcardClass79); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line75.pointAt(1.401298464324817E-45d); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector81 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D82 = line75.toSubSpace(euclidean3DVector81); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D80); }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line75.pointAt(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = line75.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line76.pointAt((double) (-1)); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line76); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = line76.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(line81); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.getOrigin(); java.lang.String str79 = vector3D78.toString(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{(NaN); (NaN); (NaN)}" + "'", str79, "{(NaN); (NaN); (NaN)}"); }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line77.intersection(line78); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector5 = vector3D3.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D4); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D1.subtract((double) 0.0f, euclidean3DVector5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = vector3D1.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector13 = vector3D11.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D1, vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector20 = vector3D18.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D17, vector3D19); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector22 = vector3D16.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double23 = vector3D16.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double28 = vector3D25.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector29 = vector3D16.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector33 = vector3D31.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D32.normalize(); double double35 = vector3D32.getX(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 1.2676506E31f, vector3D1, 8.271806125530277E-25d, vector3D16, 11013.232920103323d, vector3D32); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector41 = vector3D39.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40); double double42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D38, vector3D40); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector43 = vector3D37.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D40.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector48 = vector3D46.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector53 = vector3D51.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D50, vector3D52); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D52, vector3D55); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D52.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector62 = vector3D60.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D59, vector3D61); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D61, vector3D64); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector71 = vector3D69.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D68, vector3D70); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector73 = vector3D67.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); double double74 = vector3D67.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = vector3D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = vector3D61.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) ' ', vector3D52, (double) (short) 0, vector3D61); double double79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D47, vector3D78); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D40, vector3D78); double double81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D32, vector3D78); double double82 = vector3D32.getNorm(); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(euclidean3DVector5); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(euclidean3DVector13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(euclidean3DVector20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector29); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(euclidean3DVector33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(euclidean3DVector41); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector43); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertNotNull(euclidean3DVector48); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(euclidean3DVector53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(euclidean3DVector62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertNotNull(euclidean3DVector71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 31.0d + "'", double79 == 31.0d); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 31.0d + "'", double81 == 31.0d); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d); }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line76.pointAt((double) (-1)); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector84 = vector3D82.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D83); double double85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D81, vector3D83); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D80.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = vector3D80.normalize(); double double88 = vector3D87.getNorm(); double double89 = vector3D87.getNormSq(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D90 = vector3D87.getZero(); boolean boolean91 = vector3D90.isInfinite(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector92 = line76.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(euclidean3DVector84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertNotNull(euclidean1DVector92); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line77.closestPoint(line78); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(line77); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.pointAt(1.0E20d); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector81 = line75.toSubSpace(euclidean3DVector80); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector75 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = line74.toSpace(euclidean1DVector75); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.pointAt(0.69532380896874d); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = line75.intersection(line81); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(subLine79); }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); double double80 = vector3D79.getNorm(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertTrue(Double.isNaN(double80)); }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.pointAt(0.69532380896874d); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = line75.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(line80); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = null; // The following exception was thrown during execution in test generation try { double double79 = line77.distance(line78); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; boolean boolean1 = vector3D0.isNaN(); java.lang.String str2 = vector3D0.toString(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D4.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D3, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D5, vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double14 = vector3D11.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D8, vector3D13); org.apache.commons.math3.geometry.Space space16 = vector3D8.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D8.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector22 = vector3D20.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D19, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D21, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector28 = vector3D26.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double30 = vector3D27.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D24, vector3D29); boolean boolean33 = vector3D24.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector37 = vector3D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D34, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D36, vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D24, vector3D36); boolean boolean42 = vector3D24.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector45 = vector3D43.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector49 = vector3D47.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D48); double double50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D46, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D48, vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double57 = vector3D54.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D51, vector3D56); boolean boolean60 = vector3D51.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D51.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D44.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector67 = vector3D65.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); double double68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D64, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D66, vector3D69); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D66.getZero(); double double72 = vector3D62.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D73); double double75 = vector3D73.getNormSq(); double double76 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D73); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D18, vector3D73); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = line77.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line78.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line78.pointAt((double) (byte) 100); boolean boolean82 = vector3D81.isInfinite(); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(vector3D0, vector3D81); double double84 = vector3D81.getNorm(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{0; -1; 0}" + "'", str2, "{0; -1; 0}"); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(space16); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(euclidean3DVector22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(euclidean3DVector28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(euclidean3DVector37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(euclidean3DVector45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertNotNull(euclidean3DVector49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(euclidean3DVector67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + Double.POSITIVE_INFINITY + "'", double74 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double75 + "' != '" + Double.POSITIVE_INFINITY + "'", double75 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line78); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue(Double.isNaN(double83)); org.junit.Assert.assertTrue(Double.isNaN(double84)); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line80.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(line80); org.junit.Assert.assertNotNull(vector3D81); }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = line80.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = line81.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(line80); org.junit.Assert.assertNotNull(line81); org.junit.Assert.assertNotNull(vector3D82); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); double double13 = vector3D10.getDelta(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector14 = vector3D10.negate(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; boolean boolean16 = vector3D15.isNaN(); java.lang.String str17 = vector3D15.toString(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector21 = vector3D19.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D18, vector3D20); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D20, vector3D23); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector27 = vector3D25.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double29 = vector3D26.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); double double30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D23, vector3D28); org.apache.commons.math3.geometry.Space space31 = vector3D23.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D23.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector37 = vector3D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D34, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D36, vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector43 = vector3D41.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D42); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double45 = vector3D42.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D39, vector3D44); boolean boolean48 = vector3D39.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); double double53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D49, vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D51, vector3D54); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D39, vector3D51); boolean boolean57 = vector3D39.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector60 = vector3D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector70 = vector3D68.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double72 = vector3D69.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71); double double73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D66, vector3D71); boolean boolean75 = vector3D66.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = vector3D66.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = vector3D59.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D77); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = vector3D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D79, vector3D81); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D81, vector3D84); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = vector3D81.getZero(); double double87 = vector3D77.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D77, vector3D88); double double90 = vector3D88.getNormSq(); double double91 = vector3D39.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88); org.apache.commons.math3.geometry.euclidean.threed.Line line92 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D33, vector3D88); org.apache.commons.math3.geometry.euclidean.threed.Line line93 = line92.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine94 = line93.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D96 = line93.pointAt((double) (byte) 100); boolean boolean97 = vector3D96.isInfinite(); double double98 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(vector3D15, vector3D96); double double99 = vector3D10.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{0; -1; 0}" + "'", str17, "{0; -1; 0}"); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(euclidean3DVector21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(euclidean3DVector27); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(space31); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(euclidean3DVector37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(euclidean3DVector43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(euclidean3DVector60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertNotNull(euclidean3DVector70); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(euclidean3DVector82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + Double.POSITIVE_INFINITY + "'", double89 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double90 + "' != '" + Double.POSITIVE_INFINITY + "'", double90 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double91 + "' != '" + Double.POSITIVE_INFINITY + "'", double91 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line93); org.junit.Assert.assertNotNull(subLine94); org.junit.Assert.assertNotNull(vector3D96); org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false); org.junit.Assert.assertTrue(Double.isNaN(double98)); org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.4142135623730951d + "'", double99 == 1.4142135623730951d); }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line76.pointAt((double) (-1)); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line76.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = line76.closestPoint(line81); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line77.pointAt(0.5290826861200238d); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(line77); org.junit.Assert.assertNotNull(vector3D79); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = vector3D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D79, vector3D81); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector84 = vector3D78.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double85 = vector3D78.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector90 = vector3D88.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D89); double double91 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D87, vector3D89); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector92 = vector3D86.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D89); double double93 = vector3D86.getY(); double double94 = vector3D78.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D95 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D96 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector97 = vector3D95.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D96); double double98 = vector3D78.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D96); org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D99 = line74.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D78); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(euclidean3DVector82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(euclidean3DVector90); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertNotNull(vector3D96); org.junit.Assert.assertNotNull(euclidean3DVector97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d); org.junit.Assert.assertNotNull(vector1D99); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = line74.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(line76); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); double double80 = vector3D79.getZ(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertTrue(Double.isNaN(double80)); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D0.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = vector3D0.normalize(); double double8 = vector3D7.getNorm(); double double9 = vector3D7.getNormSq(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D7.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector13 = vector3D11.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D12); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double15 = vector3D12.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector20 = vector3D18.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D17, vector3D19); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector22 = vector3D16.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double23 = vector3D16.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D16.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector29 = vector3D27.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); double double30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D26, vector3D28); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector31 = vector3D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34); double double36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D32, vector3D34); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D34, vector3D37); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector41 = vector3D39.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double43 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D42); double double44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D37, vector3D42); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector47 = vector3D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D42.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double49 = vector3D28.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D12, vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54); double double56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D52, vector3D54); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector57 = vector3D51.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54); double double58 = vector3D51.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D51.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector66 = vector3D59.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector70 = vector3D68.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69); double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D67, vector3D69); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D69, vector3D72); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector76 = vector3D74.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double78 = vector3D75.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D77); double double79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D72, vector3D77); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = vector3D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = vector3D77.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); double double84 = vector3D63.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); double double85 = vector3D80.getNorm(); double double86 = vector3D12.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D89.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); double double92 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D88, vector3D90); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector93 = vector3D87.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); double double94 = vector3D87.getY(); java.lang.String str95 = vector3D87.toString(); double double96 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D12, vector3D87); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line97 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D7, vector3D12); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathIllegalArgumentException; message: zero norm"); } catch (org.apache.commons.math3.exception.MathIllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(euclidean3DVector13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(euclidean3DVector20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(euclidean3DVector29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(euclidean3DVector35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(euclidean3DVector41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(euclidean3DVector47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertNotNull(euclidean3DVector70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(euclidean3DVector76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(euclidean3DVector82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector93); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); org.junit.Assert.assertEquals("'" + str95 + "' != '" + "{1; 0; 0}" + "'", str95, "{1; 0; 0}"); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = line80.revert(); java.lang.Class<?> wildcardClass82 = line81.getClass(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(line80); org.junit.Assert.assertNotNull(line81); org.junit.Assert.assertNotNull(wildcardClass82); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = vector3D0.subtract((double) 0.0f, euclidean3DVector4); double double6 = vector3D5.getZ(); double double7 = vector3D5.getNorm1(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector11 = vector3D9.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D8, vector3D10); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D10, vector3D13); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector17 = vector3D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double19 = vector3D16.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D13, vector3D18); boolean boolean22 = vector3D13.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D23, vector3D25); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D25, vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D13, vector3D25); double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D5, vector3D13); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D13.orthogonal(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = vector3D34.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.negate(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector44 = vector3D42.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D41, vector3D43); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D40.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D43.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D43, vector3D49); double double51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(vector3D38, vector3D50); double double52 = vector3D34.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D50); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D34.orthogonal(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line54 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D13, vector3D34); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathIllegalArgumentException; message: zero norm"); } catch (org.apache.commons.math3.exception.MathIllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(euclidean3DVector11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(euclidean3DVector17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(euclidean3DVector35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(euclidean3DVector44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d); org.junit.Assert.assertNotNull(vector3D53); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.Space space75 = vector3D15.getSpace(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(space75); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.pointAt(115.51280198884056d); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line74.wholeLine(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line74.pointAt(6.691673596021348E41d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line74.pointAt(2.4082399653118496d); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine82 = line74.wholeLine(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(subLine82); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); double double75 = vector3D70.getZ(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double75 + "' != '" + Double.POSITIVE_INFINITY + "'", double75 == Double.POSITIVE_INFINITY); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line75.pointAt(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Line line82 = null; // The following exception was thrown during execution in test generation try { boolean boolean83 = line75.isSimilarTo(line82); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D81); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = null; // The following exception was thrown during execution in test generation try { double double80 = line75.distance(line79); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine77 = line75.wholeLine(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(subLine77); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D0.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D3.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector11 = vector3D9.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector16 = vector3D14.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D13, vector3D15); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D15, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D15.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D22, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D24, vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector36 = vector3D30.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double37 = vector3D30.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D24.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) ' ', vector3D15, (double) (short) 0, vector3D24); double double42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D10, vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Line line43 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D3, vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double48 = vector3D45.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector53 = vector3D51.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D50, vector3D52); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D49.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double56 = vector3D49.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = vector3D49.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector62 = vector3D60.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D59, vector3D61); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D57.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector68 = vector3D66.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D65, vector3D67); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D67, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector74 = vector3D72.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D73); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double76 = vector3D73.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); double double77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D70, vector3D75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = vector3D75.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D78); double double82 = vector3D61.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D78); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D45, vector3D61); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector84 = vector3D61.normalize(); double double85 = line43.distance(vector3D61); org.apache.commons.math3.geometry.euclidean.threed.Line line86 = line43.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(euclidean3DVector11); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(euclidean3DVector16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 31.0d + "'", double42 == 31.0d); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(euclidean3DVector53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(euclidean3DVector62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(euclidean3DVector68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertNotNull(euclidean3DVector74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(euclidean3DVector80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(line86); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line74.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) '#', 10.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D81.negate(); org.apache.commons.math3.geometry.Space space83 = vector3D82.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D82); boolean boolean85 = vector3D84.isNaN(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(space83); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true); }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line75.pointAt((double) (byte) 10); double double81 = vector3D80.getNorm1(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertTrue(Double.isNaN(double81)); }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D0.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D3.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector11 = vector3D9.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector16 = vector3D14.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D13, vector3D15); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D15, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D15.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D22, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D24, vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector36 = vector3D30.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double37 = vector3D30.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D24.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) ' ', vector3D15, (double) (short) 0, vector3D24); double double42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D10, vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Line line43 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D3, vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = null; // The following exception was thrown during execution in test generation try { double double45 = line43.distance(vector3D44); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(euclidean3DVector11); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(euclidean3DVector16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 31.0d + "'", double42 == 31.0d); }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); org.apache.commons.math3.geometry.Space space80 = vector3D79.getSpace(); int int81 = space80.getDimension(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(space80); org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3); }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); double[] doubleArray0 = null; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D3, vector3D6); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector10 = vector3D8.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double12 = vector3D9.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D6, vector3D11); org.apache.commons.math3.geometry.Space space14 = vector3D6.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D6.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector20 = vector3D18.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D17, vector3D19); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D19, vector3D22); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double28 = vector3D25.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D22, vector3D27); boolean boolean31 = vector3D22.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34); double double36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D32, vector3D34); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D34, vector3D37); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D22, vector3D34); boolean boolean40 = vector3D22.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector43 = vector3D41.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D42); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector47 = vector3D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D44, vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D46, vector3D49); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector53 = vector3D51.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double55 = vector3D52.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54); double double56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D49, vector3D54); boolean boolean58 = vector3D49.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D49.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = vector3D42.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D63.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D64); double double66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D62, vector3D64); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D64, vector3D67); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D64.getZero(); double double70 = vector3D60.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D60, vector3D71); double double73 = vector3D71.getNormSq(); double double74 = vector3D22.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D16, vector3D71); double[] doubleArray76 = vector3D16.toArray(); // The following exception was thrown during execution in test generation try { double double77 = org.apache.commons.math3.util.MathArrays.distance1(doubleArray0, doubleArray76); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(euclidean3DVector10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(space14); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(euclidean3DVector20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(euclidean3DVector35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(euclidean3DVector43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(euclidean3DVector47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(euclidean3DVector53); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double74 + "' != '" + Double.POSITIVE_INFINITY + "'", double74 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0]"); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line74.getDirection(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D78); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.pointAt(0.69532380896874d); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector83 = vector3D81.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D82); double double84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D80, vector3D82); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D82, vector3D85); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector89 = vector3D87.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double91 = vector3D88.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); double double92 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D85, vector3D90); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D93 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I; double double94 = vector3D90.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D93); double double95 = vector3D90.getDelta(); org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D96 = line75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.apache.commons.math3.geometry.euclidean.threed.Line line97 = line75.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(euclidean3DVector83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(euclidean3DVector89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2.0d + "'", double94 == 2.0d); org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d); org.junit.Assert.assertNotNull(vector1D96); org.junit.Assert.assertNotNull(line97); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line76.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = null; // The following exception was thrown during execution in test generation try { boolean boolean80 = line76.isSimilarTo(line79); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) (byte) 1, 0.0d, 0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D4.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector10 = vector3D8.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D7, vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D9, vector3D12); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector16 = vector3D14.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double18 = vector3D15.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17); double double19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D12, vector3D17); double double20 = vector3D17.getDelta(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D5.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17); double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D3, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector27 = vector3D25.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D23.subtract((double) 0.0f, euclidean3DVector27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector31 = vector3D29.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30); double double32 = vector3D23.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34); double double36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D23, vector3D33); org.apache.commons.math3.geometry.Space space37 = vector3D33.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector41 = vector3D39.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40); double double42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D38, vector3D40); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D40, vector3D43); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector47 = vector3D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = vector3D46.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D48); double double50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D48); org.apache.commons.math3.geometry.Space space51 = vector3D43.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D43.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = vector3D3.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector60 = vector3D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); double double61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D57, vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D59, vector3D62); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector66 = vector3D64.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D65); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double68 = vector3D65.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D62, vector3D67); boolean boolean71 = vector3D62.equals((java.lang.Object) 100); double double72 = vector3D56.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62); double double73 = vector3D56.getZ(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector75 = vector3D56.scalarMultiply((-1.5306224308482248d)); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D54, vector3D56); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(euclidean3DVector10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(euclidean3DVector16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(euclidean3DVector27); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(euclidean3DVector31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(euclidean3DVector35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d); org.junit.Assert.assertNotNull(space37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(euclidean3DVector41); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(euclidean3DVector47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(space51); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(euclidean3DVector60); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(euclidean3DVector66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.4142135623730951d + "'", double72 == 1.4142135623730951d); org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d)); org.junit.Assert.assertNotNull(euclidean3DVector75); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line76.closestPoint(line78); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) '#', 10.0d); double double78 = line74.distance(vector3D77); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line74.pointAt((double) 1.0f); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line74.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double78)); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line74.pointAt(6.691673596021348E41d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line74.getDirection(); double double81 = vector3D80.getNorm1(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertTrue(Double.isNaN(double81)); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.pointAt(0.69532380896874d); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector83 = vector3D81.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D82); double double84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D80, vector3D82); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D82, vector3D85); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector89 = vector3D87.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double91 = vector3D88.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); double double92 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D85, vector3D90); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D93 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I; double double94 = vector3D90.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D93); double double95 = vector3D90.getDelta(); org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D96 = line75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D97 = vector3D90.normalize(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(euclidean3DVector83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(euclidean3DVector89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 2.0d + "'", double94 == 2.0d); org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d); org.junit.Assert.assertNotNull(vector1D96); org.junit.Assert.assertNotNull(vector3D97); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line76.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = line76.revert(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector80 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector81 = line79.toSpace(euclidean1DVector80); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(line79); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line75.pointAt(1.401298464324817E-45d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = null; // The following exception was thrown during execution in test generation try { double double82 = line75.getAbscissa(vector3D81); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D80); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector2 = vector3D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D1.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = vector3D3.scalarMultiply((double) (byte) -1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D9, vector3D11); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector14 = vector3D8.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D11.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector22 = vector3D20.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D23, vector3D25); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D25, vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector32 = vector3D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double34 = vector3D31.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D28, vector3D33); boolean boolean37 = vector3D28.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D28.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D21.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0.0d, vector3D16, (double) 3.8146973E-6f, vector3D18, 96.99999999999999d, vector3D21); double double42 = vector3D16.getNorm1(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector47 = vector3D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D43.subtract((double) 0.0f, euclidean3DVector47); double double49 = vector3D48.getZ(); double double50 = vector3D48.getNorm1(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector54 = vector3D52.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D51, vector3D53); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D53, vector3D56); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector60 = vector3D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double62 = vector3D59.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D56, vector3D61); boolean boolean65 = vector3D56.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector69 = vector3D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D66, vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D68, vector3D71); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D56, vector3D68); double double74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D48, vector3D56); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D48.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = vector3D16.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector77 = vector3D5.subtract(7.043958477050381d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; java.lang.String str79 = vector3D78.toString(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = vector3D78.orthogonal(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D16, vector3D78); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector85 = vector3D83.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84); double double86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D82, vector3D84); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D84, vector3D87); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D89.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D92 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double93 = vector3D90.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D92); double double94 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D87, vector3D92); org.apache.commons.math3.geometry.Space space95 = vector3D87.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D97 = vector3D87.scalarMultiply(0.0d); double double98 = vector3D16.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(euclidean3DVector2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector14); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(euclidean3DVector22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(euclidean3DVector32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(euclidean3DVector47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertNotNull(euclidean3DVector54); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(euclidean3DVector60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(euclidean3DVector69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(euclidean3DVector77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{1; 0; 0}" + "'", str79, "{1; 0; 0}"); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(euclidean3DVector85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); org.junit.Assert.assertNotNull(space95); org.junit.Assert.assertNotNull(vector3D97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.pointAt(115.51280198884056d); double double78 = vector3D77.getNormSq(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertTrue(Double.isNaN(double78)); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector81 = vector3D79.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); double double82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D78, vector3D80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D80, vector3D83); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector87 = vector3D85.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double89 = vector3D86.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88); double double90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D83, vector3D88); boolean boolean92 = vector3D83.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D94 = vector3D83.scalarMultiply(0.0d); double double95 = line76.getAbscissa(vector3D94); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D96 = line76.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(euclidean3DVector81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(euclidean3DVector87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertTrue(Double.isNaN(double95)); org.junit.Assert.assertNotNull(vector3D96); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector81 = vector3D79.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); double double82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D78, vector3D80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D80, vector3D83); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector87 = vector3D85.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double89 = vector3D86.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88); double double90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D83, vector3D88); boolean boolean92 = vector3D83.equals((java.lang.Object) 100); double double93 = vector3D77.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D95 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; boolean boolean96 = vector3D95.isNaN(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D97 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(2.99822295029797d, vector3D77, 8.271806125530277E-25d, vector3D95); boolean boolean98 = line74.contains(vector3D95); double double99 = vector3D95.getX(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(euclidean3DVector81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(euclidean3DVector87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.4142135623730951d + "'", double93 == 1.4142135623730951d); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); org.junit.Assert.assertTrue("'" + double99 + "' != '" + 0.0d + "'", double99 == 0.0d); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D79); double double81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D77, vector3D79); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D79, vector3D82); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D84.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double88 = vector3D85.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D82, vector3D87); double double90 = vector3D87.getDelta(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = vector3D87.negate(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector92 = line75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D87); java.text.NumberFormat numberFormat93 = null; // The following exception was thrown during execution in test generation try { java.lang.String str94 = vector3D87.toString(numberFormat93); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(euclidean3DVector80); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(euclidean3DVector86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertNotNull(euclidean1DVector92); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line76.getDirection(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D79); double double81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D77, vector3D79); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D79, vector3D82); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D84.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double88 = vector3D85.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D82, vector3D87); double double90 = vector3D87.getDelta(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = vector3D87.negate(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector92 = line75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector93 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D94 = vector3D87.subtract(euclidean3DVector93); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(euclidean3DVector80); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(euclidean3DVector86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertNotNull(euclidean1DVector92); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line74.pointAt(6.691673596021348E41d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line74.pointAt((double) (-149L)); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D81); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) '#', 10.0d); double double78 = line74.distance(vector3D77); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line74.getDirection(); java.lang.String str80 = vector3D79.toString(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double78)); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{(NaN); (NaN); (NaN)}" + "'", str80, "{(NaN); (NaN); (NaN)}"); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector2 = vector3D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D1.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = vector3D3.scalarMultiply((double) (byte) -1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D9, vector3D11); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector14 = vector3D8.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D11.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector22 = vector3D20.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D23, vector3D25); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D25, vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector32 = vector3D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double34 = vector3D31.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D28, vector3D33); boolean boolean37 = vector3D28.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D28.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D21.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0.0d, vector3D16, (double) 3.8146973E-6f, vector3D18, 96.99999999999999d, vector3D21); double double42 = vector3D16.getNorm1(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector47 = vector3D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D43.subtract((double) 0.0f, euclidean3DVector47); double double49 = vector3D48.getZ(); double double50 = vector3D48.getNorm1(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector54 = vector3D52.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D51, vector3D53); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D53, vector3D56); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector60 = vector3D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double62 = vector3D59.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D56, vector3D61); boolean boolean65 = vector3D56.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector69 = vector3D67.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D66, vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D68, vector3D71); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D56, vector3D68); double double74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceSq(vector3D48, vector3D56); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D48.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = vector3D16.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector77 = vector3D5.subtract(7.043958477050381d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; java.lang.String str79 = vector3D78.toString(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = vector3D78.orthogonal(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D16, vector3D78); double double82 = vector3D78.getNormInf(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(euclidean3DVector2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector14); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(euclidean3DVector22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(euclidean3DVector32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(euclidean3DVector47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertNotNull(euclidean3DVector54); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(euclidean3DVector60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(euclidean3DVector69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(euclidean3DVector77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{1; 0; 0}" + "'", str79, "{1; 0; 0}"); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line75.pointAt((double) (byte) 10); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = vector3D80.orthogonal(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.pointAt(38961.10039827608d); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D79); double double81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D77, vector3D79); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D79, vector3D82); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D84.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double88 = vector3D85.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D82, vector3D87); double double90 = vector3D87.getDelta(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = vector3D87.negate(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector92 = line75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double93 = vector3D87.getNormInf(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(euclidean3DVector80); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(euclidean3DVector86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertNotNull(euclidean1DVector92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0d + "'", double93 == 1.0d); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; double double79 = vector3D78.getDelta(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = vector3D78.scalarMultiply((-17.999999999999996d)); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = vector3D81.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector87 = vector3D85.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); double double88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D84, vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D86, vector3D89); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D92 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector93 = vector3D91.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D92); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D94 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double95 = vector3D92.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D94); double double96 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D89, vector3D94); double double97 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D81, vector3D94); double double98 = line77.getAbscissa(vector3D81); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(line77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertTrue(Double.isNaN(double79)); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(euclidean3DVector87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertNotNull(euclidean3DVector93); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d); org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.0d + "'", double97 == 1.0d); org.junit.Assert.assertTrue(Double.isNaN(double98)); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = line75.pointAt(1.817884356931778d); org.apache.commons.math3.geometry.euclidean.threed.Line line84 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D83); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = vector3D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D79, vector3D81); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector84 = vector3D78.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double85 = vector3D78.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D89.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); double double92 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D88, vector3D90); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector93 = vector3D86.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); double double94 = line75.getAbscissa(vector3D86); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(line77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(euclidean3DVector82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector93); org.junit.Assert.assertTrue(Double.isNaN(double94)); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D0.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double7 = vector3D0.getY(); java.lang.String str8 = vector3D0.toString(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector10 = vector3D0.scalarMultiply(Double.POSITIVE_INFINITY); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector14 = vector3D12.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D11, vector3D13); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D13, vector3D16); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector23 = vector3D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D20, vector3D22); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D19.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double26 = vector3D19.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D19.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D13.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D28.negate(); double[] doubleArray31 = vector3D28.toArray(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line32 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D0, vector3D28); org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathIllegalArgumentException; message: zero norm"); } catch (org.apache.commons.math3.exception.MathIllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{1; 0; 0}" + "'", str8, "{1; 0; 0}"); org.junit.Assert.assertNotNull(euclidean3DVector10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(euclidean3DVector14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(euclidean3DVector23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 0.0, 0.0]"); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); boolean boolean79 = vector3D78.isInfinite(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = vector3D78.getZero(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(euclidean3DVector80); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine80 = line79.wholeLine(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(line79); org.junit.Assert.assertNotNull(subLine80); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.pointAt(115.51280198884056d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = vector3D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D79, vector3D81); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D81, vector3D84); double double86 = vector3D78.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = vector3D84.getZero(); boolean boolean88 = line74.contains(vector3D87); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; boolean boolean90 = vector3D89.isNaN(); double double91 = vector3D89.getNormSq(); double double92 = line74.distance(vector3D89); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D94 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D95 = vector3D94.negate(); org.apache.commons.math3.geometry.Space space96 = vector3D94.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D97 = vector3D89.subtract(1.817884356931778d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D94); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(euclidean3DVector82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2.0d + "'", double86 == 2.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d); org.junit.Assert.assertTrue(Double.isNaN(double92)); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertNotNull(space96); org.junit.Assert.assertNotNull(vector3D97); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line76.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = line76.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line79.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line79.getDirection(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(line79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D0.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = vector3D0.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J; boolean boolean9 = vector3D8.isNaN(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D7.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector15 = vector3D13.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D12, vector3D14); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D14, vector3D17); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector21 = vector3D19.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double23 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D17, vector3D22); org.apache.commons.math3.geometry.Space space25 = vector3D17.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D17.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector31 = vector3D29.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30); double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D28, vector3D30); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D30, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector37 = vector3D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double39 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D33, vector3D38); boolean boolean42 = vector3D33.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D33, vector3D45); boolean boolean51 = vector3D33.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector54 = vector3D52.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector58 = vector3D56.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D55, vector3D57); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D57, vector3D60); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double66 = vector3D63.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D65); double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D60, vector3D65); boolean boolean69 = vector3D60.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D60.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D53.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector76 = vector3D74.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); double double77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D73, vector3D75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D75, vector3D78); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = vector3D75.getZero(); double double81 = vector3D71.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D71, vector3D82); double double84 = vector3D82.getNormSq(); double double85 = vector3D33.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math3.geometry.euclidean.threed.Line line86 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D27, vector3D82); org.apache.commons.math3.geometry.euclidean.threed.Line line87 = line86.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line88 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = line88.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine90 = line88.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line91 = line88.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D92 = line91.getOrigin(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector93 = vector3D10.subtract(1756.241817258781d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D92); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(euclidean3DVector15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(euclidean3DVector21); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(space25); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(euclidean3DVector31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(euclidean3DVector37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertNotNull(euclidean3DVector54); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertNotNull(euclidean3DVector58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(euclidean3DVector76); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + Double.POSITIVE_INFINITY + "'", double83 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double84 + "' != '" + Double.POSITIVE_INFINITY + "'", double84 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double85 + "' != '" + Double.POSITIVE_INFINITY + "'", double85 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line87); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(subLine90); org.junit.Assert.assertNotNull(line91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertNotNull(euclidean3DVector93); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; boolean boolean1 = vector3D0.isNaN(); double double2 = vector3D0.getNormSq(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector7 = vector3D5.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6); double double8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D4, vector3D6); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D3.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D6.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector14 = vector3D12.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D18.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector28 = vector3D26.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D25, vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D27, vector3D30); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector37 = vector3D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D34, vector3D36); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector39 = vector3D33.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double40 = vector3D33.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D27.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D42); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) ' ', vector3D18, (double) (short) 0, vector3D27); double double45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D13, vector3D44); org.apache.commons.math3.geometry.euclidean.threed.Line line46 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D6, vector3D44); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector53 = vector3D51.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D49.subtract((double) 0.0f, euclidean3DVector53); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector57 = vector3D55.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = vector3D49.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector61 = vector3D59.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D49, vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector68 = vector3D66.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D65, vector3D67); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector70 = vector3D64.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double71 = vector3D64.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector74 = vector3D72.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D73); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double76 = vector3D73.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector77 = vector3D64.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector81 = vector3D79.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D80.normalize(); double double83 = vector3D80.getX(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 1.2676506E31f, vector3D49, 8.271806125530277E-25d, vector3D64, 11013.232920103323d, vector3D80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector89 = vector3D87.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88); double double90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D86, vector3D88); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D85.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88); double double92 = vector3D85.getNormInf(); double double93 = vector3D64.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D94 = vector3D6.add(2893.3788082003834d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D85); double double95 = vector3D0.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(euclidean3DVector7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(euclidean3DVector14); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(euclidean3DVector28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(euclidean3DVector37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 31.0d + "'", double45 == 31.0d); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(euclidean3DVector53); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(euclidean3DVector57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(euclidean3DVector61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(euclidean3DVector68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertNotNull(euclidean3DVector74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(euclidean3DVector81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(euclidean3DVector89); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertTrue("'" + double95 + "' != '" + 2.0d + "'", double95 == 2.0d); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = line74.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = line74.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getOrigin(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector78 = vector3D77.normalize(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(euclidean3DVector78); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.pointAt(115.51280198884056d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = vector3D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D79, vector3D81); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D81, vector3D84); double double86 = vector3D78.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = vector3D84.getZero(); boolean boolean88 = line74.contains(vector3D87); org.apache.commons.math3.geometry.euclidean.threed.Line line89 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector90 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D91 = line89.toSubSpace(euclidean3DVector90); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(euclidean3DVector82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2.0d + "'", double86 == 2.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); boolean boolean14 = vector3D5.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector18 = vector3D16.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17); double double19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D15, vector3D17); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D17, vector3D20); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D5, vector3D17); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector27 = vector3D25.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D24, vector3D26); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector29 = vector3D23.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double30 = vector3D22.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34); double double36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D32, vector3D34); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D34, vector3D37); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector41 = vector3D39.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double43 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D42); double double44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D37, vector3D42); boolean boolean46 = vector3D37.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector50 = vector3D48.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D47, vector3D49); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D49, vector3D52); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D37, vector3D49); boolean boolean55 = vector3D37.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D26.subtract(1.2110908904786679E-5d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37); boolean boolean57 = vector3D37.isNaN(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector62 = vector3D60.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D59, vector3D61); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D58.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double65 = vector3D58.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = vector3D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector71 = vector3D69.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D68, vector3D70); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector73 = vector3D66.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D37, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = line74.pointAt(5.0d); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(euclidean3DVector18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(euclidean3DVector27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(euclidean3DVector35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(euclidean3DVector41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertNotNull(euclidean3DVector50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(euclidean3DVector62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertNotNull(euclidean3DVector71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector73); org.junit.Assert.assertNotNull(vector3D76); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line74.pointAt(6.691673596021348E41d); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line74.closestPoint(line80); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line76.pointAt((double) (-1)); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(Double.POSITIVE_INFINITY, 0.0d); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector83 = line76.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(euclidean1DVector83); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) '#', 10.0d); double double78 = line74.distance(vector3D77); double double79 = vector3D77.getX(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double78)); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.7582624003406016d + "'", double79 == 0.7582624003406016d); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line74.pointAt(6.691673596021348E41d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line74.pointAt(2.4082399653118496d); java.lang.String str82 = vector3D81.toString(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{(NaN); (NaN); (NaN)}" + "'", str82, "{(NaN); (NaN); (NaN)}"); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = line75.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(line78); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(10.000000000000002d, 0.7810814010480368d, (double) (-19)); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector5 = vector3D3.scalarMultiply(54.88255678933691d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector10 = vector3D8.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D7, vector3D9); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D6.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D9.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector17 = vector3D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector22 = vector3D20.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D19, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D21, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D21.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector31 = vector3D29.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30); double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D28, vector3D30); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D30, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector40 = vector3D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); double double41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D37, vector3D39); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D36.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); double double43 = vector3D36.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D36.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D30.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) ' ', vector3D21, (double) (short) 0, vector3D30); double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D16, vector3D47); org.apache.commons.math3.geometry.euclidean.threed.Line line49 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D9, vector3D47); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = line49.pointAt(11013.232920103323d); double double52 = vector3D3.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D51.normalize(); org.junit.Assert.assertNotNull(euclidean3DVector5); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(euclidean3DVector10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(euclidean3DVector17); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(euclidean3DVector22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(euclidean3DVector31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(euclidean3DVector40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 31.0d + "'", double48 == 31.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 110132.32920103325d + "'", double52 == 110132.32920103325d); org.junit.Assert.assertNotNull(vector3D53); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = null; // The following exception was thrown during execution in test generation try { double double77 = line75.getAbscissa(vector3D76); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector81 = vector3D79.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); double double82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D78, vector3D80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D80, vector3D83); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector87 = vector3D85.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double89 = vector3D86.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88); double double90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D83, vector3D88); boolean boolean92 = vector3D83.equals((java.lang.Object) 100); double double93 = vector3D77.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D95 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; boolean boolean96 = vector3D95.isNaN(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D97 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(2.99822295029797d, vector3D77, 8.271806125530277E-25d, vector3D95); boolean boolean98 = line74.contains(vector3D95); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine99 = line74.wholeLine(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(euclidean3DVector81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(euclidean3DVector87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.4142135623730951d + "'", double93 == 1.4142135623730951d); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false); org.junit.Assert.assertNotNull(subLine99); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line76.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = line76.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine80 = line79.wholeLine(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(line79); org.junit.Assert.assertNotNull(subLine80); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = vector3D79.normalize(); double double82 = vector3D79.getX(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector84 = vector3D79.scalarMultiply((-1.2180280666000018d)); double double85 = vector3D79.getNormSq(); boolean boolean86 = vector3D79.isInfinite(); boolean boolean87 = line74.contains(vector3D79); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(euclidean3DVector80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d); org.junit.Assert.assertNotNull(euclidean3DVector84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector81 = vector3D79.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); double double82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D78, vector3D80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D80, vector3D83); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector87 = vector3D85.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double89 = vector3D86.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D88); double double90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D83, vector3D88); boolean boolean92 = vector3D83.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D94 = vector3D83.scalarMultiply(0.0d); double double95 = line76.getAbscissa(vector3D94); org.apache.commons.math3.geometry.euclidean.threed.Line line96 = line76.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D97 = line96.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D98 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line99 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D97, vector3D98); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(euclidean3DVector81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(euclidean3DVector87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertTrue(Double.isNaN(double95)); org.junit.Assert.assertNotNull(line96); org.junit.Assert.assertNotNull(vector3D97); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = null; // The following exception was thrown during execution in test generation try { boolean boolean80 = line74.contains(vector3D79); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = line80.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line82 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = line80.pointAt(1.5197248130541445d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = line80.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(line80); org.junit.Assert.assertNotNull(line81); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(vector3D85); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.pointAt(115.51280198884056d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = vector3D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D79, vector3D81); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D81, vector3D84); double double86 = vector3D78.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = vector3D84.getZero(); boolean boolean88 = line74.contains(vector3D87); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; boolean boolean90 = vector3D89.isNaN(); double double91 = vector3D89.getNormSq(); double double92 = line74.distance(vector3D89); org.apache.commons.math3.geometry.euclidean.threed.Line line93 = line74.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(euclidean3DVector82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2.0d + "'", double86 == 2.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d); org.junit.Assert.assertTrue(Double.isNaN(double92)); org.junit.Assert.assertNotNull(line93); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line74.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) '#', 10.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D81.negate(); org.apache.commons.math3.geometry.Space space83 = vector3D82.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math3.geometry.Space space85 = vector3D84.getSpace(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(space83); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(space85); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine81 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = line75.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine83 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = line75.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(subLine81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(subLine83); org.junit.Assert.assertNotNull(vector3D84); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.pointAt(115.51280198884056d); boolean boolean78 = vector3D77.isInfinite(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D9, vector3D11); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector14 = vector3D8.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double15 = vector3D8.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D8.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D2.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D2.orthogonal(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector23 = vector3D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D20, vector3D22); org.apache.commons.math3.geometry.euclidean.threed.Line line25 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D19, vector3D20); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector29 = vector3D27.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); double double30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D26, vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D28, vector3D31); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = vector3D34.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D36); boolean boolean40 = vector3D31.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector44 = vector3D42.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D41, vector3D43); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D43, vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D31, vector3D43); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector53 = vector3D51.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D50, vector3D52); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D49.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double56 = vector3D48.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector61 = vector3D59.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D58, vector3D60); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D60, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector67 = vector3D65.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double69 = vector3D66.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D63, vector3D68); boolean boolean72 = vector3D63.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector76 = vector3D74.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); double double77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D73, vector3D75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D75, vector3D78); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D63, vector3D75); boolean boolean81 = vector3D63.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D52.subtract(1.2110908904786679E-5d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = vector3D20.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(euclidean3DVector23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(euclidean3DVector29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(euclidean3DVector35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(euclidean3DVector44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(euclidean3DVector53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(euclidean3DVector61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(euclidean3DVector67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(euclidean3DVector76); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = line80.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line82 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = line80.getDirection(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(line80); org.junit.Assert.assertNotNull(line81); org.junit.Assert.assertNotNull(vector3D83); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D3, vector3D6); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector10 = vector3D8.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double12 = vector3D9.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D6, vector3D11); org.apache.commons.math3.geometry.Space space14 = vector3D6.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D6.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector20 = vector3D18.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D17, vector3D19); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D19, vector3D22); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D24.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double28 = vector3D25.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D22, vector3D27); boolean boolean31 = vector3D22.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34); double double36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D32, vector3D34); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D34, vector3D37); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D22, vector3D34); boolean boolean40 = vector3D22.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector43 = vector3D41.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D42); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector47 = vector3D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D44, vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D46, vector3D49); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector53 = vector3D51.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double55 = vector3D52.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54); double double56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D49, vector3D54); boolean boolean58 = vector3D49.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D49.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = vector3D42.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D63.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D64); double double66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D62, vector3D64); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D64, vector3D67); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D64.getZero(); double double70 = vector3D60.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D60, vector3D71); double double73 = vector3D71.getNormSq(); double double74 = vector3D22.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D16, vector3D71); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine77 = line76.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line76.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((-1.0283659886096349E151d), vector3D80); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(euclidean3DVector10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(space14); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(euclidean3DVector20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(euclidean3DVector35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(euclidean3DVector43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(euclidean3DVector47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(euclidean3DVector53); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double74 + "' != '" + Double.POSITIVE_INFINITY + "'", double74 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line76); org.junit.Assert.assertNotNull(subLine77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D2.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); double double5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D1, vector3D3); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D0.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D3.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector11 = vector3D9.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector16 = vector3D14.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D13, vector3D15); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D15, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D15.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D22, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D24, vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector36 = vector3D30.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double37 = vector3D30.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D30.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D24.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) ' ', vector3D15, (double) (short) 0, vector3D24); double double42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D10, vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Line line43 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D3, vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double48 = vector3D45.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector53 = vector3D51.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D50, vector3D52); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D49.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double56 = vector3D49.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = vector3D49.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector62 = vector3D60.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D59, vector3D61); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D57.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector68 = vector3D66.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D65, vector3D67); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D67, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector74 = vector3D72.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D73); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double76 = vector3D73.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); double double77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D70, vector3D75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector80 = vector3D78.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = vector3D75.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D78); double double82 = vector3D61.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D78); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D45, vector3D61); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector84 = vector3D61.normalize(); double double85 = line43.distance(vector3D61); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector87 = vector3D61.subtract(euclidean3DVector86); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(euclidean3DVector11); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(euclidean3DVector16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 31.0d + "'", double42 == 31.0d); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(euclidean3DVector53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(euclidean3DVector62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(euclidean3DVector68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertNotNull(euclidean3DVector74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(euclidean3DVector80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line76); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line77.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D78); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = line74.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = line74.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = line74.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(line78); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); double[] doubleArray75 = vector3D15.toArray(); double[] doubleArray76 = null; boolean boolean77 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray75, doubleArray76); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.pointAt(0.69532380896874d); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = line75.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(line78); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; double double1 = vector3D0.getDelta(); boolean boolean2 = vector3D0.isNaN(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D0.negate(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector7 = vector3D5.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6); double double8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D4, vector3D6); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D6, vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector13 = vector3D11.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D12); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double15 = vector3D12.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D9, vector3D14); org.apache.commons.math3.geometry.Space space17 = vector3D9.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D9.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector23 = vector3D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D20, vector3D22); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D22, vector3D25); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector29 = vector3D27.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double31 = vector3D28.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30); double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D25, vector3D30); boolean boolean34 = vector3D25.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector38 = vector3D36.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D35, vector3D37); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D37, vector3D40); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D25, vector3D37); boolean boolean43 = vector3D25.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector50 = vector3D48.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D47, vector3D49); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D49, vector3D52); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector56 = vector3D54.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double58 = vector3D55.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D52, vector3D57); boolean boolean61 = vector3D52.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D52.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = vector3D45.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector68 = vector3D66.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D65, vector3D67); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D67, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D67.getZero(); double double73 = vector3D63.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D72); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D63, vector3D74); double double76 = vector3D74.getNormSq(); double double77 = vector3D25.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D74); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D19, vector3D74); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = line78.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine80 = line79.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = line79.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = line79.pointAt(1.401298464324817E-45d); org.apache.commons.math3.geometry.euclidean.threed.Line line85 = line79.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = line79.getDirection(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector87 = euclidean3DVector3.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue(Double.isNaN(double1)); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(euclidean3DVector7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(euclidean3DVector13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(space17); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(euclidean3DVector23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(euclidean3DVector29); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(euclidean3DVector38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertNotNull(euclidean3DVector50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertNotNull(euclidean3DVector56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(euclidean3DVector68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertTrue("'" + double75 + "' != '" + Double.POSITIVE_INFINITY + "'", double75 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double77 + "' != '" + Double.POSITIVE_INFINITY + "'", double77 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line79); org.junit.Assert.assertNotNull(subLine80); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(line85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(euclidean3DVector87); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = line76.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(line78); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector84 = vector3D82.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = vector3D83.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = vector3D83.negate(); double double87 = line81.getAbscissa(vector3D86); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(line80); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(euclidean3DVector84); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertTrue(Double.isNaN(double87)); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector2 = vector3D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D4.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D3, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D5, vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double14 = vector3D11.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D8, vector3D13); boolean boolean17 = vector3D8.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D8.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D1.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector24 = vector3D22.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23); double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D23); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D23, vector3D26); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D23.getZero(); double double29 = vector3D19.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D19, vector3D30); double double32 = vector3D30.getNormSq(); boolean boolean33 = vector3D30.isNaN(); double double34 = vector3D30.getY(); org.apache.commons.math3.geometry.Space space35 = vector3D30.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D30.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector39 = vector3D37.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D38.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D40.scalarMultiply((double) (byte) -1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector47 = vector3D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D44, vector3D46); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector49 = vector3D43.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D46.scalarMultiply((double) 0); double double52 = vector3D42.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double53 = vector3D46.getNormInf(); org.apache.commons.math3.geometry.euclidean.threed.Line line54 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D36, vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector59 = vector3D57.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D58); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D58.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D60.scalarMultiply((double) (byte) -1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector67 = vector3D65.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); double double68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D64, vector3D66); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector69 = vector3D63.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D66.scalarMultiply((double) 0); double double72 = vector3D62.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); java.lang.String str73 = vector3D62.toString(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = vector3D55.subtract(1.414847550405688E16d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D55.negate(); double double76 = vector3D75.getNorm(); org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = line54.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = line54.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line54.getDirection(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(euclidean3DVector2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(euclidean3DVector24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(space35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(euclidean3DVector39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(euclidean3DVector47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector49); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2.0d + "'", double52 == 2.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(euclidean3DVector59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(euclidean3DVector67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector69); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2.0d + "'", double72 == 2.0d); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{-1; -0; -0}" + "'", str73, "{-1; -0; -0}"); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d); org.junit.Assert.assertNotNull(vector1D77); org.junit.Assert.assertNotNull(line78); org.junit.Assert.assertNotNull(vector3D79); }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector2 = vector3D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D4.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D3, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D5, vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double14 = vector3D11.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D8, vector3D13); boolean boolean17 = vector3D8.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D8.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D1.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector24 = vector3D22.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23); double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D23); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D23, vector3D26); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D23.getZero(); double double29 = vector3D19.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D19, vector3D30); double double32 = vector3D30.getNormSq(); boolean boolean33 = vector3D30.isNaN(); double double34 = vector3D30.getY(); org.apache.commons.math3.geometry.Space space35 = vector3D30.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D30.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector39 = vector3D37.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D38.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D40.scalarMultiply((double) (byte) -1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector47 = vector3D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D44, vector3D46); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector49 = vector3D43.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D46.scalarMultiply((double) 0); double double52 = vector3D42.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double53 = vector3D46.getNormInf(); org.apache.commons.math3.geometry.euclidean.threed.Line line54 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D36, vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector58 = vector3D56.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D55, vector3D57); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D57, vector3D60); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double66 = vector3D63.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D65); double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D60, vector3D65); boolean boolean69 = vector3D60.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector73 = vector3D71.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D72); double double74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D70, vector3D72); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D72, vector3D75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D60, vector3D72); boolean boolean78 = vector3D60.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = vector3D46.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(euclidean3DVector2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(euclidean3DVector24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(space35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(euclidean3DVector39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(euclidean3DVector47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector49); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2.0d + "'", double52 == 2.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertNotNull(euclidean3DVector58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertNotNull(euclidean3DVector73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(vector3D79); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine81 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = line75.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = line75.pointAt(31.000000000000004d); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(subLine81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D84); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = line75.getDirection(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(line80); org.junit.Assert.assertNotNull(vector3D82); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = null; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D4.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = vector3D2.subtract((double) 0.0f, euclidean3DVector6); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector10 = vector3D8.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = vector3D2.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector14 = vector3D12.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D2, vector3D12); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector21 = vector3D19.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D18, vector3D20); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector23 = vector3D17.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double24 = vector3D17.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector27 = vector3D25.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double29 = vector3D26.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector30 = vector3D17.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = vector3D33.normalize(); double double36 = vector3D33.getX(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) 1.2676506E31f, vector3D2, 8.271806125530277E-25d, vector3D17, 11013.232920103323d, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D17.normalize(); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Line line39 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D0, vector3D38); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(euclidean3DVector10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(euclidean3DVector14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(euclidean3DVector21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(euclidean3DVector27); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector30); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d); org.junit.Assert.assertNotNull(vector3D38); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.pointAt(115.51280198884056d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = vector3D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D79, vector3D81); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D81, vector3D84); double double86 = vector3D78.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = vector3D84.getZero(); boolean boolean88 = line74.contains(vector3D87); org.apache.commons.math3.geometry.euclidean.threed.Line line89 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Line line90 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(euclidean3DVector82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2.0d + "'", double86 == 2.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.pointAt(115.51280198884056d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = vector3D80.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D79, vector3D81); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D81, vector3D84); double double86 = vector3D78.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = vector3D84.getZero(); boolean boolean88 = line74.contains(vector3D87); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = line74.getDirection(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(euclidean3DVector82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2.0d + "'", double86 == 2.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertNotNull(vector3D89); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector81 = line75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector85 = vector3D83.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84); double double86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D82, vector3D84); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D84, vector3D87); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D89.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D92 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double93 = vector3D90.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D92); double double94 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D87, vector3D92); org.apache.commons.math3.geometry.Space space95 = vector3D87.getSpace(); boolean boolean96 = vector3D87.isNaN(); double double97 = line75.distance(vector3D87); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(euclidean1DVector81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(euclidean3DVector85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); org.junit.Assert.assertNotNull(space95); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); org.junit.Assert.assertTrue(Double.isNaN(double97)); }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector2 = vector3D0.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D4.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D3, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D5, vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double14 = vector3D11.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D8, vector3D13); boolean boolean17 = vector3D8.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D8.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D1.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector24 = vector3D22.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23); double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D23); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D23, vector3D26); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D23.getZero(); double double29 = vector3D19.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D19, vector3D30); double double32 = vector3D30.getNormSq(); boolean boolean33 = vector3D30.isNaN(); double double34 = vector3D30.getY(); org.apache.commons.math3.geometry.Space space35 = vector3D30.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D30.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector39 = vector3D37.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D38.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D40.scalarMultiply((double) (byte) -1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector47 = vector3D45.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D44, vector3D46); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector49 = vector3D43.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D46.scalarMultiply((double) 0); double double52 = vector3D42.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double53 = vector3D46.getNormInf(); org.apache.commons.math3.geometry.euclidean.threed.Line line54 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D36, vector3D46); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector59 = vector3D57.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D58); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D58.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D60.scalarMultiply((double) (byte) -1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector67 = vector3D65.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); double double68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D64, vector3D66); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector69 = vector3D63.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D66.scalarMultiply((double) 0); double double72 = vector3D62.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); java.lang.String str73 = vector3D62.toString(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = vector3D55.subtract(1.414847550405688E16d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D55.negate(); double double76 = vector3D75.getNorm(); org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D77 = line54.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math3.geometry.Space space78 = vector3D75.getSpace(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(euclidean3DVector2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(euclidean3DVector24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(space35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(euclidean3DVector39); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(euclidean3DVector47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector49); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2.0d + "'", double52 == 2.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(euclidean3DVector59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(euclidean3DVector67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector69); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2.0d + "'", double72 == 2.0d); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "{-1; -0; -0}" + "'", str73, "{-1; -0; -0}"); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d); org.junit.Assert.assertNotNull(vector1D77); org.junit.Assert.assertNotNull(space78); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; boolean boolean1 = vector3D0.isNaN(); java.lang.String str2 = vector3D0.toString(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D4.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D3, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D5, vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double14 = vector3D11.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D8, vector3D13); org.apache.commons.math3.geometry.Space space16 = vector3D8.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D8.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector22 = vector3D20.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D19, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D21, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector28 = vector3D26.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double30 = vector3D27.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D24, vector3D29); boolean boolean33 = vector3D24.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector37 = vector3D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D34, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D36, vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D24, vector3D36); boolean boolean42 = vector3D24.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector45 = vector3D43.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector49 = vector3D47.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D48); double double50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D46, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D48, vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double57 = vector3D54.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D51, vector3D56); boolean boolean60 = vector3D51.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D51.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D44.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector67 = vector3D65.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); double double68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D64, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D66, vector3D69); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D66.getZero(); double double72 = vector3D62.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D73); double double75 = vector3D73.getNormSq(); double double76 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D73); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D18, vector3D73); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = line77.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line78.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line78.pointAt((double) (byte) 100); boolean boolean82 = vector3D81.isInfinite(); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(vector3D0, vector3D81); java.text.NumberFormat numberFormat84 = null; // The following exception was thrown during execution in test generation try { java.lang.String str85 = vector3D0.toString(numberFormat84); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{0; -1; 0}" + "'", str2, "{0; -1; 0}"); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(space16); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(euclidean3DVector22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(euclidean3DVector28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(euclidean3DVector37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(euclidean3DVector45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertNotNull(euclidean3DVector49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(euclidean3DVector67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + Double.POSITIVE_INFINITY + "'", double74 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double75 + "' != '" + Double.POSITIVE_INFINITY + "'", double75 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line78); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue(Double.isNaN(double83)); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line76.pointAt((double) (-1)); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line76); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = line76.pointAt((double) (-1022.9999f)); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D82); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line76); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line76.getOrigin(); double double79 = vector3D78.getY(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertTrue(Double.isNaN(double79)); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line75.pointAt(0.69532380896874d); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line75); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine81 = line80.wholeLine(); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector82 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector83 = line80.toSubSpace(euclidean3DVector82); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(subLine81); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; boolean boolean1 = vector3D0.isNaN(); java.lang.String str2 = vector3D0.toString(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector6 = vector3D4.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D3, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D5, vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double14 = vector3D11.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D8, vector3D13); org.apache.commons.math3.geometry.Space space16 = vector3D8.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D8.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector22 = vector3D20.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D19, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D21, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector28 = vector3D26.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double30 = vector3D27.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D24, vector3D29); boolean boolean33 = vector3D24.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector37 = vector3D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D34, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D36, vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D24, vector3D36); boolean boolean42 = vector3D24.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector45 = vector3D43.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector49 = vector3D47.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D48); double double50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D46, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D48, vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D53.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double57 = vector3D54.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D51, vector3D56); boolean boolean60 = vector3D51.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D51.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D44.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector67 = vector3D65.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66); double double68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D64, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D66, vector3D69); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D66.getZero(); double double72 = vector3D62.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D73); double double75 = vector3D73.getNormSq(); double double76 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D73); org.apache.commons.math3.geometry.euclidean.threed.Line line77 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D18, vector3D73); org.apache.commons.math3.geometry.euclidean.threed.Line line78 = line77.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine79 = line78.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line78.pointAt((double) (byte) 100); boolean boolean82 = vector3D81.isInfinite(); double double83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(vector3D0, vector3D81); double double84 = vector3D81.getX(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{0; -1; 0}" + "'", str2, "{0; -1; 0}"); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(euclidean3DVector6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(space16); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(euclidean3DVector22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(euclidean3DVector28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(euclidean3DVector37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(euclidean3DVector45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertNotNull(euclidean3DVector49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(euclidean3DVector67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + Double.POSITIVE_INFINITY + "'", double74 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double75 + "' != '" + Double.POSITIVE_INFINITY + "'", double75 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double76 + "' != '" + Double.POSITIVE_INFINITY + "'", double76 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line78); org.junit.Assert.assertNotNull(subLine79); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue(Double.isNaN(double83)); org.junit.Assert.assertTrue(Double.isNaN(double84)); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line75.pointAt(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector85 = vector3D83.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84); double double86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D82, vector3D84); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double88 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D84, vector3D87); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D90 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D89.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D92 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double93 = vector3D90.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D92); double double94 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D87, vector3D92); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D95 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I; double double96 = vector3D92.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D95); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D97 = vector3D95.orthogonal(); org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D98 = line75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D97); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D99 = line75.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(euclidean3DVector85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2.0d + "'", double96 == 2.0d); org.junit.Assert.assertNotNull(vector3D97); org.junit.Assert.assertNotNull(vector1D98); org.junit.Assert.assertNotNull(vector3D99); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine76 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = line75.pointAt((double) (byte) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = line75.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean1DVector81 = line75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D80); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine82 = line75.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line83 = line75.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line84 = line75.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(subLine76); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(euclidean1DVector81); org.junit.Assert.assertNotNull(subLine82); org.junit.Assert.assertNotNull(line83); org.junit.Assert.assertNotNull(line84); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line74.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = null; // The following exception was thrown during execution in test generation try { double double79 = line74.distance(vector3D78); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D10.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D9, vector3D11); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector14 = vector3D8.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double15 = vector3D8.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D8.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D2.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D2.orthogonal(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector23 = vector3D21.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D20, vector3D22); org.apache.commons.math3.geometry.euclidean.threed.Line line25 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D19, vector3D20); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D20.getZero(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(euclidean3DVector23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector26); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = null; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector7 = vector3D5.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6); double double8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D4, vector3D6); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D3.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D6.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector14 = vector3D12.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D18.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector28 = vector3D26.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D25, vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D27, vector3D30); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector37 = vector3D35.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D34, vector3D36); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector39 = vector3D33.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double40 = vector3D33.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D33.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D27.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D42); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) ' ', vector3D18, (double) (short) 0, vector3D27); double double45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D13, vector3D44); org.apache.commons.math3.geometry.euclidean.threed.Line line46 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D6, vector3D44); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = line46.pointAt(11013.232920103323d); // The following exception was thrown during execution in test generation try { org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((-1.2180280666000018d), vector3D1, 7.07423775202844E15d, vector3D48); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(euclidean3DVector7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(euclidean3DVector14); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(euclidean3DVector28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(euclidean3DVector37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 31.0d + "'", double45 == 31.0d); org.junit.Assert.assertNotNull(vector3D48); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(10.000000000000002d, 0.7810814010480368d, (double) (-19)); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector5 = vector3D3.scalarMultiply(54.88255678933691d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector10 = vector3D8.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D7, vector3D9); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = vector3D6.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D9.scalarMultiply((double) 0); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector17 = vector3D15.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector22 = vector3D20.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D19, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D21, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D21.getZero(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector31 = vector3D29.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D30); double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D28, vector3D30); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D30, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector40 = vector3D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); double double41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D37, vector3D39); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D36.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); double double43 = vector3D36.getY(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D36.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D30.subtract((double) (-1), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) ' ', vector3D21, (double) (short) 0, vector3D30); double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D16, vector3D47); org.apache.commons.math3.geometry.euclidean.threed.Line line49 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D9, vector3D47); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = line49.pointAt(11013.232920103323d); double double52 = vector3D3.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); double double53 = vector3D51.getNorm1(); org.junit.Assert.assertNotNull(euclidean3DVector5); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(euclidean3DVector10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector12); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(euclidean3DVector17); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(euclidean3DVector22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertNotNull(vector3D30); org.junit.Assert.assertNotNull(euclidean3DVector31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(euclidean3DVector40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 31.0d + "'", double48 == 31.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 110132.32920103325d + "'", double52 == 110132.32920103325d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 11013.232920103323d + "'", double53 == 11013.232920103323d); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector7 = vector3D5.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6); double double8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D4, vector3D6); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D6, vector3D9); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector13 = vector3D11.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D12); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double15 = vector3D12.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D9, vector3D14); boolean boolean18 = vector3D9.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D9.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D2.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D22, vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D24, vector3D27); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D24.getZero(); double double30 = vector3D20.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D29); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D20, vector3D31); double double33 = vector3D31.getNormSq(); boolean boolean34 = vector3D31.isNaN(); double double35 = vector3D31.getY(); org.apache.commons.math3.geometry.Space space36 = vector3D31.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D31.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector40 = vector3D38.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D39); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D39.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D41.scalarMultiply((double) (byte) -1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector48 = vector3D46.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47); double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D45, vector3D47); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector50 = vector3D44.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D47.scalarMultiply((double) 0); double double53 = vector3D43.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47); double double54 = vector3D47.getNormInf(); org.apache.commons.math3.geometry.euclidean.threed.Line line55 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D37, vector3D47); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector60 = vector3D58.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = vector3D59.normalize(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D61.scalarMultiply((double) (byte) -1); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector68 = vector3D66.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D65, vector3D67); org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector70 = vector3D64.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D67.scalarMultiply((double) 0); double double73 = vector3D63.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D67); java.lang.String str74 = vector3D63.toString(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D56.subtract(1.414847550405688E16d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = vector3D56.negate(); double double77 = vector3D76.getNorm(); org.apache.commons.math3.geometry.euclidean.oned.Vector1D vector1D78 = line55.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0.82747262898229d, vector3D76); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(euclidean3DVector7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(euclidean3DVector13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(space36); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(euclidean3DVector40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertNotNull(euclidean3DVector48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector50); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2.0d + "'", double53 == 2.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(euclidean3DVector60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(euclidean3DVector68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector70); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2.0d + "'", double73 == 2.0d); org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{-1; -0; -0}" + "'", str74, "{-1; -0; -0}"); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.0d + "'", double77 == 1.0d); org.junit.Assert.assertNotNull(vector1D78); }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line76.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = line76.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line79.getOrigin(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line79.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(line79); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line75 = line74.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line76 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = line76.getDirection(); org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine78 = line76.wholeLine(); org.apache.commons.math3.geometry.euclidean.threed.Line line79 = line76.revert(); org.apache.commons.math3.geometry.euclidean.threed.Line line80 = line76.revert(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = line80.getOrigin(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(line75); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(subLine78); org.junit.Assert.assertNotNull(line79); org.junit.Assert.assertNotNull(line80); org.junit.Assert.assertNotNull(vector3D81); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector3 = vector3D1.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D2); double double4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D0, vector3D2); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D2, vector3D5); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector9 = vector3D7.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double11 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D5, vector3D10); org.apache.commons.math3.geometry.Space space13 = vector3D5.getSpace(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D5.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D17.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D16, vector3D18); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D21); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector25 = vector3D23.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double27 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D21, vector3D26); boolean boolean30 = vector3D21.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D32.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D31, vector3D33); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D36); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D21, vector3D33); boolean boolean39 = vector3D21.isInfinite(); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector42 = vector3D40.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector46 = vector3D44.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D43, vector3D45); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D45, vector3D48); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector52 = vector3D50.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double54 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D48, vector3D53); boolean boolean57 = vector3D48.equals((java.lang.Object) 100); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D48.scalarMultiply(0.0d); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D41.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D62.add((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(vector3D61, vector3D63); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I; double double67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D63, vector3D66); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D63.getZero(); double double69 = vector3D59.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; double double71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D70); double double72 = vector3D70.getNormSq(); double double73 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Line line74 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D15, vector3D70); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) '#', 10.0d); double double78 = line74.distance(vector3D77); org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = line74.pointAt((double) 1.0f); org.apache.commons.math3.geometry.euclidean.threed.Line line81 = new org.apache.commons.math3.geometry.euclidean.threed.Line(line74); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(euclidean3DVector3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(vector3D5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(euclidean3DVector9); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(space13); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertNotNull(euclidean3DVector25); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(vector3D40); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertNotNull(euclidean3DVector42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(euclidean3DVector46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(euclidean3DVector52); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(vector3D59); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertNotNull(vector3D70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.POSITIVE_INFINITY + "'", double71 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double73 + "' != '" + Double.POSITIVE_INFINITY + "'", double73 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double78)); org.junit.Assert.assertNotNull(vector3D80); }
public void cannotAddSampleDataWithSizeMismatch() { double[] y = new double[]{1.0, 2.0}; double[][] x = new double[1][]; x[0] = new double[]{1.0, 0}; createRegression().newSampleData(y, x); }
public void testPerfectFit() { double[] betaHat = regression.estimateRegressionParameters(); TestUtils.assertEquals(betaHat, new double[]{ 11.0, 1.0 / 2.0, 2.0 / 3.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0 }, 1e-14); double[] residuals = regression.estimateResiduals(); TestUtils.assertEquals(residuals, new double[]{0d,0d,0d,0d,0d,0d}, 1e-14); RealMatrix errors = new Array2DRowRealMatrix(regression.estimateRegressionParametersVariance(), false); final double[] s = { 1.0, -1.0 / 2.0, -1.0 / 3.0, -1.0 / 4.0, -1.0 / 5.0, -1.0 / 6.0 }; RealMatrix referenceVariance = new Array2DRowRealMatrix(s.length, s.length); referenceVariance.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(int row, int column, double value) { if (row == 0) { return s[column]; } double x = s[row] * s[column]; return (row == column) ? 2 * x : x; } }); Assert.assertEquals(0.0, errors.subtract(referenceVariance).getNorm(), 5.0e-16 * referenceVariance.getNorm()); Assert.assertEquals(1, ((OLSMultipleLinearRegression) regression).calculateRSquared(), 1E-12); }
public void testLongly() { // Y values are first, then independent vars // Each row is one observation double[] design = new double[] { 60323,83.0,234289,2356,1590,107608,1947, 61122,88.5,259426,2325,1456,108632,1948, 60171,88.2,258054,3682,1616,109773,1949, 61187,89.5,284599,3351,1650,110929,1950, 63221,96.2,328975,2099,3099,112075,1951, 63639,98.1,346999,1932,3594,113270,1952, 64989,99.0,365385,1870,3547,115094,1953, 63761,100.0,363112,3578,3350,116219,1954, 66019,101.2,397469,2904,3048,117388,1955, 67857,104.6,419180,2822,2857,118734,1956, 68169,108.4,442769,2936,2798,120445,1957, 66513,110.8,444546,4681,2637,121950,1958, 68655,112.6,482704,3813,2552,123366,1959, 69564,114.2,502601,3931,2514,125368,1960, 69331,115.7,518173,4806,2572,127852,1961, 70551,116.9,554894,4007,2827,130081,1962 }; final int nobs = 16; final int nvars = 6; // Estimate the model OLSMultipleLinearRegression model = new OLSMultipleLinearRegression(); model.newSampleData(design, nobs, nvars); // Check expected beta values from NIST double[] betaHat = model.estimateRegressionParameters(); TestUtils.assertEquals(betaHat, new double[]{-3482258.63459582, 15.0618722713733, -0.358191792925910E-01,-2.02022980381683, -1.03322686717359,-0.511041056535807E-01, 1829.15146461355}, 2E-8); // // Check expected residuals from R double[] residuals = model.estimateResiduals(); TestUtils.assertEquals(residuals, new double[]{ 267.340029759711,-94.0139423988359,46.28716775752924, -410.114621930906,309.7145907602313,-249.3112153297231, -164.0489563956039,-13.18035686637081,14.30477260005235, 455.394094551857,-17.26892711483297,-39.0550425226967, -155.5499735953195,-85.6713080421283,341.9315139607727, -206.7578251937366}, 1E-8); // Check standard errors from NIST double[] errors = model.estimateRegressionParametersStandardErrors(); TestUtils.assertEquals(new double[] {890420.383607373, 84.9149257747669, 0.334910077722432E-01, 0.488399681651699, 0.214274163161675, 0.226073200069370, 455.478499142212}, errors, 1E-6); // Check regression standard error against R Assert.assertEquals(304.8540735619638, model.estimateRegressionStandardError(), 1E-10); // Check R-Square statistics against R Assert.assertEquals(0.995479004577296, model.calculateRSquared(), 1E-12); Assert.assertEquals(0.992465007628826, model.calculateAdjustedRSquared(), 1E-12); checkVarianceConsistency(model); // Estimate model without intercept model.setNoIntercept(true); model.newSampleData(design, nobs, nvars); // Check expected beta values from R betaHat = model.estimateRegressionParameters(); TestUtils.assertEquals(betaHat, new double[]{-52.99357013868291, 0.07107319907358, -0.42346585566399,-0.57256866841929, -0.41420358884978, 48.41786562001326}, 1E-11); // Check standard errors from R errors = model.estimateRegressionParametersStandardErrors(); TestUtils.assertEquals(new double[] {129.54486693117232, 0.03016640003786, 0.41773654056612, 0.27899087467676, 0.32128496193363, 17.68948737819961}, errors, 1E-11); // Check expected residuals from R residuals = model.estimateResiduals(); TestUtils.assertEquals(residuals, new double[]{ 279.90274927293092, -130.32465380836874, 90.73228661967445, -401.31252201634948, -440.46768772620027, -543.54512853774793, 201.32111639536299, 215.90889365977932, 73.09368242049943, 913.21694494481869, 424.82484953610174, -8.56475876776709, -361.32974610842876, 27.34560497213464, 151.28955976355002, -492.49937355336846}, 1E-10); // Check regression standard error against R Assert.assertEquals(475.1655079819517, model.estimateRegressionStandardError(), 1E-10); // Check R-Square statistics against R Assert.assertEquals(0.9999670130706, model.calculateRSquared(), 1E-12); Assert.assertEquals(0.999947220913, model.calculateAdjustedRSquared(), 1E-12); }
public void testSwissFertility() { double[] design = new double[] { 80.2,17.0,15,12,9.96, 83.1,45.1,6,9,84.84, 92.5,39.7,5,5,93.40, 85.8,36.5,12,7,33.77, 76.9,43.5,17,15,5.16, 76.1,35.3,9,7,90.57, 83.8,70.2,16,7,92.85, 92.4,67.8,14,8,97.16, 82.4,53.3,12,7,97.67, 82.9,45.2,16,13,91.38, 87.1,64.5,14,6,98.61, 64.1,62.0,21,12,8.52, 66.9,67.5,14,7,2.27, 68.9,60.7,19,12,4.43, 61.7,69.3,22,5,2.82, 68.3,72.6,18,2,24.20, 71.7,34.0,17,8,3.30, 55.7,19.4,26,28,12.11, 54.3,15.2,31,20,2.15, 65.1,73.0,19,9,2.84, 65.5,59.8,22,10,5.23, 65.0,55.1,14,3,4.52, 56.6,50.9,22,12,15.14, 57.4,54.1,20,6,4.20, 72.5,71.2,12,1,2.40, 74.2,58.1,14,8,5.23, 72.0,63.5,6,3,2.56, 60.5,60.8,16,10,7.72, 58.3,26.8,25,19,18.46, 65.4,49.5,15,8,6.10, 75.5,85.9,3,2,99.71, 69.3,84.9,7,6,99.68, 77.3,89.7,5,2,100.00, 70.5,78.2,12,6,98.96, 79.4,64.9,7,3,98.22, 65.0,75.9,9,9,99.06, 92.2,84.6,3,3,99.46, 79.3,63.1,13,13,96.83, 70.4,38.4,26,12,5.62, 65.7,7.7,29,11,13.79, 72.7,16.7,22,13,11.22, 64.4,17.6,35,32,16.92, 77.6,37.6,15,7,4.97, 67.6,18.7,25,7,8.65, 35.0,1.2,37,53,42.34, 44.7,46.6,16,29,50.43, 42.8,27.7,22,29,58.33 }; final int nobs = 47; final int nvars = 4; // Estimate the model OLSMultipleLinearRegression model = new OLSMultipleLinearRegression(); model.newSampleData(design, nobs, nvars); // Check expected beta values from R double[] betaHat = model.estimateRegressionParameters(); TestUtils.assertEquals(betaHat, new double[]{91.05542390271397, -0.22064551045715, -0.26058239824328, -0.96161238456030, 0.12441843147162}, 1E-12); // Check expected residuals from R double[] residuals = model.estimateResiduals(); TestUtils.assertEquals(residuals, new double[]{ 7.1044267859730512,1.6580347433531366, 4.6944952770029644,8.4548022690166160,13.6547432343186212, -9.3586864458500774,7.5822446330520386,15.5568995563859289, 0.8113090736598980,7.1186762732484308,7.4251378771228724, 2.6761316873234109,0.8351584810309354,7.1769991119615177, -3.8746753206299553,-3.1337779476387251,-0.1412575244091504, 1.1186809170469780,-6.3588097346816594,3.4039270429434074, 2.3374058329820175,-7.9272368576900503,-7.8361010968497959, -11.2597369269357070,0.9445333697827101,6.6544245101380328, -0.9146136301118665,-4.3152449403848570,-4.3536932047009183, -3.8907885169304661,-6.3027643926302188,-7.8308982189289091, -3.1792280015332750,-6.7167298771158226,-4.8469946718041754, -10.6335664353633685,11.1031134362036958,6.0084032641811733, 5.4326230830188482,-7.2375578629692230,2.1671550814448222, 15.0147574652763112,4.8625103516321015,-7.1597256413907706, -0.4515205619767598,-10.2916870903837587,-15.7812984571900063}, 1E-12); // Check standard errors from R double[] errors = model.estimateRegressionParametersStandardErrors(); TestUtils.assertEquals(new double[] {6.94881329475087, 0.07360008972340, 0.27410957467466, 0.19454551679325, 0.03726654773803}, errors, 1E-10); // Check regression standard error against R Assert.assertEquals(7.73642194433223, model.estimateRegressionStandardError(), 1E-12); // Check R-Square statistics against R Assert.assertEquals(0.649789742860228, model.calculateRSquared(), 1E-12); Assert.assertEquals(0.6164363850373927, model.calculateAdjustedRSquared(), 1E-12); checkVarianceConsistency(model); // Estimate the model with no intercept model = new OLSMultipleLinearRegression(); model.setNoIntercept(true); model.newSampleData(design, nobs, nvars); // Check expected beta values from R betaHat = model.estimateRegressionParameters(); TestUtils.assertEquals(betaHat, new double[]{0.52191832900513, 2.36588087917963, -0.94770353802795, 0.30851985863609}, 1E-12); // Check expected residuals from R residuals = model.estimateResiduals(); TestUtils.assertEquals(residuals, new double[]{ 44.138759883538249, 27.720705122356215, 35.873200836126799, 34.574619581211977, 26.600168342080213, 15.074636243026923, -12.704904871199814, 1.497443824078134, 2.691972687079431, 5.582798774291231, -4.422986561283165, -9.198581600334345, 4.481765170730647, 2.273520207553216, -22.649827853221336, -17.747900013943308, 20.298314638496436, 6.861405135329779, -8.684712790954924, -10.298639278062371, -9.896618896845819, 4.568568616351242, -15.313570491727944, -13.762961360873966, 7.156100301980509, 16.722282219843990, 26.716200609071898, -1.991466398777079, -2.523342564719335, 9.776486693095093, -5.297535127628603, -16.639070567471094, -10.302057295211819, -23.549487860816846, 1.506624392156384, -17.939174438345930, 13.105792202765040, -1.943329906928462, -1.516005841666695, -0.759066561832886, 20.793137744128977, -2.485236153005426, 27.588238710486976, 2.658333257106881, -15.998337823623046, -5.550742066720694, -14.219077806826615}, 1E-12); // Check standard errors from R errors = model.estimateRegressionParametersStandardErrors(); TestUtils.assertEquals(new double[] {0.10470063765677, 0.41684100584290, 0.43370143099691, 0.07694953606522}, errors, 1E-10); // Check regression standard error against R Assert.assertEquals(17.24710630547, model.estimateRegressionStandardError(), 1E-10); // Check R-Square statistics against R Assert.assertEquals(0.946350722085, model.calculateRSquared(), 1E-12); Assert.assertEquals(0.9413600915813, model.calculateAdjustedRSquared(), 1E-12); }
public void testHat() { /* * This example is from "The Hat Matrix in Regression and ANOVA", * David C. Hoaglin and Roy E. Welsch, * The American Statistician, Vol. 32, No. 1 (Feb., 1978), pp. 17-22. * */ double[] design = new double[] { 11.14, .499, 11.1, 12.74, .558, 8.9, 13.13, .604, 8.8, 11.51, .441, 8.9, 12.38, .550, 8.8, 12.60, .528, 9.9, 11.13, .418, 10.7, 11.7, .480, 10.5, 11.02, .406, 10.5, 11.41, .467, 10.7 }; int nobs = 10; int nvars = 2; // Estimate the model OLSMultipleLinearRegression model = new OLSMultipleLinearRegression(); model.newSampleData(design, nobs, nvars); RealMatrix hat = model.calculateHat(); // Reference data is upper half of symmetric hat matrix double[] referenceData = new double[] { .418, -.002, .079, -.274, -.046, .181, .128, .222, .050, .242, .242, .292, .136, .243, .128, -.041, .033, -.035, .004, .417, -.019, .273, .187, -.126, .044, -.153, .004, .604, .197, -.038, .168, -.022, .275, -.028, .252, .111, -.030, .019, -.010, -.010, .148, .042, .117, .012, .111, .262, .145, .277, .174, .154, .120, .168, .315, .148, .187 }; // Check against reference data and verify symmetry int k = 0; for (int i = 0; i < 10; i++) { for (int j = i; j < 10; j++) { Assert.assertEquals(referenceData[k], hat.getEntry(i, j), 10e-3); Assert.assertEquals(hat.getEntry(i, j), hat.getEntry(j, i), 10e-12); k++; } } /* * Verify that residuals computed using the hat matrix are close to * what we get from direct computation, i.e. r = (I - H) y */ double[] residuals = model.estimateResiduals(); RealMatrix I = MatrixUtils.createRealIdentityMatrix(10); double[] hatResiduals = I.subtract(hat).operate(model.getY()).toArray(); TestUtils.assertEquals(residuals, hatResiduals, 10e-12); }
public void testYVariance() { // assumes: y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0}; OLSMultipleLinearRegression model = new OLSMultipleLinearRegression(); model.newSampleData(y, x); TestUtils.assertEquals(model.calculateYVariance(), 3.5, 0); }
public void testNewSample2() { double[] y = new double[] {1, 2, 3, 4}; double[][] x = new double[][] { {19, 22, 33}, {20, 30, 40}, {25, 35, 45}, {27, 37, 47} }; OLSMultipleLinearRegression regression = new OLSMultipleLinearRegression(); regression.newSampleData(y, x); RealMatrix combinedX = regression.getX().copy(); RealVector combinedY = regression.getY().copy(); regression.newXSampleData(x); regression.newYSampleData(y); Assert.assertEquals(combinedX, regression.getX()); Assert.assertEquals(combinedY, regression.getY()); // No intercept regression.setNoIntercept(true); regression.newSampleData(y, x); combinedX = regression.getX().copy(); combinedY = regression.getY().copy(); regression.newXSampleData(x); regression.newYSampleData(y); Assert.assertEquals(combinedX, regression.getX()); Assert.assertEquals(combinedY, regression.getY()); }
public void testNewSampleDataYNull() { createRegression().newSampleData(null, new double[][] {}); }
public void testNewSampleDataXNull() { createRegression().newSampleData(new double[] {}, null); }
public void testWampler1() { double[] data = new double[]{ 1, 0, 6, 1, 63, 2, 364, 3, 1365, 4, 3906, 5, 9331, 6, 19608, 7, 37449, 8, 66430, 9, 111111, 10, 177156, 11, 271453, 12, 402234, 13, 579195, 14, 813616, 15, 1118481, 16, 1508598, 17, 2000719, 18, 2613660, 19, 3368421, 20}; OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();  final int nvars = 5; final int nobs = 21; double[] tmp = new double[(nvars + 1) * nobs]; int off = 0; int off2 = 0; for (int i = 0; i < nobs; i++) { tmp[off2] = data[off]; tmp[off2 + 1] = data[off + 1]; tmp[off2 + 2] = tmp[off2 + 1] * tmp[off2 + 1]; tmp[off2 + 3] = tmp[off2 + 1] * tmp[off2 + 2]; tmp[off2 + 4] = tmp[off2 + 1] * tmp[off2 + 3]; tmp[off2 + 5] = tmp[off2 + 1] * tmp[off2 + 4]; off2 += (nvars + 1); off += 2; } model.newSampleData(tmp, nobs, nvars); double[] betaHat = model.estimateRegressionParameters(); TestUtils.assertEquals(betaHat, new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, 1E-8); double[] se = model.estimateRegressionParametersStandardErrors(); TestUtils.assertEquals(se, new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 1E-8); TestUtils.assertEquals(1.0, model.calculateRSquared(), 1.0e-10); TestUtils.assertEquals(0, model.estimateErrorVariance(), 1.0e-7); TestUtils.assertEquals(0.00, model.calculateResidualSumOfSquares(), 1.0e-6); return; }
public void testWampler2() { double[] data = new double[]{ 1.00000, 0, 1.11111, 1, 1.24992, 2, 1.42753, 3, 1.65984, 4, 1.96875, 5, 2.38336, 6, 2.94117, 7, 3.68928, 8, 4.68559, 9, 6.00000, 10, 7.71561, 11, 9.92992, 12, 12.75603, 13, 16.32384, 14, 20.78125, 15, 26.29536, 16, 33.05367, 17, 41.26528, 18, 51.16209, 19, 63.00000, 20}; OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();  final int nvars = 5; final int nobs = 21; double[] tmp = new double[(nvars + 1) * nobs]; int off = 0; int off2 = 0; for (int i = 0; i < nobs; i++) { tmp[off2] = data[off]; tmp[off2 + 1] = data[off + 1]; tmp[off2 + 2] = tmp[off2 + 1] * tmp[off2 + 1]; tmp[off2 + 3] = tmp[off2 + 1] * tmp[off2 + 2]; tmp[off2 + 4] = tmp[off2 + 1] * tmp[off2 + 3]; tmp[off2 + 5] = tmp[off2 + 1] * tmp[off2 + 4]; off2 += (nvars + 1); off += 2; } model.newSampleData(tmp, nobs, nvars); double[] betaHat = model.estimateRegressionParameters(); TestUtils.assertEquals(betaHat, new double[]{ 1.0, 1.0e-1, 1.0e-2, 1.0e-3, 1.0e-4, 1.0e-5}, 1E-8); double[] se = model.estimateRegressionParametersStandardErrors(); TestUtils.assertEquals(se, new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 1E-8); TestUtils.assertEquals(1.0, model.calculateRSquared(), 1.0e-10); TestUtils.assertEquals(0, model.estimateErrorVariance(), 1.0e-7); TestUtils.assertEquals(0.00, model.calculateResidualSumOfSquares(), 1.0e-6); return; }
public void testWampler3() { double[] data = new double[]{ 760, 0, -2042, 1, 2111, 2, -1684, 3, 3888, 4, 1858, 5, 11379, 6, 17560, 7, 39287, 8, 64382, 9, 113159, 10, 175108, 11, 273291, 12, 400186, 13, 581243, 14, 811568, 15, 1121004, 16, 1506550, 17, 2002767, 18, 2611612, 19, 3369180, 20}; OLSMultipleLinearRegression model = new OLSMultipleLinearRegression(); final int nvars = 5; final int nobs = 21; double[] tmp = new double[(nvars + 1) * nobs]; int off = 0; int off2 = 0; for (int i = 0; i < nobs; i++) { tmp[off2] = data[off]; tmp[off2 + 1] = data[off + 1]; tmp[off2 + 2] = tmp[off2 + 1] * tmp[off2 + 1]; tmp[off2 + 3] = tmp[off2 + 1] * tmp[off2 + 2]; tmp[off2 + 4] = tmp[off2 + 1] * tmp[off2 + 3]; tmp[off2 + 5] = tmp[off2 + 1] * tmp[off2 + 4]; off2 += (nvars + 1); off += 2; } model.newSampleData(tmp, nobs, nvars); double[] betaHat = model.estimateRegressionParameters(); TestUtils.assertEquals(betaHat, new double[]{ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, 1E-8); double[] se = model.estimateRegressionParametersStandardErrors(); TestUtils.assertEquals(se, new double[]{2152.32624678170, 2363.55173469681, 779.343524331583, 101.475507550350, 5.64566512170752, 0.112324854679312}, 1E-8); // TestUtils.assertEquals(.999995559025820, model.calculateRSquared(), 1.0e-10); TestUtils.assertEquals(5570284.53333333, model.estimateErrorVariance(), 1.0e-6); TestUtils.assertEquals(83554268.0000000, model.calculateResidualSumOfSquares(), 1.0e-5); return; }
public void testWampler4() { double[] data = new double[]{ 75901, 0, -204794, 1, 204863, 2, -204436, 3, 253665, 4, -200894, 5, 214131, 6, -185192, 7, 221249, 8, -138370, 9, 315911, 10, -27644, 11, 455253, 12, 197434, 13, 783995, 14, 608816, 15, 1370781, 16, 1303798, 17, 2205519, 18, 2408860, 19, 3444321, 20}; OLSMultipleLinearRegression model = new OLSMultipleLinearRegression(); final int nvars = 5; final int nobs = 21; double[] tmp = new double[(nvars + 1) * nobs]; int off = 0; int off2 = 0; for (int i = 0; i < nobs; i++) { tmp[off2] = data[off]; tmp[off2 + 1] = data[off + 1]; tmp[off2 + 2] = tmp[off2 + 1] * tmp[off2 + 1]; tmp[off2 + 3] = tmp[off2 + 1] * tmp[off2 + 2]; tmp[off2 + 4] = tmp[off2 + 1] * tmp[off2 + 3]; tmp[off2 + 5] = tmp[off2 + 1] * tmp[off2 + 4]; off2 += (nvars + 1); off += 2; } model.newSampleData(tmp, nobs, nvars); double[] betaHat = model.estimateRegressionParameters(); TestUtils.assertEquals(betaHat, new double[]{ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, 1E-6); double[] se = model.estimateRegressionParametersStandardErrors(); TestUtils.assertEquals(se, new double[]{215232.624678170, 236355.173469681, 77934.3524331583, 10147.5507550350, 564.566512170752, 11.2324854679312}, 1E-8); TestUtils.assertEquals(.957478440825662, model.calculateRSquared(), 1.0e-10); TestUtils.assertEquals(55702845333.3333, model.estimateErrorVariance(), 1.0e-4); TestUtils.assertEquals(835542680000.000, model.calculateResidualSumOfSquares(), 1.0e-3); return; }
public void canEstimateRegressionParameters(){ double[] beta = regression.estimateRegressionParameters(); Assert.assertEquals(getNumberOfRegressors(), beta.length); }
public void canEstimateResiduals(){ double[] e = regression.estimateResiduals(); Assert.assertEquals(getSampleSize(), e.length); }
public void canEstimateRegressionParametersVariance(){ double[][] variance = regression.estimateRegressionParametersVariance(); Assert.assertEquals(getNumberOfRegressors(), variance.length); }
public void canEstimateRegressandVariance(){ if (getSampleSize() > getNumberOfRegressors()) { double variance = regression.estimateRegressandVariance(); Assert.assertTrue(variance > 0.0); } }
public void testNewSample() { double[] design = new double[] { 1, 19, 22, 33, 2, 20, 30, 40, 3, 25, 35, 45, 4, 27, 37, 47 }; double[] y = new double[] {1, 2, 3, 4}; double[][] x = new double[][] { {19, 22, 33}, {20, 30, 40}, {25, 35, 45}, {27, 37, 47} }; AbstractMultipleLinearRegression regression = createRegression(); regression.newSampleData(design, 4, 3); RealMatrix flatX = regression.getX().copy(); RealVector flatY = regression.getY().copy(); regression.newXSampleData(x); regression.newYSampleData(y); Assert.assertEquals(flatX, regression.getX()); Assert.assertEquals(flatY, regression.getY()); // No intercept regression.setNoIntercept(true); regression.newSampleData(design, 4, 3); flatX = regression.getX().copy(); flatY = regression.getY().copy(); regression.newXSampleData(x); regression.newYSampleData(y); Assert.assertEquals(flatX, regression.getX()); Assert.assertEquals(flatY, regression.getY()); }
public void testNewSampleNullData() { double[] data = null; createRegression().newSampleData(data, 2, 3); }
public void testNewSampleInvalidData() { double[] data = new double[] {1, 2, 3, 4}; createRegression().newSampleData(data, 2, 3); }
public void testNewSampleInsufficientData() { double[] data = new double[] {1, 2, 3, 4}; createRegression().newSampleData(data, 1, 3); }
public void testXSampleDataNull() { createRegression().newXSampleData(null); }
public void testYSampleDataNull() { createRegression().newYSampleData(null); }
public void cannotAddXSampleData() { createRegression().newSampleData(new double[]{}, null, null); }
public void cannotAddNullYSampleData() { createRegression().newSampleData(null, new double[][]{}, null); }
public void cannotAddSampleDataWithSizeMismatch() { double[] y = new double[]{1.0, 2.0}; double[][] x = new double[1][]; x[0] = new double[]{1.0, 0}; createRegression().newSampleData(y, x, null); }
public void cannotAddNullCovarianceData() { createRegression().newSampleData(new double[]{}, new double[][]{}, null); }
public void notEnoughData() { double[]  reducedY = new double[y.length - 1]; double[][] reducedX = new double[x.length - 1][]; double[][] reducedO = new double[omega.length - 1][]; System.arraycopy(y,   0, reducedY, 0, reducedY.length); System.arraycopy(x,   0, reducedX, 0, reducedX.length); System.arraycopy(omega, 0, reducedO, 0, reducedO.length); createRegression().newSampleData(reducedY, reducedX, reducedO); }
public void cannotAddCovarianceDataWithSampleSizeMismatch() { double[] y = new double[]{1.0, 2.0}; double[][] x = new double[2][]; x[0] = new double[]{1.0, 0}; x[1] = new double[]{0, 1.0}; double[][] omega = new double[1][]; omega[0] = new double[]{1.0, 0}; createRegression().newSampleData(y, x, omega); }
public void cannotAddCovarianceDataThatIsNotSquare() { double[] y = new double[]{1.0, 2.0}; double[][] x = new double[2][]; x[0] = new double[]{1.0, 0}; x[1] = new double[]{0, 1.0}; double[][] omega = new double[3][]; omega[0] = new double[]{1.0, 0}; omega[1] = new double[]{0, 1.0}; omega[2] = new double[]{0, 2.0}; createRegression().newSampleData(y, x, omega); }
public void testYVariance() { // assumes: y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0}; GLSMultipleLinearRegression model = new GLSMultipleLinearRegression(); model.newSampleData(y, x, omega); TestUtils.assertEquals(model.calculateYVariance(), 3.5, 0); }
public void testNewSample2() { double[] y = new double[] {1, 2, 3, 4}; double[][] x = new double[][] { {19, 22, 33}, {20, 30, 40}, {25, 35, 45}, {27, 37, 47} }; double[][] covariance = MatrixUtils.createRealIdentityMatrix(4).scalarMultiply(2).getData(); GLSMultipleLinearRegression regression = new GLSMultipleLinearRegression(); regression.newSampleData(y, x, covariance); RealMatrix combinedX = regression.getX().copy(); RealVector combinedY = regression.getY().copy(); RealMatrix combinedCovInv = regression.getOmegaInverse(); regression.newXSampleData(x); regression.newYSampleData(y); Assert.assertEquals(combinedX, regression.getX()); Assert.assertEquals(combinedY, regression.getY()); Assert.assertEquals(combinedCovInv, regression.getOmegaInverse()); }
public void testGLSOLSConsistency() { RealMatrix identityCov = MatrixUtils.createRealIdentityMatrix(16); GLSMultipleLinearRegression glsModel = new GLSMultipleLinearRegression(); OLSMultipleLinearRegression olsModel = new OLSMultipleLinearRegression(); glsModel.newSampleData(longley, 16, 6); olsModel.newSampleData(longley, 16, 6); glsModel.newCovarianceData(identityCov.getData()); double[] olsBeta = olsModel.calculateBeta().toArray(); double[] glsBeta = glsModel.calculateBeta().toArray(); // TODO: Should have assertRelativelyEquals(double[], double[], eps) in TestUtils //    Should also add RealVector and RealMatrix versions for (int i = 0; i < olsBeta.length; i++) { TestUtils.assertRelativelyEquals(olsBeta[i], glsBeta[i], 10E-7); } }
public void testGLSEfficiency() { RandomGenerator rg = new JDKRandomGenerator(); rg.setSeed(200); // Seed has been selected to generate non-trivial covariance // Assume model has 16 observations (will use Longley data). Start by generating // non-constant variances for the 16 error terms. final int nObs = 16; double[] sigma = new double[nObs]; for (int i = 0; i < nObs; i++) { sigma[i] = 10 * rg.nextDouble(); } // Now generate 1000 error vectors to use to estimate the covariance matrix // Columns are draws on N(0, sigma[col]) final int numSeeds = 1000; RealMatrix errorSeeds = MatrixUtils.createRealMatrix(numSeeds, nObs); for (int i = 0; i < numSeeds; i++) { for (int j = 0; j < nObs; j++) { errorSeeds.setEntry(i, j, rg.nextGaussian() * sigma[j]); } } // Get covariance matrix for columns RealMatrix cov = (new Covariance(errorSeeds)).getCovarianceMatrix(); // Create a CorrelatedRandomVectorGenerator to use to generate correlated errors GaussianRandomGenerator rawGenerator = new GaussianRandomGenerator(rg); double[] errorMeans = new double[nObs]; // Counting on init to 0 here CorrelatedRandomVectorGenerator gen = new CorrelatedRandomVectorGenerator(errorMeans, cov, 1.0e-12 * cov.getNorm(), rawGenerator); // Now start generating models. Use Longley X matrix on LHS // and Longley OLS beta vector as "true" beta. Generate // Y values by XB + u where u is a CorrelatedRandomVector generated // from cov. OLSMultipleLinearRegression ols = new OLSMultipleLinearRegression(); ols.newSampleData(longley, nObs, 6); final RealVector b = ols.calculateBeta().copy(); final RealMatrix x = ols.getX().copy(); // Create a GLS model to reuse GLSMultipleLinearRegression gls = new GLSMultipleLinearRegression(); gls.newSampleData(longley, nObs, 6); gls.newCovarianceData(cov.getData()); // Create aggregators for stats measuring model performance DescriptiveStatistics olsBetaStats = new DescriptiveStatistics(); DescriptiveStatistics glsBetaStats = new DescriptiveStatistics(); // Generate Y vectors for 10000 models, estimate GLS and OLS and // Verify that OLS estimates are better final int nModels = 10000; for (int i = 0; i < nModels; i++) { // Generate y = xb + u with u cov RealVector u = MatrixUtils.createRealVector(gen.nextVector()); double[] y = u.add(x.operate(b)).toArray(); // Estimate OLS parameters ols.newYSampleData(y); RealVector olsBeta = ols.calculateBeta(); // Estimate GLS parameters gls.newYSampleData(y); RealVector glsBeta = gls.calculateBeta(); // Record deviations from "true" beta double dist = olsBeta.getDistance(b); olsBetaStats.addValue(dist * dist); dist = glsBeta.getDistance(b); glsBetaStats.addValue(dist * dist); } // Verify that GLS is on average more efficient, lower variance assert(olsBetaStats.getMean() > 1.5 * glsBetaStats.getMean()); assert(olsBetaStats.getStandardDeviation() > glsBetaStats.getStandardDeviation()); }
public void testInterpolateLinearDegenerateTwoSegment() { double x[] = { 0.0, 0.5, 1.0 }; double y[] = { 0.0, 0.5, 1.0 }; UnivariateInterpolator i = new LinearInterpolator(); UnivariateFunction f = i.interpolate(x, y); verifyInterpolation(f, x, y); // Verify coefficients using analytical values PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials(); double target[] = {y[0], 1d}; TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance); target = new double[]{y[1], 1d}; TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance); // Check interpolation Assert.assertEquals(0.0,f.value(0.0), interpolationTolerance); Assert.assertEquals(0.4,f.value(0.4), interpolationTolerance); Assert.assertEquals(1.0,f.value(1.0), interpolationTolerance); } @Test public void testInterpolateLinearDegenerateThreeSegment() { double x[] = { 0.0, 0.5, 1.0, 1.5 }; double y[] = { 0.0, 0.5, 1.0, 1.5 }; UnivariateInterpolator i = new LinearInterpolator(); UnivariateFunction f = i.interpolate(x, y); verifyInterpolation(f, x, y); // Verify coefficients using analytical values PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials(); double target[] = {y[0], 1d}; TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance); target = new double[]{y[1], 1d}; TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance); target = new double[]{y[2], 1d}; TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance); // Check interpolation Assert.assertEquals(0,f.value(0), interpolationTolerance); Assert.assertEquals(1.4,f.value(1.4), interpolationTolerance); Assert.assertEquals(1.5,f.value(1.5), interpolationTolerance); } @Test public void testInterpolateLinear() { double x[] = { 0.0, 0.5, 1.0 }; double y[] = { 0.0, 0.5, 0.0 }; UnivariateInterpolator i = new LinearInterpolator(); UnivariateFunction f = i.interpolate(x, y); verifyInterpolation(f, x, y); // Verify coefficients using analytical values PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials(); double target[] = {y[0], 1d}; TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance); target = new double[]{y[1], -1d}; TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance); } @Test public void testIllegalArguments() { // Data set arrays of different size. UnivariateInterpolator i = new LinearInterpolator(); try { double xval[] = { 0.0, 1.0 }; double yval[] = { 0.0, 1.0, 2.0 }; i.interpolate(xval, yval); Assert.fail("Failed to detect data set array with different sizes."); } catch (DimensionMismatchException iae) { // Expected. } // X values not sorted. try { double xval[] = { 0.0, 1.0, 0.5 }; double yval[] = { 0.0, 1.0, 2.0 }; i.interpolate(xval, yval); Assert.fail("Failed to detect unsorted arguments."); } catch (NonMonotonicSequenceException iae) { // Expected. } // Not enough data to interpolate. try { double xval[] = { 0.0 }; double yval[] = { 0.0 }; i.interpolate(xval, yval); Assert.fail("Failed to detect unsorted arguments."); } catch (NumberIsTooSmallException iae) { // Expected. } } /** * verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length. */ protected void verifyInterpolation(UnivariateFunction f, double x[], double y[]) { for (int i = 0; i < x.length; i++) { Assert.assertEquals(f.value(x[i]), y[i], knotTolerance); } } }
public void testInterpolateLinearDegenerateThreeSegment() { double x[] = { 0.0, 0.5, 1.0, 1.5 }; double y[] = { 0.0, 0.5, 1.0, 1.5 }; UnivariateInterpolator i = new LinearInterpolator(); UnivariateFunction f = i.interpolate(x, y); verifyInterpolation(f, x, y); // Verify coefficients using analytical values PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials(); double target[] = {y[0], 1d}; TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance); target = new double[]{y[1], 1d}; TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance); target = new double[]{y[2], 1d}; TestUtils.assertEquals(polynomials[2].getCoefficients(), target, coefficientTolerance); // Check interpolation Assert.assertEquals(0,f.value(0), interpolationTolerance); Assert.assertEquals(1.4,f.value(1.4), interpolationTolerance); Assert.assertEquals(1.5,f.value(1.5), interpolationTolerance); } @Test public void testInterpolateLinear() { double x[] = { 0.0, 0.5, 1.0 }; double y[] = { 0.0, 0.5, 0.0 }; UnivariateInterpolator i = new LinearInterpolator(); UnivariateFunction f = i.interpolate(x, y); verifyInterpolation(f, x, y); // Verify coefficients using analytical values PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials(); double target[] = {y[0], 1d}; TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance); target = new double[]{y[1], -1d}; TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance); } @Test public void testIllegalArguments() { // Data set arrays of different size. UnivariateInterpolator i = new LinearInterpolator(); try { double xval[] = { 0.0, 1.0 }; double yval[] = { 0.0, 1.0, 2.0 }; i.interpolate(xval, yval); Assert.fail("Failed to detect data set array with different sizes."); } catch (DimensionMismatchException iae) { // Expected. } // X values not sorted. try { double xval[] = { 0.0, 1.0, 0.5 }; double yval[] = { 0.0, 1.0, 2.0 }; i.interpolate(xval, yval); Assert.fail("Failed to detect unsorted arguments."); } catch (NonMonotonicSequenceException iae) { // Expected. } // Not enough data to interpolate. try { double xval[] = { 0.0 }; double yval[] = { 0.0 }; i.interpolate(xval, yval); Assert.fail("Failed to detect unsorted arguments."); } catch (NumberIsTooSmallException iae) { // Expected. } } /** * verifies that f(x[i]) = y[i] for i = 0..n-1 where n is common length. */ protected void verifyInterpolation(UnivariateFunction f, double x[], double y[]) { for (int i = 0; i < x.length; i++) { Assert.assertEquals(f.value(x[i]), y[i], knotTolerance); } } }
public void testInterpolateLinear() { double x[] = { 0.0, 0.5, 1.0 }; double y[] = { 0.0, 0.5, 0.0 }; UnivariateInterpolator i = new LinearInterpolator(); UnivariateFunction f = i.interpolate(x, y); verifyInterpolation(f, x, y); // Verify coefficients using analytical values PolynomialFunction polynomials[] = ((PolynomialSplineFunction) f).getPolynomials(); double target[] = {y[0], 1d}; TestUtils.assertEquals(polynomials[0].getCoefficients(), target, coefficientTolerance); target = new double[]{y[1], -1d}; TestUtils.assertEquals(polynomials[1].getCoefficients(), target, coefficientTolerance); }
public void testIllegalArguments() { // Data set arrays of different size. UnivariateInterpolator i = new LinearInterpolator(); try { double xval[] = { 0.0, 1.0 }; double yval[] = { 0.0, 1.0, 2.0 }; i.interpolate(xval, yval); Assert.fail("Failed to detect data set array with different sizes."); } catch (DimensionMismatchException iae) { // Expected. } // X values not sorted. try { double xval[] = { 0.0, 1.0, 0.5 }; double yval[] = { 0.0, 1.0, 2.0 }; i.interpolate(xval, yval); Assert.fail("Failed to detect unsorted arguments."); } catch (NonMonotonicSequenceException iae) { // Expected. } // Not enough data to interpolate. try { double xval[] = { 0.0 }; double yval[] = { 0.0 }; i.interpolate(xval, yval); Assert.fail("Failed to detect unsorted arguments."); } catch (NumberIsTooSmallException iae) { // Expected. } }
public void testTrivial() { LinearProblem problem = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 0 })); Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10); Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10); }
public void testColumnsPermutation() { LinearProblem problem = new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } }, new double[] { 4.0, 6.0, 1.0 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 0, 0 })); Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10); Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10); Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10); }
public void testNoDependency() { LinearProblem problem = new LinearProblem(new double[][] { { 2, 0, 0, 0, 0, 0 }, { 0, 2, 0, 0, 0, 0 }, { 0, 0, 2, 0, 0, 0 }, { 0, 0, 0, 2, 0, 0 }, { 0, 0, 0, 0, 2, 0 }, { 0, 0, 0, 0, 0, 2 } }, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 })); for (int i = 0; i < problem.target.length; ++i) { Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10); } }
public void testOneSet() { LinearProblem problem = new LinearProblem(new double[][] { { 1, 0, 0 }, { -1, 1, 0 }, { 0, -1, 1 } }, new double[] { 1, 1, 1}); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 0, 0, 0 })); Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10); Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10); Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10); }
public void testTwoSets() { final double epsilon = 1.0e-7; LinearProblem problem = new LinearProblem(new double[][] { { 2, 1,  0, 4,    0, 0 }, { -4, -2,  3, -7,    0, 0 }, { 4, 1, -2, 8,    0, 0 }, { 0, -3, -12, -1,    0, 0 }, { 0, 0,  0, 0, epsilon, 1 }, { 0, 0,  0, 0,    1, 1 } }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2}); final Preconditioner preconditioner = new Preconditioner() { public double[] precondition(double[] point, double[] r) { double[] d = r.clone(); d[0] /= 72.0; d[1] /= 30.0; d[2] /= 314.0; d[3] /= 260.0; d[4] /= 2 * (1 + epsilon * epsilon); d[5] /= 4.0; return d; } }; NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-13, 1e-13), new BrentSolver(), preconditioner); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 })); Assert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10); Assert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10); Assert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10); Assert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10); Assert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10); Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10); }
public void testNonInversible() { LinearProblem problem = new LinearProblem(new double[][] { { 1, 2, -3 }, { 2, 1, 3 }, { -3, 0, -9 } }, new double[] { 1, 1, 1 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 0, 0, 0 })); Assert.assertTrue(optimum.getValue() > 0.5); }
public void testIllConditioned() { LinearProblem problem1 = new LinearProblem(new double[][] { { 10.0, 7.0, 8.0, 7.0 }, { 7.0, 5.0, 6.0, 5.0 }, { 8.0, 6.0, 10.0, 9.0 }, { 7.0, 5.0, 9.0, 10.0 } }, new double[] { 32, 23, 33, 31 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-13, 1e-13), new BrentSolver(1e-15, 1e-15)); PointValuePair optimum1 = optimizer.optimize(new MaxEval(200), problem1.getObjectiveFunction(), problem1.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 0, 1, 2, 3 })); Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-4); Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-4); Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-4); Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-4); LinearProblem problem2 = new LinearProblem(new double[][] { { 10.00, 7.00, 8.10, 7.20 }, { 7.08, 5.04, 6.00, 5.00 }, { 8.00, 5.98, 9.89, 9.00 }, { 6.99, 4.99, 9.00, 9.98 } }, new double[] { 32, 23, 33, 31 }); PointValuePair optimum2 = optimizer.optimize(new MaxEval(200), problem2.getObjectiveFunction(), problem2.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 0, 1, 2, 3 })); Assert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-1); Assert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-1); Assert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-1); Assert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-1); }
public void testMoreEstimatedParametersSimple() { LinearProblem problem = new LinearProblem(new double[][] { { 3.0, 2.0, 0.0, 0.0 }, { 0.0, 1.0, -1.0, 1.0 }, { 2.0, 0.0, 1.0, 0.0 } }, new double[] { 7.0, 3.0, 5.0 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 7, 6, 5, 4 })); Assert.assertEquals(0, optimum.getValue(), 1.0e-10); }
public void testMoreEstimatedParametersUnsorted() { LinearProblem problem = new LinearProblem(new double[][] { { 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 1.0, 1.0, 1.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0, 1.0, -1.0 }, { 0.0, 0.0, -1.0, 1.0, 0.0, 1.0 }, { 0.0, 0.0, 0.0, -1.0, 1.0, 0.0 } }, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 2, 2, 2, 2, 2, 2 })); Assert.assertEquals(0, optimum.getValue(), 1.0e-10); }
public void testRedundantEquations() { LinearProblem problem = new LinearProblem(new double[][] { { 1.0, 1.0 }, { 1.0, -1.0 }, { 1.0, 3.0 } }, new double[] { 3.0, 1.0, 5.0 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 1, 1 })); Assert.assertEquals(2.0, optimum.getPoint()[0], 1.0e-8); Assert.assertEquals(1.0, optimum.getPoint()[1], 1.0e-8); }
public void testInconsistentEquations() { LinearProblem problem = new LinearProblem(new double[][] { { 1.0, 1.0 }, { 1.0, -1.0 }, { 1.0, 3.0 } }, new double[] { 3.0, 1.0, 4.0 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 1, 1 })); Assert.assertTrue(optimum.getValue() > 0.1); }
public void testCircleFitting() { CircleScalar problem = new CircleScalar(); problem.addPoint( 30.0, 68.0); problem.addPoint( 50.0, -6.0); problem.addPoint(110.0, -20.0); problem.addPoint( 35.0, 15.0); problem.addPoint( 45.0, 97.0); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-30, 1e-30), new BrentSolver(1e-15, 1e-13)); PointValuePair optimum = optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 98.680, 47.345 })); Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]); Assert.assertEquals(69.960161753, problem.getRadius(center), 1.0e-8); Assert.assertEquals(96.075902096, center.getX(), 1.0e-8); Assert.assertEquals(48.135167894, center.getY(), 1.0e-8); }
public void test00() throws Throwable { Vector3D vector3D0 = new Vector3D(2634.0, 2634.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0); Line line0 = new Line(vector3D1, vector3D0); Line line1 = line0.revert(); assertNotSame(line1, line0); }
public void test01() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); Vector3D vector3D2 = line0.getOrigin(); assertEquals(6.342368175736981E-17, vector3D2.getNorm(), 0.01); }
public void test02() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); Vector1D vector1D0 = Vector1D.ONE; Vector3D vector3D2 = line0.toSpace(vector1D0); assertEquals(1.0000000000000002, vector3D2.getNormSq(), 0.01); }
public void test03() throws Throwable { Vector3D vector3D0 = new Vector3D(2634.0, 2634.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0); Line line0 = new Line(vector3D1, vector3D0); SubLine subLine0 = line0.wholeLine(); assertNotNull(subLine0); }
public void test04() throws Throwable { Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY; Line line0 = new Line(vector3D0, vector3D0); Vector3D vector3D1 = line0.getDirection(); assertFalse(vector3D1.isInfinite()); }
public void test05() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); Vector1D vector1D0 = line0.toSubSpace(vector3D1); assertEquals(1.908882715357507E7, vector1D0.getX(), 0.01); }
public void test06() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_J; Line line0 = null; try { line0 = new Line(vector3D0, vector3D0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // zero norm // verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e); } }
public void test07() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); boolean boolean0 = line0.isSimilarTo(line0); assertTrue(boolean0); }
public void test08() throws Throwable { Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY; Line line0 = new Line(vector3D0, vector3D0); boolean boolean0 = line0.isSimilarTo(line0); assertFalse(boolean0); }
public void test09() throws Throwable { Vector3D vector3D0 = new Vector3D(2634.0, 2634.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0); Line line0 = new Line(vector3D1, vector3D0); Line line1 = new Line(vector3D0, vector3D1); boolean boolean0 = line1.isSimilarTo(line0); assertTrue(boolean0); }
public void test10() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); Vector3D vector3D2 = new Vector3D(0.7675435543060303, vector3D0, 1.908882715357507E7, vector3D1); Line line1 = new Line(vector3D2, vector3D0); boolean boolean0 = line0.isSimilarTo(line1); assertFalse(boolean0); }
public void test11() throws Throwable { Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY; Line line0 = new Line(vector3D0, vector3D0); double double0 = line0.distance(line0); assertEquals(Double.NaN, double0, 0.01); }
public void test12() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Vector3D vector3D1 = new Vector3D((-1999.1586270095), vector3D0, (-1999.1586270095), vector3D0, (-370.1560666704), vector3D0); Line line0 = new Line(vector3D0, vector3D1); double double0 = line0.distance(line0); assertEquals(0.0, double0, 0.01); }
public void test13() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_I; Vector3D vector3D1 = Vector3D.NaN; Line line0 = new Line(vector3D0, vector3D1); Vector3D vector3D2 = line0.intersection(line0); assertNull(vector3D2); }
public void test14() throws Throwable { Vector3D vector3D0 = new Vector3D(2634.0, 2634.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0); Line line0 = new Line(vector3D1, vector3D0); Vector3D vector3D2 = line0.intersection(line0); assertNotNull(vector3D2); assertEquals(8.931944176457564E-14, vector3D2.getNorm(), 0.01); }
public void testContains() { Line l = new Line(new Vector2D(0, 1), new Vector2D(1, 2)); Assert.assertTrue(l.contains(new Vector2D(0, 1))); Assert.assertTrue(l.contains(new Vector2D(1, 2))); Assert.assertTrue(l.contains(new Vector2D(7, 8))); Assert.assertTrue(! l.contains(new Vector2D(8, 7))); }
public void testSimilar() throws MathIllegalArgumentException, MathArithmeticException { Vector3D p1 = new Vector3D (1.2, 3.4, -5.8); Vector3D p2 = new Vector3D (3.4, -5.8, 1.2); Line   lA = new Line(p1, p2); Line   lB = new Line(p2, p1); Assert.assertTrue(lA.isSimilarTo(lB)); Assert.assertTrue(! lA.isSimilarTo(new Line(p1, p1.add(lA.getDirection().orthogonal())))); }
public void testPointDistance() throws MathIllegalArgumentException { Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2)); Assert.assertEquals(FastMath.sqrt(3.0 / 2.0), l.distance(new Vector3D(1, 0, 1)), 1.0e-10); Assert.assertEquals(0, l.distance(new Vector3D(0, -4, -4)), 1.0e-10); }
public void testLineDistance() throws MathIllegalArgumentException { Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2)); Assert.assertEquals(1.0, l.distance(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))), 1.0e-10); Assert.assertEquals(0.5, l.distance(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))), 1.0e-10); Assert.assertEquals(0.0, l.distance(l), 1.0e-10); Assert.assertEquals(0.0, l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))), 1.0e-10); Assert.assertEquals(0.0, l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))), 1.0e-10); Assert.assertEquals(0.0, l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))), 1.0e-10); Assert.assertEquals(FastMath.sqrt(8), l.distance(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))), 1.0e-10); }
public void testClosest() throws MathIllegalArgumentException { Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 2, 2)); Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(1, 0, 1), new Vector3D(1, 0, 2))).distance(new Vector3D(0, 0, 0)), 1.0e-10); Assert.assertEquals(0.5, l.closestPoint(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(-0.5, -1, -1))).distance(new Vector3D(-0.5, 0, 0)), 1.0e-10); Assert.assertEquals(0.0, l.closestPoint(l).distance(new Vector3D(0, 0, 0)), 1.0e-10); Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -5, -5))).distance(new Vector3D(0, 0, 0)), 1.0e-10); Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -3, -4))).distance(new Vector3D(0, -4, -4)), 1.0e-10); Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(1, -4, -4))).distance(new Vector3D(0, -4, -4)), 1.0e-10); Assert.assertEquals(0.0, l.closestPoint(new Line(new Vector3D(0, -4, 0), new Vector3D(1, -4, 0))).distance(new Vector3D(0, -2, -2)), 1.0e-10); }
public void testIntersection() { Line  l1 = new Line(new Vector2D( 0, 1), new Vector2D(1, 2)); Line  l2 = new Line(new Vector2D(-1, 2), new Vector2D(2, 1)); Vector2D p = l1.intersection(l2); Assert.assertEquals(0.5, p.getX(), 1.0e-10); Assert.assertEquals(1.5, p.getY(), 1.0e-10); }
public void testRevert() { // setup Line line = new Line(new Vector3D(1653345.6696423641, 6170370.041579291, 90000), new Vector3D(1650757.5050732433, 6160710.879908984, 0.9)); Vector3D expected = line.getDirection().negate(); // action Line reverted = line.revert(); // verify Assert.assertArrayEquals(expected.toArray(), reverted.getDirection().toArray(), 0); }
public void testEndPoints() { Vector2D p1 = new Vector2D(-1, -7); Vector2D p2 = new Vector2D(7, -1); Segment segment = new Segment(p1, p2, new Line(p1, p2)); SubLine sub = new SubLine(segment); List<Segment> segments = sub.getSegments(); Assert.assertEquals(1, segments.size()); Assert.assertEquals(0.0, new Vector2D(-1, -7).distance(segments.get(0).getStart()), 1.0e-10); Assert.assertEquals(0.0, new Vector2D( 7, -1).distance(segments.get(0).getEnd()), 1.0e-10); }
public void testNoEndPoints() { SubLine wholeLine = new Line(new Vector2D(-1, 7), new Vector2D(7, 1)).wholeHyperplane(); List<Segment> segments = wholeLine.getSegments(); Assert.assertEquals(1, segments.size()); Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) && segments.get(0).getStart().getX() < 0); Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) && segments.get(0).getStart().getY() > 0); Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) && segments.get(0).getEnd().getX() > 0); Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) && segments.get(0).getEnd().getY() < 0); }
public void testNoSegments() { SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)), new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet())); List<Segment> segments = empty.getSegments(); Assert.assertEquals(0, segments.size()); }
public void testSeveralSegments() { SubLine twoSubs = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)), new RegionFactory<Euclidean1D>().union(new IntervalsSet(1, 2), new IntervalsSet(3, 4))); List<Segment> segments = twoSubs.getSegments(); Assert.assertEquals(2, segments.size()); }
public void testHalfInfiniteNeg() { SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)), new IntervalsSet(Double.NEGATIVE_INFINITY, 0.0)); List<Segment> segments = empty.getSegments(); Assert.assertEquals(1, segments.size()); Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX()) && segments.get(0).getStart().getX() < 0); Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY()) && segments.get(0).getStart().getY() < 0); Assert.assertEquals(0.0, new Vector2D(3, -4).distance(segments.get(0).getEnd()), 1.0e-10); }
public void testHalfInfinitePos() { SubLine empty = new SubLine(new Line(new Vector2D(-1, -7), new Vector2D(7, -1)), new IntervalsSet(0.0, Double.POSITIVE_INFINITY)); List<Segment> segments = empty.getSegments(); Assert.assertEquals(1, segments.size()); Assert.assertEquals(0.0, new Vector2D(3, -4).distance(segments.get(0).getStart()), 1.0e-10); Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX()) && segments.get(0).getEnd().getX() > 0); Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY()) && segments.get(0).getEnd().getY() > 0); }
public void testIntersectionInsideInside() { SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1)); SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 2)); Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)), 1.0e-12); Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, false)), 1.0e-12); }
public void testIntersectionInsideBoundary() { SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1)); SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 1)); Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)), 1.0e-12); Assert.assertNull(sub1.intersection(sub2, false)); }
public void testIntersectionInsideOutside() { SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(3, 1)); SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5)); Assert.assertNull(sub1.intersection(sub2, true)); Assert.assertNull(sub1.intersection(sub2, false)); }
public void testIntersectionBoundaryBoundary() { SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(2, 1)); SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 1)); Assert.assertEquals(0.0, new Vector2D(2, 1).distance(sub1.intersection(sub2, true)), 1.0e-12); Assert.assertNull(sub1.intersection(sub2, false)); }
public void testIntersectionBoundaryOutside() { SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(2, 1)); SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5)); Assert.assertNull(sub1.intersection(sub2, true)); Assert.assertNull(sub1.intersection(sub2, false)); }
public void testIntersectionOutsideOutside() { SubLine sub1 = new SubLine(new Vector2D(1, 1), new Vector2D(1.5, 1)); SubLine sub2 = new SubLine(new Vector2D(2, 0), new Vector2D(2, 0.5)); Assert.assertNull(sub1.intersection(sub2, true)); Assert.assertNull(sub1.intersection(sub2, false)); }
public void testAbscissa() { Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2)); Assert.assertEquals(0.0, (l.toSubSpace(new Vector2D(-3, 4))).getX(), 1.0e-10); Assert.assertEquals(0.0, (l.toSubSpace(new Vector2D( 3, -4))).getX(), 1.0e-10); Assert.assertEquals(-5.0, (l.toSubSpace(new Vector2D( 7, -1))).getX(), 1.0e-10); Assert.assertEquals( 5.0, (l.toSubSpace(new Vector2D(-1, -7))).getX(), 1.0e-10); }
public void testOffset() { Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2)); Assert.assertEquals(-5.0, l.getOffset(new Vector2D(5, -3)), 1.0e-10); Assert.assertEquals(+5.0, l.getOffset(new Vector2D(-5, 2)), 1.0e-10); }
public void testDistance() { Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2)); Assert.assertEquals(+5.0, l.distance(new Vector2D(5, -3)), 1.0e-10); Assert.assertEquals(+5.0, l.distance(new Vector2D(-5, 2)), 1.0e-10); }
public void testPointAt() { Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2)); for (double a = -2.0; a < 2.0; a += 0.2) { Vector1D pA = new Vector1D(a); Vector2D point = l.toSpace(pA); Assert.assertEquals(a, (l.toSubSpace(point)).getX(), 1.0e-10); Assert.assertEquals(0.0, l.getOffset(point),  1.0e-10); for (double o = -2.0; o < 2.0; o += 0.2) { point = l.getPointAt(pA, o); Assert.assertEquals(a, (l.toSubSpace(point)).getX(), 1.0e-10); Assert.assertEquals(o, l.getOffset(point),  1.0e-10); } } }
public void testOriginOffset() { Line l1 = new Line(new Vector2D(0, 1), new Vector2D(1, 2)); Assert.assertEquals(FastMath.sqrt(0.5), l1.getOriginOffset(), 1.0e-10); Line l2 = new Line(new Vector2D(1, 2), new Vector2D(0, 1)); Assert.assertEquals(-FastMath.sqrt(0.5), l2.getOriginOffset(), 1.0e-10); }
public void testParallel() { Line l1 = new Line(new Vector2D(0, 1), new Vector2D(1, 2)); Line l2 = new Line(new Vector2D(2, 2), new Vector2D(3, 3)); Assert.assertTrue(l1.isParallelTo(l2)); Line l3 = new Line(new Vector2D(1, 0), new Vector2D(0.5, -0.5)); Assert.assertTrue(l1.isParallelTo(l3)); Line l4 = new Line(new Vector2D(1, 0), new Vector2D(0.5, -0.51)); Assert.assertTrue(! l1.isParallelTo(l4)); }
public void testTransform() throws MathIllegalArgumentException { Line l1 = new Line(new Vector2D(1.0 ,1.0), new Vector2D(4.0 ,1.0)); Transform<Euclidean2D, Euclidean1D> t1 = Line.getTransform(new AffineTransform(0.0, 0.5, -1.0, 0.0, 1.0, 1.5)); Assert.assertEquals(0.5 * FastMath.PI, ((Line) t1.apply(l1)).getAngle(), 1.0e-10); Line l2 = new Line(new Vector2D(0.0, 0.0), new Vector2D(1.0, 1.0)); Transform<Euclidean2D, Euclidean1D> t2 = Line.getTransform(new AffineTransform(0.0, 0.5, -1.0, 0.0, 1.0, 1.5)); Assert.assertEquals(FastMath.atan2(1.0, -2.0), ((Line) t2.apply(l2)).getAngle(), 1.0e-10); }
public void testBoundsUnsupported() { LinearProblem problem = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 }); NonLinearConjugateGradientOptimizer optimizer = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE, new SimpleValueChecker(1e-6, 1e-6)); optimizer.optimize(new MaxEval(100), problem.getObjectiveFunction(), problem.getObjectiveFunctionGradient(), GoalType.MINIMIZE, new InitialGuess(new double[] { 0 }), new SimpleBounds(new double[] { -1 }, new double[] { 1 })); }
