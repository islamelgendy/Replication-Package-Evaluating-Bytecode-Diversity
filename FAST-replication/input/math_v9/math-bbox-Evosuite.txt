public void test00() throws Throwable { Vector3D vector3D0 = new Vector3D(2634.0, 2634.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0); Line line0 = new Line(vector3D1, vector3D0); Line line1 = line0.revert(); assertNotSame(line1, line0); }
public void test01() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); Vector3D vector3D2 = line0.getOrigin(); assertEquals(6.342368175736981E-17, vector3D2.getNorm(), 0.01); }
public void test02() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); Vector1D vector1D0 = Vector1D.ONE; Vector3D vector3D2 = line0.toSpace(vector1D0); assertEquals(1.0000000000000002, vector3D2.getNormSq(), 0.01); }
public void test03() throws Throwable { Vector3D vector3D0 = new Vector3D(2634.0, 2634.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0); Line line0 = new Line(vector3D1, vector3D0); SubLine subLine0 = line0.wholeLine(); assertNotNull(subLine0); }
public void test04() throws Throwable { Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY; Line line0 = new Line(vector3D0, vector3D0); Vector3D vector3D1 = line0.getDirection(); assertFalse(vector3D1.isInfinite()); }
public void test05() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); Vector1D vector1D0 = line0.toSubSpace(vector3D1); assertEquals(1.908882715357507E7, vector1D0.getX(), 0.01); }
public void test06() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_J; Line line0 = null; try { line0 = new Line(vector3D0, vector3D0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // zero norm // verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e); } }
public void test07() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); boolean boolean0 = line0.isSimilarTo(line0); assertTrue(boolean0); }
public void test08() throws Throwable { Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY; Line line0 = new Line(vector3D0, vector3D0); boolean boolean0 = line0.isSimilarTo(line0); assertFalse(boolean0); }
public void test09() throws Throwable { Vector3D vector3D0 = new Vector3D(2634.0, 2634.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0); Line line0 = new Line(vector3D1, vector3D0); Line line1 = new Line(vector3D0, vector3D1); boolean boolean0 = line1.isSimilarTo(line0); assertTrue(boolean0); }
public void test10() throws Throwable { Vector3D vector3D0 = new Vector3D(4.0, 0.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0, 1.908355915357507E7, vector3D0); Line line0 = new Line(vector3D0, vector3D1); Vector3D vector3D2 = new Vector3D(0.7675435543060303, vector3D0, 1.908882715357507E7, vector3D1); Line line1 = new Line(vector3D2, vector3D0); boolean boolean0 = line0.isSimilarTo(line1); assertFalse(boolean0); }
public void test11() throws Throwable { Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY; Line line0 = new Line(vector3D0, vector3D0); double double0 = line0.distance(line0); assertEquals(Double.NaN, double0, 0.01); }
public void test12() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_K; Vector3D vector3D1 = new Vector3D((-1999.1586270095), vector3D0, (-1999.1586270095), vector3D0, (-370.1560666704), vector3D0); Line line0 = new Line(vector3D0, vector3D1); double double0 = line0.distance(line0); assertEquals(0.0, double0, 0.01); }
public void test13() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_I; Vector3D vector3D1 = Vector3D.NaN; Line line0 = new Line(vector3D0, vector3D1); Vector3D vector3D2 = line0.intersection(line0); assertNull(vector3D2); }
public void test14() throws Throwable { Vector3D vector3D0 = new Vector3D(2634.0, 2634.0); Vector3D vector3D1 = new Vector3D(2634.0, vector3D0, 2634.0, vector3D0); Line line0 = new Line(vector3D1, vector3D0); Vector3D vector3D2 = line0.intersection(line0); assertNotNull(vector3D2); assertEquals(8.931944176457564E-14, vector3D2.getNorm(), 0.01); }
