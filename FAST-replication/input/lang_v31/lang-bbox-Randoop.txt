public void test01501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01501"); int int3 = org.apache.commons.lang3.StringUtils.indexOf(" -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "100", (int) (short) -1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01502"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("-"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-" + "'", str1, "-"); }
public void test01503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01503"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################", 30, " -1"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################" + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################"); }
public void test01504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01504"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", 52, ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test01505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01505"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("I!HI!HI!HI!}001,001,001{I!HI!HI!HI!", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I!HI!HI!HI!}001,001,001{I!HI!HI!HI!" + "'", str2, "I!HI!HI!HI!}001,001,001{I!HI!HI!HI!"); }
public void test01506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01506"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI", "HaI"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01507"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("hi!hi!", "", "hi!{#, ,"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!" + "'", str3, "hi!hi!"); }
public void test01508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01508"); int int3 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "100", 2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01509"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H" + "'", str2, "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H"); }
public void test01510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01510"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false); java.lang.Object[] objArray16 = new java.lang.Object[] {}; java.lang.String str18 = org.apache.commons.lang3.StringUtils.join(objArray16, ' '); java.lang.Object obj19 = null; int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, obj19); boolean[] booleanArray23 = new boolean[] { true, false }; boolean[] booleanArray24 = null; boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray24); boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(objArray16, (java.lang.Object) booleanArray23); boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray23); boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray23, (int) (short) 1); boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray29); boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray29, true); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true]"); org.junit.Assert.assertNotNull(objArray16); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertNotNull(booleanArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(booleanArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); }
public void test01511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01511"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H", ' '); org.junit.Assert.assertNotNull(strArray2); }
public void test01512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01512"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!", (int) (short) 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01513"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("I!HI!HI!HI!}001,001,001{I!HI!HI!HI!"); org.junit.Assert.assertNotNull(strArray1); }
public void test01514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01514"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "!IH10"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str2, "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01515"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("##########################h! h! ", "hi! hi!                       ", 4); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01516"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("                "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "                " + "'", str1, "                "); }
public void test01517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01517"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) "HaI"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01518"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!", 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!" + "'", str2, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!"); }
public void test01519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01519"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterType("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertNotNull(strArray1); }
public void test01520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01520"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("!IH10", '4', 62); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01521"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("Hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "!IH    "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01522"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("hi!hi!hi!hi!", "hi!ahi!ahi!ahi!", "!IH    "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!" + "'", str3, "hi!hi!hi!hi!"); }
public void test01523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01523"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01524"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("", (int) (short) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01525"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!", "    HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01526"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("444444444444...!hi!hi!444444444444", "HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str2, "444444444444...!hi!hi!444444444444"); }
public void test01527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01527"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("#", "!IH!IH!IH!I{100,100,100}!IH!IH!IH!I"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01528"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("100"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "001" + "'", str1, "001"); }
public void test01529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01529"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("", "-1", 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01530"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("HI!HI!HI!H", "hi!ahi!ahi!ahi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01531"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("!IH10"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH10" + "'", str1, "!IH10"); }
public void test01532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01532"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("HI!HI!HI!", 7); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!HI!HI!" + "'", str2, "!HI!HI!"); }
public void test01533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01533"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HaIa", "", (int) 'a'); java.lang.String str4 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "HaIa" + "'", str4, "HaIa"); }
public void test01534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01534"); char[] charArray7 = new char[] { '#', ' ', ' ' }; boolean boolean8 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray7); char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#'); char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, (int) (byte) -1, (int) 'a'); int int14 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray7); int int15 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray7); org.apache.commons.lang3.ArrayUtils.reverse(charArray7); boolean boolean17 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "-1", charArray7); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, ' '); int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray7, ' ', 0); java.lang.Character[] charArray29 = new java.lang.Character[] { ' ', '4', '#', ' ', ' ', ' ' }; char[] charArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray29, ' '); char[] charArray36 = new char[] { '#', ' ', ' ' }; boolean boolean37 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray36); char[] charArray39 = org.apache.commons.lang3.ArrayUtils.add(charArray36, '#'); char[] charArray42 = org.apache.commons.lang3.ArrayUtils.subarray(charArray36, (int) (byte) -1, (int) 'a'); boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray31, charArray42); char[] charArray44 = org.apache.commons.lang3.ArrayUtils.addAll(charArray7, charArray31); boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray7); int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray7, ' ', (int) (short) 1); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , , #]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , #]"); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(charArray29); org.junit.Assert.assertNotNull(charArray31); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), " 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), " 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[ , 4, #, , , ]"); org.junit.Assert.assertNotNull(charArray36); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertNotNull(charArray39); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray42); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(charArray44); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " # 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " # 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , , #, , 4, #, , , ]"); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1); }
public void test01535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01535"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("ahi!ahi!a"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ahi!ahi!a" + "'", str1, "ahi!ahi!a"); }
public void test01536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01536"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(" -1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "4444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01537"); char[] charArray5 = new char[] { '#', 'a', 'a', '#' }; boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, ' '); char[] charArray14 = new char[] { '#', ' ', ' ' }; boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray14); char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray14, '#'); char[] charArray20 = org.apache.commons.lang3.ArrayUtils.subarray(charArray14, (int) (byte) -1, (int) 'a'); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray14); int int22 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray14); char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray14); char[] charArray24 = null; boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray23, charArray24); char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray23, '4'); int int28 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!", charArray23); org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(charArray17); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray20); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, , ]"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertNotNull(charArray23); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(charArray27); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#aa## 4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#aa## 4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, a, a, #, #, , , 4]"); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0); }
public void test01538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01538"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "4444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01539"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01540"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("hi!{#, ,", 9, "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!{#, ,{" + "'", str3, "hi!{#, ,{"); }
public void test01541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01541"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "##########################h! h!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01542"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "{"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str2, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01543"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str1, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test01544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01544"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str2, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test01545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01545"); java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY; java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!H", ' '); boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray0, (java.lang.Object) "HI!HI!HI!H"); int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (short) 1); int[] intArray13 = new int[] { '4', 10, (short) 100, '4', (byte) 10, 100 }; int[] intArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray13, (int) (byte) 10); int[] intArray22 = new int[] { '4', 10, (short) 100, '4', (byte) 10, 100 }; int[] intArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray22, (int) (byte) 10); int[] intArray25 = org.apache.commons.lang3.ArrayUtils.addAll(intArray15, intArray22); int[] intArray28 = org.apache.commons.lang3.ArrayUtils.add(intArray15, 0, (int) (byte) 10); int[] intArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray28, (int) (short) 1); int[] intArray37 = new int[] { '4', 10, (short) 100, '4', (byte) 10, 100 }; int[] intArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray37, (int) (byte) 10); int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray39, (int) '4'); int[] intArray43 = org.apache.commons.lang3.ArrayUtils.add(intArray39, (int) (short) -1); int[] intArray50 = new int[] { '4', 10, (short) 100, '4', (byte) 10, 100 }; int[] intArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray50, (int) (byte) 10); int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray52, (int) '4'); int[] intArray56 = org.apache.commons.lang3.ArrayUtils.add(intArray52, (int) (short) -1); int[] intArray59 = org.apache.commons.lang3.ArrayUtils.add(intArray56, 0, (int) ' '); int[] intArray66 = new int[] { '4', 10, (short) 100, '4', (byte) 10, 100 }; int[] intArray68 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray66, (int) (byte) 10); int int70 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray68, (int) '4'); int[] intArray71 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray68); int[] intArray72 = org.apache.commons.lang3.ArrayUtils.addAll(intArray56, intArray71); boolean boolean73 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray39, intArray71); int[] intArray74 = null; int[] intArray75 = org.apache.commons.lang3.ArrayUtils.addAll(intArray71, intArray74); int[] intArray82 = new int[] { '4', 10, (short) 100, '4', (byte) 10, 100 }; int[] intArray84 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray82, (int) (byte) 10); int int86 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray84, (int) '4'); int[] intArray88 = org.apache.commons.lang3.ArrayUtils.add(intArray84, (int) (short) -1); int[] intArray91 = org.apache.commons.lang3.ArrayUtils.add(intArray88, 0, (int) ' '); boolean boolean92 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray75, intArray88); int[] intArray93 = org.apache.commons.lang3.ArrayUtils.clone(intArray75); int[] intArray94 = org.apache.commons.lang3.ArrayUtils.addAll(intArray30, intArray75); int int96 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray30, 5); int int98 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray30, 6); int[] intArray99 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray30); org.junit.Assert.assertNotNull(intArray0); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(intArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]"); org.junit.Assert.assertNotNull(intArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[52, 100, 52, 10, 100, 52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[10, 52, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[10, 52, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[52, 100, 52, 10, 100, -1]"); org.junit.Assert.assertNotNull(intArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0); org.junit.Assert.assertNotNull(intArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[52, 100, 52, 10, 100, -1]"); org.junit.Assert.assertNotNull(intArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[32, 52, 100, 52, 10, 100, -1]"); org.junit.Assert.assertNotNull(intArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0); org.junit.Assert.assertNotNull(intArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[52, 100, 52, 10, 100, -1, 52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true); org.junit.Assert.assertNotNull(intArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray84); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0); org.junit.Assert.assertNotNull(intArray88); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[52, 100, 52, 10, 100, -1]"); org.junit.Assert.assertNotNull(intArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[32, 52, 100, 52, 10, 100, -1]"); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertNotNull(intArray93); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[10, 52, 100, 52, 10, 100, 52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1)); org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1)); org.junit.Assert.assertNotNull(intArray99); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[10, 52, 100, 52, 10, 100]"); }
public void test01546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01546"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!", "100", (int) (short) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01547"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{", 'a', 9); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 15 + "'", int3 == 15); }
public void test01548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01548"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) "lse}a{f", (java.lang.CharSequence) " -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01549"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "-1"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01550"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("{}", (-1)); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}" + "'", str2, "}"); }
public void test01551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01551"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("-"); org.junit.Assert.assertNotNull(strArray1); }
public void test01552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01552"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("                                                  ", "!IHhi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                  " + "'", str2, "                                                  "); }
public void test01553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01553"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("{#,a,a,#,#,,}hi!ahi!ahi!ahi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{#,a,a,#,#,,}hi!ahi!ahi!ahi!" + "'", str1, "{#,a,a,#,#,,}hi!ahi!ahi!ahi!"); }
public void test01554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01554"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("!IH    ", "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH    " + "'", str2, "!IH    "); }
public void test01555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01555"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}" + "'", str1, "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}"); }
public void test01556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01556"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("", "", 54); java.lang.String str4 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); }
public void test01557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01557"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", 54, "-"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str3, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01558"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "{#, , }"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01559"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("!HI!HI!", "001"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01560"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01561"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", 99); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01562"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("hi! hi!                                               ", "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", 4, 6); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi! I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444!                                               " + "'", str4, "hi! I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444!                                               "); }
public void test01563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01563"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false); boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray15, true); // The following exception was thrown during execution in test generation try { boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray15, (int) 'a'); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true]"); org.junit.Assert.assertNotNull(booleanArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]"); }
public void test01564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01564"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("  "); java.lang.String str2 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray1); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "  " + "'", str2, "  "); }
public void test01565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01565"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "HI"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI" + "'", str1, "HI"); }
public void test01566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01566"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "h! h! ", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01567"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I", (int) (byte) 0, '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I" + "'", str3, "4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I"); }
public void test01568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01568"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("hi! hi!                       "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi!" + "'", str1, "hi! hi!"); }
public void test01569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01569"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("aaaaaaa -1", "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", (int) (byte) -1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01570"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01571"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("!IHhi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IHhi!hi!" + "'", str1, "!IHhi!hi!"); }
public void test01572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01572"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); }
public void test01573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01573"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("hi! hi! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI! HI! " + "'", str1, "HI! HI! "); }
public void test01574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01574"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("!ih !ihHI!", "!IH"); org.junit.Assert.assertNotNull(strArray2); }
public void test01575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01575"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("hi! hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi!" + "'", str1, "hi! hi!"); }
public void test01576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01576"); java.lang.Object[] objArray0 = null; java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray0, 'a', (int) (short) 1, (int) (byte) 10); org.junit.Assert.assertNull(str4); }
public void test01577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01577"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa" + "'", str1, "AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); }
public void test01578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01578"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("#", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01579"); java.lang.Byte[] byteArray1 = new java.lang.Byte[] { (byte) 10 }; byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100); java.lang.String str7 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray1, '4', (int) (byte) 10, (int) (short) 10); java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1); int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray8, (java.lang.Object) "", 0); byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray8, (byte) 10); boolean[] booleanArray16 = new boolean[] { true, false }; boolean[] booleanArray17 = null; boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray16, booleanArray17); boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray16, false); int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray20, false); boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (byte) 10, (java.lang.Object) int22); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10]"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(byteArray8); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertNotNull(byteArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10]"); org.junit.Assert.assertNotNull(booleanArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true]"); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test01580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01580"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", 30); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01581"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 0, "444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01582"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "HI!HI!HI!"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 9 + "'", int1 == 9); }
public void test01583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01583"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "                "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str2, "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test01584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01584"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("!hi!hi!h", 45); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "         !hi!hi!h          " + "'", str2, "         !hi!hi!h          "); }
public void test01585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01585"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "h! h! ", 63); java.lang.String str4 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); }
public void test01586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01586"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("", 0, 63); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01587"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("h", "HaI"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01588"); char[] charArray6 = new char[] { '4', 'a', 'a' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray6); int int8 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray6); int int9 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray6); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray6); java.lang.Class<?> wildcardClass11 = charArray6.getClass(); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test01589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01589"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01590"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444" + "'", str2, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444"); }
public void test01591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01591"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("{}i!", (int) (short) -1, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}i!" + "'", str3, "{}i!"); }
public void test01592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01592"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "444444444444...!hi!hi!444444444444"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01593"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("              hi!{#, ,              "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "              HI!{#, ,              " + "'", str1, "              HI!{#, ,              "); }
public void test01594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01594"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01595"); java.lang.CharSequence charSequence0 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference(charSequence0, (java.lang.CharSequence) "IHiIHiIH"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01596"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray2); double[] doubleArray5 = new double[] { (-1.0f) }; double[] doubleArray10 = new double[] { 1.0d, 10, 0, 0 }; double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray10); int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) (byte) 1, (int) (byte) 0); boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(doubleArray11); double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, 99, (int) (short) 10); int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 0); boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) doubleArray11, (java.lang.Object) "hi!"); int int24 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray2, (java.lang.Object) boolean22, 3); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 10.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 10.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1)); }
public void test01597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01597"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "              hi!{#, ,              "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01598"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "!IH10"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01599"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "                     !IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih" + "'", str1, "                     !IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih"); }
public void test01600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01600"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("{false}", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01601"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "  "); int int4 = org.apache.commons.lang3.StringUtils.indexOfAny("{ ,4,#, , , }", strArray3); boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); }
public void test01602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01602"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("aaaaaaa -1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AAAAAAA -1" + "'", str1, "AAAAAAA -1"); }
public void test01603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01603"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", "hi!hi!hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{#,a,a,#,#, , }hi!ahi!ahi!ahi!" + "'", str3, "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); }
public void test01604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01604"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , ", '#'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01605"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444", "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01606"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("!IH    ", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH    " + "'", str2, "!IH    "); }
public void test01607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01607"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("", 'a'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01608"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,,,#,#, , }hi!hi!hi!hi!" + "'", str2, "{#,,,#,#, , }hi!hi!hi!hi!"); }
public void test01609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01609"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("", "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01610"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("lse}a{f", (int) (byte) -1, "h"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "lse}a{f" + "'", str3, "lse}a{f"); }
public void test01611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01611"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01612"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("-1", "hi!", 0); java.lang.String[] strArray5 = org.apache.commons.lang3.StringUtils.stripAll(strArray3, "    hi!"); short[] shortArray9 = new short[] { (short) -1, (short) -1, (short) 10 }; org.apache.commons.lang3.ArrayUtils.reverse(shortArray9); short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray9, (short) (byte) 1); boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(shortArray9, (short) 0); int int15 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray5, (java.lang.Object) (short) 0); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertNotNull(shortArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, -1, -1]"); org.junit.Assert.assertNotNull(shortArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10, -1, -1]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); }
public void test01613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01613"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!{#, ,{", '4', 15); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01614"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay(" -1", "{#,,,#,#, , }hi!hi!hi!hi!", (int) (byte) 100, 8); org.junit.Assert.assertEquals("'" + str4 + "' != '" + " -1{#,,,#,#, , }hi!hi!hi!hi!" + "'", str4, " -1{#,,,#,#, , }hi!hi!hi!hi!"); }
public void test01615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01615"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("!hi!hi!h", ' '); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01616"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", (int) ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "i!hi!hAAAAAAAAAAAAAAAAAAAAAAA..." + "'", str2, "i!hi!hAAAAAAAAAAAAAAAAAAAAAAA..."); }
public void test01617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01617"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("", "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01618"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01619"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str2, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test01620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01620"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate(" -1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 0, (int) 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " -1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str3, " -1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test01621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01621"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "  hi!    hi!    hi!    hi!", (java.lang.CharSequence) "tru"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 36 + "'", int2 == 36); }
public void test01622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01622"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "  "); boolean boolean4 = org.apache.commons.lang3.StringUtils.startsWithAny("  ", strArray3); java.lang.String str8 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray3, "", 0, 1); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str8, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01623"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = null; boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray13); boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false]"); org.junit.Assert.assertNull(booleanArray16); }
public void test01624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01624"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("", "{#,a,a,#,#, , }", (int) (byte) 1); java.lang.String[] strArray5 = null; java.lang.String str6 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("100", strArray4, strArray5); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "100" + "'", str6, "100"); }
public void test01625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01625"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "aaaaaaa -1"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01626"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("hi!{#, ,{", "-------------------------------------------------------------------------------------------------"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!{#, ,{" + "'", str2, "hi!{#, ,{"); }
public void test01627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01627"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToEmpty("  "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test01628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01628"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ", (int) (short) 0, 52); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IH    ##########################h! h! !IH  ..." + "'", str3, "!IH    ##########################h! h! !IH  ..."); }
public void test01629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01629"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("", "HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01630"); char[] charArray1 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) "{100,100,100}!IH!IH!IH!I", charArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01631"); java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", (java.lang.CharSequence) "hi! hi!                                               "); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", charSequence2, "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01632"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "    HI!                                             "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str2, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01633"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi" + "'", str1, "hi!hi!hi"); }
public void test01634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01634"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("    HI!                                             ", "hi!ahi!ahi!ahi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01635"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("0"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0" + "'", str1, "0"); }
public void test01636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01636"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "!IH"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH" + "'", str1, "!IH"); }
public void test01637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01637"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01638"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "h! h! "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01639"); java.lang.String[] strArray1 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfAny("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", strArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01640"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("IHiIHiIH", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01641"); java.lang.Character[] charArray7 = new java.lang.Character[] { ' ', '4', '#', ' ', ' ', ' ' }; char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7, ' '); java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9); boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, '4'); int int13 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", charArray9); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, #, , , ]"); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test01642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01642"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("hi!{#, ,{", "!ih !ihHI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01643"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("HI!HI!HI!HI", "hi!{#, ,{", "444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI4HI4HI4HI" + "'", str3, "HI4HI4HI4HI"); }
public void test01644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01644"); java.lang.CharSequence charSequence0 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly(charSequence0, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01645"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("hi!hi!hi!h", "IHiIHiIH"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01646"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("hi! hi!                       "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI! HI!                       " + "'", str1, "HI! HI!                       "); }
public void test01647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01647"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 'a'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01648"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!H", ' '); byte[] byteArray6 = new byte[] { (byte) 100, (byte) 100, (byte) 100 }; boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) 100); byte[] byteArray9 = null; byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray9); byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10); int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) -1); byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray11, (byte) 0); int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray2, (java.lang.Object) (byte) 0, 0); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 100, 100]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(byteArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]"); org.junit.Assert.assertNotNull(byteArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100, 100]"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertNotNull(byteArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100, 100]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); }
public void test01649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01649"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("hi!{#, ,{", '#', 9); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01650"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01651"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.split("    hi!    hi!    hi!    hi!"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.stripAll(strArray1); org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray1); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertNotNull(strArray2); }
public void test01652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01652"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", ' '); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01653"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("HI!HI!HI!", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01654"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01655"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("!IHhi! hi!", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertNotNull(strArray2); }
public void test01656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01656"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01657"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH", "hiHI!!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01658"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("0", "{#,,,#,#, , }hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01659"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("", ' '); java.lang.String[] strArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray2); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strArray3); }
public void test01660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01660"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("    hi!", "true"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01661"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("hi!", "hi!", (int) (short) 0); java.lang.String str4 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); }
public void test01662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01662"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("hi!", "hi!", (int) (short) 0); java.lang.String[] strArray6 = org.apache.commons.lang3.StringUtils.stripAll(strArray4, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray8 = org.apache.commons.lang3.StringUtils.stripAll(strArray6, ""); int int9 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("HaI", strArray6); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); }
public void test01663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01663"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01664"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("hi! I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444!                                               ", "", (int) (byte) 100); org.junit.Assert.assertNotNull(strArray3); }
public void test01665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01665"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("HI!HI!HI!H", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01666"); char[] charArray6 = new char[] { '4', 'a', 'a' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray6); int int8 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray6); char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray6); boolean boolean11 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444", charArray6); char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, 'a'); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray6, 0, ' '); char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray16, '#'); // The following exception was thrown during execution in test generation try { int int19 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) '#'); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4a"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4a"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, a]"); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), " 4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), " 4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[ , 4, a, a]"); org.junit.Assert.assertNotNull(charArray18); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), " 4aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), " 4aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[ , 4, a, a, #]"); }
public void test01667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01667"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", (int) '#'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str2, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test01668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01668"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("  hi!    hi!    hi!    hi!", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "  hi!    hi!    hi!    hi!" + "'", str2, "  hi!    hi!    hi!    hi!"); }
public void test01669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01669"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("", "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             ", "!IH    ##########################h! h! !IH  ..."); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01670"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih", "hi! hi!                                               "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!I" + "'", str2, "IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!I"); }
public void test01671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01671"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI", "{#,a,a,#,#, , }"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI" + "'", str2, "HI"); }
public void test01672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01672"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "0                                                  "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01673"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("hi!hi!hi!h", (int) (short) -1, (int) (short) 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01674"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "h! h! ", 63); java.lang.String[] strArray8 = org.apache.commons.lang3.StringUtils.split("-1", "hi!", 0); // The following exception was thrown during execution in test generation try { java.lang.String str9 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", strArray4, strArray8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Search and Replace array lengths don't match: 17 vs 1"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strArray8); }
public void test01675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01675"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("AAAAAAA -1", ' ', '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AAAAAAA#-1" + "'", str3, "AAAAAAA#-1"); }
public void test01676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01676"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("    ", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01677"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      ", 9); java.lang.Object[] objArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(objArray4); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!]"); }
public void test01678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01678"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI", 34, (int) (byte) 100); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI" + "'", str3, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); }
public void test01679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01679"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01680"); java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray7); int int9 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray7); java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int17 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray16); int int18 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray16); java.lang.String[] strArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray16); boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray7, (java.lang.Object[]) strArray19); java.lang.Long[] longArray25 = new java.lang.Long[] { 10L, 100L, 10L, 1L }; java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray25); int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray7, (java.lang.Object) longArray25); int int28 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("{false}", strArray7); java.lang.CharSequence charSequence30 = null; // The following exception was thrown during execution in test generation try { java.lang.CharSequence[] charSequenceArray31 = org.apache.commons.lang3.ArrayUtils.add((java.lang.CharSequence[]) strArray7, 7, charSequence30); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 4"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); org.junit.Assert.assertNotNull(longArray25); org.junit.Assert.assertNotNull(longArray26); org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1)); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7); }
public void test01681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01681"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi!hi!hi!h", "!hi!hi!h", "HI!HI!HI!HI"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I!HI!HI!HI" + "'", str3, "I!HI!HI!HI"); }
public void test01682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01682"); java.lang.CharSequence charSequence1 = null; // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "HaIa", charSequence1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Strings must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01683"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", (java.lang.CharSequence) "100"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01684"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("", "", 30); org.junit.Assert.assertNotNull(strArray3); }
public void test01685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01685"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "#"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01686"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("{}i!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}i!" + "'", str2, "{}i!"); }
public void test01687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01687"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith(" -1{#,,,#,#, , }hi!hi!hi!hi!", "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01688"); char[] charArray0 = null; char[] charArray7 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray14 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray21 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray28 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray35 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[][] charArray36 = new char[][] { charArray7, charArray14, charArray21, charArray28, charArray35 }; char[] charArray37 = new char[] {}; char[] charArray38 = new char[] {}; char[] charArray39 = new char[] {}; char[] charArray40 = new char[] {}; char[] charArray41 = new char[] {}; char[][] charArray42 = new char[][] { charArray37, charArray38, charArray39, charArray40, charArray41 }; char[][] charArray43 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray42); char[] charArray49 = new char[] { '#', 'a', ' ' }; boolean boolean50 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", charArray49); boolean boolean51 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!", charArray49); char[] charArray54 = org.apache.commons.lang3.ArrayUtils.subarray(charArray49, (int) (byte) 0, (int) '#'); java.lang.Character[] charArray55 = org.apache.commons.lang3.ArrayUtils.toObject(charArray54); char[][] charArray56 = org.apache.commons.lang3.ArrayUtils.add(charArray42, charArray54); char[] charArray57 = org.apache.commons.lang3.ArrayUtils.clone(charArray54); boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray54); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray21); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray28); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray35); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray36); org.junit.Assert.assertNotNull(charArray37); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]"); org.junit.Assert.assertNotNull(charArray38); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]"); org.junit.Assert.assertNotNull(charArray39); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]"); org.junit.Assert.assertNotNull(charArray40); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[]"); org.junit.Assert.assertNotNull(charArray41); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[]"); org.junit.Assert.assertNotNull(charArray42); org.junit.Assert.assertNotNull(charArray43); org.junit.Assert.assertNotNull(charArray49); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(charArray54); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#, a, ]"); org.junit.Assert.assertNotNull(charArray55); org.junit.Assert.assertNotNull(charArray56); org.junit.Assert.assertNotNull(charArray57); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); }
public void test01689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01689"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("{"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{" + "'", str1, "{"); }
public void test01690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01690"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("{}i!", "lse}a{f"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01691"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI", 30); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); }
public void test01692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01692"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("4444hi!hi!hi!4444444444444444444444                                ", "HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4444hi!hi!hi!4444444444444444444444                                " + "'", str2, "4444hi!hi!hi!4444444444444444444444                                "); }
public void test01693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01693"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("hI!", "Hi!hi!hi!h"); java.lang.Object obj3 = null; int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray2, obj3, (-1)); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1)); }
public void test01694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01694"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("    HI!    HI!    HI!    HI!", ' ', (int) ' '); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32); }
public void test01695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01695"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("                                                 {}", "    hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                 {}" + "'", str2, "                                                 {}"); }
public void test01696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01696"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) " -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01697"); java.lang.Object[] objArray0 = null; java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray0, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", 15, 52); org.junit.Assert.assertNull(str4); }
public void test01698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01698"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("", (int) (byte) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01699"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("{}", "}");
public void test01700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01700"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("!IH    ##########################h! h! !IH  ...", "ahi!ahi!a"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01701"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("##########################h! h", "hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01702"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01703"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("HI", "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01704"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("", 9, "HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!" + "'", str3, "HI!HI!HI!"); }
public void test01705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01705"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("            h! h!             ", (int) '#'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "   h! h!             " + "'", str2, "   h! h!             "); }
public void test01706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01706"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("}", "", 8);
public void test01707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01707"); char[] charArray6 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray13 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray20 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray27 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray34 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[][] charArray35 = new char[][] { charArray6, charArray13, charArray20, charArray27, charArray34 }; char[] charArray36 = new char[] {}; char[] charArray37 = new char[] {}; char[] charArray38 = new char[] {}; char[] charArray39 = new char[] {}; char[] charArray40 = new char[] {}; char[][] charArray41 = new char[][] { charArray36, charArray37, charArray38, charArray39, charArray40 }; char[][] charArray42 = org.apache.commons.lang3.ArrayUtils.addAll(charArray35, charArray41); char[] charArray48 = new char[] { '#', 'a', ' ' }; boolean boolean49 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", charArray48); boolean boolean50 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!", charArray48); char[] charArray53 = org.apache.commons.lang3.ArrayUtils.subarray(charArray48, (int) (byte) 0, (int) '#'); java.lang.Character[] charArray54 = org.apache.commons.lang3.ArrayUtils.toObject(charArray53); char[][] charArray55 = org.apache.commons.lang3.ArrayUtils.add(charArray41, charArray53); int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray53, '4', (int) (short) 0); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray20); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray27); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray34); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray35); org.junit.Assert.assertNotNull(charArray36); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]"); org.junit.Assert.assertNotNull(charArray37); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]"); org.junit.Assert.assertNotNull(charArray38); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]"); org.junit.Assert.assertNotNull(charArray39); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]"); org.junit.Assert.assertNotNull(charArray40); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[]"); org.junit.Assert.assertNotNull(charArray41); org.junit.Assert.assertNotNull(charArray42); org.junit.Assert.assertNotNull(charArray48); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(charArray53); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#, a, ]"); org.junit.Assert.assertNotNull(charArray54); org.junit.Assert.assertNotNull(charArray55); org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1)); }
public void test01708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01708"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI", (int) (byte) 100); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3, "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01709"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("hI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!" + "'", str1, "hI!"); }
public void test01710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01710"); java.lang.CharSequence charSequence1 = null; java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "{100,100,100}", charSequence1); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "{100,100,100}" + "'", charSequence2, "{100,100,100}"); }
public void test01711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01711"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("    hi!", '4'); org.junit.Assert.assertNotNull(strArray2); }
public void test01712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01712"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("             !ih !ih"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!ih !ih" + "'", str1, "!ih !ih"); }
public void test01713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01713"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01714"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("                         -1", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                         -1" + "'", str2, "                         -1"); }
public void test01715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01715"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "  "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "  " + "'", str1, "  "); }
public void test01716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01716"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str1, "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test01717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01717"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "HI! HI!                                               "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01718"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("", "", "##########################h! h! "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01719"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("...#h! h!", "-"); org.junit.Assert.assertNull(str2); }
public void test01720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01720"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("a", 98); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "a" + "'", str2, "a"); }
public void test01721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01721"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}", "!IH10"); org.junit.Assert.assertNotNull(strArray2); }
public void test01722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01722"); char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01723"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01724"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("#", 0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01725"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("              HI!{#, ,              ", (-1), "100"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "              HI!{#, ,              " + "'", str3, "              HI!{#, ,              "); }
public void test01726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01726"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("!IH    ##########################h! h! !IH  ..."); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH    ##########################h! h! !IH  ..." + "'", str1, "!IH    ##########################h! h! !IH  ..."); }
public void test01727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01727"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", (int) (byte) 10); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa" + "'", str2, "AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); }
public void test01728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01728"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("", "aaaaaaa -1"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01729"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01730"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("hI!", "tru"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hI!" + "'", str2, "hI!"); }
public void test01731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01731"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("4444HI!HI!HI!4444444444444444444444", 'a'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01732"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("HaIa", "hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HaIa" + "'", str2, "HaIa"); }
public void test01733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01733"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("   h! h!             ", (int) (byte) -1, 6); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01734"); char[] charArray6 = new char[] { '4', 'a', 'a' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray6); int int8 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray6); char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray6); boolean boolean11 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444", charArray6); char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, 'a'); int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '#'); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4a"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4a"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, a]"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); }
public void test01735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01735"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("hi!ahi!ahi!ahi!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertNull(str2); }
public void test01736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01736"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , -4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , }", 'a'); org.junit.Assert.assertNotNull(strArray2); }
public void test01737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01737"); java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY; java.lang.Byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray0); java.lang.Byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1); java.lang.String str4 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray1, "hi!{#, ,{"); org.junit.Assert.assertNotNull(byteArray0); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); }
public void test01738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01738"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); }
public void test01739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01739"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("   ", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", (int) (byte) 1); // The following exception was thrown during execution in test generation try { java.lang.String str7 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray3, 'a', 0, 2968); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray3); }
public void test01740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01740"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("h", 'a', 54); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01741"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01742"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi"); }
public void test01743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01743"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("{false}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{FALSE}" + "'", str1, "{FALSE}"); }
public void test01744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01744"); char[] charArray0 = null; char[] charArray5 = new char[] { '#', ' ', ' ' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray5); char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray5, '#'); char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray5, (int) (byte) -1, (int) 'a'); int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray5, '4'); char[] charArray14 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5); boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray5); org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(charArray8); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray11); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, , ]"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test01745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01745"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); org.junit.Assert.assertNotNull(strArray1); }
public void test01746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01746"); java.lang.Integer[] intArray3 = new java.lang.Integer[] { 3, 0, 0 }; int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3, (int) (byte) 1); java.lang.String str9 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) intArray3, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (int) ' ', 1); // The following exception was thrown during execution in test generation try { java.lang.String str13 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) intArray3, 'a', (int) (short) 1, 63); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray3); org.junit.Assert.assertNotNull(intArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[3, 0, 0]"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test01747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01747"); int int3 = org.apache.commons.lang3.StringUtils.indexOf(" -1{#,,,#,#, , }hi!hi!hi!hi!", '4', (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01748"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("ahi!ahi!a                      ", "HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test01749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01749"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("hi! hi! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi! " + "'", str1, "hi! hi! "); }
public void test01750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01750"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI", "   "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); }
public void test01751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01751"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", 30, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01752"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str2, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test01753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01753"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("", "{#,a,a,#,#,,}hi!ahi!ahi!ahi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01754"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "   "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01755"); java.lang.Object[] objArray0 = null; java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", ' '); int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); }
public void test01756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01756"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("{ ,4,#, , , }", "AAAAAAA -1", "    HI!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{H,4,#,H,H,H}" + "'", str3, "{H,4,#,H,H,H}"); }
public void test01757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01757"); char[] charArray5 = new char[] { '#', 'a', ' ' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", charArray5); char[] charArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray5, '#'); boolean boolean9 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "100", charArray5); char[] charArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray5); // The following exception was thrown during execution in test generation try { char[] charArray12 = org.apache.commons.lang3.ArrayUtils.remove(charArray5, 10); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertNotNull(charArray8); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[a, ]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, a, ]"); }
public void test01758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01758"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01759"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str2, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test01760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01760"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}" + "'", str2, "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}"); }
public void test01761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01761"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...", "   ", 5); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA..." + "'", str3, "i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA..."); }
public void test01762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01762"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "##########################h! h!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "##########################h! h!" + "'", str1, "##########################h! h!"); }
public void test01763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01763"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}"); }
public void test01764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01764"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("                         -1", '4'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01765"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("HI!HI!HI!", (int) (short) 10); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!" + "'", str2, "HI!HI!HI!"); }
public void test01766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01766"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("{#,A,A,#,#, , }", "##########################h! h", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertNull(strArray3); }
public void test01767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01767"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("HaIa", '4', 2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01768"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}", "!ih !ihHI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01769"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("", "         !hi!hi!h          ", "I!HI!HI!HI", 5); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); }
public void test01770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01770"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "{FALSE}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01771"); char[] charArray7 = new char[] { '#', ' ', ' ' }; boolean boolean8 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray7); char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#'); char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, (int) (byte) -1, (int) 'a'); int int14 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray7); int int15 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray7); org.apache.commons.lang3.ArrayUtils.reverse(charArray7); boolean boolean17 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "-1", charArray7); int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray7, 'a', (int) '#'); org.apache.commons.lang3.ArrayUtils.reverse(charArray7); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); }
public void test01772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01772"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01773"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi", "{H,4,#,H,H,H}"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01774"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("hi! hi!             ", (int) (short) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi!             " + "'", str2, "hi! hi!             "); }
public void test01775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01775"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}", "{100,100,100}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01776"); char[] charArray1 = org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY; int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray1, 'a', (int) '4'); boolean boolean5 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "!IHhi!hi!", charArray1); // The following exception was thrown during execution in test generation try { char[] charArray7 = org.apache.commons.lang3.ArrayUtils.remove(charArray1, (int) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray1); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); }
public void test01777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01777"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("AAAAAAA -1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AAAAAAA -1" + "'", str1, "AAAAAAA -1"); }
public void test01778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01778"); java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY; java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!H", ' '); boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray0, (java.lang.Object) "HI!HI!HI!H"); int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (short) 1); java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int14 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray13); int int15 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray13); java.lang.String[] strArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray13); java.lang.Comparable<java.lang.String>[] strComparableArray18 = org.apache.commons.lang3.ArrayUtils.add((java.lang.Comparable<java.lang.String>[]) strArray16, (java.lang.Comparable<java.lang.String>) "hi!"); int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray0, (java.lang.Object) "hi!"); int[] intArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0); // The following exception was thrown during execution in test generation try { int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray20, 1, 10); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray0); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(intArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]"); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strComparableArray18); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); org.junit.Assert.assertNotNull(intArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]"); }
public void test01779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01779"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("HI!HI!HI!", ' '); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01780"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("##########################h! h", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 30 + "'", int2 == 30); }
public void test01781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01781"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("         !hi!hi!h          "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!hi!hi!h" + "'", str1, "!hi!hi!h"); }
public void test01782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01782"); int int3 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01783"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "aaaaaaa -1", "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01784"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa" + "'", str2, "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); }
public void test01785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01785"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 317 + "'", int1 == 317); }
public void test01786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01786"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "HaI"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01787"); char[] charArray5 = new char[] { '#', 'a', 'a', '#' }; boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, ' '); char[] charArray14 = new char[] { '#', ' ', ' ' }; boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray14); char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray14, '#'); char[] charArray20 = org.apache.commons.lang3.ArrayUtils.subarray(charArray14, (int) (byte) -1, (int) 'a'); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray14); int int22 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray14); char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray14); char[] charArray24 = null; boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray23, charArray24); char[] charArray27 = org.apache.commons.lang3.ArrayUtils.add(charArray23, '4'); char[] charArray28 = org.apache.commons.lang3.ArrayUtils.clone(charArray27); char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray27, '#'); int int31 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "                ", charArray27); org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(charArray17); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray20); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, , ]"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertNotNull(charArray23); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(charArray27); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#aa## 4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#aa## 4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, a, a, #, #, , , 4]"); org.junit.Assert.assertNotNull(charArray28); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#aa## 4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#aa## 4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#, a, a, #, #, , , 4]"); org.junit.Assert.assertNotNull(charArray30); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#aa## 4#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#aa## 4#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, a, a, #, #, , , 4, #]"); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0); }
public void test01788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01788"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "!IH    ##########################h! h! !IH  ..."); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01789"); char[] charArray1 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) "hi!a   ", charArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01790"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("}", "                                                  ");
public void test01791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01791"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("hi! hi!                                               ", ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi!" + "'", str2, "hi! hi!"); }
public void test01792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01792"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH" + "'", str1, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); }
public void test01793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01793"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("#aa## ", "HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "#aa## " + "'", str2, "#aa## "); }
public void test01794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01794"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "{#,A,A,#,#, , }"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 15 + "'", int1 == 15); }
public void test01795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01795"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("hi!hi!hi", (int) (short) 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi" + "'", str2, "hi!hi!hi"); }
public void test01796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01796"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat(" -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "!IHhi! hi!", 52); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str3, " -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01797"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("I!HI!HI!HI", "{FALSE}", ""); org.junit.Assert.assertNull(strArray3); }
public void test01798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01798"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "   "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str2, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test01799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01799"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("hiHI!!", "i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...   i!hi!hAAAAAAAAAAAAAAAAAAAAAAA..."); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!!" + "'", str2, "HI!!"); }
public void test01800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01800"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", ' '); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01801"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("              HI!{#, ,              ", "4444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "              HI!{#, ,              " + "'", str2, "              HI!{#, ,              "); }
public void test01802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01802"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI", 'a', 36); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01803"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str2, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test01804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01804"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str2, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test01805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01805"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("!IH", "4444hi!hi!hi!4444444444444444444444                                ", "HI!!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IH" + "'", str3, "!IH"); }
public void test01806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01806"); java.lang.CharSequence charSequence0 = null; char[] charArray6 = new char[] { '#', ' ', ' ' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray6); char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray6, '#'); boolean boolean10 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "    hi!", charArray9); boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray9); boolean boolean12 = org.apache.commons.lang3.StringUtils.containsOnly(charSequence0, charArray9); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, , , #]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test01807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01807"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01808"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("    hi!    hi!    hi!    hi!", 36, 63); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " hi!" + "'", str3, " hi!"); }
public void test01809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01809"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("hiHI!!", "-------------------------------------------------------------------------------------------------"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01810"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("", '#'); java.lang.String str6 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, '4', 2968, (int) (short) 1); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test01811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01811"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!", "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01812"); char[] charArray1 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1", charArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01813"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("LSE}A{F", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01814"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("", "h! h! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01815"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("                ", (int) (byte) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                  " + "'", str2, "                                                  "); }
public void test01816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01816"); java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "   h! h!             ", (java.lang.CharSequence) "    HI!"); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "   h! h!             " + "'", charSequence2, "   h! h!             "); }
public void test01817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01817"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("             !ih !ih", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01818"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (int) (byte) -1, ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str3, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01819"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("{}i!", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01820"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01821"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("ahi!ahi!a                      ", 98); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ahi!ahi!a                      " + "'", str2, "ahi!ahi!a                      "); }
public void test01822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01822"); char[] charArray4 = new char[] { '#', 'a', 'a', '#' }; boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(charArray4, ' '); char[] charArray13 = new char[] { '#', ' ', ' ' }; boolean boolean14 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray13); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#'); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) -1, (int) 'a'); int int20 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray13); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray13); char[] charArray22 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13); char[] charArray23 = null; boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray22, charArray23); char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray22, '4'); char[] charArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray22); char[] charArray29 = new char[] { '4' }; char[] charArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray29, '#'); boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray29); boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray27, charArray29); int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray29, 'a', 8); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, , ]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertNotNull(charArray22); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(charArray26); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#aa## 4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#aa## 4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a, a, #, #, , , 4]"); org.junit.Assert.assertNotNull(charArray27); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, a, a, #, #, , ]"); org.junit.Assert.assertNotNull(charArray29); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[4]"); org.junit.Assert.assertNotNull(charArray31); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[4]"); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1)); }
public void test01823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01823"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("hI!HI!HI!", "{", 15); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01824"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01825"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("    HI!                                             ", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01826"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("{false}", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01827"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("", "i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...", "-", 9); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); }
public void test01828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01828"); java.lang.CharSequence charSequence1 = null; java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "!ih !ih", charSequence1); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "!ih !ih" + "'", charSequence2, "!ih !ih"); }
public void test01829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01829"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("0", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertNotNull(strArray2); }
public void test01830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01830"); java.lang.String[] strArray1 = null; int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("              HI!{#, ,              ", strArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01831"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "    HI!    HI!    HI!    HI!", (java.lang.CharSequence) "{#,a,a,#,#,,}hi!ahi!ahi!ahi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 37 + "'", int2 == 37); }
public void test01832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01832"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hiHI!!", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01833"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("HI4HI4HI4HI", "    HI!    HI!    HI!    HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI4HI4HI4HI" + "'", str2, "HI4HI4HI4HI"); }
public void test01834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01834"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str1, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test01835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01835"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("hiHI!!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hiHI!!" + "'", str1, "hiHI!!"); }
public void test01836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01836"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", (int) (short) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str2, "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test01837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01837"); java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY; java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!H", ' '); boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray0, (java.lang.Object) "HI!HI!HI!H"); int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (short) 1); java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6); int int9 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray7, (java.lang.Object) "444444444444444444444HI!HI!HI!4444444444444444444444"); java.lang.String str11 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) intArray7, '#'); org.junit.Assert.assertNotNull(intArray0); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(intArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]"); org.junit.Assert.assertNotNull(intArray7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test01838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01838"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################" + "'", str1, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################"); }
public void test01839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01839"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("hi!", "I!HI!HI!HI"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01840"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{", 317, 10); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01841"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01842"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", "hi!a   ", (int) (short) -1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01843"); long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY; java.lang.Long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toObject(longArray0); java.lang.Long[] longArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray1); java.lang.Long[] longArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray2); java.lang.Long[] longArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray3); java.lang.Long[] longArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray4); // The following exception was thrown during execution in test generation try { java.lang.String str9 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) longArray5, ' ', (-1), 99); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(longArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]"); org.junit.Assert.assertNotNull(longArray1); org.junit.Assert.assertNotNull(longArray2); org.junit.Assert.assertNotNull(longArray3); org.junit.Assert.assertNotNull(longArray4); org.junit.Assert.assertNotNull(longArray5); }
public void test01844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01844"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat(" -1{#,,,#,#, , }hi!hi!hi!hi!", 15); org.junit.Assert.assertEquals("'" + str2 + "' != '" + " -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi!" + "'", str2, " -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi!"); }
public void test01845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01845"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("-------------------------------------------------------------------------------------------------", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01846"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01847"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("hi!ahi!ahi!ahi!", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01848"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("hi! hi! ", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); java.lang.String str4 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, 'a'); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hiaahiaaa" + "'", str4, "hiaahiaaa"); }
public void test01849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01849"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "{100,100,100}!IH!IH!IH!I"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01850"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", ' '); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01851"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("!IH    "); org.junit.Assert.assertNotNull(strArray1); }
public void test01852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01852"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "{H,4,#,H,H,H}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01853"); java.lang.String[] strArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithAny("", strArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01854"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!"); }
public void test01855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01855"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); // The following exception was thrown during execution in test generation try { java.lang.String str6 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, 'a', (int) (byte) 0, 36); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray2); }
public void test01856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01856"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "!ih!ih"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01857"); java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY; java.lang.Integer[] intArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray0); int[] intArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) '4'); java.lang.Integer[] intArray4 = org.apache.commons.lang3.ArrayUtils.toObject(intArray3); int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4); char[] charArray13 = new char[] { '#', ' ', ' ' }; boolean boolean14 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray13); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#'); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) -1, (int) 'a'); int int20 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray13); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray13); org.apache.commons.lang3.ArrayUtils.reverse(charArray13); boolean boolean23 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "-1", charArray13); char[] charArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray13); int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray4, (java.lang.Object) charArray13); int int26 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) charArray13); org.junit.Assert.assertNotNull(intArray0); org.junit.Assert.assertNotNull(intArray1); org.junit.Assert.assertNotNull(intArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[]"); org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertNotNull(intArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[]"); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , , #]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, , ]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(charArray24); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), " #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), " #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ , , #]"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3); }
public void test01858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01858"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01859"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "...#h! h!", 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str3, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test01860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01860"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("HI!HI!HI!HI!", "hI!HI!HI!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertNull(str3); }
public void test01861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01861"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi"); }
public void test01862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01862"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "HI"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01863"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("HI!!", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!!" + "'", str2, "HI!!"); }
public void test01864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01864"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "0                                                  "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01865"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "##########################h! h", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01866"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih", "hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!I" + "'", str2, "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!I"); }
public void test01867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01867"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("", "hiaahiaaa"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01868"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("4444HI!HI!HI!4444444444444444444444", 45); org.junit.Assert.assertEquals("'" + strstr}
public void test01869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01869"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-------------------------------------------------------------------------------------------------", "    "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01870"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("HI!HI!HI!HI!", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HI!" + "'", str2, "HI!HI!HI!HI!"); }
public void test01871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01871"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I", " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01872"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", (-1)); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str2, "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01873"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "Hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01874"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "                                                 {}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01875"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase(" -1"); java.lang.Object[] objArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray3); int int5 = org.apache.commons.lang3.StringUtils.indexOfAny("", strArray3); java.lang.String[] strArray8 = org.apache.commons.lang3.StringUtils.split("hi!hi!hi!hi!", "100"); int int9 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence[]) strArray8); // The following exception was thrown during execution in test generation try { java.lang.String str10 = org.apache.commons.lang3.StringUtils.replaceEach("                                                 {}", strArray3, strArray8); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Search and Replace array lengths don't match: 3 vs 1"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(objArray4); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[ , -, 1]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[ , -, 1]"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1)); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); }
public void test01876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01876"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "                     !IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test01877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01877"); char[] charArray5 = new char[] { ' ', '4', 'a', '4' }; int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray5, 'a', 1); boolean boolean9 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "HI", charArray5); char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray5); // The following exception was thrown during execution in test generation try { char[] charArray12 = org.apache.commons.lang3.ArrayUtils.remove(charArray10, 15); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 15, Length: 4"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " 4a4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " 4a4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ , 4, a, 4]"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), " 4a4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), " 4a4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[ , 4, a, 4]"); }
public void test01878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01878"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", '4'); org.junit.Assert.assertNotNull(strArray2); }
public void test01879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01879"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("HI!!", ' '); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01880"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01881"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test01882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01882"); java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", (java.lang.CharSequence) " -1"); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", charSequence2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01883() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01883"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("Hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "I!HI!HI!HI!}001,001,001{I!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test01884() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01884"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("!IH10", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01885() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01885"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str1, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test01886() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01886"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("AAAAAAA#-1", (int) '4', 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01887() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01887"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd(" hi!", " -1{#,,,#,#, , }hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + " hi!" + "'", str2, " hi!"); }
public void test01888() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01888"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "{100,100,100}!IH!IH!IH!I"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01889() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01889"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("!IHhi!hi!", "a"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IHhi!hi!" + "'", str2, "!IHhi!hi!"); }
public void test01890() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01890"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("4444HI!HI!HI!4444444444444444444444                                ", ' '); byte[] byteArray6 = new byte[] { (byte) 100, (byte) 100, (byte) 100 }; boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) 100); byte[] byteArray9 = null; byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray9); byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray10); int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) -1); int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray11, (byte) 10); byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.clone(byteArray11); byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100, (byte) 100 }; boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(byteArray20, (byte) 100); byte[] byteArray23 = null; byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23); byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray24); int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) -1); int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray25, (byte) 10); byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.clone(byteArray25); byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.add(byteArray30, (byte) 0); byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray11, byteArray30); boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) "4444HI!HI!HI!4444444444444444444444                                ", (java.lang.Object) byteArray30); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(byteArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 100, 100]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertNotNull(byteArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]"); org.junit.Assert.assertNotNull(byteArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100, 100]"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertNotNull(byteArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100, 100]"); org.junit.Assert.assertNotNull(byteArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100, 100]"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(byteArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]"); org.junit.Assert.assertNotNull(byteArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100, 100]"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1)); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertNotNull(byteArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 100, 100]"); org.junit.Assert.assertNotNull(byteArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 100, 100, 0]"); org.junit.Assert.assertNotNull(byteArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 100, 100, 100, 100, 100]"); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); }
public void test01891() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01891"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.split("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             "); org.junit.Assert.assertNotNull(strArray1); }
public void test01892() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01892"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray6); java.lang.Object[] objArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray6); java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray6); java.lang.String[] strArray11 = org.apache.commons.lang3.StringUtils.stripAll(strArray6); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertNotNull(objArray9); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[hi!, hi!, , ]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[hi!, hi!, , ]"); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(strArray11); }
public void test01893() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01893"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01894() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01894"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}", ' ', (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01895() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01895"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("AAAAAAA -1", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01896() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01896"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("", "-", "Hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01897() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01897"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01898() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01898"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01899() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01899"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("hi!ahi!ahi!ahi!", '#'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01900() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01900"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str1, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01901() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01901"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); int int3 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence[]) strArray2); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test01902() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01902"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("", "            h! h!             ", 32); org.junit.Assert.assertNotNull(strArray3); }
public void test01903() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01903"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("hI!", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hI!" + "'", str3, "hI!"); }
public void test01904() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01904"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("{", 'a', '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{" + "'", str3, "{"); } @Test public void test01905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01905"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa" + "'", str2, "AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); } @Test public void test01906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01906"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "##########################h! h! "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); } @Test public void test01907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01907"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444", "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); } @Test public void test01908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01908"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("4444hi!hi!hi!4444444444444444444444                                ", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                       " + "'", str2, "                       "); } @Test public void test01909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01909"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); } @Test public void test01910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01910"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             ", "-1", 6); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); } @Test public void test01911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01911"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("h! h! ", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "h! h! " + "'", str2, "h! h! "); } @Test public void test01912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01912"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("!IHhi! hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IHhi! hi!" + "'", str1, "!IHhi! hi!"); } @Test public void test01913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01913"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); } @Test public void test01914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01914"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); } @Test public void test01915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01915"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("-", "    ", (int) 'a'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); } @Test public void test01916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01916"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih", 4, "}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih" + "'", str3, "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih"); } @Test public void test01917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01917"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (java.lang.CharSequence) "hi! I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444!                                               "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3); } @Test public void test01918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01918"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "HaI"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); } @Test public void test01919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01919"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "HI! HI!                                               ", "{#,A,A,#,#, , }", 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str4, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); } @Test public void test01920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01920"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("}", "4444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}" + "'", str2, "}"); }
public void test01905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01905"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa" + "'", str2, "AIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); }
public void test01906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01906"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "##########################h! h! "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01907"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444", "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01908"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("4444hi!hi!hi!4444444444444444444444                                ", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                       " + "'", str2, "                       "); }
public void test01909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01909"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01910"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             ", "-1", 6); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01911"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("h! h! ", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "h! h! " + "'", str2, "h! h! "); }
public void test01912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01912"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("!IHhi! hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IHhi! hi!" + "'", str1, "!IHhi! hi!"); }
public void test01913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01913"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01914"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01915"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("-", "    ", (int) 'a'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01916"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih", 4, "}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih" + "'", str3, "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih"); }
public void test01917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01917"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (java.lang.CharSequence) "hi! I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444!                                               "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3); }
public void test01918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01918"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "HaI"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01919"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "HI! HI!                                               ", "{#,A,A,#,#, , }", 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str4, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test01920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01920"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("}", "4444HI!HI!HI!4444444444444444444444");
public void test01921() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01921"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) " -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi! -1{#,,,#,#, , }hi!hi!hi!hi!", "             !ih !ih"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01922() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01922"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("{100,100,100}!IH!IH!IH!I", 4, "{#,a,a,#,#, , }"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{100,100,100}!IH!IH!IH!I" + "'", str3, "{100,100,100}!IH!IH!IH!I"); }
public void test01923() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01923"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 56 + "'", int1 == 56); }
public void test01924() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01924"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains(" -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1", '4'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01925() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01925"); java.lang.Double[][][][] doubleArray0 = new java.lang.Double[][][][] {}; java.lang.Double[][][][] doubleArray1 = new java.lang.Double[][][][] {}; java.lang.Double[][][][] doubleArray2 = new java.lang.Double[][][][] {}; java.lang.Double[][][][] doubleArray3 = new java.lang.Double[][][][] {}; java.lang.Double[][][][] doubleArray4 = new java.lang.Double[][][][] {}; java.lang.Double[][][][] doubleArray5 = new java.lang.Double[][][][] {}; java.lang.Double[][][][][] doubleArray6 = new java.lang.Double[][][][][] { doubleArray0, doubleArray1, doubleArray2, doubleArray3, doubleArray4, doubleArray5 }; long[] longArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY; int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray7, (long) 0); java.lang.Double[][][][][] doubleArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray6, (java.lang.Object) int9); java.lang.String[] strArray13 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("hi!hi!", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); int int14 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence[]) strArray13); boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) doubleArray6, (java.lang.Object[]) strArray13); org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray6); org.junit.Assert.assertNotNull(doubleArray0); org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertNotNull(longArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test01926() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01926"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("HaI", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01927() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01927"); char[] charArray4 = new char[] { '#', ' ', ' ' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray4); char[] charArray7 = org.apache.commons.lang3.ArrayUtils.add(charArray4, '#'); char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray4, (int) (byte) -1, (int) 'a'); char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray10, (int) (byte) 1, 52); java.lang.String[] strArray19 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("{100,100,100}", "", 10); int int20 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", strArray19); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny("h! h! ", strArray19); boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) (byte) 1, (java.lang.Object) strArray19); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, , ]"); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , ]"); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test01928() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01928"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removea'); org.junit.Assert.assertEquals("'" + strstr}
public void test01929() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01929"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("", "!IHhi! hi!", 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01930() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01930"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", "!IHhi!hi!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test01931() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01931"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("HI! HI! ", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01932() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01932"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("hi! hi! ", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01933() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01933"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 40 + "'", int1 == 40); }
public void test01934() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01934"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", 8); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa" + "'", str4, "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); }
public void test01935() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01935"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("{FALSE}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{FALSE}" + "'", str1, "{FALSE}"); }
public void test01936() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01936"); java.lang.Byte[] byteArray1 = new java.lang.Byte[] { (byte) 10 }; byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100); java.lang.String str7 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray1, '4', (int) (byte) 10, (int) (short) 10); java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1); byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100); byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 0); boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray12); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10]"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(byteArray8); org.junit.Assert.assertNotNull(byteArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10]"); org.junit.Assert.assertNotNull(byteArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]"); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); }
public void test01937() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01937"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I", 98, "              hi!{#, ,              "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I" + "'", str3, "4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I"); }
public void test01938() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01938"); byte[] byteArray0 = new byte[] {}; byte[] byteArray1 = org.apache.commons.lang3.ArrayUtils.clone(byteArray0); byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray0); byte[] byteArray3 = null; byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray3); byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray2, byteArray3); boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(byteArray5, (byte) 10); byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY; byte[] byteArray9 = null; byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray8, byteArray9); boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray5, byteArray10); java.lang.Byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray10); // The following exception was thrown during execution in test generation try { java.lang.String str16 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray12, "    HI!", (int) (short) 1, (int) '#'); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(byteArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]"); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]"); org.junit.Assert.assertNotNull(byteArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]"); org.junit.Assert.assertNotNull(byteArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]"); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(byteArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]"); org.junit.Assert.assertNotNull(byteArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]"); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(byteArray12); }
public void test01939() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01939"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih", "", 98, 54); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH" + "'", str4, "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH"); }
public void test01940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01940"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("", "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444"); org.junit.Assert.assertNull(str2); }
public void test01941() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01941"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", '#', 5); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01942() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01942"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    " + "'", str2, "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    "); }
public void test01943() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01943"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1, "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01944() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01944"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "444444444444...!HI!HI!444444444444" + "'", str1, "444444444444...!HI!HI!444444444444"); }
public void test01945() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01945"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("4444hi!hi!hi!4444444444444444444444                                ", "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4444hi!hi!hi!4444444444444444444444                                " + "'", str2, "4444hi!hi!hi!4444444444444444444444                                "); }
public void test01946() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01946"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("", "!HI!HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01947() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01947"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "{FALSE}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{FALSE}" + "'", str1, "{FALSE}"); }
public void test01948() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01948"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", "hi! hi!                                               ", "IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!I", 98); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444" + "'", str4, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444"); }
public void test01949() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01949"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", 'a'); org.junit.Assert.assertNotNull(strArray2); }
public void test01950() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01950"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 57 + "'", int2 == 57); }
public void test01951() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01951"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01952() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01952"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("hi! hi! ", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01953() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01953"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray5 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray6 = org.apache.commons.lang3.ArrayUtils.addAll(strArray2, strArray5); java.lang.String[] strArray7 = org.apache.commons.lang3.StringUtils.stripAll(strArray5); int int8 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence[]) strArray5); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test01954() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01954"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("!HI!HI!", ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!HI!HI!" + "'", str2, "!HI!HI!"); }
public void test01955() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01955"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "                "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "                " + "'", str1, "                "); }
public void test01956() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01956"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("HI!HI!HI!HI!", 36); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HI!" + "'", str2, "HI!HI!HI!HI!"); }
public void test01957() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01957"); java.lang.String[] strArray0 = null; java.lang.String str1 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray0); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test01958() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01958"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove(" hi!", "...#h! h!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + " hi!" + "'", str2, " hi!"); }
public void test01959() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01959"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("         !hi!hi!h          ", "!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01960() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01960"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "lse}a{f", "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str3, "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01961() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01961"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "HI! HI!                       "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01962() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01962"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01963() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01963"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("tru", "hi!a", 63); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01964() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01964"); java.lang.String[] strArray1 = null; java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("-1", ""); java.lang.String[] strArray6 = org.apache.commons.lang3.StringUtils.stripAll(strArray4, ""); java.lang.String str7 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", strArray1, strArray4); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str7, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01965() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01965"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 94 + "'", int1 == 94); }
public void test01966() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01966"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToEmpty("...#h! h!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "...#h! h!" + "'", str1, "...#h! h!"); }
public void test01967() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01967"); java.lang.String[] strArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithAny("HI!HI!HI!HI!", strArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01968() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01968"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("hiHI!!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hiHI!!" + "'", str1, "hiHI!!"); }
public void test01969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01969"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("4444HI!HI!HI!4444444444444444444444                                ", 7, 100); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444HI!HI!HI!4444444444444444444444                                " + "'", str3, "4444HI!HI!HI!4444444444444444444444                                "); }
public void test01970() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01970"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", (int) (byte) 100, (int) ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "...44444444444444444444444444444" + "'", str3, "...44444444444444444444444444444"); }
public void test01971() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01971"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!"); }
public void test01972() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01972"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.split("-1", "hi!", 0); java.lang.String[] strArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray4); int int6 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", strArray4); long[] longArray7 = new long[] {}; boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(longArray7, 0L); long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray7, (long) (short) 100); long[] longArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) (-1)); long[] longArray20 = new long[] { 'a', (byte) 0, '#', (-1L), (-1L), '4' }; int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, 0L, 100); long[] longArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray20, (long) (byte) 0); long[] longArray28 = new long[] { (short) -1, (short) 1 }; int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray28, (long) 100, (int) ' '); int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray28, (long) 10, (int) (short) 10); boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray20, longArray28); long[] longArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray20, 1L); long[] longArray39 = org.apache.commons.lang3.ArrayUtils.remove(longArray37, 3); long[] longArray40 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray39); long[] longArray41 = new long[] {}; boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(longArray41, 0L); long[] longArray45 = org.apache.commons.lang3.ArrayUtils.add(longArray41, (long) (short) 100); long[] longArray47 = org.apache.commons.lang3.ArrayUtils.add(longArray45, (long) (byte) 0); long[] longArray48 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray45); org.apache.commons.lang3.ArrayUtils.reverse(longArray45); long[] longArray50 = org.apache.commons.lang3.ArrayUtils.clone(longArray45); boolean boolean51 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) strArray4, (java.lang.Object) longArray45); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(longArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(longArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[100]"); org.junit.Assert.assertNotNull(longArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]"); org.junit.Assert.assertNotNull(longArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[97, 0, 35, -1, -1, 52]"); org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1)); org.junit.Assert.assertNotNull(longArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[97, 35, -1, -1, 52]"); org.junit.Assert.assertNotNull(longArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 1]"); org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1)); org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1)); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(longArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[97, 0, 35, -1, -1, 52]"); org.junit.Assert.assertNotNull(longArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[97, 0, 35, -1, 52]"); org.junit.Assert.assertNotNull(longArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[97, 0, 35, -1, 52]"); org.junit.Assert.assertNotNull(longArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(longArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[100]"); org.junit.Assert.assertNotNull(longArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[100, 0]"); org.junit.Assert.assertNotNull(longArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[100]"); org.junit.Assert.assertNotNull(longArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[100]"); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); }
public void test01973() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01973"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "{100,100,100}!IH!IH!IH!I", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01974() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01974"); java.lang.Byte[] byteArray1 = new java.lang.Byte[] { (byte) 10 }; byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100); java.lang.String str7 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray1, '4', (int) (byte) 10, (int) (short) 10); java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1); byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray8, (byte) -1); // The following exception was thrown during execution in test generation try { byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, 7, (byte) 0); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10]"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(byteArray8); org.junit.Assert.assertNotNull(byteArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10]"); }
public void test01975() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01975"); java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", (java.lang.CharSequence) "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", charSequence2, "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01976() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01976"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith(" -1", "                       "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01977() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01977"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("    hi!    hi!    hi!    hi!", "{}i!", "!ih !ih", 9); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str4, "    hi!    hi!    hi!    hi!"); }
public void test01978() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01978"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("ahi!ahi!a                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ahi!ahi!a                      " + "'", str1, "ahi!ahi!a                      "); }
public void test01979() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01979"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!hi!hi!hi"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!" + "'", str2, "!"); }
public void test01980() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01980"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("hi!hi!", " -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!IHhi! hi! -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01981() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01981"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("hi!a   ", "{#,,,#,#, , }hi!hi!hi!hi!", 36); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01982() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01982"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("    ", 8, 40); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01983() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01983"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("hi!hi!hi!", 54); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                       hi!hi!hi!" + "'", str2, "                       hi!hi!hi!"); }
public void test01984() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01984"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "hI!HI!HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!" + "'", str1, "hI!HI!HI!"); }
public void test01985() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01985"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("{}i", 7, '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}i4444" + "'", str3, "{}i4444"); }
public void test01986() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01986"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("HI! HI!                                               ", (int) (byte) 10, '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI! HI!                                               " + "'", str3, "HI! HI!                                               "); }
public void test01987() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01987"); java.lang.Integer[] intArray0 = null; java.lang.Integer[] intArray1 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray0); int[] intArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray1); java.lang.Integer[] intArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray1); java.lang.String[] strArray6 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("444444444444444444444HI!HI!HI!4444444444444444444444", "hi! hi!                                               "); int int7 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray3, (java.lang.Object) "hi! hi!                                               "); org.junit.Assert.assertNotNull(intArray1); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[]"); org.junit.Assert.assertNotNull(intArray3); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1)); }
public void test01988() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01988"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...", "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", 10); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA..." + "'", str3, "i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA...-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-i!hi!hAAAAAAAAAAAAAAAAAAAAAAA..."); }
public void test01989() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01989"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "hi!{#, ,{"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01990() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01990"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("HaI", 9, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "######HaI" + "'", str3, "######HaI"); }
public void test01991() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01991"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("hi!hi!hi!h", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 5); java.lang.Short[] shortArray10 = new java.lang.Short[] { (short) -1, (short) -1, (short) 100, (short) -1, (short) 0 }; short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10, (short) 0); short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray10); char[] charArray18 = new char[] { '#', 'a', 'a', '#' }; boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(charArray18, ' '); char[] charArray27 = new char[] { '#', ' ', ' ' }; boolean boolean28 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray27); char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray27, '#'); char[] charArray33 = org.apache.commons.lang3.ArrayUtils.subarray(charArray27, (int) (byte) -1, (int) 'a'); int int34 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray27); int int35 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray27); char[] charArray36 = org.apache.commons.lang3.ArrayUtils.addAll(charArray18, charArray27); char[] charArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray36, ' '); boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray10, (java.lang.Object) charArray36); char[] charArray40 = org.apache.commons.lang3.ArrayUtils.clone(charArray36); boolean boolean41 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "{#,a,a,#,#, , }hi!ahi!ahi!ahi!", charArray40); char[] charArray42 = org.apache.commons.lang3.ArrayUtils.clone(charArray40); boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 5, (java.lang.Object) charArray40); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(shortArray10); org.junit.Assert.assertNotNull(shortArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[-1, -1, 100, -1, 0]"); org.junit.Assert.assertNotNull(shortArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[-1, -1, 100, -1, 0]"); org.junit.Assert.assertNotNull(charArray18); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(charArray27); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(charArray30); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray33); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, , ]"); org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1)); org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1)); org.junit.Assert.assertNotNull(charArray36); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, a, a, #, #, , ]"); org.junit.Assert.assertNotNull(charArray38); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, a, a, #, #, ]"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(charArray40); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true); org.junit.Assert.assertNotNull(charArray42); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); }
public void test01992() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01992"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = null; boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray13); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7); int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true, 0); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); }
public void test01993() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01993"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("hi! hi! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi! " + "'", str1, "hi! hi! "); }
public void test01994() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01994"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("    hi!    hi!    hi!    hi!"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.stripAll(strArray2); java.lang.String[] strArray4 = null; java.lang.String str5 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("hi!hi!", strArray3, strArray4); java.lang.String str6 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray4); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!hi!" + "'", str5, "hi!hi!"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test01995() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01995"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("!IH"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH" + "'", str1, "!IH"); }
public void test01996() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01996"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("{#,,,#,#, , }hi!hi!hi!hi!", "LSE}A{F"); org.junit.Assert.assertNotNull(strArray2); }
public void test01997() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01997"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("4444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!44444444444444444444444444HI!HI!HI!4444444444444444444444", 0, 32); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444HI!HI!HI!4444444444444444444" + "'", str3, "4444HI!HI!HI!4444444444444444444"); }
public void test01998() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01998"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("aaaaaaa -1", "h! h! "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01999() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test01999"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , -4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , }", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + " -4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , }" + "'", str2, " -4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , }"); } @Test public void test02000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test02000"); char[] charArray4 = new char[] { '#', 'a', 'a', '#' }; boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(charArray4, ' '); char[] charArray13 = new char[] { '#', ' ', ' ' }; boolean boolean14 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray13); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#'); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) -1, (int) 'a'); int int20 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray13); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray13); char[] charArray22 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13); int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, ' '); int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, 'a', (int) (byte) 1); int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', 98); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, , ]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertNotNull(charArray22); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2); org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1)); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); } }
public void test02000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test02000"); char[] charArray4 = new char[] { '#', 'a', 'a', '#' }; boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(charArray4, ' '); char[] charArray13 = new char[] { '#', ' ', ' ' }; boolean boolean14 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray13); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#'); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) -1, (int) 'a'); int int20 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray13); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray13); char[] charArray22 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13); int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, ' '); int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, 'a', (int) (byte) 1); int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', 98); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, , ]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertNotNull(charArray22); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2); org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1)); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); }
public void test00501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00501"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("h! h! ", '4'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00502"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("##########################h! h! ", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "##########################h! h! " + "'", str2, "##########################h! h! "); }
public void test00503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00503"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "{}", (-1)); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00504"); char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00505"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("    hi!", (int) (short) 1, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    hi!" + "'", str3, "    hi!"); }
public void test00506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00506"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("  ", "HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!" + "'", str2, "HI!HI!HI!"); }
public void test00507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00507"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH" + "'", str1, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); }
public void test00508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00508"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("-1", "444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00509"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("    hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", ""); org.junit.Assert.assertNull(str3); }
public void test00510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00510"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) "{}i!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00511"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "{}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00512"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00513"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("   ", (int) (byte) -1, ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "   " + "'", str3, "   "); }
public void test00514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00514"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("HI!HI!HI!", "444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str2, "444444444444...!hi!hi!444444444444"); }
public void test00515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00515"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("    HI!", (int) (byte) 1, '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    HI!" + "'", str3, "    HI!"); }
public void test00516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00516"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("{}", 99, ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                                                 {}" + "'", str3, "                                                 {}"); }
public void test00517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00517"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00518"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("    hi!", "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00519"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH", "444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH" + "'", str2, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); }
public void test00520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00520"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00521"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     " + "'", str1, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     "); }
public void test00522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00522"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.split("-1", "hi!", 0); java.lang.String[] strArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray4); int int6 = org.apache.commons.lang3.StringUtils.indexOfAny("!IH", strArray4); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test00523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00523"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("  "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "  " + "'", str1, "  "); }
public void test00524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00524"); java.lang.CharSequence[] charSequenceArray0 = null; int int1 = org.apache.commons.lang3.StringUtils.indexOfDifference(charSequenceArray0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1)); }
public void test00525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00525"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("444444444444...!hi!hi!444444444444", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00526"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "444444444444444444444HI!HI!HI!4444444444444444444444" + "'", str1, "444444444444444444444HI!HI!HI!4444444444444444444444"); }
public void test00527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00527"); java.lang.Object[] objArray0 = null; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertNull(str2); }
public void test00528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00528"); java.lang.Object[] objArray0 = null; java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray0, '#', 6, (int) '#'); org.junit.Assert.assertNull(str4); }
public void test00529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00529"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00530"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "hi!hi!", 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00531"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("    hi!    hi!    hi!    hi!", "HI!HI!HI!H"); java.lang.String str5 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray3, 'a'); boolean boolean6 = org.apache.commons.lang3.StringUtils.startsWithAny("...!hi!hi!", strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str5, "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test00532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00532"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", (int) (byte) 10, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-" + "'", str3, "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); }
public void test00533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00533"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00534"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("   ", "                                                 {}"); org.junit.Assert.assertNull(str2); }
public void test00535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00535"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("hi!hi!hi!hi!", '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!" + "'", str2, "hi!hi!hi!hi!"); }
public void test00536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00536"); java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray7); int int9 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray7); java.lang.Object[] objArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray7); java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray7); boolean boolean12 = org.apache.commons.lang3.StringUtils.startsWithAny("!IH    ", strArray7); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); org.junit.Assert.assertNotNull(objArray10); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[hi!, hi!, , ]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[hi!, hi!, , ]"); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); }
public void test00537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00537"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 34, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str3, "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test00538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00538"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 4); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str2, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test00539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00539"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertNotNull(strArray1); }
public void test00540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00540"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", (java.lang.CharSequence) "{#,a,a,#,#, , }"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 98 + "'", int2 == 98); }
public void test00541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00541"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("HI!HI!HI!", 'a', '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!" + "'", str3, "HI!HI!HI!"); }
public void test00542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00542"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("{}", 'a'); java.lang.String[] strArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray2); java.lang.String[] strArray4 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray3); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(strArray4); }
public void test00543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00543"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray6); java.lang.String[] strArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray6); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(strArray9); java.lang.Object[] objArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray9); int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray11, (java.lang.Object) ""); java.lang.String str15 = org.apache.commons.lang3.StringUtils.join(objArray11, ' '); java.lang.String str17 = org.apache.commons.lang3.StringUtils.join(objArray11, "hi!hi!hi!h"); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(objArray11); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[hi!, hi!, , ]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[hi!, hi!, , ]"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi! hi! " + "'", str15, "hi! hi! "); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h" + "'", str17, "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); }
public void test00544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00544"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("!IH", "                                                 {}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH" + "'", str2, "!IH"); }
public void test00545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00545"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", '4'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00546"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "!IH"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00547"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi!hi!hi!h", '4', ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!h" + "'", str3, "hi!hi!hi!h"); }
public void test00548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00548"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!hi!", '4'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00549"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("-", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00550"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("h! h! ", "hi! hi! ", "{100,100,100}", (int) ' '); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "h! h! " + "'", str4, "h! h! "); }
public void test00551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00551"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("    hi!", "{false}", (int) 'a'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00552"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", 6, ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str3, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test00553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00553"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00554"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("    hi!    hi!    hi!    hi!", "", "100"); org.junit.Assert.assertNull(str3); }
public void test00555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00555"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToEmpty("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00556"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", (int) (byte) 0, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str3, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test00557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00557"); java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY; java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!H", ' '); boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray0, (java.lang.Object) "HI!HI!HI!H"); int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (short) 1); byte[] byteArray7 = null; byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray7); java.lang.Byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray0, (java.lang.Object) byteArray8); java.lang.Class<?> wildcardClass11 = intArray0.getClass(); org.junit.Assert.assertNotNull(intArray0); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(intArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]"); org.junit.Assert.assertNotNull(byteArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]"); org.junit.Assert.assertNotNull(byteArray9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test00558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00558"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str1, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test00559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00559"); java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "...!hi!hi!", (java.lang.CharSequence) "   "); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "...!hi!hi!" + "'", charSequence2, "...!hi!hi!"); }
public void test00560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00560"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("{}", "{false}", 100); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}" + "'", str3, "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); }
public void test00561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00561"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "                         -1"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 52 + "'", int1 == 52); }
public void test00562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00562"); java.lang.String[] strArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithAny("{#,a,a,#,#, , }", strArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00563"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = null; boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray13); boolean[] booleanArray15 = null; boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray14, booleanArray15); // The following exception was thrown during execution in test generation try { boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.add(booleanArray15, 4, true); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 0"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test00564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00564"); java.lang.CharSequence charSequence0 = null; char[] charArray6 = new char[] { '#', ' ', ' ' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray6); char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray6, '#'); char[] charArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charArray6, (int) (byte) -1, (int) 'a'); int int13 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray6); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray6, (int) (short) 1, ' '); boolean boolean17 = org.apache.commons.lang3.StringUtils.containsOnly(charSequence0, charArray6); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray12); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, , ]"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , ]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test00565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00565"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00566"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi!hi!hi!h", 'a', 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!h" + "'", str3, "hi!hi!hi!h"); }
public void test00567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00567"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("444444444444444444444HI!HI!HI!4444444444444444444444", (int) '#'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4444HI!HI!HI!4444444444444444444444" + "'", str2, "4444HI!HI!HI!4444444444444444444444"); }
public void test00568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00568"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("hi! hi! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi!" + "'", str1, "hi! hi!"); }
public void test00569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00569"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", (int) '#', "-"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00570"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("hi! hi!", ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!" + "'", str2, "hi!hi!"); }
public void test00571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00571"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("HI!", "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!" + "'", str2, "HI!"); }
public void test00572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00572"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("hi!", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00573"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      ", "100"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      " + "'", str2, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); }
public void test00574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00574"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("{false}", "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{false}" + "'", str2, "{false}"); }
public void test00575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00575"); boolean[] booleanArray1 = new boolean[] { false }; java.lang.Object[] objArray2 = new java.lang.Object[] {}; java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray2, ' '); java.lang.Object obj5 = null; int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray2, obj5); boolean[] booleanArray9 = new boolean[] { true, false }; boolean[] booleanArray10 = null; boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray9, booleanArray10); boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(objArray2, (java.lang.Object) booleanArray9); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray9); int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, true, 6); org.junit.Assert.assertNotNull(booleanArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[false]"); org.junit.Assert.assertNotNull(objArray2); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, true, false]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); }
public void test00576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00576"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("    HI!    HI!    HI!    HI!", 99, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str3, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test00577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00577"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("    HI!    HI!    HI!    HI!", "   ", "{#,a,a,#,#, , }", (int) (short) 100); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str4, "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test00578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00578"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("", 'a'); // The following exception was thrown during execution in test generation try { java.lang.String str6 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, "hi!hi!hi!h", (int) (byte) 0, (int) (short) 10); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray2); }
public void test00579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00579"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("4444HI!HI!HI!4444444444444444444444", 98); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4444HI!HI!HI!4444444444444444444444                                " + "'", str2, "4444HI!HI!HI!4444444444444444444444                                "); }
public void test00580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00580"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      " + "'", str1, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); }
public void test00581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00581"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00582"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "{}i"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00583"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00584"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!h" + "'", str1, "hi!hi!hi!h"); }
public void test00585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00585"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      ", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00586"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("                ", 0, "                         -1"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                " + "'", str3, "                "); }
public void test00587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00587"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00588"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00589"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("!IH    "); org.junit.Assert.assertNotNull(strArray1); }
public void test00590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00590"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "h! h! ", (java.lang.CharSequence) "{}i!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00591"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "  "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00592"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH", "h! h! "); org.junit.Assert.assertNull(strArray3); }
public void test00593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00593"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("", "                         -1", 45); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00594"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) "h! h! "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00595"); java.lang.String[] strArray1 = null; java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("    hi!    hi!    hi!    hi!"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("HI!", strArray1, strArray3); java.lang.String str6 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) "HI!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "HI!" + "'", str4, "HI!"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "HI!" + "'", str6, "HI!"); }
public void test00596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00596"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("    HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    HI!" + "'", str1, "    HI!"); }
public void test00597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00597"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("hi!", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      ", "{false}", 2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!"); }
public void test00598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00598"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "-1"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00599"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00600"); java.lang.CharSequence charSequence0 = null; java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize(charSequence0); org.junit.Assert.assertNull(str1); }
public void test00601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00601"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("100", "", (int) (byte) 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3); }
public void test00602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00602"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) "##########################h! h! "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00603"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!hi!hi!hi!", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00604"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("HI!", ' ', (int) (short) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00605"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("{}", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00606"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "HI!HI!HI!", (java.lang.CharSequence) "...!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7); }
public void test00607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00607"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("{}i!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}i!" + "'", str1, "{}i!"); }
public void test00608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00608"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "    HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00609"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100); }
public void test00610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00610"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("h! h! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "h! h! " + "'", str1, "h! h! "); }
public void test00611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00611"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("HI!", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!" + "'", str2, "HI!"); }
public void test00612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00612"); char[] charArray5 = new char[] { '#', 'a', ' ' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", charArray5); boolean boolean7 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!", charArray5); int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray5, '#', 0); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray5, ' '); org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2); }
public void test00613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00613"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) "                                                 {}", (java.lang.CharSequence) "HI!HI!HI!H"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00614"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("", "                         -1"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00615"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "##########################h! h! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "##########################h! h! " + "'", str1, "##########################h! h! "); }
public void test00616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00616"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00617"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!hi!" + "'", str1, "hi!hi!hi!hi!"); }
public void test00618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00618"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}", "-", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertNull(strArray3); }
public void test00619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00619"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "##########################h! h! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str2, "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test00620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00620"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("4444HI!HI!HI!4444444444444444444444", (int) (short) 0, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444HI!HI!HI!4444444444444444444444" + "'", str3, "4444HI!HI!HI!4444444444444444444444"); }
public void test00621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00621"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("    HI!    HI!    HI!    HI!", "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00622"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("100", "100"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00623"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "h! h! ", "    HI!    HI!    HI!    HI!", 3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str4, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00624"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("{100,100,100}", (int) '#', "!IH"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IH!IH!IH!I{100,100,100}!IH!IH!IH!I" + "'", str3, "!IH!IH!IH!I{100,100,100}!IH!IH!IH!I"); }
public void test00625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00625"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = null; boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray13); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray14); // The following exception was thrown during execution in test generation try { boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray14, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 2"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false]"); }
public void test00626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00626"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("##########################h! h! ", (int) (byte) 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "##########################h! h! " + "'", str2, "##########################h! h! "); }
public void test00627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00627"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00628"); char[] charArray5 = new char[] { '#', ' ', ' ' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray5); char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray5, '#'); char[] charArray11 = org.apache.commons.lang3.ArrayUtils.subarray(charArray5, (int) (byte) -1, (int) 'a'); int int12 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray5); char[] charArray15 = org.apache.commons.lang3.ArrayUtils.add(charArray5, (int) (short) 1, ' '); // The following exception was thrown during execution in test generation try { char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray15, (int) (short) 10, ' '); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(charArray8); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray11); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, , ]"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertNotNull(charArray15); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#, , , ]"); }
public void test00629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00629"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("h! h! ", "{false}"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00630"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("hi!hi!hi!hi!", "", "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h", 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!hi!hi!hi!" + "'", str4, "hi!hi!hi!hi!"); }
public void test00631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00631"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("hi! hi! ", (int) ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi!             " + "'", str2, "hi! hi!             "); }
public void test00632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00632"); char[] charArray4 = new char[] { '#', 'a', ' ' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", charArray4); boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray4); // The following exception was thrown during execution in test generation try { char[] charArray8 = org.apache.commons.lang3.ArrayUtils.remove(charArray4, 98); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 98, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test00633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00633"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("{}", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00634"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("444444444444...!hi!hi!444444444444", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str2, "444444444444...!hi!hi!444444444444"); }
public void test00635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00635"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!" + "'", str1, "hi!hi!hi!"); }
public void test00636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00636"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "                                                 {}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00637"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("HI!", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00638"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) "hi!", (java.lang.CharSequence) "   "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00639"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("                ", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00640"); java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY; java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!H", ' '); boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray0, (java.lang.Object) "HI!HI!HI!H"); int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (short) 1); int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, 0); // The following exception was thrown during execution in test generation try { int[] intArray10 = org.apache.commons.lang3.ArrayUtils.remove(intArray6, (int) '4'); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray0); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(intArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test00641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00641"); char[] charArray4 = new char[] { '#', ' ', ' ' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray4); char[] charArray7 = org.apache.commons.lang3.ArrayUtils.add(charArray4, '#'); boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray4); int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray4, '#'); char[] charArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray4); char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 1, 'a'); boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray14); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, , , #]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(charArray11); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, , ]"); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, a, , ]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test00642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00642"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     " + "'", str1, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     "); }
public void test00643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00643"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("                                                 {}", '#', (int) (byte) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00644"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "hi!hi!hi!hi!", "100"); org.junit.Assert.assertNull(str3); }
public void test00645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00645"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "hi!ahi!ahi!ahi!", 2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00646"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "100"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00647"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("", "    hi!    hi!    hi!    hi!", ""); org.junit.Assert.assertNull(str3); }
public void test00648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00648"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("4444HI!HI!HI!4444444444444444444444                                ", 'a', (int) (short) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00649"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00650"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00651"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "{100,100,100}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00652"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!" + "'", str1, "hi!hi!hi!"); }
public void test00653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00653"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("HI!HI!HI!H", 2); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI" + "'", str2, "HI"); }
public void test00654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00654"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) "-1"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00655"); java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int9 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray8); int int10 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray8); java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray8); int int12 = org.apache.commons.lang3.StringUtils.indexOfAny("", strArray8); int int13 = org.apache.commons.lang3.StringUtils.indexOfAny("-1", strArray8); java.lang.Object[] objArray14 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray8); // The following exception was thrown during execution in test generation try { java.util.Map<java.lang.Object, java.lang.Object> objMap15 = org.apache.commons.lang3.ArrayUtils.toMap(objArray14); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, 'hi!', is neither of type Map.Entry nor an Array"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); org.junit.Assert.assertNotNull(objArray14); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[hi!, hi!, , ]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[hi!, hi!, , ]"); }
public void test00656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00656"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00657"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00658"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("", "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00659"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "HI!HI!HI!", 4); java.lang.String str4 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) "HI!HI!HI!"); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "HI!HI!HI!" + "'", str4, "HI!HI!HI!"); }
public void test00660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00660"); java.lang.String[] strArray0 = null; java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.stripAll(strArray0, ""); org.junit.Assert.assertNull(strArray2); }
public void test00661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00661"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("", 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00662"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "hi! hi! "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 9 + "'", int1 == 9); }
public void test00663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00663"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00664"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("    HI!"); org.junit.Assert.assertNotNull(strArray1); }
public void test00665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00665"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH", '#'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00666"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("", "  ", "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00667"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00668"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("hi!ahi!ahi!ahi!", "{#,a,a,#,#, , }", (int) (short) -1, 0); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{#,a,a,#,#, , }hi!ahi!ahi!ahi!" + "'", str4, "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); }
public void test00669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00669"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("", '4', 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00670"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00671"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00672"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("hi! hi!             ", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 34); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             " + "'", str3, "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             "); }
public void test00673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00673"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("hi!ahi!ahi!ahi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ahi!ahi!a" + "'", str2, "ahi!ahi!a"); }
public void test00674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00674"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00675"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "-1"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str2, "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test00676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00676"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("HI!HI!HI!H", "hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00677"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("HI!HI!HI!H", 10, 3); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00678"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", '#'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00679"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("HI", "{false}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI" + "'", str2, "HI"); }
public void test00680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00680"); java.lang.Object[] objArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY; // The following exception was thrown during execution in test generation try { java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray0, ' ', 0, 4); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); }
public void test00681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00681"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "hi!hi!hi!hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertNull(str3); }
public void test00682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00682"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, false); boolean[] booleanArray22 = new boolean[] { false, false, true, true, false, false }; boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray22, (int) (byte) 0, 4); boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray25); boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray15, booleanArray25); org.apache.commons.lang3.ArrayUtils.reverse(booleanArray25); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false, false]"); org.junit.Assert.assertNotNull(booleanArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, true, true, false, false]"); org.junit.Assert.assertNotNull(booleanArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, true, false, false]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); }
public void test00683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00683"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", '4'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00684"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("-1", 4, (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00685"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("-1", 3); org.junit.Assert.assertEquals("'" + str2 + "' != '" + " -1" + "'", str2, " -1"); }
public void test00686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00686"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", 2, 0); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str4, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test00687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00687"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("-"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-" + "'", str1, "-"); }
public void test00688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00688"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("100", "", 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00689"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00690"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("hi! hi! ", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00691"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("{#,a,a,#,#, , }", "4444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,a,a,#,#, , }" + "'", str2, "{#,a,a,#,#, , }"); }
public void test00692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00692"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "{}", 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test00693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00693"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("    hi!", "hi! hi! ", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    hi!" + "'", str3, "    hi!"); }
public void test00694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00694"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444", "h! h! "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00695"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("{false}", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{false}" + "'", str2, "{false}"); }
public void test00696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00696"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("    HI!    HI!    HI!    HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!HI!" + "'", str1, "HI!HI!HI!HI!"); }
public void test00697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00697"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00698"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("...!hi!hi!", "{100,100,100}"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00699"); int int3 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("hi! hi!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", 52); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00700"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("                         -1", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                         -1" + "'", str2, "                         -1"); }
public void test00701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00701"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00702"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00703"); java.lang.CharSequence charSequence0 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.equals(charSequence0, (java.lang.CharSequence) "!IH    "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00704"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!hi" + "'", str1, "hi!hi!hi!hi"); }
public void test00705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00705"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("{false}", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00706"); char[] charArray4 = new char[] { '4', 'a', 'a' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray4); int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray4, '#'); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1)); }
public void test00707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00707"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "    hi!"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10); }
public void test00708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00708"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("4444HI!HI!HI!4444444444444444444444", (int) ' ', "HI!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444HI!HI!HI!4444444444444444444444" + "'", str3, "4444HI!HI!HI!4444444444444444444444"); }
public void test00709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00709"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("", "4444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00710"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase(" -1", "...!hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + " -1" + "'", str2, " -1"); }
public void test00711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00711"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("hi! hi!", 10, "!IH"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IHhi! hi!" + "'", str3, "!IHhi! hi!"); }
public void test00712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00712"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("-1", ""); java.lang.String str4 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1" + "'", str4, "-1"); }
public void test00713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00713"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", 0, 34); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{#,a,a,#,#, , }hi!ahi!ahi!ahi!" + "'", str3, "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); }
public void test00714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00714"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "   ", 99); org.junit.Assert.assertNotNull(strArray3); }
public void test00715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00715"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("!IHhi! hi!", "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3); }
public void test00716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00716"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "                                                 {}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00717"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00718"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00719"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", '#', 4); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00720"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("4444HI!HI!HI!4444444444444444444444", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00721"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("{false}", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "lse}a{f" + "'", str2, "lse}a{f"); }
public void test00722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00722"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00723"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", 'a', '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str3, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test00724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00724"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi! hi! ", "                         -1"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00725"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase(""); org.junit.Assert.assertNotNull(strArray1); }
public void test00726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00726"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!h" + "'", str1, "hi!hi!hi!h"); }
public void test00727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00727"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("h! h! ", 0, 100); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h! h! " + "'", str3, "h! h! "); }
public void test00728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00728"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "    HI!    HI!    HI!    HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00729"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h", "{}i"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h" + "'", str2, "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); }
public void test00730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00730"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00731"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "HI!HI!HI!HI!", "HI!HI!HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00732"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("HI!HI!HI!HI!", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00733"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("!IH!IH!IH!I{100,100,100}!IH!IH!IH!I", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH!IH!IH!I{100,100,100}!IH!IH!IH!I" + "'", str2, "!IH!IH!IH!I{100,100,100}!IH!IH!IH!I"); }
public void test00734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00734"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("HI!HI!HI!", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00735"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00736"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str2, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test00737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00737"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("!IH", ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH" + "'", str2, "!IH"); }
public void test00738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00738"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("                ", (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00739"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("ahi!ahi!a", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ahi!ahi!a" + "'", str2, "ahi!ahi!a"); }
public void test00740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00740"); boolean[] booleanArray6 = new boolean[] { false, false, true, true, false, false }; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray6, (int) (byte) 0, 4); java.lang.Object[] objArray10 = new java.lang.Object[] {}; java.lang.String str12 = org.apache.commons.lang3.StringUtils.join(objArray10, ' '); java.lang.Object obj13 = null; int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray10, obj13); boolean[] booleanArray17 = new boolean[] { true, false }; boolean[] booleanArray18 = null; boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray17, booleanArray18); boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(objArray10, (java.lang.Object) booleanArray17); int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray17, true); boolean[] booleanArray23 = null; boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray17, booleanArray23); boolean[] booleanArray25 = null; boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray24, booleanArray25); boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray9, booleanArray25); int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, false, (int) (byte) 1); org.junit.Assert.assertNotNull(booleanArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[false, false, true, true, false, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[false, false, true, true]"); org.junit.Assert.assertNotNull(objArray10); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertNotNull(booleanArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0); org.junit.Assert.assertNotNull(booleanArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); }
public void test00741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00741"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("!IHhi! hi!", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00742"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!hi!" + "'", str1, "hi!hi!hi!hi!"); }
public void test00743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00743"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("", "    HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00744"); java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int11 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray10); int int12 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray10); java.lang.String[] strArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray10); int int14 = org.apache.commons.lang3.StringUtils.indexOfAny("", strArray10); int int15 = org.apache.commons.lang3.StringUtils.indexOfAny("-1", strArray10); java.lang.Object[] objArray16 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray10); boolean boolean17 = org.apache.commons.lang3.StringUtils.startsWithAny("", strArray10); int int18 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray10); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertNotNull(objArray16); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[hi!, hi!, , ]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[hi!, hi!, , ]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); }
public void test00745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00745"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("-1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-1" + "'", str1, "-1"); }
public void test00746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00746"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("{100,100,100}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{100,100,100}" + "'", str1, "{100,100,100}"); }
public void test00747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00747"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "                         -1", "lse}a{f", 6); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str4, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test00748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00748"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("4444HI!HI!HI!4444444444444444444444", "{}i"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00749"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("100", "", 52); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00750"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray6); java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int16 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray15); int int17 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray15); java.lang.String[] strArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray15); boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray6, (java.lang.Object[]) strArray18); java.lang.Long[] longArray24 = new java.lang.Long[] { 10L, 100L, 10L, 1L }; java.lang.Long[] longArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray24); int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray6, (java.lang.Object) longArray24); java.lang.Object obj27 = null; int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray6, obj27, 52); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(longArray24); org.junit.Assert.assertNotNull(longArray25); org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1)); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); }
public void test00751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00751"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00752"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("    hi!    hi!    hi!    hi!", "hi! hi!             "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str2, "    hi!    hi!    hi!    hi!"); }
public void test00753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00753"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}" + "'", str1, "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}"); }
public void test00754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00754"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00755"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("h! h! ", "hi! hi!"); org.junit.Assert.assertNotNull(strArray2); }
public void test00756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00756"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "                                                 {}", "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00757"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str2, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test00758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00758"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "  "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00759"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      ", "{}i!", 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00760"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "hi! hi!             ", (java.lang.CharSequence) "                                                 {}"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00761"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("##########################h! h! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "##########################h! h!" + "'", str1, "##########################h! h!"); }
public void test00762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00762"); char[] charArray6 = new char[] { '4', 'a', 'a' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray6); int int8 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray6); char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray6); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, 'a'); boolean boolean13 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "{}", charArray6); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test00763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00763"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}", "hi!hi!hi!", (int) (byte) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00764"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444" + "'", str1, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444"); }
public void test00765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00765"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!H", ' '); java.lang.String[] strArray6 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray9 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.addAll(strArray6, strArray9); java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray6); java.lang.String str12 = org.apache.commons.lang3.StringUtils.replaceEach("{100,100,100}", strArray3, strArray6); java.lang.String str13 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray6); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{100,100,100}" + "'", str12, "{100,100,100}"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test00766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00766"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("hi!hi!", "HI"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI" + "'", str2, "HI"); }
public void test00767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00767"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00768"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("{100,100,100}", " -1", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", 45); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{100,100,100}" + "'", str4, "{100,100,100}"); }
public void test00769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00769"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "{100,100,100}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00770"); char[] charArray1 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut((java.lang.CharSequence) "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}", charArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00771"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("444444444444...!hi!hi!444444444444", "{}i", (int) '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444" + "'", str3, "444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444"); }
public void test00772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00772"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00773"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("{}i", "!IH", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH", 6); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}i" + "'", str4, "{}i"); }
public void test00774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00774"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("hi! hi!             ", "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi!             " + "'", str2, "hi! hi!             "); }
public void test00775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00775"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("!IHhi! hi!", '#'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IHhi! hi!" + "'", str2, "!IHhi! hi!"); }
public void test00776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00776"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "##########################h! h! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "##########################h! h! " + "'", str1, "##########################h! h! "); }
public void test00777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00777"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("", "hi! hi!             "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00778"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("    HI!", "    HI!    HI!    HI!    HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00779"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("    HI!    HI!    HI!    HI!", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    HI!    HI!    HI!    HI!" + "'", str2, "    HI!    HI!    HI!    HI!"); }
public void test00780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00780"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "100", "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00781"); char[] charArray8 = new char[] { '#', ' ', ' ' }; boolean boolean9 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray8); char[] charArray11 = org.apache.commons.lang3.ArrayUtils.add(charArray8, '#'); char[] charArray14 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, (int) (byte) -1, (int) 'a'); int int15 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray8); int int16 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray8); org.apache.commons.lang3.ArrayUtils.reverse(charArray8); boolean boolean18 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "-1", charArray8); char[] charArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray8, ' '); int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray8, ' ', 0); java.lang.Character[] charArray30 = new java.lang.Character[] { ' ', '4', '#', ' ', ' ', ' ' }; char[] charArray32 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray30, ' '); char[] charArray37 = new char[] { '#', ' ', ' ' }; boolean boolean38 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray37); char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray37, '#'); char[] charArray43 = org.apache.commons.lang3.ArrayUtils.subarray(charArray37, (int) (byte) -1, (int) 'a'); boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray32, charArray43); char[] charArray45 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray32); int int46 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "    hi!    hi!    hi!    hi!", charArray32); java.lang.String str48 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray32, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertNotNull(charArray8); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , , #]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(charArray11); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, , ]"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(charArray20); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), " #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), " #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[ , #]"); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0); org.junit.Assert.assertNotNull(charArray30); org.junit.Assert.assertNotNull(charArray32); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), " 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), " 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[ , 4, #, , , ]"); org.junit.Assert.assertNotNull(charArray37); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(charArray40); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray43); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(charArray45); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), " # 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), " # 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[ , , #, , 4, #, , , ]"); org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{ ,4,#, , , }" + "'", str48, "{ ,4,#, , , }"); }
public void test00782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00782"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7); boolean[] booleanArray14 = new boolean[] { true, false }; boolean[] booleanArray15 = null; boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray14, booleanArray15); boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray14, (int) (byte) 1, 54); boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true); boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray21, 0, 1); boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray21); int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray21, true); // The following exception was thrown during execution in test generation try { boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.add(booleanArray21, 100, true); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false]"); org.junit.Assert.assertNotNull(booleanArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false]"); org.junit.Assert.assertNotNull(booleanArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false]"); org.junit.Assert.assertNotNull(booleanArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false, false]"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1)); }
public void test00783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00783"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("hi!ahi!ahi!ahi!", "{#,a,a,#,#, , }"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!ahi!ahi!ahi!" + "'", str2, "hi!ahi!ahi!ahi!"); }
public void test00784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00784"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", "                         -1", (int) (byte) 1); org.junit.Assert.assertNotNull(strArray3); }
public void test00785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00785"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444", "!IH", (int) '4'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00786"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("hi! hi!", (int) (byte) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi!                                               " + "'", str2, "hi! hi!                                               "); }
public void test00787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00787"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("", "    HI!    HI!    HI!    HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00788"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("    HI!    HI!    HI!    HI!", "hi! hi!                                               ", (int) '4'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00789"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("hi! hi! ", "-"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00790"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("!IH"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH" + "'", str1, "!IH"); }
public void test00791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00791"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("HI", (int) (short) 0, ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI" + "'", str3, "HI"); }
public void test00792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00792"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("lse}a{f"); org.junit.Assert.assertNotNull(strArray1); }
public void test00793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00793"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("", '#'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00794"); java.lang.Short[] shortArray1 = new java.lang.Short[] { (short) 0 }; short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray1); java.lang.String str4 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) shortArray1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertNotNull(shortArray1); org.junit.Assert.assertNotNull(shortArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0]"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0"); }
public void test00795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00795"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("{#,a,a,#,#, , }", "444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str2, "444444444444...!hi!hi!444444444444"); }
public void test00796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00796"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!", "{#,a,a,#,#, , }hi!ahi!ahi!ahi!", 98); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00797"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("{100,100,100}", "    hi!    hi!    hi!    hi!", 34); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00798"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str1, "444444444444...!hi!hi!444444444444"); }
public void test00799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00799"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("", "", 54); java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int12 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray11); int int13 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray11); java.lang.String[] strArray14 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray11); java.lang.String str15 = org.apache.commons.lang3.StringUtils.replaceEach("", strArray4, strArray11); java.lang.Integer[] intArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY; java.lang.String[] strArray19 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!H", ' '); boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray16, (java.lang.Object) "HI!HI!HI!H"); int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray16, (int) (short) 1); byte[] byteArray23 = null; byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray23); java.lang.Byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray24); boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray16, (java.lang.Object) byteArray24); int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray4, (java.lang.Object) byteArray24, (int) (byte) 0); // The following exception was thrown during execution in test generation try { byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.remove(byteArray24, (int) '4'); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertNotNull(intArray16); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(intArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]"); org.junit.Assert.assertNotNull(byteArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]"); org.junit.Assert.assertNotNull(byteArray25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1)); }
public void test00800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00800"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("!IH    ", "##########################h! h! ", (int) (short) 10); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    " + "'", str3, "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    "); }
public void test00801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00801"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", "hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-" + "'", str2, "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); }
public void test00802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00802"); char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "-1", charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00803"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("    HI!", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00804"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!" + "'", str1, "hI!"); }
public void test00805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00805"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("-1", 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00806"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("", "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", (int) ' '); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00807"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("HI!HI!HI!HI!", "{}"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00808"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("                         -1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "                         -1" + "'", str1, "                         -1"); }
public void test00809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00809"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("{#,a,a,#,#, , }", "{100,100,100}", "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{#,a,a,#,#, , }" + "'", str3, "{#,a,a,#,#, , }"); }
public void test00810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00810"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str1, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test00811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00811"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "hi! hi!", (java.lang.CharSequence) "ahi!ahi!a"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3); }
public void test00812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00812"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("    HI!    HI!    HI!    HI!", "4444HI!HI!HI!4444444444444444444444                                "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00813"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,a,a,#,#, , }hi!ahi!ahi!ahi!" + "'", str2, "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); }
public void test00814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00814"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}", "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00815"); java.lang.CharSequence charSequence0 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny(charSequence0, "                         -1"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00816"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("{}", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}"); }
public void test00817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00817"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray6); java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int16 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray15); int int17 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray15); java.lang.String[] strArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray15); boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray6, (java.lang.Object[]) strArray18); java.lang.String str21 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) boolean19, "hi!ahi!ahi!ahi!"); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "true" + "'", str21, "true"); }
public void test00818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00818"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("HI!HI!HI!HI!", (int) (short) 100, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00819"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            " + "'", str1, "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            "); }
public void test00820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00820"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("", "    HI!", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertNull(str3); }
public void test00821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00821"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00822"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("{#,a,a,#,#, , }", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 9); org.junit.Assert.assertNotNull(strArray3); }
public void test00823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00823"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("hi!hi!hi!hi", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "444444444444...!hi!hi!444444444444", (int) (short) -1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!hi!hi!hi" + "'", str4, "hi!hi!hi!hi"); }
public void test00824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00824"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444", '#', 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00825"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("4444HI!HI!HI!4444444444444444444444                                "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "4444hi!hi!hi!4444444444444444444444                                " + "'", str1, "4444hi!hi!hi!4444444444444444444444                                "); }
public void test00826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00826"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str1, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test00827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00827"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("{}i"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}i" + "'", str1, "{}i"); }
public void test00828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00828"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test00829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00829"); java.lang.String[] strArray0 = null; java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.stripAll(strArray0, "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); org.junit.Assert.assertNull(strArray2); }
public void test00830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00830"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00831"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("    HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!" + "'", str1, "HI!"); }
public void test00832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00832"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00833"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", 0, "hi! hi! "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{#,a,a,#,#, , }hi!ahi!ahi!ahi!" + "'", str3, "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); }
public void test00834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00834"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "!IHhi! hi!", 2); org.junit.Assert.assertNotNull(strArray3); }
public void test00835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00835"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("ahi!ahi!a", "...!hi!hi!"); org.junit.Assert.assertNull(str2); }
public void test00836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00836"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h", 1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00837"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("-", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00838"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", (-1)); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00839"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00840"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.stripAll(strArray1); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.stripAll(strArray1, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String str5 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray4); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test00841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00841"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("ahi!ahi!a", (int) (short) 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00842"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("4444hi!hi!hi!4444444444444444444444                                ", "##########################h! h! "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00843"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("{100,100,100}", "  "); org.junit.Assert.assertNotNull(strArray2); }
public void test00844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00844"); java.lang.CharSequence charSequence0 = null; char[] charArray5 = new char[] { '#', 'a', 'a', '#' }; boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(charArray5, ' '); char[] charArray14 = new char[] { '#', ' ', ' ' }; boolean boolean15 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray14); char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray14, '#'); char[] charArray20 = org.apache.commons.lang3.ArrayUtils.subarray(charArray14, (int) (byte) -1, (int) 'a'); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray14); int int22 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray14); char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray5, charArray14); char[] charArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray23, ' '); int int26 = org.apache.commons.lang3.StringUtils.indexOfAny(charSequence0, charArray25); char[] charArray28 = org.apache.commons.lang3.ArrayUtils.add(charArray25, 'a'); // The following exception was thrown during execution in test generation try { char[] charArray30 = org.apache.commons.lang3.ArrayUtils.remove(charArray25, (-1)); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 6"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(charArray17); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray20); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, , ]"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertNotNull(charArray23); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, a, #, #, , ]"); org.junit.Assert.assertNotNull(charArray25); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a, a, #, #, ]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1)); org.junit.Assert.assertNotNull(charArray28); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#aa## a"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#aa## a"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#, a, a, #, #, , a]"); }
public void test00845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00845"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("hi! hi!             ", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     ", "hi! hi!             "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi! hi!             " + "'", str3, "hi! hi!             "); }
public void test00846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00846"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("                ", 7, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                " + "'", str3, "                "); }
public void test00847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00847"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("-1", "hi!", 0); java.lang.String[] strArray5 = org.apache.commons.lang3.StringUtils.stripAll(strArray3, "    hi!"); boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test00848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00848"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}", 2); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00849"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih" + "'", str1, "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih"); }
public void test00850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00850"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "!IHhi! hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00851"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str2, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00852"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("                                                 {}", "                         -1"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                 {}" + "'", str2, "                                                 {}"); }
public void test00853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00853"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("...!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "...!hi!hi!" + "'", str1, "...!hi!hi!"); }
public void test00854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00854"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("{#, , }"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{#, , }" + "'", str1, "{#, , }"); }
public void test00855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00855"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", 'a', 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00856"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("    HI!", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    " + "'", str3, "    "); }
public void test00857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00857"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444" + "'", str2, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444"); }
public void test00858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00858"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = null; boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray13); boolean[] booleanArray15 = null; boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray14, booleanArray15); boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray14); java.lang.String[] strArray21 = org.apache.commons.lang3.StringUtils.split("-1", ""); java.lang.String[] strArray24 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray27 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray28 = org.apache.commons.lang3.ArrayUtils.addAll(strArray24, strArray27); java.lang.String str29 = org.apache.commons.lang3.StringUtils.replaceEach("hi!hi!hi!h", strArray21, strArray27); java.lang.String[] strArray30 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray21); boolean[] booleanArray32 = new boolean[] { false }; java.lang.Object[] objArray33 = new java.lang.Object[] {}; java.lang.String str35 = org.apache.commons.lang3.StringUtils.join(objArray33, ' '); java.lang.Object obj36 = null; int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray33, obj36); boolean[] booleanArray40 = new boolean[] { true, false }; boolean[] booleanArray41 = null; boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray40, booleanArray41); boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(objArray33, (java.lang.Object) booleanArray40); boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray40); int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray21, (java.lang.Object) booleanArray44, (int) (byte) 0); boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray17, booleanArray44); boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray44, false); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(booleanArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, false]"); org.junit.Assert.assertNotNull(strArray21); org.junit.Assert.assertNotNull(strArray24); org.junit.Assert.assertNotNull(strArray27); org.junit.Assert.assertNotNull(strArray28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!hi!hi!h" + "'", str29, "hi!hi!hi!h"); org.junit.Assert.assertNotNull(strArray30); org.junit.Assert.assertNotNull(booleanArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false]"); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]"); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, ""); org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1)); org.junit.Assert.assertNotNull(booleanArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(booleanArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[false, true, false]"); org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1)); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); }
public void test00859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00859"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("!IHhi! hi!", (int) (short) 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IHhi! hi!" + "'", str2, "!IHhi! hi!"); }
public void test00860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00860"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("##########################h! h! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "##########################h! h!" + "'", str1, "##########################h! h!"); }
public void test00861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00861"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00862"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444", "{false}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444" + "'", str2, "444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444"); }
public void test00863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00863"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "!IH!IH!IH!I{100,100,100}!IH!IH!IH!I", (java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 99 + "'", int2 == 99); }
public void test00864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00864"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "{}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00865"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("", "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00866"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray5 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray6 = org.apache.commons.lang3.ArrayUtils.addAll(strArray2, strArray5); java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray2); // The following exception was thrown during execution in test generation try { java.lang.String str11 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", (-1), (int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(strArray7); }
public void test00867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00867"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00868"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "!IH"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00869"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("!IH    "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH    " + "'", str1, "!IH    "); }
public void test00870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00870"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str2, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00871"); char[] charArray2 = new char[] { '4' }; char[] charArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray2, '#'); int int5 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!", charArray4); // The following exception was thrown during execution in test generation try { char[] charArray7 = org.apache.commons.lang3.ArrayUtils.remove(charArray4, 34); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 34, Length: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray2); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]"); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1)); }
public void test00872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00872"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("HI!HI!HI!H", "hi!hi!hi!hi"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00873"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "   ", "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00874"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("hi! hi! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi!" + "'", str1, "hi! hi!"); }
public void test00875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00875"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("HI!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI" + "'", str2, "HI"); }
public void test00876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00876"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00877"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", (java.lang.CharSequence) "{#,a,a,#,#, , }"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test00878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00878"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("{}", 0, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}"); }
public void test00879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00879"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("!IH!IH!IH!I{100,100,100}!IH!IH!IH!I", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00880"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "{}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00881"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("HI!HI!HI!H", (int) (short) 10); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H" + "'", str2, "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H"); }
public void test00882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00882"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("", "##########################h! h! "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00883() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00883"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00884() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00884"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("                                                 {}", '4'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00885() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00885"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("4444hi!hi!hi!4444444444444444444444                                ", "  ", "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", 3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           " + "'", str4, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           "); }
public void test00886() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00886"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("ahi!ahi!a", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8); }
public void test00887() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00887"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00888() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00888"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator(" -1", ""); org.junit.Assert.assertNotNull(strArray2); }
public void test00889() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00889"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("hi! hi!                                               ", 1, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00890() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00890"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("hI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!" + "'", str1, "hI!"); }
public void test00891() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00891"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("hi! hi!", "hi!hi!hi!hi"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00892() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00892"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("h! h! ", "    "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00893() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00893"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, false); boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray15, 0); // The following exception was thrown during execution in test generation try { boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray17, 6); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 2"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false, false]"); org.junit.Assert.assertNotNull(booleanArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false]"); }
public void test00894() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00894"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("!IHhi! hi!", (int) (short) -1, '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IHhi! hi!" + "'", str3, "!IHhi! hi!"); }
public void test00895() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00895"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "HI!HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HI!" + "'", str2, "HI!HI!HI!HI!"); }
public void test00896() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00896"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00897() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00897"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "##########################h! h!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00898() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00898"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "{}", "hi!hi!hi!", 5); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str4, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00899() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00899"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00900() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00900"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("                         -1", "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             ", 98); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00901() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00901"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str1, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test00902() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00902"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "    HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00903() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00903"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("", 'a', 45); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00904() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00904"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("hi!hi!hi!hi!", 0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00905"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hi!hi!hi!h" + "'", str1, "Hi!hi!hi!h"); }
public void test00906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00906"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("hi!hi!hi!h", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00907"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("0", "HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0"); }
public void test00908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00908"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true, 6); // The following exception was thrown during execution in test generation try { int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) 6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); }
public void test00909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00909"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "...!hi!hi!", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3); }
public void test00910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00910"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("hi!hi!hi!h", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00911"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad(" -1", (int) (byte) 10, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "aaaaaaa -1" + "'", str3, "aaaaaaa -1"); }
public void test00912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00912"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("hi! hi!             ", "-", "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi! hi!             " + "'", str3, "hi! hi!             "); }
public void test00913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00913"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", "...!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test00914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00914"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H", "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h" + "'", str2, "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); }
public void test00915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00915"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "hi! hi!                                               "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00916"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("HI!HI!HI!", "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444444444444HI!HI!HI!4444444444444444444444" + "'", str2, "444444444444444444444HI!HI!HI!4444444444444444444444"); }
public void test00917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00917"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("-", (int) 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-------------------------------------------------------------------------------------------------" + "'", str2, "-------------------------------------------------------------------------------------------------"); }
public void test00918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00918"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("aaaaaaa -1", 'a'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00919"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00920"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "aaaaaaa -1"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00921() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00921"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("hi!hi!hi!", "...!hi!hi!"); org.junit.Assert.assertNotNull(strArray2); }
public void test00922() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00922"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("{100,100,100}!IH!IH!IH!I", '#', (int) (byte) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00923() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00923"); int int3 = org.apache.commons.lang3.StringUtils.indexOf(" -1", "aaaaaaa -1", 52); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00924() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00924"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("    hi!", 10); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!" + "'", str2, "    hi!"); }
public void test00925() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00925"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("", 7); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00926() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00926"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00927() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00927"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{#,a,a,#,#,,}hi!ahi!ahi!ahi!" + "'", str1, "{#,a,a,#,#,,}hi!ahi!ahi!ahi!"); }
public void test00928() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00928"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.split("hi! hi! "); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.stripAll(strArray1, ""); java.lang.String str7 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray1, '4', 99, (int) (byte) -1); java.lang.Byte[] byteArray9 = new java.lang.Byte[] { (byte) 10 }; byte[] byteArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray9, (byte) 100); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray1, (java.lang.Object) byteArray11); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(byteArray9); org.junit.Assert.assertNotNull(byteArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10]"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); }
public void test00929() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00929"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("100"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "100" + "'", str1, "100"); }
public void test00930() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00930"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("hi! hi!                                               ", "hi!ahi!ahi!ahi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3); }
public void test00931() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00931"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false); java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray15); boolean[] booleanArray18 = new boolean[] { false }; java.lang.Object[] objArray19 = new java.lang.Object[] {}; java.lang.String str21 = org.apache.commons.lang3.StringUtils.join(objArray19, ' '); java.lang.Object obj22 = null; int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray19, obj22); boolean[] booleanArray26 = new boolean[] { true, false }; boolean[] booleanArray27 = null; boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray26, booleanArray27); boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(objArray19, (java.lang.Object) booleanArray26); boolean[] booleanArray30 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray18, booleanArray26); boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray30); boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray15, booleanArray30); java.lang.Boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray15); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true]"); org.junit.Assert.assertNotNull(booleanArray16); org.junit.Assert.assertNotNull(booleanArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[false]"); org.junit.Assert.assertNotNull(objArray19); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]"); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1)); org.junit.Assert.assertNotNull(booleanArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(booleanArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray30), "[false, true, false]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(booleanArray33); }
public void test00932() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00932"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih", "4444hi!hi!hi!4444444444444444444444                                ", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa" + "'", str3, "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); }
public void test00933() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00933"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("{ ,4,#, , , }", 6, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{ ,4,#, , , }" + "'", str3, "{ ,4,#, , , }"); }
public void test00934() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00934"); java.lang.CharSequence charSequence1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", charSequence1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00935() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00935"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = null; boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray13); boolean[] booleanArray15 = null; boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray14, booleanArray15); boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray15); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNull(booleanArray17); }
public void test00936() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00936"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("hi!hi!", (int) (short) 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "h" + "'", str2, "h"); }
public void test00937() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00937"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00938() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00938"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("-------------------------------------------------------------------------------------------------", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test00939() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00939"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("true", "!IH    ", 34); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00940"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00941() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00941"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("ahi!ahi!a", "!IH", "true"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ahi!ahi!a" + "'", str3, "ahi!ahi!a"); }
public void test00942() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00942"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!"); }
public void test00943() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00943"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("hi! hi!             ", "!IH    "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi!             " + "'", str2, "hi! hi!             "); }
public void test00944() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00944"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("  ", "!IHhi! hi!", 3); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00945() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00945"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertNotNull(strArray1); }
public void test00946() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00946"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "!IH    ", 7); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test00947() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00947"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00948() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00948"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", (int) '#'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str2, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test00949() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00949"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "{false}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00950() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00950"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("100"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "100" + "'", str1, "100"); }
public void test00951() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00951"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "##########################h! h! "); org.junit.Assert.assertNotNull(strArray2); }
public void test00952() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00952"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("444444444444444444444HI!HI!HI!4444444444444444444444", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444444444444HI!HI!HI!4444444444444444444444" + "'", str2, "444444444444444444444HI!HI!HI!4444444444444444444444"); }
public void test00953() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00953"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", "HI!HI!HI!H", (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00954() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00954"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray6); java.lang.String[] strArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray6); java.lang.String str10 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray9); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test00955() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00955"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("aaaaaaa -1", (int) (byte) 1, "{}i!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "aaaaaaa -1" + "'", str3, "aaaaaaa -1"); }
public void test00956() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00956"); boolean[] booleanArray2 = new boolean[] { true, false }; boolean[] booleanArray3 = null; boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray2, booleanArray3); boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray2, false); int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray2, false); boolean[] booleanArray11 = new boolean[] { true, false }; boolean[] booleanArray12 = null; boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray12); boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray11, (int) (byte) 1, 54); boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray2, booleanArray11); java.lang.Object[] objArray18 = new java.lang.Object[] {}; java.lang.String str20 = org.apache.commons.lang3.StringUtils.join(objArray18, ' '); java.lang.Object obj21 = null; int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray18, obj21); boolean[] booleanArray25 = new boolean[] { true, false }; boolean[] booleanArray26 = null; boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray25, booleanArray26); boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(objArray18, (java.lang.Object) booleanArray25); int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, true); boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray25); boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.add(booleanArray31, false); boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray17, booleanArray33); int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray33, false, 5); org.junit.Assert.assertNotNull(booleanArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true]"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false]"); org.junit.Assert.assertNotNull(booleanArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, false, true, false]"); org.junit.Assert.assertNotNull(objArray18); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertNotNull(booleanArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNotNull(booleanArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[true, false, false]"); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2); }
public void test00957() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00957"); java.lang.Object[] objArray0 = null; java.lang.String str1 = org.apache.commons.lang3.StringUtils.join(objArray0); org.junit.Assert.assertNull(str1); }
public void test00958() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00958"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("", 5, ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "   " + "'", str3, "   "); }
public void test00959() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00959"); java.lang.CharSequence charSequence0 = null; java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty(charSequence0, (java.lang.CharSequence) ""); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "" + "'", charSequence2, ""); }
public void test00960() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00960"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("", "hi!ahi!ahi!ahi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00961() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00961"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("hi!hi!hi!", "  "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!" + "'", str2, "hi!hi!hi!"); }
public void test00962() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00962"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterType(""); java.lang.String[] strArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray1); // The following exception was thrown during execution in test generation try { java.lang.String str6 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, '4', 9, 45); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertNotNull(strArray2); }
public void test00963() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00963"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray6 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.addAll(strArray3, strArray6); java.lang.String str8 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray7); java.lang.String[] strArray10 = org.apache.commons.lang3.StringUtils.split("    hi!    hi!    hi!    hi!"); boolean[] booleanArray17 = new boolean[] { false, false, true, true, false, false }; boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray17, (int) (byte) 0, 4); boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray17, false); boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray17); int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray10, (java.lang.Object) booleanArray17, 34); // The following exception was thrown during execution in test generation try { java.lang.String str26 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("!IH", strArray7, strArray10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Search and Replace array lengths don't match: 1 vs 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "HI!HI!HI!H" + "'", str8, "HI!HI!HI!H"); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(booleanArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, true, true, false, false]"); org.junit.Assert.assertNotNull(booleanArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[false, false, true, true]"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); org.junit.Assert.assertNotNull(booleanArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[false, false, true, true, false, false]"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); }
public void test00964() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00964"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "-------------------------------------------------------------------------------------------------", 5); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00965() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00965"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("{100,100,100}", "444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444{}i444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{100,100,100}" + "'", str2, "{100,100,100}"); }
public void test00966() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00966"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H", (int) (byte) -1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H" + "'", str2, "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H"); }
public void test00967() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00967"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("Hi!hi!hi!h", "!IH"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00968() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00968"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("444444444444...!hi!hi!444444444444", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00969"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("   ", 'a'); org.junit.Assert.assertNotNull(strArray2); }
public void test00970() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00970"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test00971() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00971"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("hi! hi!                                               ", "hi! hi!                                               "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00972() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00972"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00973() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00973"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "aaaaaaa -1"); org.junit.Assert.assertNull(str3); }
public void test00974() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00974"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("hi!hi!hi!hi"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!HI" + "'", str1, "HI!HI!HI!HI"); }
public void test00975() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00975"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00976() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00976"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           ", "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00977() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00977"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("{ ,4,#, , , }", "", (int) (byte) 10); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{ ,4,#, , , }" + "'", str3, "{ ,4,#, , , }"); }
public void test00978() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00978"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 98, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00979() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00979"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            ", "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00980() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00980"); java.lang.Long[] longArray4 = new java.lang.Long[] { 10L, 100L, 10L, 1L }; java.lang.Long[] longArray5 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray4); java.lang.String[] strArray8 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("-1", ""); java.lang.String[] strArray10 = org.apache.commons.lang3.StringUtils.stripAll(strArray8, ""); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray4, (java.lang.Object) strArray8, (int) (short) 1); java.lang.Long[] longArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray4); long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray13); int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray14, (long) 6); org.junit.Assert.assertNotNull(longArray4); org.junit.Assert.assertNotNull(longArray5); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertNotNull(longArray13); org.junit.Assert.assertNotNull(longArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[10, 100, 10, 1]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); }
public void test00981() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00981"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00982() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00982"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "hi! hi!                                               "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 100 + "'", int1 == 100); }
public void test00983() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00983"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.split("-1", ""); java.lang.String[] strArray7 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray10 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray11 = org.apache.commons.lang3.ArrayUtils.addAll(strArray7, strArray10); java.lang.String str12 = org.apache.commons.lang3.StringUtils.replaceEach("hi!hi!hi!h", strArray4, strArray10); java.lang.String[] strArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray4); boolean[] booleanArray15 = new boolean[] { false }; java.lang.Object[] objArray16 = new java.lang.Object[] {}; java.lang.String str18 = org.apache.commons.lang3.StringUtils.join(objArray16, ' '); java.lang.Object obj19 = null; int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, obj19); boolean[] booleanArray23 = new boolean[] { true, false }; boolean[] booleanArray24 = null; boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray23, booleanArray24); boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(objArray16, (java.lang.Object) booleanArray23); boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray15, booleanArray23); int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray4, (java.lang.Object) booleanArray27, (int) (byte) 0); int int30 = org.apache.commons.lang3.StringUtils.indexOfAny("100", strArray4); // The following exception was thrown during execution in test generation try { java.lang.String str34 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray4, "hi!ahi!ahi!ahi!", 98, (int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 98"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertNotNull(strArray11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!hi!hi!h" + "'", str12, "hi!hi!hi!h"); org.junit.Assert.assertNotNull(strArray13); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[false]"); org.junit.Assert.assertNotNull(objArray16); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]"); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertNotNull(booleanArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(booleanArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false, true, false]"); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1)); }
public void test00984() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00984"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("", "{100,100,100}"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00985() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00985"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "##########################h! h! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi" + "'", str2, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi"); }
public void test00986() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00986"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("444444444444...!hi!hi!444444444444", "hi! hi!             "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str2, "444444444444...!hi!hi!444444444444"); }
public void test00987() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00987"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("hi!hi!hi!hi", "4444hi!hi!hi!4444444444444444444444                                ", 7); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00988() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00988"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 6); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str2, "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test00989() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00989"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("{ ,4,#, , , }", '#'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00990() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00990"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("    HI!    HI!    HI!    HI!", " -1"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    HI!    HI!    HI!    HI!" + "'", str2, "    HI!    HI!    HI!    HI!"); }
public void test00991() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00991"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("!IHhi! hi!", "!IH    "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IHhi! hi!" + "'", str2, "!IHhi! hi!"); }
public void test00992() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00992"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", (int) '#'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,a,a,#,#, , }hi!ahi!ahi!ahi!" + "'", str2, "{#,a,a,#,#, , }hi!ahi!ahi!ahi!"); }
public void test00993() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00993"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "{}i", (java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00994() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00994"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("", (int) (byte) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00995() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00995"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("", "hi!"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.stripAll(strArray3); int int5 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("h! h! ", strArray4); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1)); }
public void test00996() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00996"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00997() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00997"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); } @Test public void test00998() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00998"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); // The following exception was thrown during execution in test generation try { boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray7, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 2"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); } @Test public void test00999() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00999"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("{ ,4,#, , , }", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{ ,4,#, , , }" + "'", str2, "{ ,4,#, , , }"); } @Test public void test01000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test01000"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "hi! hi! "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); } }
public void test00998() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00998"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); // The following exception was thrown during execution in test generation try { boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray7, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 2"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); }
public void test00999() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test00999"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("{ ,4,#, , , }", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{ ,4,#, , , }" + "'", str2, "{ ,4,#, , , }"); }
public void test01000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test01000"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "hi! hi! "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01001"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("aaaaaaa -1", 0, "HI!HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "aaaaaaa -1" + "'", str3, "aaaaaaa -1"); }
public void test01002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01002"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("", (int) (short) 1, "{ ,4,#, , , }"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{" + "'", str3, "{"); }
public void test01003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01003"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray7, (int) (short) 1); int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, true, 5); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); }
public void test01004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01004"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str1, "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01005"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("hi! hi!", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi!                       " + "'", str2, "hi! hi!                       "); }
public void test01006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01006"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("!IH    "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    HI!" + "'", str1, "    HI!"); }
public void test01007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01007"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertNotNull(strArray2); }
public void test01008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01008"); java.lang.String[] strArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithAny("true", strArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01009"); java.lang.Float[] floatArray4 = new java.lang.Float[] { (-1.0f), 1.0f, 100.0f, (-1.0f) }; java.lang.Float[] floatArray9 = new java.lang.Float[] { (-1.0f), 1.0f, 100.0f, (-1.0f) }; java.lang.Float[] floatArray14 = new java.lang.Float[] { (-1.0f), 1.0f, 100.0f, (-1.0f) }; java.lang.Float[] floatArray19 = new java.lang.Float[] { (-1.0f), 1.0f, 100.0f, (-1.0f) }; java.lang.Float[][] floatArray20 = new java.lang.Float[][] { floatArray4, floatArray9, floatArray14, floatArray19 }; java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY; java.lang.Float[][] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, floatArray21); java.lang.Object obj23 = null; int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) floatArray22, obj23, (int) (short) -1); // The following exception was thrown during execution in test generation try { java.lang.String str29 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) floatArray22, "HI", (int) (short) -1, 5); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(floatArray4); org.junit.Assert.assertNotNull(floatArray9); org.junit.Assert.assertNotNull(floatArray14); org.junit.Assert.assertNotNull(floatArray19); org.junit.Assert.assertNotNull(floatArray20); org.junit.Assert.assertNotNull(floatArray21); org.junit.Assert.assertNotNull(floatArray22); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); }
public void test01010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01010"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!hi!hi!h", "                "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01011"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("   ", "4444hi!hi!hi!4444444444444444444444                                ", "h! h! "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01012"); char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "{100,100,100}", charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01013"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", (int) (byte) 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01014"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("hi!hi!", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!" + "'", str2, "hi!hi!"); }
public void test01015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01015"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("    "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test01016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01016"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", '4'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01017"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("!IHhi! hi!", "{100,100,100}!IH!IH!IH!I"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01018"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01019"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("444444444444...!hi!hi!444444444444", "hi! hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01020"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", (int) 'a', 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01021"); int int3 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi", "hi! hi!             ", (int) ' '); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01022"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str1, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test01023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01023"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", (int) (byte) 10, 98); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str3, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test01024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01024"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("444444444444444444444HI!HI!HI!4444444444444444444444", ' '); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01025"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("!IH"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH" + "'", str1, "!IH"); }
public void test01026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01026"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 6); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str2, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01027"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("hi! hi!                       ", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01028"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}", ' ', 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}" + "'", str3, "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}"); }
public void test01029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01029"); java.lang.CharSequence charSequence0 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny(charSequence0, "{ ,4,#, , , }"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01030"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("", (-1), (int) (byte) -1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01031"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01032"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("{", '#', 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{" + "'", str3, "{"); }
public void test01033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01033"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!", "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!"); }
public void test01034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01034"); java.lang.CharSequence charSequence0 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.equals(charSequence0, (java.lang.CharSequence) "100"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01035"); java.lang.CharSequence charSequence1 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "444444444444...!hi!hi!444444444444", charSequence1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01036"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi! hi!                       ", "4444HI!HI!HI!4444444444444444444444                                "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01037"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01038"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("-", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01039"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2); }
public void test01040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01040"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("", "-1", 1); java.lang.String str4 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); }
public void test01041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01041"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "{}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01042"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("{100,100,100}!IH!IH!IH!I", "hi!hi!hi!", (-1)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01043"); java.lang.CharSequence[][] charSequenceArray0 = null; java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray7); int int9 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray7); java.lang.String[] strArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray7); boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(strArray10); java.lang.Object[] objArray12 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray10); java.lang.CharSequence[][] charSequenceArray13 = org.apache.commons.lang3.ArrayUtils.add(charSequenceArray0, (java.lang.CharSequence[]) strArray10); java.lang.String str14 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) charSequenceArray0); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); org.junit.Assert.assertNotNull(strArray10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertNotNull(objArray12); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[hi!, hi!, , ]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[hi!, hi!, , ]"); org.junit.Assert.assertNotNull(charSequenceArray13); org.junit.Assert.assertNull(str14); }
public void test01044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01044"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", 0, 54); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}" + "'", str3, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}"); }
public void test01045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01045"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           ", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01046"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("0", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0" + "'", str2, "0"); }
public void test01047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01047"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("   ", "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ", 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01048"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("hi! hi!                       "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi!                       " + "'", str1, "hi! hi!                       "); }
public void test01049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01049"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str1, "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01050"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("HI", "!IH", 8); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01051"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("hi!hi!hi!hi!", "   "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!" + "'", str2, "hi!hi!hi!hi!"); }
public void test01052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01052"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("{false}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{false}" + "'", str1, "{false}"); }
public void test01053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01053"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", ' '); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01054"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("", 9); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01055"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) "hI!", (java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01056"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("HI", "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI" + "'", str2, "HI"); }
public void test01057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01057"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("", 52); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01058"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            ", ' '); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3); }
public void test01059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01059"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!" + "'", str1, "hi!hi!"); }
public void test01060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01060"); char[] charArray6 = new char[] { '4', 'a', 'a' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray6); int int8 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray6); char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray6); boolean boolean11 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444", charArray6); char[] charArray13 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray6, 'a'); java.lang.Character[] charArray20 = new java.lang.Character[] { ' ', '4', '#', ' ', ' ', ' ' }; char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray20, ' '); java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22); char[] charArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray23, ' '); boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray13, charArray25); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4a"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4a"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4, a]"); org.junit.Assert.assertNotNull(charArray20); org.junit.Assert.assertNotNull(charArray22); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), " 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), " 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[ , 4, #, , , ]"); org.junit.Assert.assertNotNull(charArray23); org.junit.Assert.assertNotNull(charArray25); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), " 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), " 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[ , 4, #, , , ]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test01061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01061"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.split("    hi!    hi!    hi!    hi!"); boolean[] booleanArray8 = new boolean[] { false, false, true, true, false, false }; boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray8, (int) (byte) 0, 4); boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray8, false); boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray8); int int16 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray1, (java.lang.Object) booleanArray8, 34); java.lang.String str18 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray1, 'a'); // The following exception was thrown during execution in test generation try { java.util.Map<java.lang.Object, java.lang.Object> objMap19 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, 'hi!', is neither of type Map.Entry nor an Array"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertNotNull(booleanArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, true, true, false, false]"); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, true, true]"); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, false, true, true, false, false]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!ahi!ahi!ahi!" + "'", str18, "hi!ahi!ahi!ahi!"); }
public void test01062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01062"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("HI!HI!HI!", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01063"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", (int) (short) 100, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################" + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################"); }
public void test01064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01064"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("0", (int) (short) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0                                                  " + "'", str2, "0                                                  "); }
public void test01065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01065"); java.lang.CharSequence charSequence0 = null; // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance(charSequence0, (java.lang.CharSequence) "0                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Strings must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01066"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("{}i", 100, 98); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01067"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test01068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01068"); java.lang.Byte[] byteArray1 = new java.lang.Byte[] { (byte) 10 }; byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100); java.lang.String str7 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray1, '4', (int) (byte) 10, (int) (short) 10); java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1); long[] longArray15 = new long[] { 100, (byte) 0, 1, (-1L), 10L, (short) 10 }; long[] longArray22 = new long[] { 100, (byte) 0, 1, (-1L), 10L, (short) 10 }; long[] longArray29 = new long[] { 100, (byte) 0, 1, (-1L), 10L, (short) 10 }; long[] longArray36 = new long[] { 100, (byte) 0, 1, (-1L), 10L, (short) 10 }; long[][] longArray37 = new long[][] { longArray15, longArray22, longArray29, longArray36 }; long[] longArray39 = new long[] { 1 }; long[] longArray41 = new long[] { 1 }; long[] longArray43 = new long[] { 1 }; long[] longArray45 = new long[] { 1 }; long[] longArray47 = new long[] { 1 }; long[] longArray49 = new long[] { 1 }; long[][] longArray50 = new long[][] { longArray39, longArray41, longArray43, longArray45, longArray47, longArray49 }; long[][] longArray51 = org.apache.commons.lang3.ArrayUtils.addAll(longArray37, longArray50); int int52 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray1, (java.lang.Object) longArray37); java.lang.String str53 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray1); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10]"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(byteArray8); org.junit.Assert.assertNotNull(longArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[100, 0, 1, -1, 10, 10]"); org.junit.Assert.assertNotNull(longArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[100, 0, 1, -1, 10, 10]"); org.junit.Assert.assertNotNull(longArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[100, 0, 1, -1, 10, 10]"); org.junit.Assert.assertNotNull(longArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[100, 0, 1, -1, 10, 10]"); org.junit.Assert.assertNotNull(longArray37); org.junit.Assert.assertNotNull(longArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[1]"); org.junit.Assert.assertNotNull(longArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[1]"); org.junit.Assert.assertNotNull(longArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[1]"); org.junit.Assert.assertNotNull(longArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[1]"); org.junit.Assert.assertNotNull(longArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[1]"); org.junit.Assert.assertNotNull(longArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[1]"); org.junit.Assert.assertNotNull(longArray50); org.junit.Assert.assertNotNull(longArray51); org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1)); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "10" + "'", str53, "10"); }
public void test01069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01069"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01070"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           ", "hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01071"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01072"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01073"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars(" -1", '#', '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " -1" + "'", str3, " -1"); }
public void test01074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01074"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) " -1"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01075"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("hi!hi!", (int) (short) 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!" + "'", str2, "hi!hi!"); }
public void test01076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01076"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "hi! hi! "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test01077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01077"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", (java.lang.CharSequence) "    HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01078"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", 4); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HaIa" + "'", str2, "HaIa"); }
public void test01079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01079"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "4444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01080"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("", (int) (short) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                  " + "'", str2, "                                                  "); }
public void test01081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01081"); java.lang.String[] strArray0 = null; java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.stripAll(strArray0, "##########################h! h!"); org.junit.Assert.assertNull(strArray2); }
public void test01082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01082"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01083"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 100, (-1)); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01084"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("", 'a', '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01085"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("   ", 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "   " + "'", str2, "   "); }
public void test01086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01086"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "hi!hi!hi!h", 6); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 30 + "'", int3 == 30); }
public void test01087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01087"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str2, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test01088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01088"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01089"); boolean[] booleanArray2 = new boolean[] { true, false }; boolean[] booleanArray3 = null; boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray2, booleanArray3); boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray2, false); int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray2, false); boolean[] booleanArray11 = new boolean[] { true, false }; boolean[] booleanArray12 = null; boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray12); boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray11, (int) (byte) 1, 54); boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray2, booleanArray11); java.lang.Object[] objArray18 = new java.lang.Object[] {}; java.lang.String str20 = org.apache.commons.lang3.StringUtils.join(objArray18, ' '); java.lang.Object obj21 = null; int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray18, obj21); boolean[] booleanArray25 = new boolean[] { true, false }; boolean[] booleanArray26 = null; boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray25, booleanArray26); boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(objArray18, (java.lang.Object) booleanArray25); int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray25, true); boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray25); boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.add(booleanArray31, false); boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray17, booleanArray33); int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray17, false, 0); org.junit.Assert.assertNotNull(booleanArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true]"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[false]"); org.junit.Assert.assertNotNull(booleanArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, false, true, false]"); org.junit.Assert.assertNotNull(objArray18); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); org.junit.Assert.assertNotNull(booleanArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0); org.junit.Assert.assertNotNull(booleanArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[true, false, false]"); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1); }
public void test01090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01090"); char[] charArray4 = new char[] { '4', 'a', 'a' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray4); // The following exception was thrown during execution in test generation try { char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 7, '#'); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); }
public void test01091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01091"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("    ", (int) 'a', "{ ,4,#, , , }"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , " + "'", str3, "    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , "); }
public void test01092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01092"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("hi!hi!hi!hi!", "hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!" + "'", str2, "hi!hi!"); }
public void test01093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01093"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("##########################h! h!", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (int) (short) -1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01094"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "!IHhi! hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01095"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01096"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("HI", "{}i!", 0); org.junit.Assert.assertNotNull(strArray3); }
public void test01097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01097"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("hi! hi! ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi! " + "'", str2, "hi! hi! "); }
public void test01098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01098"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01099"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("                                                 {}", "0"); org.junit.Assert.assertNotNull(strArray2); }
public void test01100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01100"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("", 1, "##########################h! h!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#" + "'", str3, "#"); }
public void test01101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01101"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("444444444444...!hi!hi!444444444444", "h"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str2, "444444444444...!hi!hi!444444444444"); }
public void test01102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01102"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 'a', (-1)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01103"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!" + "'", str1, "HI!HI!HI!"); }
public void test01104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01104"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01105"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!", "HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01106"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.split("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "", 98); int int5 = org.apache.commons.lang3.StringUtils.indexOfAny("ahi!ahi!a", strArray4); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1)); }
public void test01107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01107"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("                                                  ", "{ ,4,#, , , }"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                  " + "'", str2, "                                                  "); }
public void test01108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01108"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!hi!hi!h", "                         -1"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01109"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "hi!hi!hi!hi"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01110"); java.lang.CharSequence charSequence0 = null; char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly(charSequence0, charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01111"); char[] charArray7 = new char[] { '#', ' ', ' ' }; boolean boolean8 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray7); char[] charArray10 = org.apache.commons.lang3.ArrayUtils.add(charArray7, '#'); char[] charArray13 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, (int) (byte) -1, (int) 'a'); int int14 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray7); int int15 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray7); java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.toObject(charArray7); char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray16, '4'); int int19 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "4444HI!HI!HI!4444444444444444444444", charArray18); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertNotNull(charArray18); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, , ]"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1)); }
public void test01112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01112"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, false); boolean[] booleanArray22 = new boolean[] { false, false, true, true, false, false }; boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray22, (int) (byte) 0, 4); boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray25); boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray15, booleanArray25); int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray15, false); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false, false]"); org.junit.Assert.assertNotNull(booleanArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[false, false, true, true, false, false]"); org.junit.Assert.assertNotNull(booleanArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[false, false, true, true]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2); }
public void test01113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01113"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "444444444444...!hi!hi!444444444444"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2); }
public void test01114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01114"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HaIa", "HaIa"); org.junit.Assert.assertNotNull(strArray2); }
public void test01115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01115"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01116"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("Hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hi!hi!hi!h" + "'", str1, "Hi!hi!hi!h"); }
public void test01117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01117"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("", "lse}a{f"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01118"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("hi!hi!hi!h", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01119"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("                         -1", "   "); org.junit.Assert.assertNotNull(strArray2); }
public void test01120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01120"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("HI!HI!HI!HI", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01121"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("!IH!IH!IH!I{100,100,100}!IH!IH!IH!I", "hi! hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01122"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("                                                  ", "  ", (int) (byte) 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test01123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01123"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "-"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01124"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("true", 0, (int) 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "true" + "'", str3, "true"); }
public void test01125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01125"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("!IHhi! hi!", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01126"); char[] charArray4 = new char[] { '#', ' ', ' ' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray4); char[] charArray7 = org.apache.commons.lang3.ArrayUtils.add(charArray4, '#'); boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray4); int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray4, '#'); char[] charArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray4); boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray11); int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray11, ' ', 3); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, , , #]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(charArray11); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); }
public void test01127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01127"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01128"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01129"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str2, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test01130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01130"); char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01131"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("hi! hi!", "-"); org.junit.Assert.assertNotNull(strArray2); }
public void test01132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01132"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("", 'a', '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01133"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 98, ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test01134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01134"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("HI", "hi! hi! ", "", (int) ' '); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "HI" + "'", str4, "HI"); }
public void test01135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01135"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("", 6); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01136"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!" + "'", str1, "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!"); }
public void test01137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01137"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray7, true); java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray7); java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray16); boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17); boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(booleanArray18); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(booleanArray16); org.junit.Assert.assertNotNull(booleanArray17); org.junit.Assert.assertNotNull(booleanArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); }
public void test01138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01138"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("4444HI!HI!HI!4444444444444444444444", 'a', '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444HI!HI!HI!4444444444444444444444" + "'", str3, "4444HI!HI!HI!4444444444444444444444"); }
public void test01139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01139"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , ", "hi!ahi!ahi!ahi!", 7); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01140"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.split("  "); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence[]) strArray1); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01141"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("{#,a,a,#,#, , }"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{#,A,A,#,#, , }" + "'", str1, "{#,A,A,#,#, , }"); }
public void test01142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01142"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "{100,100,100}", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01143"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h", '4', '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h" + "'", str3, "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); }
public void test01144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01144"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("10", 34); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10" + "'", str2, "10"); }
public void test01145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01145"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "                                                 {}", (java.lang.CharSequence) "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01146"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("hi!hi!hi!h", (int) (byte) 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!h" + "'", str2, "hi!hi!hi!h"); }
public void test01147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01147"); java.lang.Character[] charArray5 = new java.lang.Character[] { '#', '4', '4', ' ' }; char[] charArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray5); boolean boolean7 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", charArray6); org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#44 "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#44 "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, 4, 4, ]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); }
public void test01148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01148"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, false); boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, 0, true); boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray18); boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19); // The following exception was thrown during execution in test generation try { boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray19, (int) ' '); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false, false]"); org.junit.Assert.assertNotNull(booleanArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, true, false]"); org.junit.Assert.assertNotNull(booleanArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, true, false]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test01149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01149"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "lse}a{f", 54, (int) '4'); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!" + "'", str4, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!"); }
public void test01150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01150"); char[] charArray4 = new char[] { '#', 'a', 'a', '#' }; boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(charArray4, ' '); char[] charArray13 = new char[] { '#', ' ', ' ' }; boolean boolean14 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray13); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#'); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) -1, (int) 'a'); int int20 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray13); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray13); char[] charArray22 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13); char[] charArray23 = null; boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray22, charArray23); char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray22, '4'); char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26); char[] charArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray27, '4'); // The following exception was thrown during execution in test generation try { char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray29, 52, 'a'); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 7"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, , ]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertNotNull(charArray22); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(charArray26); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#aa## 4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#aa## 4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a, a, #, #, , , 4]"); org.junit.Assert.assertNotNull(charArray27); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#aa## 4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#aa## 4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, a, a, #, #, , , 4]"); org.junit.Assert.assertNotNull(charArray29); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, a, a, #, #, , ]"); }
public void test01151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01151"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("444444444444...!hi!hi!444444444444", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01152"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "{100,100,100}!IH!IH!IH!I"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{100,100,100}!IH!IH!IH!I" + "'", str1, "{100,100,100}!IH!IH!IH!I"); }
public void test01153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01153"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01154"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01155"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("HaIa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HaI" + "'", str1, "HaI"); }
public void test01156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01156"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("{"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{" + "'", str1, "{"); }
public void test01157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01157"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("{#,A,A,#,#, , }", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,A,A,#,#, , }" + "'", str2, "{#,A,A,#,#, , }"); }
public void test01158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01158"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "HaIa"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01159"); char[] charArray4 = new char[] { '4', 'a', 'a' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray4); java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray4); // The following exception was thrown during execution in test generation try { char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 5, '#'); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(charArray6); }
public void test01160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01160"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("", "##########################h! h!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01161"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("hi! hi!             "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "             !ih !ih" + "'", str1, "             !ih !ih"); }
public void test01162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01162"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("hi!ahi!ahi!ahi!", "HI!", 6); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hiHI!!" + "'", str3, "hiHI!!"); }
public void test01163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01163"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("{100,100,100}", "!IH"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH" + "'", str2, "!IH"); }
public void test01164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01164"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("hi! hi!                                               "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI! HI!                                               " + "'", str1, "HI! HI!                                               "); }
public void test01165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01165"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("{#,a,a,#,#, , }hi!ahi!ahi!ahi!", "    hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01166"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("HI!", "  "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!" + "'", str2, "HI!"); }
public void test01167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01167"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("{#,A,A,#,#, , }", "##########################h! h! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,A,A,#,#, , }" + "'", str2, "{#,A,A,#,#, , }"); }
public void test01168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01168"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h", "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01169"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "  "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3); }
public void test01170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01170"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("HI!HI!HI!H", 2); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!HI!HI!H" + "'", str2, "!HI!HI!H"); }
public void test01171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01171"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################", "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01172"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("", "   "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01173"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("", "{false}", (int) (byte) -1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01174"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "{}i"); org.junit.Assert.assertNotNull(strArray2); }
public void test01175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01175"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     ", ' ', (int) (byte) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 98 + "'", int3 == 98); }
public void test01176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01176"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("HI", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01177"); java.lang.CharSequence charSequence1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) "!IHhi! hi!", charSequence1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01178"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("             !ih !ih", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "             !ih !ih" + "'", str2, "             !ih !ih"); }
public void test01179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01179"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("4444HI!HI!HI!4444444444444444444444                                ", "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01180"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "  "); int int4 = org.apache.commons.lang3.StringUtils.indexOfAny("{ ,4,#, , , }", strArray3); // The following exception was thrown during execution in test generation try { int int5 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) "{ ,4,#, , , }"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); }
public void test01181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01181"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("hi!", 8, "{#, , }"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!{#, ," + "'", str3, "hi!{#, ,"); }
public void test01182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01182"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); int int4 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!hi!", strArray3); java.lang.String[] strArray5 = null; java.lang.String str6 = org.apache.commons.lang3.StringUtils.replaceEach("", strArray3, strArray5); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test01183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01183"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "{#,A,A,#,#, , }"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01184"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterType(""); java.lang.String[] strArray2 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray1); java.lang.Object[] objArray3 = null; boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray1, objArray3); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); }
public void test01185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01185"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "#"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test01186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01186"); java.lang.CharSequence charSequence0 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone(charSequence0, "                                                 {}"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01187"); char[] charArray4 = new char[] { '4', 'a', 'a' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray4); java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray4); int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, '#'); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test01188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01188"); java.lang.String[] strArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithAny("hi! hi!             ", strArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01189"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 3, 6); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str4, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01190"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01191"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 6, 7); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str4, "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01192"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("    hi!", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01193"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     ", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01194"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , ", "##########################h! h! "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01195"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("#"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "#" + "'", str1, "#"); }
public void test01196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01196"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01197"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", (java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01198"); java.lang.CharSequence charSequence0 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfAny(charSequence0, "hi! hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01199"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I" + "'", str1, "4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I"); }
public void test01200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01200"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("hi!{#, ,", (int) '4', (int) (byte) -1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01201"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("...!hi!hi!", '4', (int) (short) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01202"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "HI!HI!HI!HI"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01203"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "{100,100,100}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str2, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01204"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("Hi!hi!hi!h", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH", 100); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Hi!hi!hi!h" + "'", str4, "Hi!hi!hi!h"); }
public void test01205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01205"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("ahi!ahi!a", "#", 9); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01206"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}", "#"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}" + "'", str2, "{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); }
public void test01207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01207"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("hi!", 4); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!"); }
public void test01208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01208"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01209"); java.lang.Integer[] intArray3 = new java.lang.Integer[] { 3, 0, 0 }; int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3, (int) (byte) 1); java.io.Serializable[] serializableArray8 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[]) intArray3, (int) (short) 10, (int) (byte) 10); int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3); int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3); boolean[] booleanArray13 = new boolean[] { true, false }; boolean[] booleanArray14 = null; boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray13, booleanArray14); boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false); int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray13, false); boolean[] booleanArray22 = new boolean[] { true, false }; boolean[] booleanArray23 = null; boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray22, booleanArray23); boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray22, (int) (byte) 1, 54); boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray13, booleanArray22); java.lang.Object[] objArray29 = new java.lang.Object[] {}; java.lang.String str31 = org.apache.commons.lang3.StringUtils.join(objArray29, ' '); java.lang.Object obj32 = null; int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray29, obj32); boolean[] booleanArray36 = new boolean[] { true, false }; boolean[] booleanArray37 = null; boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray36, booleanArray37); boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(objArray29, (java.lang.Object) booleanArray36); int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray36, true); boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray36); boolean[] booleanArray44 = org.apache.commons.lang3.ArrayUtils.add(booleanArray42, false); boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray28, booleanArray44); boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) intArray3, (java.lang.Object) boolean45); org.junit.Assert.assertNotNull(intArray3); org.junit.Assert.assertNotNull(intArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[3, 0, 0]"); org.junit.Assert.assertNotNull(serializableArray8); org.junit.Assert.assertNotNull(intArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[3, 0, 0]"); org.junit.Assert.assertNotNull(intArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[3, 0, 0]"); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true]"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertNotNull(booleanArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[false]"); org.junit.Assert.assertNotNull(booleanArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, false, true, false]"); org.junit.Assert.assertNotNull(objArray29); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]"); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, ""); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); org.junit.Assert.assertNotNull(booleanArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray36), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0); org.junit.Assert.assertNotNull(booleanArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[true, false, false]"); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); }
public void test01210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01210"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("                                                  ", (int) (byte) 0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01211"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("!IH!IH!IH!I{100,100,100}!IH!IH!IH!I"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "I!HI!HI!HI!}001,001,001{I!HI!HI!HI!" + "'", str1, "I!HI!HI!HI!}001,001,001{I!HI!HI!HI!"); }
public void test01212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01212"); char[] charArray7 = new char[] { '4', 'a', 'a' }; boolean boolean8 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray7); int int9 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray7); char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray7); boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray7); boolean boolean12 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444", charArray7); char[] charArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray7, 'a'); char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray7, 0, ' '); boolean boolean18 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!hi!hi!h", charArray17); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "4a"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "4a"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[4, a]"); org.junit.Assert.assertNotNull(charArray17); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " 4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " 4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , 4, a, a]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test01213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01213"); char[] charArray5 = new char[] { '4', 'a', 'a' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray5); int int7 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray5); char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray5); boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray5); // The following exception was thrown during execution in test generation try { char[] charArray11 = org.apache.commons.lang3.ArrayUtils.remove(charArray5, (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1)); org.junit.Assert.assertNotNull(charArray8); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test01214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01214"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01215"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("HaIa", (int) (byte) -1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HaIa" + "'", str2, "HaIa"); }
public void test01216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01216"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "{100,100,100}"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01217"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01218"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("HI!HI!HI!HI!", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01219"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "hi!hi!hi!hi!", (int) (byte) 10); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str3, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01220"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray5 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray6 = org.apache.commons.lang3.ArrayUtils.addAll(strArray2, strArray5); java.lang.String[] strArray7 = org.apache.commons.lang3.StringUtils.stripAll(strArray5); java.lang.String[] strArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray7); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(strArray8); }
public void test01221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01221"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("HI!", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01222"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             ", "   "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             " + "'", str2, "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             "); }
public void test01223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01223"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("   ", "{}i!", 8); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01224"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01225"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("true"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "true" + "'", str1, "true"); }
public void test01226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01226"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("hi!hi!hi!", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01227"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", (int) (byte) 10, "0                                                  "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444" + "'", str3, "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444"); }
public void test01228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01228"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("-------------------------------------------------------------------------------------------------", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01229"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str2, "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01230"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi! hi! ", "hi! hi!                                               "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01231"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("-1", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01232"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "{", 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01233"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "{false}", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01234"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-" + "'", str1, "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); }
public void test01235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01235"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("{100,100,100}!IH!IH!IH!I", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01236"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("true", 54); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "true" + "'", str2, "true"); }
public void test01237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01237"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("                         -1", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01238"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat(" -1", 52); org.junit.Assert.assertEquals("'" + str2 + "' != '" + " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1" + "'", str2, " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"); }
public void test01239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01239"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("{#,A,A,#,#, , }", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", 98); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01240"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("HI! HI!                                               ", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01241"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01242"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01243"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "{}i!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str2, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test01244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01244"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertNull(strArray3); }
public void test01245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01245"); java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "...!hi!hi!", (java.lang.CharSequence) "100"); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "...!hi!hi!" + "'", charSequence2, "...!hi!hi!"); }
public void test01246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01246"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "10"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01247"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("{#,a,a,#,#, , }", "{}i!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01248"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "", 8); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str4, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01249"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("{", "hi!hi!hi!hi"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{" + "'", str2, "{"); }
public void test01250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01250"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle(" -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "", (int) (byte) 1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1" + "'", str3, " -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"); }
public void test01251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01251"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("-"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-" + "'", str1, "-"); }
public void test01252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01252"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("", (int) (byte) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01253"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("", "hi! hi!                                               ", "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444"); org.junit.Assert.assertNull(str3); }
public void test01254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01254"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("444444444444444444444HI!HI!HI!4444444444444444444444", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01255"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray6); java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int16 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray15); int int17 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray15); java.lang.String[] strArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray15); boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray6, (java.lang.Object[]) strArray18); java.lang.Long[] longArray24 = new java.lang.Long[] { 10L, 100L, 10L, 1L }; java.lang.Long[] longArray25 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(longArray24); int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray6, (java.lang.Object) longArray24); org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) longArray24); java.lang.Object[] objArray28 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) longArray24); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertNotNull(longArray24); org.junit.Assert.assertNotNull(longArray25); org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1)); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[1, 10, 100, 10]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[1, 10, 100, 10]"); }
public void test01256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01256"); char[] charArray6 = new char[] { '4', 'a', 'a' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray6); int int8 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray6); int int9 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray6); char[] charArray18 = new char[] { '#', ' ', ' ' }; boolean boolean19 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray18); char[] charArray21 = org.apache.commons.lang3.ArrayUtils.add(charArray18, '#'); char[] charArray24 = org.apache.commons.lang3.ArrayUtils.subarray(charArray18, (int) (byte) -1, (int) 'a'); int int25 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray18); int int26 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray18); org.apache.commons.lang3.ArrayUtils.reverse(charArray18); int int28 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!", charArray18); boolean boolean29 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "!IH    ", charArray18); org.apache.commons.lang3.ArrayUtils.reverse(charArray18); boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray6, charArray18); int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, ' ', (int) (byte) -1); char[] charArray35 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray6); boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray6); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertNotNull(charArray18); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(charArray21); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray24); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, , ]"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1)); org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1)); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1)); org.junit.Assert.assertNotNull(charArray35); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); }
public void test01257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01257"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("{}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}"); }
public void test01258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01258"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("4444hi!hi!hi!4444444444444444444444                                ", "  "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01259"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("", "-------------------------------------------------------------------------------------------------", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH"); org.junit.Assert.assertNull(str3); }
public void test01260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01260"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 3); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str2, "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test01261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01261"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("   ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01262"); boolean[] booleanArray2 = new boolean[] { true, false }; boolean[] booleanArray3 = null; boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray2, booleanArray3); boolean[] booleanArray11 = new boolean[] { false, true, true, false, true, true }; boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray3, booleanArray11); java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11); boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray13); java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray13); // The following exception was thrown during execution in test generation try { java.lang.String str19 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) booleanArray13, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################", 0, 99); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(booleanArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, true, true, false, true, true]"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[false, true, true, false, true, true]"); org.junit.Assert.assertNotNull(booleanArray15); }
public void test01263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01263"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", (int) (short) 10, (int) (byte) 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01264"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("ahi!ahi!a", (int) '4', ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ahi!ahi!a                      " + "'", str3, "ahi!ahi!a                      "); }
public void test01265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01265"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("aaaaaaa -1", "{}i", 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01266"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "hiHI!!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01267"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "hi!{#, ,"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01268"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("", "0"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01269"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01270"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("!HI!HI!H", "{"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01271"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "hi! hi!             "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str2, "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01272"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("444444444444...!hi!hi!444444444444", 30, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str3, "444444444444...!hi!hi!444444444444"); }
public void test01273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01273"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false); java.lang.Boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray15); // The following exception was thrown during execution in test generation try { boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray15, 52); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 1"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray15), "[true]"); org.junit.Assert.assertNotNull(booleanArray16); }
public void test01274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01274"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}{false}{}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{" + "'", str1, "}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{"); }
public void test01275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01275"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); int int4 = org.apache.commons.lang3.StringUtils.indexOfAny("  ", strArray3); int int5 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("{#,a,a,#,#, , }", strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1)); }
public void test01276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01276"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("hi! hi!             ", (int) (short) -1, 45); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi! hi!             " + "'", str3, "hi! hi!             "); }
public void test01277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01277"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("", "##########################h! h!"); org.junit.Assert.assertNull(str2); }
public void test01278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01278"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", 'a', 5); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01279"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("!HI!HI!H"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!hi!hi!h" + "'", str1, "!hi!hi!h"); }
public void test01280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01280"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!" + "'", str1, "hI!HI!HI!"); }
public void test01281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01281"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("   ", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "    "); org.junit.Assert.assertNull(strArray3); }
public void test01282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01282"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("hi!hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray4 = null; java.lang.String str5 = org.apache.commons.lang3.StringUtils.replaceEach("    HI!", strArray3, strArray4); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "    HI!" + "'", str5, "    HI!"); }
public void test01283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01283"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("##########################h! h!", "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "##########################h! h" + "'", str2, "##########################h! h"); }
public void test01284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01284"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("-------------------------------------------------------------------------------------------------", "##########################h! h"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01285"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("{100,100,100}", "Hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01286"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7); int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true, 6); boolean[] booleanArray17 = null; boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray7, booleanArray17); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false]"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test01287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01287"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("    HI!", 100, ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    HI!                                             " + "'", str3, "    HI!                                             "); }
public void test01288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01288"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.split("!IH!IH!IH!I{100,100,100}!IH!IH!IH!I", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", (int) (short) 1); java.lang.String[] strArray9 = org.apache.commons.lang3.StringUtils.split("-1", ""); java.lang.String[] strArray12 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray15 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray16 = org.apache.commons.lang3.ArrayUtils.addAll(strArray12, strArray15); java.lang.String str17 = org.apache.commons.lang3.StringUtils.replaceEach("hi!hi!hi!h", strArray9, strArray15); int int18 = org.apache.commons.lang3.StringUtils.indexOfAny("-1", strArray9); java.lang.String str19 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            ", strArray4, strArray9); java.lang.String str23 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray4, 'a', (int) (byte) 1, 1); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!hi!hi!h" + "'", str17, "hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            " + "'", str19, "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            "); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); }
public void test01289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01289"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("", "Hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01290"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) " -1"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01291"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("                                                 {}", "    HI!                                             ", "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                                                 {}" + "'", str3, "                                                 {}"); }
public void test01292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01292"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("10", 5, "!IH    "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IH10" + "'", str3, "!IH10"); }
public void test01293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01293"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("{}", "hi! hi!                       ", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}"); }
public void test01294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01294"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("aaaaaaa -1", (int) (short) 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "aaaaaaa -1" + "'", str2, "aaaaaaa -1"); }
public void test01295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01295"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2968 + "'", int1 == 2968); }
public void test01296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01296"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           ", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01297"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("!IH", 0, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IH" + "'", str3, "!IH"); }
public void test01298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01298"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("{false}", '#', ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{false}" + "'", str3, "{false}"); }
public void test01299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01299"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01300"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", (-1), "#"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str3, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test01301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01301"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("                ", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01302"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("HI! HI!                                               ", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01303"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "  "); java.lang.Object[] objArray3 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray2); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(objArray3); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!, ]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!, ]"); }
public void test01304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01304"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("{", (-1), "HaI"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{" + "'", str3, "{"); }
public void test01305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01305"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("hI!HI!HI!", '#'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hI!HI!HI!" + "'", str2, "hI!HI!HI!"); }
public void test01306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01306"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           ", "{100,100,100}", "                         -1"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           " + "'", str3, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           "); }
public void test01307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01307"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("", "{#,a,a,#,#,,}hi!ahi!ahi!ahi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01308"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("true", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "HI!HI!HI!H", 0); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "true" + "'", str4, "true"); }
public void test01309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01309"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.split("                "); org.junit.Assert.assertNotNull(strArray1); }
public void test01310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01310"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 62 + "'", int2 == 62); }
public void test01311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01311"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!            ", "{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01312"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("                ", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                " + "'", str2, "                "); }
public void test01313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01313"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01314"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    " + "'", str2, "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    "); }
public void test01315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01315"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.reverseDelimited("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str2, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test01316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01316"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("", "ahi!ahi!a"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01317"); java.lang.CharSequence charSequence0 = null; java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty(charSequence0, (java.lang.CharSequence) "hi!{#, ,"); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "hi!{#, ," + "'", charSequence2, "hi!{#, ,"); }
public void test01318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01318"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01319"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("!IH!IH!IH!I{100,100,100}!IH!IH!IH!I", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01320"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "HaI"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01321"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01322"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("hi! hi!", "{ ,4,#, , , }"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01323"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01324"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("!IH10"); org.junit.Assert.assertNotNull(strArray1); }
public void test01325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01325"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           ", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01326"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01327"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("Hi!hi!hi!h", "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!                           "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01328"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01329"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "aaaaaaa -1", (int) '#'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01330"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("-", 100, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , -4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , }" + "'", str3, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , -4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , }"); }
public void test01331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01331"); char[] charArray4 = new char[] { '#', 'a', 'a', '#' }; boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(charArray4, ' '); char[] charArray13 = new char[] { '#', ' ', ' ' }; boolean boolean14 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray13); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#'); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) -1, (int) 'a'); int int20 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray13); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray13); char[] charArray22 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13); char[] charArray23 = null; boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray22, charArray23); char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray22, '4'); char[] charArray27 = org.apache.commons.lang3.ArrayUtils.clone(charArray26); char[] charArray29 = org.apache.commons.lang3.ArrayUtils.add(charArray26, '#'); int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray29, ' ', (int) (short) 10); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, , ]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertNotNull(charArray22); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(charArray26); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#aa## 4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#aa## 4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a, a, #, #, , , 4]"); org.junit.Assert.assertNotNull(charArray27); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#aa## 4"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#aa## 4"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, a, a, #, #, , , 4]"); org.junit.Assert.assertNotNull(charArray29); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#aa## 4#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#aa## 4#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#, a, a, #, #, , , 4, #]"); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1)); }
public void test01332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01332"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("", (-1), "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test01333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01333"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("h", "", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h" + "'", str3, "h"); }
public void test01334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01334"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("   ", (int) (short) 10, "hi!ahi!ahi!ahi!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!a   " + "'", str3, "hi!a   "); }
public void test01335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01335"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("", "!HI!HI!H"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01336"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", 'a', 99); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01337"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih", "", (int) (short) 100); org.junit.Assert.assertNotNull(strArray3); }
public void test01338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01338"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "Hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01339"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01340"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("##########################h! h", (int) (short) 100, (int) (byte) 0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01341"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "                                                  "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01342"); char[] charArray4 = new char[] { '#', ' ', ' ' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray4); char[] charArray7 = org.apache.commons.lang3.ArrayUtils.add(charArray4, '#'); char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray4, (int) (byte) -1, (int) 'a'); java.lang.String str11 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) charArray10); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, , ]"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{#, , }" + "'", str11, "{#, , }"); }
public void test01343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01343"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("-------------------------------------------------------------------------------------------------", 6); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-------------------------------------------------------------------------------------------------" + "'", str2, "-------------------------------------------------------------------------------------------------"); }
public void test01344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01344"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("444444444444...!hi!hi!444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str1, "444444444444...!hi!hi!444444444444"); }
public void test01345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01345"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", "    HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01346"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "4444HI!HI!HI!4444444444444444444444", "HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01347"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}{FALSE}{}", "{"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01348"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equals((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", (java.lang.CharSequence) "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01349"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                     "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 99 + "'", int1 == 99); }
public void test01350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01350"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01351"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("!hi!hi!h", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "HaIa"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "IHiIHiIH" + "'", str3, "IHiIHiIH"); }
public void test01352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01352"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterType("hi! hi!                                               "); org.junit.Assert.assertNotNull(strArray1); }
public void test01353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01353"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01354"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) " -1"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01355"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , ", "{100,100,100}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , " + "'", str2, "    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , "); }
public void test01356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01356"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!###########################################", "!IH    "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01357"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 63 + "'", int2 == 63); }
public void test01358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01358"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!IH", 63, (int) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01359"); byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 }; byte[] byteArray11 = new byte[] { (byte) -1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 }; byte[] byteArray17 = new byte[] { (byte) -1, (byte) 10, (byte) -1, (byte) 0, (byte) 0 }; byte[][] byteArray18 = new byte[][] { byteArray5, byteArray11, byteArray17 }; byte[][] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, (int) 'a', (-1)); java.lang.String str23 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray21, "!IH"); boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(byteArray21); org.junit.Assert.assertNotNull(byteArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 10, -1, 0, 0]"); org.junit.Assert.assertNotNull(byteArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 10, -1, 0, 0]"); org.junit.Assert.assertNotNull(byteArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 10, -1, 0, 0]"); org.junit.Assert.assertNotNull(byteArray18); org.junit.Assert.assertNotNull(byteArray21); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, ""); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); }
public void test01360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01360"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("#", '#', '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "#" + "'", str3, "#"); }
public void test01361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01361"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01362"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("4444hi!hi!hi!4444444444444444444444                                "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "4444hi!hi!hi!4444444444444444444444                                " + "'", str1, "4444hi!hi!hi!4444444444444444444444                                "); }
public void test01363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01363"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "IHiIHiIH"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01364"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("{", 62); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{" + "'", str2, "{"); }
public void test01365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01365"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("ahi!ahi!a                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ahi!ahi!a" + "'", str1, "ahi!ahi!a"); }
public void test01366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01366"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("                                                  ", 10, "100"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                                                  " + "'", str3, "                                                  "); }
public void test01367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01367"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ", (int) (byte) 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    " + "'", str2, "!IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    ##########################h! h! !IH    "); }
public void test01368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01368"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , -4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , }"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , -4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , }" + "'", str1, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , -4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , }"); }
public void test01369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01369"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01370"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test01371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01371"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("{"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{" + "'", str1, "{"); }
public void test01372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01372"); char[] charArray5 = new char[] { '4', 'a', 'a' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray5); int int7 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray5); boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray5); org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1)); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test01373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01373"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("    HI!", "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", (-1), 2968); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa" + "'", str4, "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); }
public void test01374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01374"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("!IHhi! hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!ih !ihHI!" + "'", str1, "!ih !ihHI!"); }
public void test01375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01375"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("                ", 6); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "   " + "'", str2, "   "); }
public void test01376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01376"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01377"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("    HI!    HI!    HI!    HI!", "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    HI!    HI!    HI!    HI!" + "'", str2, "    HI!    HI!    HI!    HI!"); }
public void test01378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01378"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str1, "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaa    HI!    HI!    HI!    HI!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01379"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!hi!", "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa", 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01380"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("{100,100,100}", "{}i!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01381"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("", ' ', 9); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01382"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01383"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("-", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-" + "'", str2, "-"); }
public void test01384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01384"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01385"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("{}", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01386"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{HI"); }
public void test01387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01387"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!" + "'", str1, "HI!"); }
public void test01388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01388"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "lse}a{f"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test01389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01389"); java.lang.Character[] charArray7 = new java.lang.Character[] { ' ', '4', '#', ' ', ' ', ' ' }; char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7, ' '); java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray9); char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray10, ' '); char[] charArray13 = org.apache.commons.lang3.ArrayUtils.clone(charArray12); boolean boolean14 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", charArray12); char[] charArray17 = org.apache.commons.lang3.ArrayUtils.subarray(charArray12, 7, 7); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ , 4, #, , , ]"); org.junit.Assert.assertNotNull(charArray10); org.junit.Assert.assertNotNull(charArray12); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ , 4, #, , , ]"); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ , 4, #, , , ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(charArray17); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]"); }
public void test01390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01390"); char[] charArray5 = new char[] { '4', 'a', 'a' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray5); int int7 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray5); char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray5); char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray5); org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1)); org.junit.Assert.assertNotNull(charArray8); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, a, a]"); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, a]"); }
public void test01391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01391"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("    ", "{}i!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    " + "'", str2, "    "); }
public void test01392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01392"); java.lang.Byte[] byteArray1 = new java.lang.Byte[] { (byte) 10 }; byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100); java.lang.String str7 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray1, '4', (int) (byte) 10, (int) (short) 10); java.lang.Byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(byteArray1); byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 100); byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray1, (byte) 0); int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray12, (byte) 10); org.junit.Assert.assertNotNull(byteArray1); org.junit.Assert.assertNotNull(byteArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10]"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(byteArray8); org.junit.Assert.assertNotNull(byteArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10]"); org.junit.Assert.assertNotNull(byteArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10]"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test01393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01393"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("true"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "tru" + "'", str1, "tru"); }
public void test01394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01394"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("HI!HI!HI!", 0, '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!" + "'", str3, "HI!HI!HI!"); }
public void test01395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01395"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("    HI!", 'a', (int) (short) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01396"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray6); java.lang.String[] strArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray6); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(strArray9); java.lang.Object[] objArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray9); int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray11, (java.lang.Object) ""); java.lang.String str15 = org.apache.commons.lang3.StringUtils.join(objArray11, ' '); java.lang.String str19 = org.apache.commons.lang3.StringUtils.join(objArray11, '4', 8, 0); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertNotNull(objArray11); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[hi!, hi!, , ]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[hi!, hi!, , ]"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi! hi! " + "'", str15, "hi! hi! "); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); }
public void test01397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01397"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("    HI!                                             "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    HI!                                             " + "'", str1, "    HI!                                             "); }
public void test01398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01398"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("", "    HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01399"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("hI!HI!HI!", (int) '4'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hI!HI!HI!" + "'", str2, "hI!HI!HI!"); }
public void test01400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01400"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01401"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("    HI!", "    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , ", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    HI!" + "'", str3, "    HI!"); }
public void test01402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01402"); char[] charArray6 = new char[] { '#', ' ', ' ' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray6); char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray6, '#'); char[] charArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charArray6, (int) (byte) -1, (int) 'a'); int int13 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray6); int int14 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray6); java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6); char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, '4'); char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15); int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray18, ' ', (-1)); char[] charArray24 = org.apache.commons.lang3.ArrayUtils.subarray(charArray18, (int) (short) 0, 2968); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray12); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, , ]"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertNotNull(charArray15); org.junit.Assert.assertNotNull(charArray17); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, , ]"); org.junit.Assert.assertNotNull(charArray18); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, , ]"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertNotNull(charArray24); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, , ]"); }
public void test01403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01403"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "  "); java.lang.String str5 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray3, ' '); java.lang.String[] strArray9 = org.apache.commons.lang3.StringUtils.split("-1", ""); java.lang.String[] strArray12 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray15 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray16 = org.apache.commons.lang3.ArrayUtils.addAll(strArray12, strArray15); java.lang.String str17 = org.apache.commons.lang3.StringUtils.replaceEach("hi!hi!hi!h", strArray9, strArray15); java.lang.String[] strArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray9); java.lang.String[] strArray20 = org.apache.commons.lang3.StringUtils.stripAll(strArray18, "{ ,4,#, , , }"); java.lang.String str21 = org.apache.commons.lang3.StringUtils.replaceEach("{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", strArray3, strArray20); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str5, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strArray12); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!hi!hi!h" + "'", str17, "hi!hi!hi!h"); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertNotNull(strArray20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str21, "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test01404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01404"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str2, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test01405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01405"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", 1, ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str3, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01406"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1, "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test01407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01407"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("    hi!    hi!    hi!    hi!", 4); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "  hi!    hi!    hi!    hi!" + "'", str2, "  hi!    hi!    hi!    hi!"); }
public void test01408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01408"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("    HI!                                             ", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      ", (int) (short) 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    HI!                                             " + "'", str3, "    HI!                                             "); }
public void test01409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01409"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("    hi!    hi!    hi!    hi!", (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01410"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase("    "); org.junit.Assert.assertNotNull(strArray1); }
public void test01411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01411"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!h" + "'", str1, "hi!hi!hi!h"); }
public void test01412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01412"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("##########################h! h", "{}"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01413"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{", "!IH10"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH10" + "'", str2, "!IH10"); }
public void test01414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01414"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("hI!HI!HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!" + "'", str1, "hI!HI!HI!"); }
public void test01415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01415"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{}eslaf{}{", "                         -1", (int) 'a'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01416"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("    HI!    HI!    HI!    HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str1, "    hi!    hi!    hi!    hi!"); }
public void test01417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01417"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "                "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test01418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01418"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("HI!", 'a', 8); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01419"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("", "hi!hi!hi!hi"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01420"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H", "I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!hi!hi!hi!hi!I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "hi! hi!                                               "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H" + "'", str3, "HI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!HHI!HI!HI!H"); }
public void test01421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01421"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "{#,a,a,#,#, , }"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01422"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("h! h! ", 54); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "            h! h!             " + "'", str2, "            h! h!             "); }
public void test01423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01423"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("##########################h! h!", 62, 9); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "...#h! h!" + "'", str3, "...#h! h!"); }
public void test01424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01424"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("!IHhi! hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IHhi!hi!" + "'", str1, "!IHhi!hi!"); }
public void test01425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01425"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("HI!HI!HI!", "10"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!" + "'", str2, "HI!HI!HI!"); }
public void test01426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01426"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", (java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01427"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "", "{100,100,100}", (int) (short) 0); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str4, "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test01428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01428"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("hI!HI!HI!", "HI!HI!HI!H"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01429"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}"); }
public void test01430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01430"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", "                         -1"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!" + "'", str2, "4444hi!hi!hi!4444444444444444444444{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!"); }
public void test01431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01431"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("{false}", "-", (-1)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01432"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("lse}a{f"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "LSE}A{F" + "'", str1, "LSE}A{F"); }
public void test01433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01433"); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.split("Hi!hi!hi!h", "", 34); java.lang.String[] strArray7 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator(" -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); java.lang.String str8 = org.apache.commons.lang3.StringUtils.replaceEach("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", strArray4, strArray7); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str8, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01434"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad(" -1", 45, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str3, " -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01435"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.left("HaI", (int) (short) -1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01436"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase(" -1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + " -1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str1, " -1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test01437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01437"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("hiHI!!", 3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test01438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01438"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "i!hi!hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "##########################h! h! "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str3, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test01439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01439"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("    HI!                                             ", "   "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!" + "'", str2, "HI!"); }
public void test01440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01440"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "444444444444444444444HI!HI!HI!4444444444444444444444" + "'", str1, "444444444444444444444HI!HI!HI!4444444444444444444444"); }
public void test01441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01441"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "h! h! "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01442"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("hi!{#, ,", 63, ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "              hi!{#, ,              " + "'", str3, "              hi!{#, ,              "); }
public void test01443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01443"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "...#h! h!", "!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!IH!Ih"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01444"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToEmpty("aaaaaaa -1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "aaaaaaa -1" + "'", str1, "aaaaaaa -1"); }
public void test01445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01445"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "                                                 {}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01446"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444", "{100,100,100}"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01447"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "    HI!                                             ", 1); org.junit.Assert.assertNotNull(strArray3); }
public void test01448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01448"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I", "Hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01449"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "HI!HI!HI!", "    HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01450"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7); boolean[] booleanArray14 = new boolean[] { true, false }; boolean[] booleanArray15 = null; boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray14, booleanArray15); boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray14, (int) (byte) 1, 54); boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray14, true); boolean[] booleanArray24 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray21, 0, 1); boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray21); int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray21, true); boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray21, false); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[false]"); org.junit.Assert.assertNotNull(booleanArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false]"); org.junit.Assert.assertNotNull(booleanArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray24), "[false]"); org.junit.Assert.assertNotNull(booleanArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, false, false]"); org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1)); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); }
public void test01451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01451"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("hi! hi!             ", "HI", "4444444444444444444444444444444444444444444!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!ih!I"); org.junit.Assert.assertNull(strArray3); }
public void test01452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01452"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("{}", "  hi!    hi!    hi!    hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01453"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("hi!a   ", "   "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!a" + "'", str2, "hi!a"); }
public void test01454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01454"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("!IH", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertNull(str2); }
public void test01455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01455"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str1, "Hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test01456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01456"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "  "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01457"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test01458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01458"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01459"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("    HI!    HI!    HI!    HI!", "ahi!ahi!a", 9); // The following exception was thrown during execution in test generation try { java.lang.String str7 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray3, '4', 9, 98); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray3); }
public void test01460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01460"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("{#,a,a,#,#, , }", "aIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIHaIa"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,a,a,#,#, , }" + "'", str2, "{#,a,a,#,#, , }"); }
public void test01461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01461"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("                "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "                " + "'", str1, "                "); }
public void test01462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01462"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi! hi! ", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01463"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("hi!hi!hi!hi!hhi!hi!hi!hi!hhi!hi!hi!h", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test01464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01464"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("                                                 {}", '#'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01465"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", "                         -1"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01466"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("100", "    ", "I!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "100" + "'", str3, "100"); }
public void test01467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01467"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "!IH    "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01468"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "444444444444444444444HI!HI!HI!4444444444444444444444" + "'", str1, "444444444444444444444HI!HI!HI!4444444444444444444444"); }
public void test01469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01469"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("!ih !ihHI!", "4444hi!hi!hi!4444444444444444444444                                "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!ih !ihHI!" + "'", str2, "!ih !ihHI!"); }
public void test01470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01470"); char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!{#,a,a,#,#, , } HI!", charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01471"); char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "    hi!", charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01472"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("Hi!hi!hi!h", 2968); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hi!hi!hi!h" + "'", str2, "Hi!hi!hi!h"); }
public void test01473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01473"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("I!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!4444444444444444444444444444444444444444444", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01474"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("", "##########################h! h! "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01475"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("hi! hi!", "    HI!                                             "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01476"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "lse}a{f", (int) (short) 1); org.junit.Assert.assertNotNull(strArray3); }
public void test01477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01477"); java.lang.CharSequence charSequence0 = null; char[] charArray7 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray14 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray21 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray28 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[] charArray35 = new char[] { ' ', 'a', '4', '4', '#', ' ' }; char[][] charArray36 = new char[][] { charArray7, charArray14, charArray21, charArray28, charArray35 }; char[] charArray37 = new char[] {}; char[] charArray38 = new char[] {}; char[] charArray39 = new char[] {}; char[] charArray40 = new char[] {}; char[] charArray41 = new char[] {}; char[][] charArray42 = new char[][] { charArray37, charArray38, charArray39, charArray40, charArray41 }; char[][] charArray43 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray42); char[] charArray49 = new char[] { '#', 'a', ' ' }; boolean boolean50 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", charArray49); boolean boolean51 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!", charArray49); char[] charArray54 = org.apache.commons.lang3.ArrayUtils.subarray(charArray49, (int) (byte) 0, (int) '#'); java.lang.Character[] charArray55 = org.apache.commons.lang3.ArrayUtils.toObject(charArray54); char[][] charArray56 = org.apache.commons.lang3.ArrayUtils.add(charArray42, charArray54); char[] charArray57 = org.apache.commons.lang3.ArrayUtils.clone(charArray54); boolean boolean58 = org.apache.commons.lang3.StringUtils.containsNone(charSequence0, charArray54); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray21); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray28); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray35); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), " a44# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), " a44# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[ , a, 4, 4, #, ]"); org.junit.Assert.assertNotNull(charArray36); org.junit.Assert.assertNotNull(charArray37); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]"); org.junit.Assert.assertNotNull(charArray38); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]"); org.junit.Assert.assertNotNull(charArray39); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]"); org.junit.Assert.assertNotNull(charArray40); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[]"); org.junit.Assert.assertNotNull(charArray41); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), ""); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), ""); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[]"); org.junit.Assert.assertNotNull(charArray42); org.junit.Assert.assertNotNull(charArray43); org.junit.Assert.assertNotNull(charArray49); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(charArray54); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#, a, ]"); org.junit.Assert.assertNotNull(charArray55); org.junit.Assert.assertNotNull(charArray56); org.junit.Assert.assertNotNull(charArray57); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true); }
public void test01478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01478"); char[] charArray4 = new char[] { '#', ' ', ' ' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray4); int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, ' ', 3); // The following exception was thrown during execution in test generation try { char[] charArray10 = org.apache.commons.lang3.ArrayUtils.remove(charArray4, (-1)); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test01479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01479"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", " -1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test01480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01480"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "#aa## "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test01481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01481"); int[] intArray6 = new int[] { '4', 10, (short) 100, '4', (byte) 10, 100 }; int[] intArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray6, (int) (byte) 10); int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray8, (int) '4'); int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray8, (int) (short) -1); int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0, (int) ' '); int[] intArray22 = new int[] { '4', 10, (short) 100, '4', (byte) 10, 100 }; int[] intArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray22, (int) (byte) 10); int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray24, (int) '4'); int[] intArray27 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray24); int[] intArray28 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray27); int[] intArray31 = org.apache.commons.lang3.ArrayUtils.subarray(intArray28, 0, (-1)); java.lang.Integer[] intArray32 = org.apache.commons.lang3.ArrayUtils.toObject(intArray31); java.lang.String str34 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) intArray32, "hi!hi!hi!hi"); int[] intArray36 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray32, 4); java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int44 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray43); int int45 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray43); java.lang.String[] strArray46 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray43); boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(strArray46); java.lang.Object[] objArray48 = org.apache.commons.lang3.ArrayUtils.nullToEmpty((java.lang.Object[]) strArray46); int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray32, (java.lang.Object) objArray48); org.junit.Assert.assertNotNull(intArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[52, 100, 52, 10, 100, -1]"); org.junit.Assert.assertNotNull(intArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 52, 100, 52, 10, 100, -1]"); org.junit.Assert.assertNotNull(intArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0); org.junit.Assert.assertNotNull(intArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[52, 100, 52, 10, 100, -1, 52, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]"); org.junit.Assert.assertNotNull(intArray32); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); org.junit.Assert.assertNotNull(intArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]"); org.junit.Assert.assertNotNull(strArray43); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3); org.junit.Assert.assertNotNull(strArray46); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true); org.junit.Assert.assertNotNull(objArray48); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[hi!, hi!, , ]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[hi!, hi!, , ]"); org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1)); }
public void test01482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01482"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!", 9, ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!" + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!Hlse}a{fHI!"); }
public void test01483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01483"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("                         -1", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); long[] longArray9 = new long[] { 'a', (byte) 0, '#', (-1L), (-1L), '4' }; int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray9, 0L, 100); long[] longArray14 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray9, (long) (byte) 0); long[] longArray17 = new long[] { (short) -1, (short) 1 }; int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray17, (long) 100, (int) ' '); int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray17, (long) 10, (int) (short) 10); boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray9, longArray17); long[] longArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray9, 1L); long[] longArray28 = org.apache.commons.lang3.ArrayUtils.remove(longArray26, 3); boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(longArray26, 0L); boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) strArray2, (java.lang.Object) 0L); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(longArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[97, 0, 35, -1, -1, 52]"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1)); org.junit.Assert.assertNotNull(longArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[97, 35, -1, -1, 52]"); org.junit.Assert.assertNotNull(longArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[-1, 1]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1)); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(longArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[97, 0, 35, -1, -1, 52]"); org.junit.Assert.assertNotNull(longArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[97, 0, 35, -1, 52]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test01484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01484"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , ", 0, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , " + "'", str3, "    { ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , }{ ,4,#, , , "); }
public void test01485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01485"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("             !ih !ih"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!ih!ih" + "'", str1, "!ih!ih"); }
public void test01486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01486"); java.lang.Object[] objArray0 = null; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertNull(str2); }
public void test01487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01487"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("", "h! h! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01488"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf(" -1", " -1", (-1)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test01489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01489"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("{#,a,a,#,#, , }", ' '); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test01490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01490"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi! hi!             "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str2, "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test01491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01491"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "HI", (java.lang.CharSequence) "i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!HI!HI!HI!HI!i!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test01492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01492"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01493"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf(" -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test01494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01494"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("", "HI! HI!                                               ", 98, 0); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "HI! HI!                                               " + "'", str4, "HI! HI!                                               "); }
public void test01495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01495"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("hI!HI!HI!", "HI!HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hI!HI!HI!" + "'", str2, "hI!HI!HI!"); }
public void test01496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01496"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("    hi!    hi!    hi!    hi!", "##########################h! h!"); org.junit.Assert.assertNotNull(strArray2); }
public void test01497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01497"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("10"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "10" + "'", str1, "10"); }
public void test01498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01498"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("HaI"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HAI" + "'", str1, "HAI"); }
public void test01499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01499"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("##########################h! h! ", "HaIa"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test01500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test01500"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("!HI!HI!H", "!ih !ihHI!", (int) (short) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00001"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00002"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) ""); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00003"); int int3 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("", "", (int) (byte) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00004"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00005"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("hi!", "hi!"); org.junit.Assert.assertNull(str2); }
public void test00006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00006"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToEmpty(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00007"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) ""); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00008"); char[] charArray4 = new char[] { '#', ' ', ' ' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray4); char[] charArray7 = org.apache.commons.lang3.ArrayUtils.add(charArray4, '#'); // The following exception was thrown during execution in test generation try { char[] charArray9 = org.apache.commons.lang3.ArrayUtils.remove(charArray4, (int) (short) 10); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(charArray7); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#, , , #]"); }
public void test00009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00009"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00010"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull(""); org.junit.Assert.assertNull(str1); }
public void test00011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00011"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("", "hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00012"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00013"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("", "hi!", 3); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00014"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00015"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("", '#'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00016"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("hi!", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!"); }
public void test00017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00017"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00018"); char[] charArray4 = new char[] { '#', 'a', ' ' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", charArray4); boolean boolean6 = org.apache.commons.lang3.ArrayUtils.isNotEmpty(charArray4); // The following exception was thrown during execution in test generation try { char[] charArray8 = org.apache.commons.lang3.ArrayUtils.remove(charArray4, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test00019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00019"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("hi!", "hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00020"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("", "hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00021"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!", "hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00022"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("hi!", (int) (short) 0, ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); }
public void test00023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00023"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!" + "'", str1, "hi!"); }
public void test00024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00024"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) ""); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00025"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("-1", (int) (byte) 1, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1"); }
public void test00026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00026"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "hi!", (java.lang.CharSequence) "-1"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3); }
public void test00027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00027"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("", "hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00028"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00029"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); java.lang.String[] strArray8 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray6); int int9 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray8); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0); }
public void test00030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00030"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("hi!", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!"); }
public void test00031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00031"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("-1", "-1"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00032"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("", 10); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00033"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("", "hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00034"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!" + "'", str1, "hi!"); }
public void test00035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00035"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00036"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("hi!", "hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test00037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00037"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("-1", "-1"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00038"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("", "hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00039"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("-1", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1"); }
public void test00040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00040"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("", 'a', (-1)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00041"); java.lang.CharSequence charSequence1 = null; java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "hi!", charSequence1); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "hi!" + "'", charSequence2, "hi!"); }
public void test00042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00042"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("hi!", "hi!", (int) (byte) 10); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00043"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!" + "'", str1, "hi!"); }
public void test00044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00044"); java.lang.Object[] objArray0 = null; java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray0, "-1", 1, 3); org.junit.Assert.assertNull(str4); }
public void test00045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00045"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("-1", 0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00046"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00047"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("", (int) (byte) 10, "hi!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!h" + "'", str3, "hi!hi!hi!h"); }
public void test00048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00048"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("-1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-1" + "'", str1, "-1"); }
public void test00049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00049"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("hi!hi!hi!h", (int) (byte) 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!h" + "'", str2, "hi!hi!hi!h"); }
public void test00050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00050"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00051"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00052"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "hi!hi!hi!h", (java.lang.CharSequence) ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10); }
public void test00053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00053"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("hi!hi!hi!h", "hi!"); org.junit.Assert.assertNotNull(strArray2); }
public void test00054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00054"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("-1", (int) 'a', (int) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00055"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("", "hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00056"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("", "hi!", "", 100); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); }
public void test00057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00057"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00058"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("hi!", "-1", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); }
public void test00059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00059"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!h", "", (int) (short) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test00060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00060"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00061"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("", 4); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00062"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("hi!", (int) (short) -1, "-1"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); }
public void test00063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00063"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("-1", "hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00064"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str3, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00065"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("", "hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00066"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("hi!hi!hi!h", "-1"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00067"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("-1", "hi!", (int) '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-1" + "'", str3, "-1"); }
public void test00068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00068"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", "hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00069"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!" + "'", str1, "hi!"); }
public void test00070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00070"); java.lang.CharSequence charSequence0 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfAny(charSequence0, "-1"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00071"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("hi!hi!hi!h", "hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00072"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!H" + "'", str1, "HI!HI!HI!H"); }
public void test00073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00073"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "HI!HI!HI!H"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00074"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("-1", ""); // The following exception was thrown during execution in test generation try { java.util.Map<java.lang.Object, java.lang.Object> objMap3 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '-1', is neither of type Map.Entry nor an Array"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray2); }
public void test00075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00075"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("hi!hi!hi!h"); org.junit.Assert.assertNotNull(strArray1); }
public void test00076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00076"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("-1", "hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1"); }
public void test00077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00077"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("HI!HI!HI!H", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00078"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!H" + "'", str1, "HI!HI!HI!H"); }
public void test00079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00079"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!hi!hi!h", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00080"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("", ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00081"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase((java.lang.CharSequence) "HI!HI!HI!H"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00082"); char[] charArray5 = new char[] { '#', 'a', ' ' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", charArray5); boolean boolean7 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!", charArray5); // The following exception was thrown during execution in test generation try { char[] charArray9 = org.apache.commons.lang3.ArrayUtils.remove(charArray5, 10); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test00083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00083"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("", ' ', '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00084"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("hi!hi!hi!h", "", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!h" + "'", str3, "hi!hi!hi!h"); }
public void test00085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00085"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00086"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00087"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("hi!", (int) (short) 10); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!" + "'", str2, "    hi!"); }
public void test00088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00088"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", "HI!HI!HI!H"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00089"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00090"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "    hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00091"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("-1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-1" + "'", str1, "-1"); }
public void test00092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00092"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00093"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("hi!", (int) (short) 0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00094"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("hi!hi!hi!h", "-1"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1"); }
public void test00095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00095"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("HI!HI!HI!H", ' '); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00096"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("    hi!", "", 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test00097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00097"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00098"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("hi!hi!hi!h", (int) (byte) 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!h" + "'", str2, "hi!hi!hi!h"); }
public void test00099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00099"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!" + "'", str1, "HI!HI!HI!"); }
public void test00100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00100"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("", '#', (int) (short) -1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00101"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("    hi!", (int) (short) 10, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00102"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("", 0, (int) (short) 100); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00103"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00104"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!", 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54 + "'", int3 == 54); }
public void test00105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00105"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "-1"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00106"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("hi!hi!hi!h", "", 54); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test00107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00107"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00108"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("    hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    HI!" + "'", str1, "    HI!"); }
public void test00109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00109"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!H" + "'", str2, "HI!HI!HI!H"); }
public void test00110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00110"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("    hi!", "", 4); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str3, "    hi!    hi!    hi!    hi!"); }
public void test00111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00111"); // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("", 2); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00112"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00113"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertNotNull(strArray2); }
public void test00114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00114"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("HI!HI!HI!", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00115"); char[] charArray4 = new char[] { '4', 'a', 'a' }; boolean boolean5 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray4); // The following exception was thrown during execution in test generation try { char[] charArray7 = org.apache.commons.lang3.ArrayUtils.remove(charArray4, (int) '4'); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); }
public void test00116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00116"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("    hi!    hi!    hi!    hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!hi!" + "'", str1, "hi!hi!hi!hi!"); }
public void test00117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00117"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.repeat("", (int) (short) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00118"); char[] charArray4 = new char[] { '#', 'a', 'a', '#' }; boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(charArray4, ' '); char[] charArray13 = new char[] { '#', ' ', ' ' }; boolean boolean14 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray13); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#'); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) -1, (int) 'a'); int int20 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray13); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray13); char[] charArray22 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13); char[] charArray23 = null; boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray22, charArray23); int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray23, 'a'); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, , ]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertNotNull(charArray22); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1)); }
public void test00119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00119"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("    hi!", (int) (byte) 1, (int) '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    hi!" + "'", str3, "    hi!"); }
public void test00120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00120"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("hi!hi!hi!hi!", "hi!hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00121"); boolean[] booleanArray1 = new boolean[] { false }; java.lang.Object[] objArray2 = new java.lang.Object[] {}; java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray2, ' '); java.lang.Object obj5 = null; int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray2, obj5); boolean[] booleanArray9 = new boolean[] { true, false }; boolean[] booleanArray10 = null; boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray9, booleanArray10); boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(objArray2, (java.lang.Object) booleanArray9); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray9); // The following exception was thrown during execution in test generation try { boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray13, 54); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 54, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(booleanArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[false]"); org.junit.Assert.assertNotNull(objArray2); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, true, false]"); }
public void test00122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00122"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase((java.lang.CharSequence) "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00123"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00124"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("hi!hi!", "{}", 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!" + "'", str3, "hi!hi!"); }
public void test00125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00125"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("    hi!    hi!    hi!    hi!", "    HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str2, "    hi!    hi!    hi!    hi!"); }
public void test00126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00126"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterType(""); int[] intArray8 = new int[] { '4', 10, (short) 100, '4', (byte) 10, 100 }; int[] intArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray8, (int) (byte) 10); int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, (int) '4'); int[] intArray13 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray10); int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray13, (int) (short) 100); boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) "", (java.lang.Object) (short) 100); org.junit.Assert.assertNotNull(strArray1); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[52, 10, 100, 52, 10, 100]"); org.junit.Assert.assertNotNull(intArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertNotNull(intArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[52, 100, 52, 10, 100]"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test00127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00127"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!" + "'", str1, "hi!hi!"); }
public void test00128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00128"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("", "{}"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00129"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "    HI!", "-1"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00130"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("-1", 'a'); org.junit.Assert.assertNotNull(strArray2); }
public void test00131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00131"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("HI!HI!HI!H", 'a', 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00132"); boolean[] booleanArray1 = new boolean[] { false }; java.lang.Object[] objArray2 = new java.lang.Object[] {}; java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray2, ' '); java.lang.Object obj5 = null; int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray2, obj5); boolean[] booleanArray9 = new boolean[] { true, false }; boolean[] booleanArray10 = null; boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray9, booleanArray10); boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(objArray2, (java.lang.Object) booleanArray9); boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray9); // The following exception was thrown during execution in test generation try { boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.add(booleanArray9, (int) (byte) 10, true); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 2"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(booleanArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[false]"); org.junit.Assert.assertNotNull(objArray2); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(booleanArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, true, false]"); }
public void test00133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00133"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00134"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllLowerCase(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00135"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("hi!hi!hi!h", "    HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!h" + "'", str2, "hi!hi!hi!h"); }
public void test00136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00136"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("    hi!    hi!    hi!    hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str1, "    hi!    hi!    hi!    hi!"); }
public void test00137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00137"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!" + "'", str1, "hi!"); }
public void test00138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00138"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!h" + "'", str1, "hi!hi!hi!h"); }
public void test00139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00139"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00140"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi! hi! ", "hi!hi!hi!h", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "  " + "'", str3, "  "); }
public void test00141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00141"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00142"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWithIgnoreCase("HI!HI!HI!", "HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00143"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "{}"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2); }
public void test00144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00144"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.overlay("hi!", "{}", (int) (short) 1, (int) (byte) 0); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}i!" + "'", str4, "{}i!"); }
public void test00145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00145"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.defaultString("hi! hi! "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi! hi! " + "'", str1, "hi! hi! "); }
public void test00146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00146"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumeric((java.lang.CharSequence) "{}i!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00147"); int int3 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("-1", "-1", (int) (byte) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test00148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00148"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "    hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00149"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("    HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    HI!" + "'", str1, "    HI!"); }
public void test00150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00150"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("hi!hi!hi!h", (int) (short) 10, (int) '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00151"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test00152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00152"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("    hi!    hi!    hi!    hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str1, "    hi!    hi!    hi!    hi!"); }
public void test00153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00153"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "-1"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2); }
public void test00154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00154"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("{}i!", "hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}i!" + "'", str2, "{}i!"); }
public void test00155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00155"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("    hi!    hi!    hi!    hi!", "{}i!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str2, "    hi!    hi!    hi!    hi!"); }
public void test00156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00156"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("-1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-1" + "'", str1, "-1"); }
public void test00157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00157"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("hi!", (int) (short) 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!"); }
public void test00158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00158"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("", 3, (int) (short) 1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00159"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("hi!hi!hi!h", "{}i!", (int) (short) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00160"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00161"); boolean boolean2 = org.apache.commons.lang3.StringUtils.startsWith("hi!hi!hi!h", "  "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00162"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00163"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("-1", "hi!hi!", "hi!hi!hi!h", (int) (byte) -1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1" + "'", str4, "-1"); }
public void test00164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00164"); java.lang.Object[] objArray0 = null; java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray0, ' ', (int) (byte) 100, 0); org.junit.Assert.assertNull(str4); }
public void test00165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00165"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("{}", "    hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}"); }
public void test00166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00166"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("HI!HI!HI!H", "{}i!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}i!" + "'", str2, "{}i!"); }
public void test00167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00167"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi!hi!", "{}i!", "hi! hi! "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h! h! " + "'", str3, "h! h! "); }
public void test00168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00168"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00169"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("", "HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00170"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("{}i!", 'a', 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00171"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("    hi!    hi!    hi!    hi!", 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str2, "    hi!    hi!    hi!    hi!"); }
public void test00172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00172"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("{}i!", (int) 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}i!" + "'", str2, "{}i!"); }
public void test00173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00173"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00174"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("    hi!    hi!    hi!    hi!", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str2, "    hi!    hi!    hi!    hi!"); }
public void test00175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00175"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("-1", "    HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    HI!" + "'", str2, "    HI!"); }
public void test00176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00176"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("-1", 0, 1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); }
public void test00177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00177"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "hi!hi!hi!h", (java.lang.CharSequence) "hi! hi! "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3); }
public void test00178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00178"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("  ", "-"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00179"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00180"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse("    HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH    " + "'", str1, "!IH    "); }
public void test00181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00181"); java.lang.CharSequence charSequence1 = null; java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "-1", charSequence1); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "-1" + "'", charSequence2, "-1"); }
public void test00182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00182"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00183"); char[] charArray5 = new char[] { '#', 'a', ' ' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "", charArray5); boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (-1), (java.lang.Object) ""); org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a, ]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test00184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00184"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("hi!", (int) (short) 100, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str3, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test00185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00185"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("hi!hi!", "    hi!    hi!    hi!    hi!", 4); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00186"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00187"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToEmpty("hi!hi!hi!hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!hi!" + "'", str1, "hi!hi!hi!hi!"); }
public void test00188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00188"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("", "-1"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00189"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("hi!hi!hi!h", 0, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!h" + "'", str3, "hi!hi!hi!h"); }
public void test00190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00190"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("-", ' ', ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); }
public void test00191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00191"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("", "hi!"); java.lang.String str4 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) "hi!", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!"); }
public void test00192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00192"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("{}i!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}i!" + "'", str1, "{}i!"); }
public void test00193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00193"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str1, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test00194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00194"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00195"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("HI!HI!HI!", (int) '4', '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "444444444444444444444HI!HI!HI!4444444444444444444444" + "'", str3, "444444444444444444444HI!HI!HI!4444444444444444444444"); }
public void test00196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00196"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("HI!HI!HI!", (int) (byte) -1, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!" + "'", str3, "HI!HI!HI!"); }
public void test00197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00197"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("h! h! ", "HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "h! h! " + "'", str2, "h! h! "); }
public void test00198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00198"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("", "hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00199"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) ""); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00200"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "    HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00201"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str1, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test00202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00202"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00203"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00204"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray6); int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray6, (java.lang.Object) (-1L)); // The following exception was thrown during execution in test generation try { java.util.Map<java.lang.Object, java.lang.Object> objMap11 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray6); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, 'hi!', is neither of type Map.Entry nor an Array"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test00205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00205"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("  ", (-1), ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "  " + "'", str3, "  "); }
public void test00206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00206"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00207"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("    HI!", "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00208"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphaSpace((java.lang.CharSequence) "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00209"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "h! h! "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00210"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("", "    hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00211"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "!IH    "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00212"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("", '4', '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00213"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str1, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test00214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00214"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("", 'a', (int) (short) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00215"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("", "HI!HI!HI!H", "hi!hi!", (int) (short) 10); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); }
public void test00216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00216"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str1, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00217"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("-1", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1"); }
public void test00218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00218"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("hi! hi! ", "  ", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi! hi! " + "'", str3, "hi! hi! "); }
public void test00219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00219"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi! hi! ", "  ", 4); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00220"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "h! h! "); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00221"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi! hi! ", "    HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2); }
public void test00222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00222"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "-1", (java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00223"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("HI!HI!HI!", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00224"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", (java.lang.CharSequence) "HI!HI!HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00225"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("", "!IH    ", 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00226"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByCharacterType(""); boolean boolean3 = org.apache.commons.lang3.StringUtils.startsWithAny("", strArray2); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.stripAll(strArray2); java.lang.String str6 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, 'a'); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test00227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00227"); java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "    HI!", (java.lang.CharSequence) "{}i!"); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "    HI!" + "'", charSequence2, "    HI!"); }
public void test00228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00228"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("!IH    ", "-"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00229"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!" + "'", str1, "HI!HI!HI!"); }
public void test00230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00230"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi!hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "   " + "'", str3, "   "); }
public void test00231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00231"); java.lang.Character[] charArray6 = new java.lang.Character[] { ' ', '4', '#', ' ', ' ', ' ' }; char[] charArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6, ' '); char[] charArray13 = new char[] { '#', ' ', ' ' }; boolean boolean14 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray13); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#'); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) -1, (int) 'a'); boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray8, charArray19); // The following exception was thrown during execution in test generation try { char[] charArray22 = org.apache.commons.lang3.ArrayUtils.remove(charArray19, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertNotNull(charArray8); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " 4#  "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " 4#  "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , 4, #, , , ]"); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test00232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00232"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("{}i!", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}i!" + "'", str2, "{}i!"); }
public void test00233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00233"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("hi!hi!hi!hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertNotNull(strArray2); }
public void test00234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00234"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "    hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00235"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", "!IH    "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2); }
public void test00236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00236"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); java.util.Map<java.lang.Object, java.lang.Object> objMap11 = org.apache.commons.lang3.ArrayUtils.toMap(objArray0); java.lang.Object obj12 = null; // The following exception was thrown during execution in test generation try { boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) objArray0, obj12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Array must not be null"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(objMap11); }
public void test00237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00237"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("  "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00238"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("", "HI!HI!HI!H"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00239"); java.lang.CharSequence charSequence0 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.equals(charSequence0, (java.lang.CharSequence) "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00240"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str1, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00241"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00242"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("{}i!", "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str2, "    hi!    hi!    hi!    hi!"); }
public void test00243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00243"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "-1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-1" + "'", str1, "-1"); }
public void test00244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00244"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00245"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("   "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "   " + "'", str1, "   "); }
public void test00246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00246"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("!IH    ", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH    " + "'", str2, "!IH    "); }
public void test00247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00247"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("{}", 2, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}"); }
public void test00248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00248"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumericSpace((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00249"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", (int) (byte) 10); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str2, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test00250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00250"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("", '#'); int int4 = org.apache.commons.lang3.StringUtils.indexOfAny("!IH    ", strArray3); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); }
public void test00251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00251"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("HI!HI!HI!H", (int) (short) 10); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!H" + "'", str2, "HI!HI!HI!H"); }
public void test00252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00252"); java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int7 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray6); int int8 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray6); java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int16 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray15); int int17 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray15); java.lang.String[] strArray18 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray15); boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) strArray6, (java.lang.Object[]) strArray18); java.lang.String str20 = org.apache.commons.lang3.StringUtils.getCommonPrefix(strArray18); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertNotNull(strArray15); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3); org.junit.Assert.assertNotNull(strArray18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); }
public void test00253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00253"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("{}i!", 'a'); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}i!" + "'", str2, "{}i!"); }
public void test00254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00254"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); java.util.Map<java.lang.Object, java.lang.Object> objMap11 = org.apache.commons.lang3.ArrayUtils.toMap(objArray0); java.lang.String str12 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) objMap11); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(objMap11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}"); }
public void test00255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00255"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("hi!hi!", "hi!hi!", 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00256"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("{}", "hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00257"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chomp("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str1, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00258"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) ""); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00259"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("HI!HI!HI!H", "hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00260"); java.lang.String[] strArray1 = null; java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.splitByWholeSeparator("", "hi!"); java.lang.String str5 = org.apache.commons.lang3.StringUtils.replaceEach("    HI!", strArray1, strArray4); java.lang.Object obj6 = null; boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) strArray1, obj6); org.junit.Assert.assertNotNull(strArray4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "    HI!" + "'", str5, "    HI!"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test00261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00261"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "-"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00262"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("!IH    ", "", 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00263"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("hi!hi!", '4'); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00264"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("hi!hi!", "    hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00265"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", ""); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00266"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("{100,100,100}", "!IH    ", 5); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00267"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); }
public void test00268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00268"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("", ' ', 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00269"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!hi!", '#', (int) (short) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00270"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("!IH    ", "   "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "   " + "'", str2, "   "); }
public void test00271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00271"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trim("   "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00272"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("{}i!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", ""); org.junit.Assert.assertNull(str3); }
public void test00273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00273"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str1, "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test00274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00274"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("hi!", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!"); }
public void test00275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00275"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("HI!HI!HI!H", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!H" + "'", str2, "HI!HI!HI!H"); }
public void test00276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00276"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", ' ', '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str3, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test00277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00277"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 100 + "'", int1 == 100); }
public void test00278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00278"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("    hi!    hi!    hi!    hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    HI!    HI!    HI!    HI!" + "'", str1, "    HI!    HI!    HI!    HI!"); }
public void test00279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00279"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "'", str1, "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); }
public void test00280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00280"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("    hi!    hi!    hi!    hi!", "HI!HI!HI!H", (int) (byte) 10); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str3, "    hi!    hi!    hi!    hi!"); }
public void test00281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00281"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "    hi!", ""); org.junit.Assert.assertNull(str3); }
public void test00282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00282"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.swapCase("hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!H" + "'", str1, "HI!HI!HI!H"); }
public void test00283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00283"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00284"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("h! h! ", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00285"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00286"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("hi! hi! ", "h! h! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi! " + "'", str2, "hi! hi! "); }
public void test00287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00287"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("{}i!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}"); }
public void test00288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00288"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray5 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray6 = org.apache.commons.lang3.ArrayUtils.addAll(strArray2, strArray5); java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray2); java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int15 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray14); int int16 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray14); int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray14, (java.lang.Object) (-1L)); java.lang.Comparable<java.lang.String>[] strComparableArray19 = org.apache.commons.lang3.ArrayUtils.removeElement((java.lang.Comparable<java.lang.String>[]) strArray2, (java.lang.Object) (-1L)); java.lang.String str21 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) (-1L), "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertNotNull(strArray5); org.junit.Assert.assertNotNull(strArray6); org.junit.Assert.assertNotNull(strArray7); org.junit.Assert.assertNotNull(strArray14); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); org.junit.Assert.assertNotNull(strComparableArray19); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-1" + "'", str21, "-1"); }
public void test00289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00289"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("{}", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00290"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAnyBut("", "    HI!    HI!    HI!    HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00291"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("    HI!", ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!" + "'", str2, "HI!"); }
public void test00292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00292"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "    HI!    HI!    HI!    HI!", (java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00293"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("{100,100,100}", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{100,100,100}" + "'", str2, "{100,100,100}"); }
public void test00294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00294"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!" + "'", str1, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); }
public void test00295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00295"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("   "); org.junit.Assert.assertNull(str1); }
public void test00296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00296"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "-1"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00297"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("  ", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "  " + "'", str2, "  "); }
public void test00298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00298"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("    hi!", '#', 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00299"); java.lang.Object[] objArray0 = null; java.lang.String str4 = org.apache.commons.lang3.StringUtils.join(objArray0, ' ', 6, 0); org.junit.Assert.assertNull(str4); }
public void test00300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00300"); java.lang.CharSequence charSequence0 = null; int int1 = org.apache.commons.lang3.StringUtils.length(charSequence0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test00301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00301"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("{100,100,100}", (int) (short) -1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00302"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", (int) ' ', '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00303"); java.lang.Byte[] byteArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY; // The following exception was thrown during execution in test generation try { java.lang.String str4 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) byteArray0, "{}", (int) '4', 100); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(byteArray0); }
public void test00304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00304"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("!IH    ", "HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00305"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull(""); org.junit.Assert.assertNull(str1); }
public void test00306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00306"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("", "{100,100,100}"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00307"); int int3 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("-1", "HI!HI!HI!H", 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00308"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("    hi!    hi!    hi!    hi!", "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00309"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "   ", (java.lang.CharSequence) "    HI!    HI!    HI!    HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 34 + "'", int2 == 34); }
public void test00310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00310"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.mid("-", 0, (int) '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); }
public void test00311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00311"); int int2 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00312"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("h! h! ", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00313"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi! hi! ", "    hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00314"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("h! h! ", 3, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h! h! " + "'", str3, "h! h! "); }
public void test00315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00315"); java.lang.CharSequence charSequence0 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference(charSequence0, (java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00316"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("100", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100"); }
public void test00317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00317"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("{100,100,100}", "", "    HI!    HI!    HI!    HI!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{100,100,100}" + "'", str3, "{100,100,100}"); }
public void test00318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00318"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00319"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 54, (int) (short) 10); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "...!hi!hi!" + "'", str3, "...!hi!hi!"); }
public void test00320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00320"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00321"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("hi!hi!hi!hi!", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00322"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("hi!hi!", "  ", "!IH    "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!" + "'", str3, "hi!hi!"); }
public void test00323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00323"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "hi! hi! ", (java.lang.CharSequence) "HI!HI!HI!H"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00324"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00325"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!", '#'); org.junit.Assert.assertNotNull(strArray2); }
public void test00326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00326"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00327"); java.lang.Object[] objArray0 = new java.lang.Object[] {}; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, ' '); java.lang.Object obj3 = null; int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, obj3); boolean[] booleanArray7 = new boolean[] { true, false }; boolean[] booleanArray8 = null; boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray7, booleanArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(objArray0, (java.lang.Object) booleanArray7); boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(booleanArray7); int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray7, true); org.junit.Assert.assertNotNull(objArray0); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(booleanArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, false]"); org.junit.Assert.assertNotNull(booleanArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(booleanArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, false]"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0); }
public void test00328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00328"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("-", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 34); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test00329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00329"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("100", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00330"); char[] charArray6 = new char[] { '4', 'a', 'a' }; boolean boolean7 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray6); int int8 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "hi!hi!hi!h", charArray6); char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray6); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray6); boolean boolean11 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", charArray6); org.junit.Assert.assertNotNull(charArray6); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertNotNull(charArray9); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); }
public void test00331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00331"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("  ", '#'); org.junit.Assert.assertNotNull(strArray2); }
public void test00332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00332"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.defaultString("    HI!", "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    HI!" + "'", str2, "    HI!"); }
public void test00333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00333"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("-1", '4', (int) (byte) 0); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00334"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      " + "'", str1, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); }
public void test00335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00335"); boolean boolean2 = org.apache.commons.lang3.StringUtils.equalsIgnoreCase("hi!hi!", "hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00336"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("", (int) '#', (int) (byte) 10); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00337"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.uncapitalize((java.lang.CharSequence) "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str1, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test00338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00338"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "hi! hi! "); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00339"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 'a'); org.junit.Assert.assertNotNull(strArray2); }
public void test00340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00340"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("", "hi!", "{100,100,100}"); org.junit.Assert.assertNull(str3); }
public void test00341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00341"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("hi!", (int) (byte) 100, "{}"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str3, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test00342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00342"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00343"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("!IH    ", (int) (byte) 0, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "!IH    " + "'", str3, "!IH    "); }
public void test00344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00344"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("{100,100,100}", ' '); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00345"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "    HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00346"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("    hi!", "  ", "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 0); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "    hi!" + "'", str4, "    hi!"); }
public void test00347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00347"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfterLast("", "!IH    "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00348"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("100", "h! h! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "100" + "'", str2, "100"); }
public void test00349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00349"); boolean boolean2 = org.apache.commons.lang3.StringUtils.contains("...!hi!hi!", "...!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00350"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase("-1", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00351"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.chop("{}i!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}i" + "'", str1, "{}i"); }
public void test00352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00352"); java.lang.Short[] shortArray5 = new java.lang.Short[] { (short) -1, (short) -1, (short) 100, (short) -1, (short) 0 }; short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray5, (short) 0); java.lang.Short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray7); // The following exception was thrown during execution in test generation try { java.lang.String str12 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) shortArray8, "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", (int) (byte) -1, 10); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(shortArray5); org.junit.Assert.assertNotNull(shortArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[-1, -1, 100, -1, 0]"); org.junit.Assert.assertNotNull(shortArray8); }
public void test00353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00353"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("-1"); // The following exception was thrown during execution in test generation try { java.util.Map<java.lang.Object, java.lang.Object> objMap2 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '-1', is neither of type Map.Entry nor an Array"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray1); }
public void test00354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00354"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.upperCase("...!hi!hi!", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00355"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("-", "...!hi!hi!", 6); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-" + "'", str3, "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); }
public void test00356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00356"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlpha((java.lang.CharSequence) "{}i!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00357"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("    hi!    hi!    hi!    hi!", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00358"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("HI!HI!HI!", 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!" + "'", str2, "HI!HI!HI!"); }
public void test00359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00359"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "    HI!    HI!    HI!    HI!", "HI!"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str3, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test00360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00360"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBefore("{}", "  "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}" + "'", str2, "{}"); }
public void test00361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00361"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00362"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.chomp("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "    hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test00363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00363"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00364"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("{}"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}" + "'", str1, "{}"); }
public void test00365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00365"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str1, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test00366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00366"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "-1"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00367"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("   ", "   "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00368"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "100"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00369"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", (int) (short) -1, ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00370"); int int2 = org.apache.commons.lang3.StringUtils.countMatches("-1", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00371"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00372"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", 34, '4'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-" + "'", str3, "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); }
public void test00373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00373"); char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!hi!hi!hi!", charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00374"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substring("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", 34); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str2, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test00375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00375"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceOnce("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      " + "'", str3, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); }
public void test00376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00376"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!" + "'", str1, "HI!"); }
public void test00377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00377"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "    hi!", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00378"); try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", (int) '4', 0); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { } }
public void test00379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00379"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsOnly((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", "-1"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00380"); float[] floatArray4 = new float[] { 1L, (-1.0f), (short) 100, (byte) 0 }; float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray4, (float) (short) 10); float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.clone(floatArray6); float[] floatArray8 = null; float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(floatArray8); boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray7, floatArray8); float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray7, (float) 4); java.lang.String[] strArray16 = org.apache.commons.lang3.StringUtils.split("-1", ""); java.lang.String[] strArray19 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("", "hi!hi!hi!h"); java.lang.String[] strArray22 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("HI!HI!HI!H", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray23 = org.apache.commons.lang3.ArrayUtils.addAll(strArray19, strArray22); java.lang.String str24 = org.apache.commons.lang3.StringUtils.replaceEach("hi!hi!hi!h", strArray16, strArray22); boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray12, (java.lang.Object) strArray16); int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray12, 0.0f); // The following exception was thrown during execution in test generation try { float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, 100, 0.0f); org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 4"); } catch (java.lang.IndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(floatArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[1.0, -1.0, 100.0, 0.0]"); org.junit.Assert.assertNotNull(floatArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.0, -1.0, 100.0, 0.0]"); org.junit.Assert.assertNotNull(floatArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[1.0, -1.0, 100.0, 0.0]"); org.junit.Assert.assertNotNull(floatArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(floatArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[1.0, -1.0, 100.0, 0.0]"); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertNotNull(strArray22); org.junit.Assert.assertNotNull(strArray23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!hi!hi!h" + "'", str24, "hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3); }
public void test00381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00381"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWith("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "    HI!    HI!    HI!    HI!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00382"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("hi!hi!hi!h", "HI!HI!HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!h" + "'", str2, "hi!hi!hi!h"); }
public void test00383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00383"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("-1", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1" + "'", str2, "-1"); }
public void test00384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00384"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("hi! hi! ", "h! h! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi! hi! " + "'", str2, "hi! hi! "); }
public void test00385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00385"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("    hi!", "{}i!", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); org.junit.Assert.assertNull(strArray3); }
public void test00386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00386"); char[] charArray5 = new char[] { '4', 'a', 'a' }; boolean boolean6 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "hi!", charArray5); int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray5, '#'); int int9 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "   ", charArray5); org.junit.Assert.assertNotNull(charArray5); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4aa"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4aa"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4, a, a]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); }
public void test00387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00387"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str1, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test00388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00388"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("hi!", ""); java.lang.String str6 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, "444444444444444444444HI!HI!HI!4444444444444444444444", (int) ' ', 0); org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test00389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00389"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!", (int) (short) 10, 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!" + "'", str3, "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); }
public void test00390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00390"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00391"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.repeat("    HI!    HI!    HI!    HI!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", 0); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00392"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replaceChars("{}i", "444444444444444444444HI!HI!HI!4444444444444444444444", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}i" + "'", str3, "{}i"); }
public void test00393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00393"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substringBetween("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "hi!", "hi! hi! "); org.junit.Assert.assertNull(str3); }
public void test00394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00394"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("    HI!", "hi!hi!hi!hi!", "{100,100,100}"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "    HI!" + "'", str3, "    HI!"); }
public void test00395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00395"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.splitByCharacterType(""); boolean boolean3 = org.apache.commons.lang3.StringUtils.startsWithAny("", strArray2); java.lang.String[] strArray4 = org.apache.commons.lang3.StringUtils.stripAll(strArray2); // The following exception was thrown during execution in test generation try { java.lang.String str8 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray2, ' ', (int) (short) -1, (int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(strArray4); }
public void test00396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00396"); int int3 = org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf("  ", "{#,a,a,#,#, , }", 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00397"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      ", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00398"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("hi!hi!hi!h", "{}i!", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!hi!hi!h" + "'", str3, "hi!hi!hi!h"); }
public void test00399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00399"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00400"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAsciiPrintable((java.lang.CharSequence) "{}"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00401"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 99 + "'", int1 == 99); }
public void test00402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00402"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("    hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!" + "'", str1, "hi!"); }
public void test00403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00403"); java.lang.String[] strArray2 = org.apache.commons.lang3.StringUtils.split("-1", '4'); org.junit.Assert.assertNotNull(strArray2); }
public void test00404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00404"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("   "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "   " + "'", str1, "   "); }
public void test00405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00405"); char[] charArray8 = new char[] { '#', ' ', ' ' }; boolean boolean9 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray8); char[] charArray11 = org.apache.commons.lang3.ArrayUtils.add(charArray8, '#'); char[] charArray14 = org.apache.commons.lang3.ArrayUtils.subarray(charArray8, (int) (byte) -1, (int) 'a'); int int15 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray8); int int16 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray8); org.apache.commons.lang3.ArrayUtils.reverse(charArray8); boolean boolean18 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "-1", charArray8); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(charArray8); boolean boolean20 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", charArray19); org.junit.Assert.assertNotNull(charArray8); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), " #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), " #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[ , , #]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(charArray11); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray14); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, , ]"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), " #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), " #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[ , , #]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test00406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00406"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("", "{#,a,a,#,#, , }"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00407"); char[] charArray1 = null; boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "{100,100,100}", charArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00408"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", ""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00409"); java.lang.Double[] doubleArray2 = new java.lang.Double[] { 1.0d, 0.0d }; double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray2, (double) 100L); // The following exception was thrown during execution in test generation try { java.lang.String str8 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) doubleArray2, "", (int) (byte) 0, 10); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0]"); }
public void test00410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00410"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.rightPad("  ", 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "  " + "'", str2, "  "); }
public void test00411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00411"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", (int) (byte) 1, (int) (short) 100); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00412"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotBlank((java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00413"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.strip("{100,100,100}", "HI!"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{100,100,100}" + "'", str2, "{100,100,100}"); }
public void test00414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00414"); java.lang.Object[] objArray0 = null; java.lang.String str2 = org.apache.commons.lang3.StringUtils.join(objArray0, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); org.junit.Assert.assertNull(str2); }
public void test00415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00415"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringAfter("{}i", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00416"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("    HI!", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    HI!" + "'", str2, "    HI!"); }
public void test00417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00417"); int int1 = org.apache.commons.lang3.StringUtils.length((java.lang.CharSequence) "hi!hi!hi!h"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10); }
public void test00418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00418"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.deleteWhitespace("-1"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-1" + "'", str1, "-1"); }
public void test00419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00419"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNumeric((java.lang.CharSequence) "hi!hi!hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00420"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.upperCase("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str1, "HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00421"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToEmpty("!IH    "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "!IH" + "'", str1, "!IH"); }
public void test00422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00422"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00423"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsNone((java.lang.CharSequence) "HI!HI!HI!", ""); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test00424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00424"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("100", "hi!hi!hi!h"); org.junit.Assert.assertNull(str2); }
public void test00425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00425"); java.lang.CharSequence charSequence0 = null; int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference(charSequence0, (java.lang.CharSequence) "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00426"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.difference("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      ", "HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "HI!HI!HI!H" + "'", str2, "HI!HI!HI!H"); }
public void test00427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00427"); java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY; java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("HI!HI!HI!H", ' '); boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) intArray0, (java.lang.Object) "HI!HI!HI!H"); int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray0, (int) (short) 1); java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6); int int9 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray7, (java.lang.Object) "444444444444444444444HI!HI!HI!4444444444444444444444"); java.lang.Integer[] intArray10 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(intArray7); java.util.Map<java.lang.Object, java.lang.Object> objMap11 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) intArray7); org.junit.Assert.assertNotNull(intArray0); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(intArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]"); org.junit.Assert.assertNotNull(intArray7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertNotNull(intArray10); org.junit.Assert.assertNotNull(objMap11); }
public void test00428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00428"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBeforeLast("{100,100,100}", "{}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{100,100,100}" + "'", str2, "{100,100,100}"); }
public void test00429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00429"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.lowerCase("-"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-" + "'", str1, "-"); }
public void test00430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00430"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("", "!IH", 99); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00431"); boolean boolean2 = org.apache.commons.lang3.StringUtils.endsWithIgnoreCase("hi!hi!hi!h", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test00432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00432"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.leftPad("{}i", (int) (byte) -1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}i" + "'", str2, "{}i"); }
public void test00433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00433"); java.util.Locale locale1 = null; // The following exception was thrown during execution in test generation try { java.lang.String str2 = org.apache.commons.lang3.StringUtils.lowerCase("HI!", locale1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test00434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00434"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str1, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test00435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00435"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isNotEmpty((java.lang.CharSequence) "    hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test00436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00436"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("!IH    ", "HI!HI!HI!", "HI!HI!HI!", 100); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "!IH    " + "'", str4, "!IH    "); }
public void test00437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00437"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("{}", 0, (-1)); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00438"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isEmpty((java.lang.CharSequence) "{}i"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00439"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStartIgnoreCase("h! h! ", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "h! h! " + "'", str2, "h! h! "); }
public void test00440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00440"); // The following exception was thrown during execution in test generation try { java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviate("HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", (int) 'a', (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum abbreviation width is 4"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test00441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00441"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.replace("  ", "HI!HI!HI!", "{}i"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "  " + "'", str3, "  "); }
public void test00442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00442"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEndIgnoreCase("{}i!", "{#,a,a,#,#, , }"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{}i!" + "'", str2, "{}i!"); }
public void test00443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00443"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("HI!HI!HI!H", "...!hi!hi!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00444"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToNull("{#,a,a,#,#, , }"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "{#,a,a,#,#, , }" + "'", str1, "{#,a,a,#,#, , }"); }
public void test00445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00445"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.abbreviate("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", (int) (byte) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str2, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test00446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00446"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "    hi!    hi!    hi!    hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    hi!    hi!    hi!    hi!" + "'", str1, "    hi!    hi!    hi!    hi!"); }
public void test00447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00447"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!H" + "'", str1, "HI!HI!HI!H"); }
public void test00448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00448"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isWhitespace((java.lang.CharSequence) "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00449"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByCharacterType(""); int int4 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray3); java.lang.String[] strArray8 = org.apache.commons.lang3.StringUtils.split("", "-1", 1); java.lang.String str9 = org.apache.commons.lang3.StringUtils.replaceEach("hi!", strArray3, strArray8); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1)); org.junit.Assert.assertNotNull(strArray8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!"); }
public void test00450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00450"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("", "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00451"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.strip("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!" + "'", str1, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); }
public void test00452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00452"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("444444444444444444444HI!HI!HI!4444444444444444444444", (int) (byte) 0, '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "444444444444444444444HI!HI!HI!4444444444444444444444" + "'", str3, "444444444444444444444HI!HI!HI!4444444444444444444444"); }
public void test00453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00453"); java.lang.CharSequence charSequence0 = null; boolean boolean1 = org.apache.commons.lang3.StringUtils.isAllUpperCase(charSequence0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00454"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.abbreviateMiddle("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", "", (int) (byte) -1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-" + "'", str3, "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); }
public void test00455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00455"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.reverse(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, ""); }
public void test00456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00456"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeEnd("{#,a,a,#,#, , }", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{#,a,a,#,#, , }" + "'", str2, "{#,a,a,#,#, , }"); }
public void test00457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00457"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.trimToNull("hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" + "'", str1, "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"); }
public void test00458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00458"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.remove("...!hi!hi!", ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "...!hi!hi!" + "'", str2, "...!hi!hi!"); }
public void test00459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00459"); int int2 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00460"); char[] charArray4 = new char[] { '#', 'a', 'a', '#' }; boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(charArray4, ' '); char[] charArray13 = new char[] { '#', ' ', ' ' }; boolean boolean14 = org.apache.commons.lang3.StringUtils.containsAny((java.lang.CharSequence) "hi!", charArray13); char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#'); char[] charArray19 = org.apache.commons.lang3.ArrayUtils.subarray(charArray13, (int) (byte) -1, (int) 'a'); int int20 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "-1", charArray13); int int21 = org.apache.commons.lang3.StringUtils.indexOfAny((java.lang.CharSequence) "", charArray13); char[] charArray22 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13); char[] charArray23 = null; boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray22, charArray23); char[] charArray25 = org.apache.commons.lang3.ArrayUtils.clone(charArray23); org.junit.Assert.assertNotNull(charArray4); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#aa#"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#, a, a, #]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(charArray13); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, , ]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(charArray16); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "# #"); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, , , #]"); org.junit.Assert.assertNotNull(charArray19); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "# "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, , ]"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); org.junit.Assert.assertNotNull(charArray22); org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#aa## "); org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, a, a, #, #, , ]"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNull(charArray25); }
public void test00461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00461"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.center("...!hi!hi!", 34, "444444444444444444444HI!HI!HI!4444444444444444444444"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str3, "444444444444...!hi!hi!444444444444"); }
public void test00462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00462"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", (int) (short) 0); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444" + "'", str2, "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444"); }
public void test00463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00463"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.rightPad("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      ", 34, ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      " + "'", str3, "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!                      "); }
public void test00464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00464"); int int2 = org.apache.commons.lang3.StringUtils.indexOfIgnoreCase("!IH", "HI!HI!HI!"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00465"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("-1", (int) '4', ' '); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                         -1" + "'", str3, "                         -1"); }
public void test00466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00466"); int int2 = org.apache.commons.lang3.StringUtils.indexOfDifference((java.lang.CharSequence) "100", (java.lang.CharSequence) "HI!HI!HI!H"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test00467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00467"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("HI!HI!HI!H"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "HI!HI!HI!H" + "'", str1, "HI!HI!HI!H"); }
public void test00468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00468"); int int3 = org.apache.commons.lang3.StringUtils.lastIndexOf("hi!hi!", '#', (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00469"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("", "", 54); float[] floatArray6 = new float[] { 0.0f, '4' }; int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, 10.0f, (int) (byte) 0); int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray3, (java.lang.Object) floatArray6); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(floatArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[0.0, 52.0]"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test00470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00470"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("", "hi! hi! ", (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00471"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("!IH    ", "{100,100,100}"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!IH    " + "'", str2, "!IH    "); }
public void test00472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00472"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitByCharacterType("hi! hi! "); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) "hi! hi! "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(strArray1); }
public void test00473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00473"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("", "h! h! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
public void test00474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00474"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("444444444444...!hi!hi!444444444444", "hi!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa                      ", (int) '4'); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00475"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.leftPad("h! h! ", (int) ' ', '#'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "##########################h! h! " + "'", str3, "##########################h! h! "); }
public void test00476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00476"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens("hi!hi!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!"); java.lang.String[] strArray9 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens("", "", 54); java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!", "", "" }; int int17 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("", strArray16); int int18 = org.apache.commons.lang3.StringUtils.lastIndexOfAny("hi!", strArray16); java.lang.String[] strArray19 = org.apache.commons.lang3.ArrayUtils.nullToEmpty(strArray16); java.lang.String str20 = org.apache.commons.lang3.StringUtils.replaceEach("", strArray9, strArray16); java.lang.String str22 = org.apache.commons.lang3.StringUtils.join((java.lang.Object[]) strArray9, 'a'); int int23 = org.apache.commons.lang3.StringUtils.indexOfAny("", strArray9); java.lang.String str24 = org.apache.commons.lang3.StringUtils.replaceEachRepeatedly("                         -1", strArray3, strArray9); org.junit.Assert.assertNotNull(strArray3); org.junit.Assert.assertNotNull(strArray9); org.junit.Assert.assertNotNull(strArray16); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3); org.junit.Assert.assertNotNull(strArray19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1)); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "                         -1" + "'", str24, "                         -1"); }
public void test00477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00477"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isAlphanumericSpace((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00478"); java.lang.String str3 = org.apache.commons.lang3.StringUtils.substring("444444444444444444444HI!HI!HI!4444444444444444444444", 99, (int) 'a'); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test00479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00479"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", "Hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!                      "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-" + "'", str2, "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); }
public void test00480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00480"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(""); org.junit.Assert.assertNotNull(strArray1); }
public void test00481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00481"); boolean boolean2 = org.apache.commons.lang3.StringUtils.containsIgnoreCase("{}", "{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{hi!"); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); } @Test public void test00482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00482"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("{#,a,a,#,#, , }", "                         -1", "hi!", 5); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{#,a,a,#,#, , }" + "'", str4, "{#,a,a,#,#, , }"); } @Test public void test00483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00483"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("100", "##########################h! h! ", (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); } @Test public void test00484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00484"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("    hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!" + "'", str1, "hi!"); } @Test public void test00485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00485"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("   "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "   " + "'", str1, "   "); } @Test public void test00486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00486"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", ""); org.junit.Assert.assertNull(strArray3); } @Test public void test00487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00487"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "    HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    HI!" + "'", str1, "    HI!"); } @Test public void test00488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00488"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("    hi!", "hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!" + "'", str2, "    hi!"); } @Test public void test00489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00489"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); } @Test public void test00490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00490"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("!IH", 'a', (int) (short) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); } @Test public void test00491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00491"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertNull(str2); } @Test public void test00492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00492"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", (java.lang.CharSequence) "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 45 + "'", int2 == 45); } @Test public void test00493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00493"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!h", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); } @Test public void test00494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00494"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("444444444444...!hi!hi!444444444444", "hi! hi! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str2, "444444444444...!hi!hi!444444444444"); } @Test public void test00495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00495"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("", (int) ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                " + "'", str2, "                "); } @Test public void test00496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00496"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("{false}", (int) (short) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{false}" + "'", str2, "{false}"); } @Test public void test00497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00497"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.split("hi!hi!hi!hi!"); org.junit.Assert.assertNotNull(strArray1); } @Test public void test00498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00498"); java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "h! h! ", (java.lang.CharSequence) ""); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "h! h! " + "'", charSequence2, "h! h! "); } @Test public void test00499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00499"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("HI!HI!HI!H", "{}", 0); org.junit.Assert.assertNotNull(strArray3); } @Test public void test00500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00500"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); } }
public void test00482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00482"); java.lang.String str4 = org.apache.commons.lang3.StringUtils.replace("{#,a,a,#,#, , }", "                         -1", "hi!", 5); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{#,a,a,#,#, , }" + "'", str4, "{#,a,a,#,#, , }"); }
public void test00483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00483"); int int3 = org.apache.commons.lang3.StringUtils.ordinalIndexOf("100", "##########################h! h! ", (int) (byte) 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00484"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripToEmpty("    hi!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hi!" + "'", str1, "hi!"); }
public void test00485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00485"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.stripAccents("   "); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "   " + "'", str1, "   "); }
public void test00486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00486"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.substringsBetween("hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", "hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!hi!4444444444444444444444444444444444444444444", ""); org.junit.Assert.assertNull(strArray3); }
public void test00487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00487"); java.lang.String str1 = org.apache.commons.lang3.StringUtils.capitalize((java.lang.CharSequence) "    HI!"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "    HI!" + "'", str1, "    HI!"); }
public void test00488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00488"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.removeStart("    hi!", "hi!hi!hi!h"); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "    hi!" + "'", str2, "    hi!"); }
public void test00489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00489"); boolean boolean1 = org.apache.commons.lang3.StringUtils.isBlank((java.lang.CharSequence) "hi!hi!"); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); }
public void test00490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00490"); int int3 = org.apache.commons.lang3.StringUtils.indexOf("!IH", 'a', (int) (short) 100); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test00491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00491"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.substringBetween("-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-", "HI!AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"); org.junit.Assert.assertNull(str2); }
public void test00492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00492"); int int2 = org.apache.commons.lang3.StringUtils.getLevenshteinDistance((java.lang.CharSequence) "hI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!HI!", (java.lang.CharSequence) "-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-...!hi!hi!-"); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 45 + "'", int2 == 45); }
public void test00493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00493"); int int2 = org.apache.commons.lang3.StringUtils.indexOf("hi!hi!hi!h", 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test00494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00494"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripStart("444444444444...!hi!hi!444444444444", "hi! hi! "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "444444444444...!hi!hi!444444444444" + "'", str2, "444444444444...!hi!hi!444444444444"); }
public void test00495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00495"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.center("", (int) ' '); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                " + "'", str2, "                "); }
public void test00496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00496"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.right("{false}", (int) (short) 100); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "{false}" + "'", str2, "{false}"); }
public void test00497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00497"); java.lang.String[] strArray1 = org.apache.commons.lang3.StringUtils.split("hi!hi!hi!hi!"); org.junit.Assert.assertNotNull(strArray1); }
public void test00498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00498"); java.lang.CharSequence charSequence2 = org.apache.commons.lang3.StringUtils.defaultIfEmpty((java.lang.CharSequence) "h! h! ", (java.lang.CharSequence) ""); org.junit.Assert.assertEquals("'" + charSequence2 + "' != '" + "h! h! " + "'", charSequence2, "h! h! "); }
public void test00499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00499"); java.lang.String[] strArray3 = org.apache.commons.lang3.StringUtils.split("HI!HI!HI!H", "{}", 0); org.junit.Assert.assertNotNull(strArray3); }
public void test00500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test00500"); java.lang.String str2 = org.apache.commons.lang3.StringUtils.stripEnd("", ""); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, ""); }
