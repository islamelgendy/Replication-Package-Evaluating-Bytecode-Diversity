public void testStartsWith() { assertTrue("startsWith(null, null)", StringUtils.startsWith(null, (String)null)); assertFalse("startsWith(FOOBAR, null)", StringUtils.startsWith(FOOBAR, (String)null)); assertFalse("startsWith(null, FOO)",  StringUtils.startsWith(null, FOO)); assertTrue("startsWith(FOOBAR, \"\")", StringUtils.startsWith(FOOBAR, "")); assertTrue("startsWith(foobar, foo)", StringUtils.startsWith(foobar, foo)); assertTrue("startsWith(FOOBAR, FOO)", StringUtils.startsWith(FOOBAR, FOO)); assertFalse("startsWith(foobar, FOO)", StringUtils.startsWith(foobar, FOO)); assertFalse("startsWith(FOOBAR, foo)", StringUtils.startsWith(FOOBAR, foo)); assertFalse("startsWith(foo, foobar)", StringUtils.startsWith(foo, foobar)); assertFalse("startsWith(foo, foobar)", StringUtils.startsWith(bar, foobar)); assertFalse("startsWith(foobar, bar)", StringUtils.startsWith(foobar, bar)); assertFalse("startsWith(FOOBAR, BAR)", StringUtils.startsWith(FOOBAR, BAR)); assertFalse("startsWith(foobar, BAR)", StringUtils.startsWith(foobar, BAR)); assertFalse("startsWith(FOOBAR, bar)", StringUtils.startsWith(FOOBAR, bar)); }
public void testStartsWithIgnoreCase() { assertTrue("startsWithIgnoreCase(null, null)",  StringUtils.startsWithIgnoreCase(null, (String)null)); assertFalse("startsWithIgnoreCase(FOOBAR, null)", StringUtils.startsWithIgnoreCase(FOOBAR, (String)null)); assertFalse("startsWithIgnoreCase(null, FOO)",  StringUtils.startsWithIgnoreCase(null, FOO)); assertTrue("startsWithIgnoreCase(FOOBAR, \"\")", StringUtils.startsWithIgnoreCase(FOOBAR, "")); assertTrue("startsWithIgnoreCase(foobar, foo)", StringUtils.startsWithIgnoreCase(foobar, foo)); assertTrue("startsWithIgnoreCase(FOOBAR, FOO)", StringUtils.startsWithIgnoreCase(FOOBAR, FOO)); assertTrue("startsWithIgnoreCase(foobar, FOO)", StringUtils.startsWithIgnoreCase(foobar, FOO)); assertTrue("startsWithIgnoreCase(FOOBAR, foo)", StringUtils.startsWithIgnoreCase(FOOBAR, foo)); assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(foo, foobar)); assertFalse("startsWithIgnoreCase(foo, foobar)", StringUtils.startsWithIgnoreCase(bar, foobar)); assertFalse("startsWithIgnoreCase(foobar, bar)", StringUtils.startsWithIgnoreCase(foobar, bar)); assertFalse("startsWithIgnoreCase(FOOBAR, BAR)", StringUtils.startsWithIgnoreCase(FOOBAR, BAR)); assertFalse("startsWithIgnoreCase(foobar, BAR)", StringUtils.startsWithIgnoreCase(foobar, BAR)); assertFalse("startsWithIgnoreCase(FOOBAR, bar)", StringUtils.startsWithIgnoreCase(FOOBAR, bar)); }
public void testEndsWith() { assertTrue("endsWith(null, null)",  StringUtils.endsWith(null, (String)null)); assertFalse("endsWith(FOOBAR, null)", StringUtils.endsWith(FOOBAR, (String)null)); assertFalse("endsWith(null, FOO)",  StringUtils.endsWith(null, FOO)); assertTrue("endsWith(FOOBAR, \"\")", StringUtils.endsWith(FOOBAR, "")); assertFalse("endsWith(foobar, foo)", StringUtils.endsWith(foobar, foo)); assertFalse("endsWith(FOOBAR, FOO)", StringUtils.endsWith(FOOBAR, FOO)); assertFalse("endsWith(foobar, FOO)", StringUtils.endsWith(foobar, FOO)); assertFalse("endsWith(FOOBAR, foo)", StringUtils.endsWith(FOOBAR, foo)); assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(foo, foobar)); assertFalse("endsWith(foo, foobar)", StringUtils.endsWith(bar, foobar)); assertTrue("endsWith(foobar, bar)", StringUtils.endsWith(foobar, bar)); assertTrue("endsWith(FOOBAR, BAR)", StringUtils.endsWith(FOOBAR, BAR)); assertFalse("endsWith(foobar, BAR)", StringUtils.endsWith(foobar, BAR)); assertFalse("endsWith(FOOBAR, bar)", StringUtils.endsWith(FOOBAR, bar)); }
public void testEndsWithIgnoreCase() { assertTrue("endsWithIgnoreCase(null, null)",  StringUtils.endsWithIgnoreCase(null, (String)null)); assertFalse("endsWithIgnoreCase(FOOBAR, null)", StringUtils.endsWithIgnoreCase(FOOBAR, (String)null)); assertFalse("endsWithIgnoreCase(null, FOO)",  StringUtils.endsWithIgnoreCase(null, FOO)); assertTrue("endsWithIgnoreCase(FOOBAR, \"\")", StringUtils.endsWithIgnoreCase(FOOBAR, "")); assertFalse("endsWithIgnoreCase(foobar, foo)", StringUtils.endsWithIgnoreCase(foobar, foo)); assertFalse("endsWithIgnoreCase(FOOBAR, FOO)", StringUtils.endsWithIgnoreCase(FOOBAR, FOO)); assertFalse("endsWithIgnoreCase(foobar, FOO)", StringUtils.endsWithIgnoreCase(foobar, FOO)); assertFalse("endsWithIgnoreCase(FOOBAR, foo)", StringUtils.endsWithIgnoreCase(FOOBAR, foo)); assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(foo, foobar)); assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(bar, foobar)); assertTrue("endsWithIgnoreCase(foobar, bar)", StringUtils.endsWithIgnoreCase(foobar, bar)); assertTrue("endsWithIgnoreCase(FOOBAR, BAR)", StringUtils.endsWithIgnoreCase(FOOBAR, BAR)); assertTrue("endsWithIgnoreCase(foobar, BAR)", StringUtils.endsWithIgnoreCase(foobar, BAR)); assertTrue("endsWithIgnoreCase(FOOBAR, bar)", StringUtils.endsWithIgnoreCase(FOOBAR, bar)); // javadoc assertTrue(StringUtils.endsWithIgnoreCase("abcdef", "def")); assertTrue(StringUtils.endsWithIgnoreCase("ABCDEF", "def")); assertFalse(StringUtils.endsWithIgnoreCase("ABCDEF", "cde")); }
public void testIsAlpha() { assertEquals(false, StringUtils.isAlpha(null)); assertEquals(true, StringUtils.isAlpha("")); assertEquals(false, StringUtils.isAlpha(" ")); assertEquals(true, StringUtils.isAlpha("a")); assertEquals(true, StringUtils.isAlpha("A")); assertEquals(true, StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); assertEquals(false, StringUtils.isAlpha("ham kso")); assertEquals(false, StringUtils.isAlpha("1")); assertEquals(false, StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); assertEquals(false, StringUtils.isAlpha("_")); assertEquals(false, StringUtils.isAlpha("hkHKHik*khbkuh")); }
public void testIsAlphanumeric() { assertEquals(false, StringUtils.isAlphanumeric(null)); assertEquals(true, StringUtils.isAlphanumeric("")); assertEquals(false, StringUtils.isAlphanumeric(" ")); assertEquals(true, StringUtils.isAlphanumeric("a")); assertEquals(true, StringUtils.isAlphanumeric("A")); assertEquals(true, StringUtils.isAlphanumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); assertEquals(false, StringUtils.isAlphanumeric("ham kso")); assertEquals(true, StringUtils.isAlphanumeric("1")); assertEquals(true, StringUtils.isAlphanumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); assertEquals(false, StringUtils.isAlphanumeric("_")); assertEquals(false, StringUtils.isAlphanumeric("hkHKHik*khbkuh")); }
public void testIsWhitespace() { assertEquals(false, StringUtils.isWhitespace(null)); assertEquals(true, StringUtils.isWhitespace("")); assertEquals(true, StringUtils.isWhitespace(" ")); assertEquals(true, StringUtils.isWhitespace("\t \n \t")); assertEquals(false, StringUtils.isWhitespace("\t aa\n \t")); assertEquals(true, StringUtils.isWhitespace(" ")); assertEquals(false, StringUtils.isWhitespace(" a ")); assertEquals(false, StringUtils.isWhitespace("a ")); assertEquals(false, StringUtils.isWhitespace(" a")); assertEquals(false, StringUtils.isWhitespace("aba")); assertEquals(true, StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); assertEquals(false, StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); }
public void testIsAlphaspace() { assertEquals(false, StringUtils.isAlphaSpace(null)); assertEquals(true, StringUtils.isAlphaSpace("")); assertEquals(true, StringUtils.isAlphaSpace(" ")); assertEquals(true, StringUtils.isAlphaSpace("a")); assertEquals(true, StringUtils.isAlphaSpace("A")); assertEquals(true, StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); assertEquals(true, StringUtils.isAlphaSpace("ham kso")); assertEquals(false, StringUtils.isAlphaSpace("1")); assertEquals(false, StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); assertEquals(false, StringUtils.isAlphaSpace("_")); assertEquals(false, StringUtils.isAlphaSpace("hkHKHik*khbkuh")); }
public void testIsAlphanumericSpace() { assertEquals(false, StringUtils.isAlphanumericSpace(null)); assertEquals(true, StringUtils.isAlphanumericSpace("")); assertEquals(true, StringUtils.isAlphanumericSpace(" ")); assertEquals(true, StringUtils.isAlphanumericSpace("a")); assertEquals(true, StringUtils.isAlphanumericSpace("A")); assertEquals(true, StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); assertEquals(true, StringUtils.isAlphanumericSpace("ham kso")); assertEquals(true, StringUtils.isAlphanumericSpace("1")); assertEquals(true, StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); assertEquals(false, StringUtils.isAlphanumericSpace("_")); assertEquals(false, StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); }
public void testIsAsciiPrintable_String() { assertEquals(false, StringUtils.isAsciiPrintable(null)); assertEquals(true, StringUtils.isAsciiPrintable("")); assertEquals(true, StringUtils.isAsciiPrintable(" ")); assertEquals(true, StringUtils.isAsciiPrintable("a")); assertEquals(true, StringUtils.isAsciiPrintable("A")); assertEquals(true, StringUtils.isAsciiPrintable("1")); assertEquals(true, StringUtils.isAsciiPrintable("Ceki")); assertEquals(true, StringUtils.isAsciiPrintable("!ab2c~")); assertEquals(true, StringUtils.isAsciiPrintable("1000")); assertEquals(true, StringUtils.isAsciiPrintable("10 00")); assertEquals(false, StringUtils.isAsciiPrintable("10\t00")); assertEquals(true, StringUtils.isAsciiPrintable("10.00")); assertEquals(true, StringUtils.isAsciiPrintable("10,00")); assertEquals(true, StringUtils.isAsciiPrintable("!ab-c~")); assertEquals(true, StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug")); assertEquals(true, StringUtils.isAsciiPrintable("\u0020")); assertEquals(true, StringUtils.isAsciiPrintable("\u0021")); assertEquals(true, StringUtils.isAsciiPrintable("\u007e")); assertEquals(false, StringUtils.isAsciiPrintable("\u007f")); assertEquals(true, StringUtils.isAsciiPrintable("G?lc?")); assertEquals(true, StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?=")); assertEquals(false, StringUtils.isAsciiPrintable("G\u00fclc\u00fc")); }
public void testIsNumeric() { assertEquals(false, StringUtils.isNumeric(null)); assertEquals(true, StringUtils.isNumeric("")); assertEquals(false, StringUtils.isNumeric(" ")); assertEquals(false, StringUtils.isNumeric("a")); assertEquals(false, StringUtils.isNumeric("A")); assertEquals(false, StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); assertEquals(false, StringUtils.isNumeric("ham kso")); assertEquals(true, StringUtils.isNumeric("1")); assertEquals(true, StringUtils.isNumeric("1000")); assertEquals(false, StringUtils.isNumeric("2.3")); assertEquals(false, StringUtils.isNumeric("10 00")); assertEquals(false, StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); assertEquals(false, StringUtils.isNumeric("_")); assertEquals(false, StringUtils.isNumeric("hkHKHik*khbkuh")); }
public void testIsNumericSpace() { assertEquals(false, StringUtils.isNumericSpace(null)); assertEquals(true, StringUtils.isNumericSpace("")); assertEquals(true, StringUtils.isNumericSpace(" ")); assertEquals(false, StringUtils.isNumericSpace("a")); assertEquals(false, StringUtils.isNumericSpace("A")); assertEquals(false, StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); assertEquals(false, StringUtils.isNumericSpace("ham kso")); assertEquals(true, StringUtils.isNumericSpace("1")); assertEquals(true, StringUtils.isNumericSpace("1000")); assertEquals(false, StringUtils.isNumericSpace("2.3")); assertEquals(true, StringUtils.isNumericSpace("10 00")); assertEquals(false, StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); assertEquals(false, StringUtils.isNumericSpace("_")); assertEquals(false, StringUtils.isNumericSpace("hkHKHik*khbkuh")); }
public void testConstructor() { assertNotNull(new StringUtils()); Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors(); assertEquals(1, cons.length); assertEquals(true, Modifier.isPublic(cons[0].getModifiers())); assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers())); assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers())); }
public void testCaseFunctions() { assertEquals(null, StringUtils.upperCase(null)); assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); assertEquals(null, StringUtils.lowerCase(null)); assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); assertEquals(null, StringUtils.capitalize(null)); assertEquals(null, StringUtils.uncapitalize(null)); assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("") ); assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x") ); assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize(new StringBuilder("x")) ); assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize(new StringBuffer("x")) ); assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize(CharBuffer.wrap("x")) ); assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) ); assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("") ); assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X") ); assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize(new StringBuilder("X")) ); assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize(new StringBuffer("X")) ); assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize(CharBuffer.wrap("X")) ); // reflection type of tests: Sentences. assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) ); assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) ); // reflection type of tests: One word. assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) ); assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) ); assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING") ); assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("") ); assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING") ); assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("") ); assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH) ); assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH) ); assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH) ); assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH) ); }
public void testSwapCase_String() { assertEquals(null, StringUtils.swapCase(null)); assertEquals("", StringUtils.swapCase("")); assertEquals(" ", StringUtils.swapCase(" ")); assertEquals("i", WordUtils.swapCase("I") ); assertEquals("I", WordUtils.swapCase("i") ); assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123") ); assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123") ); assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123") ); assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123") ); String test = "This String contains a TitleCase character: \u01C8"; String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; assertEquals(expect, WordUtils.swapCase(test)); }
public void testJoin_Objectarray() { assertEquals(null, StringUtils.join(null)); assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"})); assertEquals("a", StringUtils.join(new String[] {null, "a", ""})); assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST)); assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST)); }
public void testJoin_ArrayChar() { assertEquals(null, StringUtils.join((Object[]) null, ',')); assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1)); assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); }
public void testJoin_ArrayString() { assertEquals(null, StringUtils.join((Object[]) null, null)); assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length-1)); assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length-1)); assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); }
public void testJoin_IteratorChar() { assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); }
public void testJoin_IteratorString() { assertEquals(null, StringUtils.join((Iterator<?>) null, null)); assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null)); assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), "")); assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), "x")); assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), null)); assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null)); assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null)); assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), "")); assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR)); assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR)); }
public void testJoin_IterableChar() { assertEquals(null, StringUtils.join((Iterable<?>) null, ',')); assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR)); assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR)); assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR)); assertEquals("foo", StringUtils.join(Collections.singleton("foo"), 'x')); }
public void testJoin_IterableString() { assertEquals(null, StringUtils.join((Iterable<?>) null, null)); assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); }
public void testSplit_String() { assertEquals(null, StringUtils.split(null)); assertEquals(0, StringUtils.split("").length); String str = "a b .c"; String[] res = StringUtils.split(str); assertEquals(3, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals(".c", res[2]); str = " a "; res = StringUtils.split(str); assertEquals(1, res.length); assertEquals("a", res[0]); str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; res = StringUtils.split(str); assertEquals(2, res.length); assertEquals("a", res[0]); assertEquals("b" + NON_WHITESPACE + "c", res[1]); }
public void testSplit_StringChar() { assertEquals(null, StringUtils.split(null, '.')); assertEquals(0, StringUtils.split("", '.').length); String str = "a.b.. c"; String[] res = StringUtils.split(str, '.'); assertEquals(3, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals(" c", res[2]); str = ".a."; res = StringUtils.split(str, '.'); assertEquals(1, res.length); assertEquals("a", res[0]); str = "a b c"; res = StringUtils.split(str,' '); assertEquals(3, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals("c", res[2]); }
public void testSplit_StringString_StringStringInt() { assertEquals(null, StringUtils.split(null, ".")); assertEquals(null, StringUtils.split(null, ".", 3)); assertEquals(0, StringUtils.split("", ".").length); assertEquals(0, StringUtils.split("", ".", 3).length); innerTestSplit('.', ".", ' '); innerTestSplit('.', ".", ','); innerTestSplit('.', ".,", 'x'); for (int i = 0; i < WHITESPACE.length(); i++) { for (int j = 0; j < NON_WHITESPACE.length(); j++) { innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); } } String[] results = null; String[] expectedResults = {"ab", "de fg"}; results = StringUtils.split("ab  de fg", null, 2); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } String[] expectedResults2 = {"ab", "cd:ef"}; results = StringUtils.split("ab:cd:ef",":", 2); assertEquals(expectedResults2.length, results.length); for (int i = 0; i < expectedResults2.length; i++) { assertEquals(expectedResults2[i], results[i]); } }
public void testSplitByWholeString_StringStringBoolean() { assertEquals( null, StringUtils.splitByWholeSeparator( null, "." ) ) ; assertEquals( 0, StringUtils.splitByWholeSeparator( "", "." ).length ) ; String stringToSplitOnNulls = "ab  de fg" ; String[] splitOnNullExpectedResults = { "ab", "de", "fg" } ; String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ; assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ; for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) { assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ; } String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiously" ; String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" } ; String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, "aeiouy" ) ; assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ; for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) { assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ; } String[] splitWithMultipleSeparatorExpectedResults = {"ab", "cd", "ef"}; String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator("ab:cd::ef", ":"); assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length ); for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) { assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ; } }
public void testSplitByWholeString_StringStringBooleanInt() { assertEquals( null, StringUtils.splitByWholeSeparator( null, ".", 3 ) ) ; assertEquals( 0, StringUtils.splitByWholeSeparator( "", ".", 3 ).length ) ; String stringToSplitOnNulls = "ab  de fg" ; String[] splitOnNullExpectedResults = { "ab", "de fg" } ; //String[] splitOnNullExpectedResults = { "ab", "de" } ; String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ; assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ; for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) { assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ; } String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously" ; String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" } ; //String[] splitOnStringExpectedResults = { "abstemiously", "abstemiously" } ; String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, "aeiouy", 2 ) ; assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ; for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) { assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ; } }
public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { assertEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; // test whitespace String input = "ab  de fg" ; String[] expected = new String[] { "ab", "", "", "de", "fg" } ; String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; assertEquals( expected.length, actual.length ) ; for ( int i = 0 ; i < actual.length ; i+= 1 ) { assertEquals( expected[i], actual[i] ); } // test delimiter singlechar input = "1::2:::3::::4"; expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; assertEquals( expected.length, actual.length ) ; for ( int i = 0 ; i < actual.length ; i+= 1 ) { assertEquals( expected[i], actual[i] ); } // test delimiter multichar input = "1::2:::3::::4"; expected = new String[] { "1", "2", ":3", "", "4" }; actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; assertEquals( expected.length, actual.length ) ; for ( int i = 0 ; i < actual.length ; i+= 1 ) { assertEquals( expected[i], actual[i] ); } // test delimiter char with max input = "1::2::3:4"; expected = new String[] { "1", "", "2", ":3:4" }; actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; assertEquals( expected.length, actual.length ) ; for ( int i = 0 ; i < actual.length ; i+= 1 ) { assertEquals( expected[i], actual[i] ); } }
public void testSplitPreserveAllTokens_String() { assertEquals(null, StringUtils.splitPreserveAllTokens(null)); assertEquals(0, StringUtils.splitPreserveAllTokens("").length); String str = "abc def"; String[] res = StringUtils.splitPreserveAllTokens(str); assertEquals(2, res.length); assertEquals("abc", res[0]); assertEquals("def", res[1]); str = "abc def"; res = StringUtils.splitPreserveAllTokens(str); assertEquals(3, res.length); assertEquals("abc", res[0]); assertEquals("", res[1]); assertEquals("def", res[2]); str = " abc "; res = StringUtils.splitPreserveAllTokens(str); assertEquals(3, res.length); assertEquals("", res[0]); assertEquals("abc", res[1]); assertEquals("", res[2]); str = "a b .c"; res = StringUtils.splitPreserveAllTokens(str); assertEquals(3, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals(".c", res[2]); str = " a b .c"; res = StringUtils.splitPreserveAllTokens(str); assertEquals(4, res.length); assertEquals("", res[0]); assertEquals("a", res[1]); assertEquals("b", res[2]); assertEquals(".c", res[3]); str = "a b .c"; res = StringUtils.splitPreserveAllTokens(str); assertEquals(5, res.length); assertEquals("a", res[0]); assertEquals("", res[1]); assertEquals("b", res[2]); assertEquals("", res[3]); assertEquals(".c", res[4]); str = " a "; res = StringUtils.splitPreserveAllTokens(str); assertEquals(4, res.length); assertEquals("", res[0]); assertEquals("a", res[1]); assertEquals("", res[2]); assertEquals("", res[3]); str = " a b"; res = StringUtils.splitPreserveAllTokens(str); assertEquals(4, res.length); assertEquals("", res[0]); assertEquals("a", res[1]); assertEquals("", res[2]); assertEquals("b", res[3]); str = "a" + WHITESPACE + "b" + NON_WHITESPACE + "c"; res = StringUtils.splitPreserveAllTokens(str); assertEquals(WHITESPACE.length() + 1, res.length); assertEquals("a", res[0]); for(int i = 1; i < WHITESPACE.length()-1; i++) { assertEquals("", res[i]); } assertEquals("b" + NON_WHITESPACE + "c", res[WHITESPACE.length()]); }
public void testSplitPreserveAllTokens_StringChar() { assertEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); String str = "a.b. c"; String[] res = StringUtils.splitPreserveAllTokens(str, '.'); assertEquals(3, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals(" c", res[2]); str = "a.b.. c"; res = StringUtils.splitPreserveAllTokens(str, '.'); assertEquals(4, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals("", res[2]); assertEquals(" c", res[3]); str = ".a."; res = StringUtils.splitPreserveAllTokens(str, '.'); assertEquals(3, res.length); assertEquals("", res[0]); assertEquals("a", res[1]); assertEquals("", res[2]); str = ".a.."; res = StringUtils.splitPreserveAllTokens(str, '.'); assertEquals(4, res.length); assertEquals("", res[0]); assertEquals("a", res[1]); assertEquals("", res[2]); assertEquals("", res[3]); str = "..a."; res = StringUtils.splitPreserveAllTokens(str, '.'); assertEquals(4, res.length); assertEquals("", res[0]); assertEquals("", res[1]); assertEquals("a", res[2]); assertEquals("", res[3]); str = "..a"; res = StringUtils.splitPreserveAllTokens(str, '.'); assertEquals(3, res.length); assertEquals("", res[0]); assertEquals("", res[1]); assertEquals("a", res[2]); str = "a b c"; res = StringUtils.splitPreserveAllTokens(str,' '); assertEquals(3, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals("c", res[2]); str = "a b c"; res = StringUtils.splitPreserveAllTokens(str,' '); assertEquals(5, res.length); assertEquals("a", res[0]); assertEquals("", res[1]); assertEquals("b", res[2]); assertEquals("", res[3]); assertEquals("c", res[4]); str = " a b c"; res = StringUtils.splitPreserveAllTokens(str,' '); assertEquals(4, res.length); assertEquals("", res[0]); assertEquals("a", res[1]); assertEquals("b", res[2]); assertEquals("c", res[3]); str = " a b c"; res = StringUtils.splitPreserveAllTokens(str,' '); assertEquals(5, res.length); assertEquals("", res[0]); assertEquals("", res[1]); assertEquals("a", res[2]); assertEquals("b", res[3]); assertEquals("c", res[4]); str = "a b c "; res = StringUtils.splitPreserveAllTokens(str,' '); assertEquals(4, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals("c", res[2]); assertEquals("", res[3]); str = "a b c "; res = StringUtils.splitPreserveAllTokens(str,' '); assertEquals(5, res.length); assertEquals("a", res[0]); assertEquals("b", res[1]); assertEquals("c", res[2]); assertEquals("", res[3]); assertEquals("", res[3]); // Match example in javadoc { String[] results = null; String[] expectedResults = {"a", "", "b", "c"}; results = StringUtils.splitPreserveAllTokens("a..b.c",'.'); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } }
public void testSplitPreserveAllTokens_StringString_StringStringInt() { assertEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); assertEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); innerTestSplitPreserveAllTokens('.', ".", ' '); innerTestSplitPreserveAllTokens('.', ".", ','); innerTestSplitPreserveAllTokens('.', ".,", 'x'); for (int i = 0; i < WHITESPACE.length(); i++) { for (int j = 0; j < NON_WHITESPACE.length(); j++) { innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); } } { String[] results = null; String[] expectedResults = {"ab", "de fg"}; results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] results = null; String[] expectedResults = {"ab", " de fg"}; results = StringUtils.splitPreserveAllTokens("ab  de fg", null, 2); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] results = null; String[] expectedResults = {"ab", "::de:fg"}; results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] results = null; String[] expectedResults = {"ab", "", " de fg"}; results = StringUtils.splitPreserveAllTokens("ab  de fg", null, 3); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] results = null; String[] expectedResults = {"ab", "", "", "de fg"}; results = StringUtils.splitPreserveAllTokens("ab  de fg", null, 4); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] expectedResults = {"ab", "cd:ef"}; String[] results = null; results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] results = null; String[] expectedResults = {"ab", ":cd:ef"}; results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] results = null; String[] expectedResults = {"ab", "", ":cd:ef"}; results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] results = null; String[] expectedResults = {"ab", "", "", "cd:ef"}; results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] results = null; String[] expectedResults = {"", "ab", "", "", "cd:ef"}; results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } { String[] results = null; String[] expectedResults = {"", "", "ab", "", "", "cd:ef"}; results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6); assertEquals(expectedResults.length, results.length); for (int i = 0; i < expectedResults.length; i++) { assertEquals(expectedResults[i], results[i]); } } }
public void testSplitByCharacterType() { assertNull(StringUtils.splitByCharacterType(null)); assertEquals(0, StringUtils.splitByCharacterType("").length); assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab de fg"))); assertTrue(ArrayUtils.isEquals(new String[] { "ab", "  ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab  de fg"))); assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterType("ab:cd:ef"))); assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterType("number5"))); assertTrue(ArrayUtils.isEquals(new String[] { "foo", "B", "ar" }, StringUtils.splitByCharacterType("fooBar"))); assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "B", "ar" }, StringUtils.splitByCharacterType("foo200Bar"))); assertTrue(ArrayUtils.isEquals(new String[] { "ASFR", "ules" }, StringUtils.splitByCharacterType("ASFRules"))); }
public void testSplitByCharacterTypeCamelCase() { assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); assertTrue(ArrayUtils.isEquals(new String[] { "ab", "  ", "de", " ", "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab  de fg"))); assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterTypeCamelCase("number5"))); assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("fooBar"))); assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); }
public void testDeleteWhitespace_String() { assertEquals(null, StringUtils.deleteWhitespace(null)); assertEquals("", StringUtils.deleteWhitespace("")); assertEquals("", StringUtils.deleteWhitespace(" \u000C \t\t\u001F\n\n \u000B ")); assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); // Note: u-2007 and u-000A both cause problems in the source code // it should ignore 2007 but delete 000A assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace(" \u00A0 \t\t\n\n \u202F ")); assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); assertEquals("test", StringUtils.deleteWhitespace("\u000Bt \t\n\u0009e\rs\n\n  \tt")); }
public void testReplace_StringStringString() { assertEquals(null, StringUtils.replace(null, null, null)); assertEquals(null, StringUtils.replace(null, null, "any")); assertEquals(null, StringUtils.replace(null, "any", null)); assertEquals(null, StringUtils.replace(null, "any", "any")); assertEquals("", StringUtils.replace("", null, null)); assertEquals("", StringUtils.replace("", null, "any")); assertEquals("", StringUtils.replace("", "any", null)); assertEquals("", StringUtils.replace("", "any", "any")); assertEquals("FOO", StringUtils.replace("FOO", "", "any")); assertEquals("FOO", StringUtils.replace("FOO", null, "any")); assertEquals("FOO", StringUtils.replace("FOO", "F", null)); assertEquals("FOO", StringUtils.replace("FOO", null, null)); assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); }
public void testReplace_StringStringStringInt() { assertEquals(null, StringUtils.replace(null, null, null, 2)); assertEquals(null, StringUtils.replace(null, null, "any", 2)); assertEquals(null, StringUtils.replace(null, "any", null, 2)); assertEquals(null, StringUtils.replace(null, "any", "any", 2)); assertEquals("", StringUtils.replace("", null, null, 2)); assertEquals("", StringUtils.replace("", null, "any", 2)); assertEquals("", StringUtils.replace("", "any", null, 2)); assertEquals("", StringUtils.replace("", "any", "any", 2)); String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'}); assertSame(str, StringUtils.replace(str, "x", "", -1)); assertEquals("f", StringUtils.replace("oofoo", "o", "", -1)); assertEquals("oofoo", StringUtils.replace("oofoo", "o", "", 0)); assertEquals("ofoo", StringUtils.replace("oofoo", "o", "", 1)); assertEquals("foo", StringUtils.replace("oofoo", "o", "", 2)); assertEquals("fo", StringUtils.replace("oofoo", "o", "", 3)); assertEquals("f", StringUtils.replace("oofoo", "o", "", 4)); assertEquals("f", StringUtils.replace("oofoo", "o", "", -5)); assertEquals("f", StringUtils.replace("oofoo", "o", "", 1000)); }
public void testReplaceOnce_StringStringString() { assertEquals(null, StringUtils.replaceOnce(null, null, null)); assertEquals(null, StringUtils.replaceOnce(null, null, "any")); assertEquals(null, StringUtils.replaceOnce(null, "any", null)); assertEquals(null, StringUtils.replaceOnce(null, "any", "any")); assertEquals("", StringUtils.replaceOnce("", null, null)); assertEquals("", StringUtils.replaceOnce("", null, "any")); assertEquals("", StringUtils.replaceOnce("", "any", null)); assertEquals("", StringUtils.replaceOnce("", "any", "any")); assertEquals("FOO", StringUtils.replaceOnce("FOO", "", "any")); assertEquals("FOO", StringUtils.replaceOnce("FOO", null, "any")); assertEquals("FOO", StringUtils.replaceOnce("FOO", "F", null)); assertEquals("FOO", StringUtils.replaceOnce("FOO", null, null)); assertEquals("foofoo", StringUtils.replaceOnce("foofoofoo", "foo", "")); }
public void testReplace_StringStringArrayStringArray() {  //JAVADOC TESTS START assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); //JAVADOC TESTS END assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); // Test null safety inside arrays - LANG-552 assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); }
public void testReplace_StringStringArrayStringArrayBoolean() { //JAVADOC TESTS START assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{"a"}, new String[]{"b"})); assertEquals(StringUtils.replaceEachRepeatedly("", new String[]{"a"}, new String[]{"b"}),""); assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null),"aba"); assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null),"aba"); assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]),"aba"); assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null),"aba"); assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[]{"a"}, new String[]{""}),"b"); assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[]{null}, new String[]{"a"}),"aba"); assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"tcte"); try { StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}); fail("Should be a circular reference"); } catch (IllegalStateException e) {} //JAVADOC TESTS END }
public void testReplaceChars_StringCharChar() { assertEquals(null, StringUtils.replaceChars(null, 'b', 'z')); assertEquals("", StringUtils.replaceChars("", 'b', 'z')); assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z')); assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z')); }
public void testReplaceChars_StringStringString() { assertEquals(null, StringUtils.replaceChars(null, null, null)); assertEquals(null, StringUtils.replaceChars(null, "", null)); assertEquals(null, StringUtils.replaceChars(null, "a", null)); assertEquals(null, StringUtils.replaceChars(null, null, "")); assertEquals(null, StringUtils.replaceChars(null, null, "x")); assertEquals("", StringUtils.replaceChars("", null, null)); assertEquals("", StringUtils.replaceChars("", "", null)); assertEquals("", StringUtils.replaceChars("", "a", null)); assertEquals("", StringUtils.replaceChars("", null, "")); assertEquals("", StringUtils.replaceChars("", null, "x")); assertEquals("abc", StringUtils.replaceChars("abc", null, null)); assertEquals("abc", StringUtils.replaceChars("abc", null, "")); assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); assertEquals("abc", StringUtils.replaceChars("abc", "", null)); assertEquals("abc", StringUtils.replaceChars("abc", "", "")); assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); // Javadoc examples: assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454 assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); }
public void testOverlay_StringStringIntInt() { assertEquals(null, StringUtils.overlay(null, null, 2, 4)); assertEquals(null, StringUtils.overlay(null, null, -2, -4)); assertEquals("", StringUtils.overlay("", null, 0, 0)); assertEquals("", StringUtils.overlay("", "", 0, 0)); assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4)); assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2)); assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4)); assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2)); assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4)); assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2)); assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4)); assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1)); assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1)); assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2)); assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10)); assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4)); assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10)); assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8)); }
public void testRepeat_StringInt() { assertEquals(null, StringUtils.repeat(null, 2)); assertEquals("", StringUtils.repeat("ab", 0)); assertEquals("", StringUtils.repeat("", 3)); assertEquals("aaa", StringUtils.repeat("a", 3)); assertEquals("ababab", StringUtils.repeat("ab", 3)); assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); String str = StringUtils.repeat("a", 10000); // bigger than pad limit assertEquals(10000, str.length()); assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'})); }
public void testRepeat_StringStringInt() { assertEquals(null, StringUtils.repeat(null, null, 2)); assertEquals(null, StringUtils.repeat(null, "x", 2)); assertEquals("", StringUtils.repeat("", null, 2)); assertEquals("", StringUtils.repeat("ab", "", 0)); assertEquals("", StringUtils.repeat("", "", 2)); assertEquals("xx", StringUtils.repeat("", "x", 3)); assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); }
public void testChop() { String[][] chopCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP } , { FOO_UNCAP + "\n" , FOO_UNCAP } , { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { "foo", "fo"}, { "foo\nfoo", "foo\nfo" }, { "\n", "" }, { "\r", "" }, { "\r\n", "" }, { null, null }, { "", "" }, { "a", "" }, }; for (int i = 0; i < chopCases.length; i++) { String original = chopCases[i][0]; String expectedResult = chopCases[i][1]; assertEquals("chop(String) failed", expectedResult, StringUtils.chop(original)); } }
public void testChomp() { String[][] chompCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n" , FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { FOO_UNCAP, FOO_UNCAP }, { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n"}, { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, { "foo\nfoo", "foo\nfoo" }, { "foo\n\rfoo", "foo\n\rfoo" }, { "\n", "" }, { "\r", "" }, { "a", "a" }, { "\r\n", "" }, { "", "" }, { null, null }, { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n"} }; for (int i = 0; i < chompCases.length; i++) { String original = chompCases[i][0]; String expectedResult = chompCases[i][1]; assertEquals("chomp(String) failed", expectedResult, StringUtils.chomp(original)); } assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foobar", "bar")); assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "baz")); assertEquals("chomp(String, String) failed", "foo", StringUtils.chomp("foo", "foooo")); assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", "")); assertEquals("chomp(String, String) failed", "foobar", StringUtils.chomp("foobar", null)); assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "foo")); assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", null)); assertEquals("chomp(String, String) failed", "", StringUtils.chomp("", "")); assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "foo")); assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, null)); assertEquals("chomp(String, String) failed", null, StringUtils.chomp(null, "")); assertEquals("chomp(String, String) failed", "", StringUtils.chomp("foo", "foo")); assertEquals("chomp(String, String) failed", " ", StringUtils.chomp(" foo", "foo")); assertEquals("chomp(String, String) failed", "foo ", StringUtils.chomp("foo ", "foo")); }
public void testRightPad_StringInt() { assertEquals(null, StringUtils.rightPad(null, 5)); assertEquals("   ", StringUtils.rightPad("", 5)); assertEquals("abc ", StringUtils.rightPad("abc", 5)); assertEquals("abc", StringUtils.rightPad("abc", 2)); assertEquals("abc", StringUtils.rightPad("abc", -1)); }
public void testRightPad_StringIntChar() { assertEquals(null, StringUtils.rightPad(null, 5, ' ')); assertEquals("   ", StringUtils.rightPad("", 5, ' ')); assertEquals("abc ", StringUtils.rightPad("abc", 5, ' ')); assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); String str = StringUtils.rightPad("aaa", 10000, 'a'); // bigger than pad length assertEquals(10000, str.length()); assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'})); }
public void testRightPad_StringIntString() { assertEquals(null, StringUtils.rightPad(null, 5, "-+")); assertEquals("   ", StringUtils.rightPad("", 5, " ")); assertEquals(null, StringUtils.rightPad(null, 8, null)); assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+")); assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~")); assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~")); assertEquals("abc", StringUtils.rightPad("abc", 2, " ")); assertEquals("abc", StringUtils.rightPad("abc", -1, " ")); assertEquals("abc ", StringUtils.rightPad("abc", 5, null)); assertEquals("abc ", StringUtils.rightPad("abc", 5, "")); }
public void testLeftPad_StringInt() { assertEquals(null, StringUtils.leftPad(null, 5)); assertEquals("   ", StringUtils.leftPad("", 5)); assertEquals(" abc", StringUtils.leftPad("abc", 5)); assertEquals("abc", StringUtils.leftPad("abc", 2)); }
public void testLeftPad_StringIntChar() { assertEquals(null, StringUtils.leftPad(null, 5, ' ')); assertEquals("   ", StringUtils.leftPad("", 5, ' ')); assertEquals(" abc", StringUtils.leftPad("abc", 5, ' ')); assertEquals("xxabc", StringUtils.leftPad("abc", 5, 'x')); assertEquals("\uffff\uffffabc", StringUtils.leftPad("abc", 5, '\uffff')); assertEquals("abc", StringUtils.leftPad("abc", 2, ' ')); String str = StringUtils.leftPad("aaa", 10000, 'a'); // bigger than pad length assertEquals(10000, str.length()); assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'})); }
public void testLeftPad_StringIntString() { assertEquals(null, StringUtils.leftPad(null, 5, "-+")); assertEquals(null, StringUtils.leftPad(null, 5, null)); assertEquals("   ", StringUtils.leftPad("", 5, " ")); assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); assertEquals(" abc", StringUtils.leftPad("abc", 5, null)); assertEquals(" abc", StringUtils.leftPad("abc", 5, "")); }
public void testLengthString() { assertEquals(0, StringUtils.length(null)); assertEquals(0, StringUtils.length("")); assertEquals(0, StringUtils.length(StringUtils.EMPTY)); assertEquals(1, StringUtils.length("A")); assertEquals(1, StringUtils.length(" ")); assertEquals(8, StringUtils.length("ABCDEFGH")); }
public void testLengthStringBuffer() { assertEquals(0, StringUtils.length(new StringBuffer(""))); assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY))); assertEquals(1, StringUtils.length(new StringBuffer("A"))); assertEquals(1, StringUtils.length(new StringBuffer(" "))); assertEquals(8, StringUtils.length(new StringBuffer("ABCDEFGH"))); }
public void testLengthStringBuilder() { assertEquals(0, StringUtils.length(new StringBuilder(""))); assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY))); assertEquals(1, StringUtils.length(new StringBuilder("A"))); assertEquals(1, StringUtils.length(new StringBuilder(" "))); assertEquals(8, StringUtils.length(new StringBuilder("ABCDEFGH"))); }
public void testCenter_StringInt() { assertEquals(null, StringUtils.center(null, -1)); assertEquals(null, StringUtils.center(null, 4)); assertEquals("  ", StringUtils.center("", 4)); assertEquals("ab", StringUtils.center("ab", 0)); assertEquals("ab", StringUtils.center("ab", -1)); assertEquals("ab", StringUtils.center("ab", 1)); assertEquals("  ", StringUtils.center("", 4)); assertEquals(" ab ", StringUtils.center("ab", 4)); assertEquals("abcd", StringUtils.center("abcd", 2)); assertEquals(" a ", StringUtils.center("a", 4)); assertEquals(" a ", StringUtils.center("a", 5)); }
public void testCenter_StringIntChar() { assertEquals(null, StringUtils.center(null, -1, ' ')); assertEquals(null, StringUtils.center(null, 4, ' ')); assertEquals("  ", StringUtils.center("", 4, ' ')); assertEquals("ab", StringUtils.center("ab", 0, ' ')); assertEquals("ab", StringUtils.center("ab", -1, ' ')); assertEquals("ab", StringUtils.center("ab", 1, ' ')); assertEquals("  ", StringUtils.center("", 4, ' ')); assertEquals(" ab ", StringUtils.center("ab", 4, ' ')); assertEquals("abcd", StringUtils.center("abcd", 2, ' ')); assertEquals(" a ", StringUtils.center("a", 4, ' ')); assertEquals(" a ", StringUtils.center("a", 5, ' ')); assertEquals("xxaxx", StringUtils.center("a", 5, 'x')); }
public void testCenter_StringIntString() { assertEquals(null, StringUtils.center(null, 4, null)); assertEquals(null, StringUtils.center(null, -1, " ")); assertEquals(null, StringUtils.center(null, 4, " ")); assertEquals("  ", StringUtils.center("", 4, " ")); assertEquals("ab", StringUtils.center("ab", 0, " ")); assertEquals("ab", StringUtils.center("ab", -1, " ")); assertEquals("ab", StringUtils.center("ab", 1, " ")); assertEquals("  ", StringUtils.center("", 4, " ")); assertEquals(" ab ", StringUtils.center("ab", 4, " ")); assertEquals("abcd", StringUtils.center("abcd", 2, " ")); assertEquals(" a ", StringUtils.center("a", 4, " ")); assertEquals("yayz", StringUtils.center("a", 4, "yz")); assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); assertEquals(" abc ", StringUtils.center("abc", 7, null)); assertEquals(" abc ", StringUtils.center("abc", 7, "")); }
public void testReverse_String() { assertEquals(null, StringUtils.reverse(null) ); assertEquals("", StringUtils.reverse("") ); assertEquals("sdrawkcab", StringUtils.reverse("backwards") ); }
public void testReverseDelimited_StringChar() { assertEquals(null, StringUtils.reverseDelimited(null, '.') ); assertEquals("", StringUtils.reverseDelimited("", '.') ); assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') ); assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.') ); assertEquals("", StringUtils.reverseDelimited("", '.') ); }
public void testDefault_String() { assertEquals("", StringUtils.defaultString(null)); assertEquals("", StringUtils.defaultString("")); assertEquals("abc", StringUtils.defaultString("abc")); }
public void testDefault_StringString() { assertEquals("NULL", StringUtils.defaultString(null, "NULL")); assertEquals("", StringUtils.defaultString("", "NULL")); assertEquals("abc", StringUtils.defaultString("abc", "NULL")); }
public void testDefaultIfEmpty_StringString() { assertEquals("NULL", StringUtils.defaultIfEmpty(null, "NULL")); assertEquals("NULL", StringUtils.defaultIfEmpty("", "NULL")); assertEquals("abc", StringUtils.defaultIfEmpty("abc", "NULL")); assertNull(StringUtils.defaultIfEmpty("", null)); }
public void testDefaultIfEmpty_StringBuilders() { assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuilder(""), new StringBuilder("NULL")).toString()); assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuilder("abc"), new StringBuilder("NULL")).toString()); assertNull(StringUtils.defaultIfEmpty(new StringBuilder(""), null)); }
public void testDefaultIfEmpty_StringBuffers() { assertEquals("NULL", StringUtils.defaultIfEmpty(new StringBuffer(""), new StringBuffer("NULL")).toString()); assertEquals("abc", StringUtils.defaultIfEmpty(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); assertNull(StringUtils.defaultIfEmpty(new StringBuffer(""), null)); }
public void testDefaultIfEmpty_CharBuffers() { assertEquals("NULL", StringUtils.defaultIfEmpty(CharBuffer.wrap(""), CharBuffer.wrap("NULL")).toString()); assertEquals("abc", StringUtils.defaultIfEmpty(CharBuffer.wrap("abc"), CharBuffer.wrap("NULL")).toString()); assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(""), null)); }
public void testAbbreviate_StringInt() { assertEquals(null, StringUtils.abbreviate(null, 10)); assertEquals("", StringUtils.abbreviate("", 10)); assertEquals("short", StringUtils.abbreviate("short", 10)); assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); String raspberry = "raspberry peach"; assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6)); assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7)); assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8)); assertEquals("a...", StringUtils.abbreviate("abcdefg", 4)); assertEquals("", StringUtils.abbreviate("", 4)); try { @SuppressWarnings("unused") String res = StringUtils.abbreviate("abc", 3); fail("StringUtils.abbreviate expecting IllegalArgumentException"); } catch (IllegalArgumentException ex) { // empty } }
public void testAbbreviate_StringIntInt() { assertEquals(null, StringUtils.abbreviate(null, 10, 12)); assertEquals("", StringUtils.abbreviate("", 0, 10)); assertEquals("", StringUtils.abbreviate("", 2, 10)); try { @SuppressWarnings("unused") String res = StringUtils.abbreviate("abcdefghij", 0, 3); fail("StringUtils.abbreviate expecting IllegalArgumentException"); } catch (IllegalArgumentException ex) { // empty } try { @SuppressWarnings("unused") String res = StringUtils.abbreviate("abcdefghij", 5, 6); fail("StringUtils.abbreviate expecting IllegalArgumentException"); } catch (IllegalArgumentException ex) { // empty }  String raspberry = "raspberry peach"; assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15)); assertEquals(null, StringUtils.abbreviate(null, 7, 14)); assertAbbreviateWithOffset("abcdefg...", -1, 10); assertAbbreviateWithOffset("abcdefg...", 0, 10); assertAbbreviateWithOffset("abcdefg...", 1, 10); assertAbbreviateWithOffset("abcdefg...", 2, 10); assertAbbreviateWithOffset("abcdefg...", 3, 10); assertAbbreviateWithOffset("abcdefg...", 4, 10); assertAbbreviateWithOffset("...fghi...", 5, 10); assertAbbreviateWithOffset("...ghij...", 6, 10); assertAbbreviateWithOffset("...hijk...", 7, 10); assertAbbreviateWithOffset("...ijklmno", 8, 10); assertAbbreviateWithOffset("...ijklmno", 9, 10); assertAbbreviateWithOffset("...ijklmno", 10, 10); assertAbbreviateWithOffset("...ijklmno", 10, 10); assertAbbreviateWithOffset("...ijklmno", 11, 10); assertAbbreviateWithOffset("...ijklmno", 12, 10); assertAbbreviateWithOffset("...ijklmno", 13, 10); assertAbbreviateWithOffset("...ijklmno", 14, 10); assertAbbreviateWithOffset("...ijklmno", 15, 10); assertAbbreviateWithOffset("...ijklmno", 16, 10); assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10); }
public void testAbbreviateMiddle() { // javadoc examples assertNull( StringUtils.abbreviateMiddle(null, null, 0) ); assertEquals( "abc", StringUtils.abbreviateMiddle("abc", null, 0) ); assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 0) ); assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 3) ); assertEquals( "ab.f", StringUtils.abbreviateMiddle("abcdef", ".", 4) ); // JIRA issue (LANG-405) example (slightly different than actual expected result) assertEquals( "A very long text with un...f the text is complete.", StringUtils.abbreviateMiddle( "A very long text with unimportant stuff in the middle but interesting start and " + "end to see if the text is complete.", "...", 50) ); // Test a much longer text :) String longText = "Start text" + StringUtils.repeat("x", 10000) + "Close text"; assertEquals( "Start text->Close text", StringUtils.abbreviateMiddle( longText, "->", 22 ) ); // Test negative length assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", -1)); // Test boundaries // Fails to change anything as method ensures first and last char are kept assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 1)); assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 2)); // Test length of n=1 assertEquals("a", StringUtils.abbreviateMiddle("a", ".", 1)); // Test smallest length that can lead to success assertEquals("a.d", StringUtils.abbreviateMiddle("abcd", ".", 3)); // More from LANG-405 assertEquals("a..f", StringUtils.abbreviateMiddle("abcdef", "..", 4)); assertEquals("ab.ef", StringUtils.abbreviateMiddle("abcdef", ".", 5)); }
public void testDifference_StringString() { assertEquals(null, StringUtils.difference(null, null)); assertEquals("", StringUtils.difference("", "")); assertEquals("abc", StringUtils.difference("", "abc")); assertEquals("", StringUtils.difference("abc", "")); assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); assertEquals("", StringUtils.difference("abc", "abc")); assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); }
public void testDifferenceAt_StringString() { assertEquals(-1, StringUtils.indexOfDifference(null, null)); assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); assertEquals(-1, StringUtils.indexOfDifference("", "")); assertEquals(0, StringUtils.indexOfDifference("", "abc")); assertEquals(0, StringUtils.indexOfDifference("abc", "")); assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); //System.out.println("indexOfDiff: " + StringUtils.indexOfDifference("i am a robot", "not machine")); }
public void testGetLevenshteinDistance_StringString() { assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") ); assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") ); try { @SuppressWarnings("unused") int d = StringUtils.getLevenshteinDistance("a", null); fail("expecting IllegalArgumentException"); } catch (IllegalArgumentException ex) { // empty } try { @SuppressWarnings("unused") int d = StringUtils.getLevenshteinDistance(null, "a"); fail("expecting IllegalArgumentException"); } catch (IllegalArgumentException ex) { // empty } }
public void testEMPTY() { assertNotNull(StringUtils.EMPTY); assertEquals("", StringUtils.EMPTY); assertEquals(0, StringUtils.EMPTY.length()); }
public void testIsAllLowerCase() { assertFalse(StringUtils.isAllLowerCase(null)); assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); assertTrue(StringUtils.isAllLowerCase("abc")); assertFalse(StringUtils.isAllLowerCase("abc ")); assertFalse(StringUtils.isAllLowerCase("abC")); }
public void testIsAllUpperCase() { assertFalse(StringUtils.isAllUpperCase(null)); assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); assertTrue(StringUtils.isAllUpperCase("ABC")); assertFalse(StringUtils.isAllUpperCase("ABC ")); assertFalse(StringUtils.isAllUpperCase("aBC")); }
public void testRemoveStart() { // StringUtils.removeStart("", *)    = "" assertNull(StringUtils.removeStart(null, null)); assertNull(StringUtils.removeStart(null, "")); assertNull(StringUtils.removeStart(null, "a")); // StringUtils.removeStart(*, null)   = * assertEquals(StringUtils.removeStart("", null), ""); assertEquals(StringUtils.removeStart("", ""), ""); assertEquals(StringUtils.removeStart("", "a"), ""); // All others: assertEquals(StringUtils.removeStart("www.domain.com", "www."), "domain.com"); assertEquals(StringUtils.removeStart("domain.com", "www."), "domain.com"); assertEquals(StringUtils.removeStart("domain.com", ""), "domain.com"); assertEquals(StringUtils.removeStart("domain.com", null), "domain.com"); }
public void testRemoveStartIgnoreCase() { // StringUtils.removeStart("", *)    = "" assertNull("removeStartIgnoreCase(null, null)", StringUtils.removeStartIgnoreCase(null, null)); assertNull("removeStartIgnoreCase(null, \"\")", StringUtils.removeStartIgnoreCase(null, "")); assertNull("removeStartIgnoreCase(null, \"a\")", StringUtils.removeStartIgnoreCase(null, "a")); // StringUtils.removeStart(*, null)   = * assertEquals("removeStartIgnoreCase(\"\", null)", StringUtils.removeStartIgnoreCase("", null), ""); assertEquals("removeStartIgnoreCase(\"\", \"\")", StringUtils.removeStartIgnoreCase("", ""), ""); assertEquals("removeStartIgnoreCase(\"\", \"a\")", StringUtils.removeStartIgnoreCase("", "a"), ""); // All others: assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "www."), "domain.com"); assertEquals("removeStartIgnoreCase(\"domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("domain.com", "www."), "domain.com"); assertEquals("removeStartIgnoreCase(\"domain.com\", \"\")", StringUtils.removeStartIgnoreCase("domain.com", ""), "domain.com"); assertEquals("removeStartIgnoreCase(\"domain.com\", null)", StringUtils.removeStartIgnoreCase("domain.com", null), "domain.com"); // Case insensitive: assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "WWW."), "domain.com"); }
public void testRemoveEnd() { // StringUtils.removeEnd("", *)    = "" assertNull(StringUtils.removeEnd(null, null)); assertNull(StringUtils.removeEnd(null, "")); assertNull(StringUtils.removeEnd(null, "a")); // StringUtils.removeEnd(*, null)   = * assertEquals(StringUtils.removeEnd("", null), ""); assertEquals(StringUtils.removeEnd("", ""), ""); assertEquals(StringUtils.removeEnd("", "a"), ""); // All others: assertEquals(StringUtils.removeEnd("www.domain.com.", ".com"), "www.domain.com."); assertEquals(StringUtils.removeEnd("www.domain.com", ".com"), "www.domain"); assertEquals(StringUtils.removeEnd("www.domain", ".com"), "www.domain"); assertEquals(StringUtils.removeEnd("domain.com", ""), "domain.com"); assertEquals(StringUtils.removeEnd("domain.com", null), "domain.com"); }
public void testRemoveEndIgnoreCase() { // StringUtils.removeEndIgnoreCase("", *)    = "" assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); // StringUtils.removeEnd(*, null)   = * assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); // All others: assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com"); assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com"); // Case insensitive: assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); }
public void testRemove_String() { // StringUtils.remove(null, *)    = null assertEquals(null, StringUtils.remove(null, null)); assertEquals(null, StringUtils.remove(null, "")); assertEquals(null, StringUtils.remove(null, "a")); // StringUtils.remove("", *)     = "" assertEquals("", StringUtils.remove("", null)); assertEquals("", StringUtils.remove("", "")); assertEquals("", StringUtils.remove("", "a")); // StringUtils.remove(*, null)    = * assertEquals(null, StringUtils.remove(null, null)); assertEquals("", StringUtils.remove("", null)); assertEquals("a", StringUtils.remove("a", null)); // StringUtils.remove(*, "")     = * assertEquals(null, StringUtils.remove(null, "")); assertEquals("", StringUtils.remove("", "")); assertEquals("a", StringUtils.remove("a", "")); // StringUtils.remove("queued", "ue") = "qd" assertEquals("qd", StringUtils.remove("queued", "ue")); // StringUtils.remove("queued", "zz") = "queued" assertEquals("queued", StringUtils.remove("queued", "zz")); }
public void testRemove_char() { // StringUtils.remove(null, *)    = null assertEquals(null, StringUtils.remove(null, 'a')); assertEquals(null, StringUtils.remove(null, 'a')); assertEquals(null, StringUtils.remove(null, 'a')); // StringUtils.remove("", *)     = "" assertEquals("", StringUtils.remove("", 'a')); assertEquals("", StringUtils.remove("", 'a')); assertEquals("", StringUtils.remove("", 'a')); // StringUtils.remove("queued", 'u') = "qeed" assertEquals("qeed", StringUtils.remove("queued", 'u')); // StringUtils.remove("queued", 'z') = "queued" assertEquals("queued", StringUtils.remove("queued", 'z')); }
public void testDifferenceAt_StringArray(){ assertEquals(-1, StringUtils.indexOfDifference(null)); assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); assertEquals(-1, StringUtils.indexOfDifference(new String[] {"abc"})); assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null})); assertEquals(-1, StringUtils.indexOfDifference(new String[] {"", ""})); assertEquals(0, StringUtils.indexOfDifference(new String[] {"", null})); assertEquals(0, StringUtils.indexOfDifference(new String[] {"abc", null, null})); assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, "abc"})); assertEquals(0, StringUtils.indexOfDifference(new String[] {"", "abc"})); assertEquals(0, StringUtils.indexOfDifference(new String[] {"abc", ""})); assertEquals(-1, StringUtils.indexOfDifference(new String[] {"abc", "abc"})); assertEquals(1, StringUtils.indexOfDifference(new String[] {"abc", "a"})); assertEquals(2, StringUtils.indexOfDifference(new String[] {"ab", "abxyz"})); assertEquals(2, StringUtils.indexOfDifference(new String[] {"abcde", "abxyz"})); assertEquals(0, StringUtils.indexOfDifference(new String[] {"abcde", "xyz"})); assertEquals(0, StringUtils.indexOfDifference(new String[] {"xyz", "abcde"})); assertEquals(7, StringUtils.indexOfDifference(new String[] {"i am a machine", "i am a robot"})); }
public void testGetCommonPrefix_StringArray(){ assertEquals("", StringUtils.getCommonPrefix(null)); assertEquals("", StringUtils.getCommonPrefix(new String[] {})); assertEquals("abc", StringUtils.getCommonPrefix(new String[] {"abc"})); assertEquals("", StringUtils.getCommonPrefix(new String[] {null, null})); assertEquals("", StringUtils.getCommonPrefix(new String[] {"", ""})); assertEquals("", StringUtils.getCommonPrefix(new String[] {"", null})); assertEquals("", StringUtils.getCommonPrefix(new String[] {"abc", null, null})); assertEquals("", StringUtils.getCommonPrefix(new String[] {null, null, "abc"})); assertEquals("", StringUtils.getCommonPrefix(new String[] {"", "abc"})); assertEquals("", StringUtils.getCommonPrefix(new String[] {"abc", ""})); assertEquals("abc", StringUtils.getCommonPrefix(new String[] {"abc", "abc"})); assertEquals("a", StringUtils.getCommonPrefix(new String[] {"abc", "a"})); assertEquals("ab", StringUtils.getCommonPrefix(new String[] {"ab", "abxyz"})); assertEquals("ab", StringUtils.getCommonPrefix(new String[] {"abcde", "abxyz"})); assertEquals("", StringUtils.getCommonPrefix(new String[] {"abcde", "xyz"})); assertEquals("", StringUtils.getCommonPrefix(new String[] {"xyz", "abcde"})); assertEquals("i am a ", StringUtils.getCommonPrefix(new String[] {"i am a machine", "i am a robot"})); }
public void testStartsWithAny() { assertFalse(StringUtils.startsWithAny(null, null)); assertFalse(StringUtils.startsWithAny(null, new String[] {"abc"})); assertFalse(StringUtils.startsWithAny("abcxyz", null)); assertFalse(StringUtils.startsWithAny("abcxyz", new String[] {})); assertTrue(StringUtils.startsWithAny("abcxyz", new String[] {"abc"})); assertTrue(StringUtils.startsWithAny("abcxyz", new String[] {null, "xyz", "abc"})); assertFalse(StringUtils.startsWithAny("abcxyz", new String[] {null, "xyz", "abcd"})); }
public void testIsEmpty() { assertEquals(true, StringUtils.isEmpty(null)); assertEquals(true, StringUtils.isEmpty("")); assertEquals(false, StringUtils.isEmpty(" ")); assertEquals(false, StringUtils.isEmpty("foo")); assertEquals(false, StringUtils.isEmpty(" foo ")); }
public void testIsNotEmpty() { assertEquals(false, StringUtils.isNotEmpty(null)); assertEquals(false, StringUtils.isNotEmpty("")); assertEquals(true, StringUtils.isNotEmpty(" ")); assertEquals(true, StringUtils.isNotEmpty("foo")); assertEquals(true, StringUtils.isNotEmpty(" foo ")); }
public void testIsBlank() { assertEquals(true, StringUtils.isBlank(null)); assertEquals(true, StringUtils.isBlank("")); assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE)); assertEquals(false, StringUtils.isBlank("foo")); assertEquals(false, StringUtils.isBlank(" foo ")); }
public void testIsNotBlank() { assertEquals(false, StringUtils.isNotBlank(null)); assertEquals(false, StringUtils.isNotBlank("")); assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); assertEquals(true, StringUtils.isNotBlank("foo")); assertEquals(true, StringUtils.isNotBlank(" foo ")); }
public void testTrim() { assertEquals(FOO, StringUtils.trim(FOO + " ")); assertEquals(FOO, StringUtils.trim(" " + FOO + " ")); assertEquals(FOO, StringUtils.trim(" " + FOO)); assertEquals(FOO, StringUtils.trim(FOO + "")); assertEquals("", StringUtils.trim(" \t\r\n\b ")); assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE)); assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE)); assertEquals("", StringUtils.trim("")); assertEquals(null, StringUtils.trim(null)); }
public void testTrimToNull() { assertEquals(FOO, StringUtils.trimToNull(FOO + " ")); assertEquals(FOO, StringUtils.trimToNull(" " + FOO + " ")); assertEquals(FOO, StringUtils.trimToNull(" " + FOO)); assertEquals(FOO, StringUtils.trimToNull(FOO + "")); assertEquals(null, StringUtils.trimToNull(" \t\r\n\b ")); assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE)); assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE)); assertEquals(null, StringUtils.trimToNull("")); assertEquals(null, StringUtils.trimToNull(null)); }
public void testTrimToEmpty() { assertEquals(FOO, StringUtils.trimToEmpty(FOO + " ")); assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + " ")); assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO)); assertEquals(FOO, StringUtils.trimToEmpty(FOO + "")); assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b ")); assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE)); assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE)); assertEquals("", StringUtils.trimToEmpty("")); assertEquals("", StringUtils.trimToEmpty(null)); }
public void testStrip_String() { assertEquals(null, StringUtils.strip(null)); assertEquals("", StringUtils.strip("")); assertEquals("", StringUtils.strip("    ")); assertEquals("abc", StringUtils.strip(" abc ")); assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); }
public void testStripToNull_String() { assertEquals(null, StringUtils.stripToNull(null)); assertEquals(null, StringUtils.stripToNull("")); assertEquals(null, StringUtils.stripToNull("    ")); assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE)); assertEquals("ab c", StringUtils.stripToNull(" ab c ")); assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); }
public void testStripToEmpty_String() { assertEquals("", StringUtils.stripToEmpty(null)); assertEquals("", StringUtils.stripToEmpty("")); assertEquals("", StringUtils.stripToEmpty("    ")); assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); assertEquals("ab c", StringUtils.stripToEmpty(" ab c ")); assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); }
public void testStrip_StringString() { // null strip assertEquals(null, StringUtils.strip(null, null)); assertEquals("", StringUtils.strip("", null)); assertEquals("", StringUtils.strip("    ", null)); assertEquals("abc", StringUtils.strip(" abc ", null)); assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); // "" strip assertEquals(null, StringUtils.strip(null, "")); assertEquals("", StringUtils.strip("", "")); assertEquals("    ", StringUtils.strip("    ", "")); assertEquals(" abc ", StringUtils.strip(" abc ", "")); assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); // " " strip assertEquals(null, StringUtils.strip(null, " ")); assertEquals("", StringUtils.strip("", " ")); assertEquals("", StringUtils.strip("    ", " ")); assertEquals("abc", StringUtils.strip(" abc ", " ")); // "ab" strip assertEquals(null, StringUtils.strip(null, "ab")); assertEquals("", StringUtils.strip("", "ab")); assertEquals("    ", StringUtils.strip("    ", "ab")); assertEquals(" abc ", StringUtils.strip(" abc ", "ab")); assertEquals("c", StringUtils.strip("abcabab", "ab")); assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, "")); }
public void testStripStart_StringString() { // null stripStart assertEquals(null, StringUtils.stripStart(null, null)); assertEquals("", StringUtils.stripStart("", null)); assertEquals("", StringUtils.stripStart("    ", null)); assertEquals("abc ", StringUtils.stripStart(" abc ", null)); assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); // "" stripStart assertEquals(null, StringUtils.stripStart(null, "")); assertEquals("", StringUtils.stripStart("", "")); assertEquals("    ", StringUtils.stripStart("    ", "")); assertEquals(" abc ", StringUtils.stripStart(" abc ", "")); assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, "")); // " " stripStart assertEquals(null, StringUtils.stripStart(null, " ")); assertEquals("", StringUtils.stripStart("", " ")); assertEquals("", StringUtils.stripStart("    ", " ")); assertEquals("abc ", StringUtils.stripStart(" abc ", " ")); // "ab" stripStart assertEquals(null, StringUtils.stripStart(null, "ab")); assertEquals("", StringUtils.stripStart("", "ab")); assertEquals("    ", StringUtils.stripStart("    ", "ab")); assertEquals(" abc ", StringUtils.stripStart(" abc ", "ab")); assertEquals("cabab", StringUtils.stripStart("abcabab", "ab")); assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, "")); }
public void testStripEnd_StringString() { // null stripEnd assertEquals(null, StringUtils.stripEnd(null, null)); assertEquals("", StringUtils.stripEnd("", null)); assertEquals("", StringUtils.stripEnd("    ", null)); assertEquals(" abc", StringUtils.stripEnd(" abc ", null)); assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); // "" stripEnd assertEquals(null, StringUtils.stripEnd(null, "")); assertEquals("", StringUtils.stripEnd("", "")); assertEquals("    ", StringUtils.stripEnd("    ", "")); assertEquals(" abc ", StringUtils.stripEnd(" abc ", "")); assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); // " " stripEnd assertEquals(null, StringUtils.stripEnd(null, " ")); assertEquals("", StringUtils.stripEnd("", " ")); assertEquals("", StringUtils.stripEnd("    ", " ")); assertEquals(" abc", StringUtils.stripEnd(" abc ", " ")); // "ab" stripEnd assertEquals(null, StringUtils.stripEnd(null, "ab")); assertEquals("", StringUtils.stripEnd("", "ab")); assertEquals("    ", StringUtils.stripEnd("    ", "ab")); assertEquals(" abc ", StringUtils.stripEnd(" abc ", "ab")); assertEquals("abc", StringUtils.stripEnd("abcabab", "ab")); assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); }
public void testStripAll() { // test stripAll method, merely an array version of the above strip String[] empty = new String[0]; String[] fooSpace = new String[] { " "+FOO+" ", " "+FOO, FOO+" " }; String[] fooDots = new String[] { ".."+FOO+"..", ".."+FOO, FOO+".." }; String[] foo = new String[] { FOO, FOO, FOO }; assertEquals(null, StringUtils.stripAll(null)); assertArrayEquals(empty, StringUtils.stripAll(empty)); assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); assertEquals(null, StringUtils.stripAll(null, null)); assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); }
public void testStripAccents() { if(SystemUtils.isJavaVersionAtLeast(1.6f)) { String cue = "\u00C7\u00FA\u00EA"; assertEquals( "Failed to strip accents from " + cue, "Cue", StringUtils.stripAccents(cue)); String lots = "\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C7\u00C8\u00C9" + "\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D1\u00D2\u00D3" + "\u00D4\u00D5\u00D6\u00D9\u00DA\u00DB\u00DC\u00DD"; assertEquals( "Failed to strip accents from " + lots, "AAAAAACEEEEIIIINOOOOOUUUUY", StringUtils.stripAccents(lots)); assertNull( "Failed null safety", StringUtils.stripAccents(null) ); assertEquals( "Failed empty String", "", StringUtils.stripAccents("") ); assertEquals( "Failed to handle non-accented text", "control", StringUtils.stripAccents("control") ); assertEquals( "Failed to handle easy example", "eclair", StringUtils.stripAccents("\u00E9clair") ); } else { try { StringUtils.stripAccents("string"); fail("Before JDK 1.6, stripAccents is not expected to work"); } catch(UnsupportedOperationException uoe) { assertEquals("The stripAccents(String) method is not supported until Java 1.6", uoe.getMessage()); } } }
public void testSubstring_StringInt() { assertEquals(null, StringUtils.substring(null, 0)); assertEquals("", StringUtils.substring("", 0)); assertEquals("", StringUtils.substring("", 2)); assertEquals("", StringUtils.substring(SENTENCE, 80)); assertEquals(BAZ, StringUtils.substring(SENTENCE, 8)); assertEquals(BAZ, StringUtils.substring(SENTENCE, -3)); assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0)); assertEquals("abc", StringUtils.substring("abc", -4)); assertEquals("abc", StringUtils.substring("abc", -3)); assertEquals("bc", StringUtils.substring("abc", -2)); assertEquals("c", StringUtils.substring("abc", -1)); assertEquals("abc", StringUtils.substring("abc", 0)); assertEquals("bc", StringUtils.substring("abc", 1)); assertEquals("c", StringUtils.substring("abc", 2)); assertEquals("", StringUtils.substring("abc", 3)); assertEquals("", StringUtils.substring("abc", 4)); }
public void testSubstring_StringIntInt() { assertEquals(null, StringUtils.substring(null, 0, 0)); assertEquals(null, StringUtils.substring(null, 1, 2)); assertEquals("", StringUtils.substring("", 0, 0)); assertEquals("", StringUtils.substring("", 1, 2)); assertEquals("", StringUtils.substring("", -2, -1)); assertEquals("", StringUtils.substring(SENTENCE, 8, 6)); assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3)); assertEquals("o", StringUtils.substring(SENTENCE, -9, 3)); assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8)); assertEquals("o", StringUtils.substring(SENTENCE, -9, -8)); assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80)); assertEquals("", StringUtils.substring(SENTENCE, 2, 2)); assertEquals("b",StringUtils.substring("abc", -2, -1)); }
public void testLeft_String() { assertSame(null, StringUtils.left(null, -1)); assertSame(null, StringUtils.left(null, 0)); assertSame(null, StringUtils.left(null, 2)); assertEquals("", StringUtils.left("", -1)); assertEquals("", StringUtils.left("", 0)); assertEquals("", StringUtils.left("", 2)); assertEquals("", StringUtils.left(FOOBAR, -1)); assertEquals("", StringUtils.left(FOOBAR, 0)); assertEquals(FOO, StringUtils.left(FOOBAR, 3)); assertSame(FOOBAR, StringUtils.left(FOOBAR, 80)); }
public void testRight_String() { assertSame(null, StringUtils.right(null, -1)); assertSame(null, StringUtils.right(null, 0)); assertSame(null, StringUtils.right(null, 2)); assertEquals("", StringUtils.right("", -1)); assertEquals("", StringUtils.right("", 0)); assertEquals("", StringUtils.right("", 2)); assertEquals("", StringUtils.right(FOOBAR, -1)); assertEquals("", StringUtils.right(FOOBAR, 0)); assertEquals(BAR, StringUtils.right(FOOBAR, 3)); assertSame(FOOBAR, StringUtils.right(FOOBAR, 80)); }
public void testMid_String() { assertSame(null, StringUtils.mid(null, -1, 0)); assertSame(null, StringUtils.mid(null, 0, -1)); assertSame(null, StringUtils.mid(null, 3, 0)); assertSame(null, StringUtils.mid(null, 3, 2)); assertEquals("", StringUtils.mid("", 0, -1)); assertEquals("", StringUtils.mid("", 0, 0)); assertEquals("", StringUtils.mid("", 0, 2)); assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); }
public void testSubstringBefore_StringString() { assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); assertEquals(null, StringUtils.substringBefore(null, null)); assertEquals(null, StringUtils.substringBefore(null, "")); assertEquals(null, StringUtils.substringBefore(null, "XX")); assertEquals("", StringUtils.substringBefore("", null)); assertEquals("", StringUtils.substringBefore("", "")); assertEquals("", StringUtils.substringBefore("", "XX")); assertEquals("foo", StringUtils.substringBefore("foo", null)); assertEquals("foo", StringUtils.substringBefore("foo", "b")); assertEquals("f", StringUtils.substringBefore("foot", "o")); assertEquals("", StringUtils.substringBefore("abc", "a")); assertEquals("a", StringUtils.substringBefore("abcba", "b")); assertEquals("ab", StringUtils.substringBefore("abc", "c")); assertEquals("", StringUtils.substringBefore("abc", "")); }
public void testSubstringAfter_StringString() { assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); assertEquals(null, StringUtils.substringAfter(null, null)); assertEquals(null, StringUtils.substringAfter(null, "")); assertEquals(null, StringUtils.substringAfter(null, "XX")); assertEquals("", StringUtils.substringAfter("", null)); assertEquals("", StringUtils.substringAfter("", "")); assertEquals("", StringUtils.substringAfter("", "XX")); assertEquals("", StringUtils.substringAfter("foo", null)); assertEquals("ot", StringUtils.substringAfter("foot", "o")); assertEquals("bc", StringUtils.substringAfter("abc", "a")); assertEquals("cba", StringUtils.substringAfter("abcba", "b")); assertEquals("", StringUtils.substringAfter("abc", "c")); assertEquals("abc", StringUtils.substringAfter("abc", "")); assertEquals("", StringUtils.substringAfter("abc", "d")); }
public void testSubstringBeforeLast_StringString() { assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX")); assertEquals(null, StringUtils.substringBeforeLast(null, null)); assertEquals(null, StringUtils.substringBeforeLast(null, "")); assertEquals(null, StringUtils.substringBeforeLast(null, "XX")); assertEquals("", StringUtils.substringBeforeLast("", null)); assertEquals("", StringUtils.substringBeforeLast("", "")); assertEquals("", StringUtils.substringBeforeLast("", "XX")); assertEquals("foo", StringUtils.substringBeforeLast("foo", null)); assertEquals("foo", StringUtils.substringBeforeLast("foo", "b")); assertEquals("fo", StringUtils.substringBeforeLast("foo", "o")); assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d")); assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d")); assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d")); assertEquals("a", StringUtils.substringBeforeLast("abc", "b")); assertEquals("abc ", StringUtils.substringBeforeLast("abc \n", "\n")); assertEquals("a", StringUtils.substringBeforeLast("a", null)); assertEquals("a", StringUtils.substringBeforeLast("a", "")); assertEquals("", StringUtils.substringBeforeLast("a", "a")); }
public void testSubstringAfterLast_StringString() { assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX")); assertEquals(null, StringUtils.substringAfterLast(null, null)); assertEquals(null, StringUtils.substringAfterLast(null, "")); assertEquals(null, StringUtils.substringAfterLast(null, "XX")); assertEquals("", StringUtils.substringAfterLast("", null)); assertEquals("", StringUtils.substringAfterLast("", "")); assertEquals("", StringUtils.substringAfterLast("", "a")); assertEquals("", StringUtils.substringAfterLast("foo", null)); assertEquals("", StringUtils.substringAfterLast("foo", "b")); assertEquals("t", StringUtils.substringAfterLast("foot", "o")); assertEquals("bc", StringUtils.substringAfterLast("abc", "a")); assertEquals("a", StringUtils.substringAfterLast("abcba", "b")); assertEquals("", StringUtils.substringAfterLast("abc", "c")); assertEquals("", StringUtils.substringAfterLast("", "d")); assertEquals("", StringUtils.substringAfterLast("abc", "")); }
public void testSubstringBetween_StringString() { assertEquals(null, StringUtils.substringBetween(null, "tag")); assertEquals("", StringUtils.substringBetween("", "")); assertEquals(null, StringUtils.substringBetween("", "abc")); assertEquals("", StringUtils.substringBetween("  ", " ")); assertEquals(null, StringUtils.substringBetween("abc", null)); assertEquals("", StringUtils.substringBetween("abc", "")); assertEquals(null, StringUtils.substringBetween("abc", "a")); assertEquals("bc", StringUtils.substringBetween("abca", "a")); assertEquals("bc", StringUtils.substringBetween("abcabca", "a")); assertEquals("bar", StringUtils.substringBetween("\nbar\n", "\n")); }
public void testSubstringBetween_StringStringString() { assertEquals(null, StringUtils.substringBetween(null, "", "")); assertEquals(null, StringUtils.substringBetween("", null, "")); assertEquals(null, StringUtils.substringBetween("", "", null)); assertEquals("", StringUtils.substringBetween("", "", "")); assertEquals("", StringUtils.substringBetween("foo", "", "")); assertEquals(null, StringUtils.substringBetween("foo", "", "]")); assertEquals(null, StringUtils.substringBetween("foo", "[", "]")); assertEquals("", StringUtils.substringBetween("  ", " ", " ")); assertEquals("bar", StringUtils.substringBetween("<foo>bar</foo>", "<foo>", "</foo>") ); }
public void testSubstringsBetween_StringStringString() { String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); assertEquals(3, results.length); assertEquals("one", results[0]); assertEquals("two", results[1]); assertEquals("three", results[2]); results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); assertEquals(2, results.length); assertEquals("one", results[0]); assertEquals("two", results[1]); results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); assertEquals(2, results.length); assertEquals("one", results[0]); assertEquals("two", results[1]); results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); assertEquals(1, results.length); assertEquals("one", results[0]); results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); assertEquals(1, results.length); assertEquals("three", results[0]); // 'ab hello ba' will match, but 'ab non ba' won't // this is because the 'a' is shared between the two and can't be matched twice results = StringUtils.substringsBetween("aabhellobabnonba", "ab", "ba"); assertEquals(1, results.length); assertEquals("hello", results[0]); results = StringUtils.substringsBetween("one, two, three", "[", "]"); assertNull(results); results = StringUtils.substringsBetween("[one, two, three", "[", "]"); assertNull(results); results = StringUtils.substringsBetween("one, two, three]", "[", "]"); assertNull(results); results = StringUtils.substringsBetween("[one], [two], [three]", "[", null); assertNull(results); results = StringUtils.substringsBetween("[one], [two], [three]", null, "]"); assertNull(results); results = StringUtils.substringsBetween("[one], [two], [three]", "", ""); assertNull(results); results = StringUtils.substringsBetween(null, "[", "]"); assertNull(results); results = StringUtils.substringsBetween("", "[", "]"); assertEquals(0, results.length); }
public void testCountMatches_String() { assertEquals(0, StringUtils.countMatches(null, null)); assertEquals(0, StringUtils.countMatches("blah", null)); assertEquals(0, StringUtils.countMatches(null, "DD")); assertEquals(0, StringUtils.countMatches("x", "")); assertEquals(0, StringUtils.countMatches("", "")); assertEquals(3, StringUtils.countMatches("one long someone sentence of one", "one")); assertEquals(0, StringUtils.countMatches("one long someone sentence of one", "two")); assertEquals(4, StringUtils.countMatches("oooooooooooo", "ooo")); }
public void testEquals() { assertEquals(true, StringUtils.equals(null, null)); assertEquals(true, StringUtils.equals(FOO, FOO)); assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); assertEquals(false, StringUtils.equals(FOO, BAR)); assertEquals(false, StringUtils.equals(FOO, null)); assertEquals(false, StringUtils.equals(null, FOO)); }
public void testEqualsIgnoreCase() { assertEquals(true, StringUtils.equalsIgnoreCase(null, null)); assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO)); assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' }))); assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' }))); assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR)); assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null)); assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO)); }
public void testIndexOf_char() { assertEquals(-1, StringUtils.indexOf(null, ' ')); assertEquals(-1, StringUtils.indexOf("", ' ')); assertEquals(0, StringUtils.indexOf("aabaabaa", 'a')); assertEquals(2, StringUtils.indexOf("aabaabaa", 'b')); }
public void testIndexOf_charInt() { assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); assertEquals(-1, StringUtils.indexOf("", ' ', 0)); assertEquals(-1, StringUtils.indexOf("", ' ', -1)); assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); }
public void testIndexOf_String() { assertEquals(-1, StringUtils.indexOf(null, null)); assertEquals(-1, StringUtils.indexOf("", null)); assertEquals(0, StringUtils.indexOf("", "")); assertEquals(0, StringUtils.indexOf("aabaabaa", "a")); assertEquals(2, StringUtils.indexOf("aabaabaa", "b")); assertEquals(1, StringUtils.indexOf("aabaabaa", "ab")); assertEquals(0, StringUtils.indexOf("aabaabaa", "")); }
public void testIndexOfIgnoreCase_String() { assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); }
public void testIndexOfIgnoreCase_StringInt() { assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", -1)); assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0)); assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 1)); assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 2)); assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 3)); assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 4)); assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 5)); assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 6)); assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 7)); assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 8)); assertEquals(1, StringUtils.indexOfIgnoreCase("aab", "AB", 1)); assertEquals(5, StringUtils.indexOfIgnoreCase("aabaabaa", "", 5)); assertEquals(-1, StringUtils.indexOfIgnoreCase("ab", "AAB", 0)); assertEquals(-1, StringUtils.indexOfIgnoreCase("aab", "AAB", 1)); }
public void testOrdinalIndexOf() { assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); }
public void testIndexOf_StringInt() { assertEquals(-1, StringUtils.indexOf(null, null, 0)); assertEquals(-1, StringUtils.indexOf(null, null, -1)); assertEquals(-1, StringUtils.indexOf(null, "", 0)); assertEquals(-1, StringUtils.indexOf(null, "", -1)); assertEquals(-1, StringUtils.indexOf("", null, 0)); assertEquals(-1, StringUtils.indexOf("", null, -1)); assertEquals(0, StringUtils.indexOf("", "", 0)); assertEquals(0, StringUtils.indexOf("", "", -1)); assertEquals(0, StringUtils.indexOf("", "", 9)); assertEquals(0, StringUtils.indexOf("abc", "", 0)); assertEquals(0, StringUtils.indexOf("abc", "", -1)); assertEquals(3, StringUtils.indexOf("abc", "", 9)); assertEquals(3, StringUtils.indexOf("abc", "", 3)); assertEquals(0, StringUtils.indexOf("aabaabaa", "a", 0)); assertEquals(2, StringUtils.indexOf("aabaabaa", "b", 0)); assertEquals(1, StringUtils.indexOf("aabaabaa", "ab", 0)); assertEquals(5, StringUtils.indexOf("aabaabaa", "b", 3)); assertEquals(-1, StringUtils.indexOf("aabaabaa", "b", 9)); assertEquals(2, StringUtils.indexOf("aabaabaa", "b", -1)); assertEquals(2,StringUtils.indexOf("aabaabaa", "", 2)); }
public void testLastIndexOf_char() { assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); assertEquals(-1, StringUtils.lastIndexOf("", ' ')); assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); }
public void testLastIndexOf_charInt() { assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); }
public void testLastIndexOf_String() { assertEquals(-1, StringUtils.lastIndexOf(null, null)); assertEquals(-1, StringUtils.lastIndexOf("", null)); assertEquals(-1, StringUtils.lastIndexOf("", "a")); assertEquals(0, StringUtils.lastIndexOf("", "")); assertEquals(8, StringUtils.lastIndexOf("aabaabaa", "")); assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a")); assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b")); assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab")); }
public void testLastOrdinalIndexOf() { assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42) ); assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42) ); assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42) ); assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1) ); assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2) ); assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1) ); assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2) ); assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1) ); assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2) ); assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1) ); assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2) ); }
public void testLastIndexOf_StringInt() { assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); assertEquals(0, StringUtils.lastIndexOf("", "", 0)); assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); assertEquals(0, StringUtils.lastIndexOf("", "", 9)); assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); }
public void testLastIndexOfIgnoreCase_String() { assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); }
public void testLastIndexOfIgnoreCase_StringInt() { assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", -1)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, 0)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, -1)); assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 0)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "", -1)); assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 9)); assertEquals(0, StringUtils.lastIndexOfIgnoreCase("abc", "", 0)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("abc", "", -1)); assertEquals(3, StringUtils.lastIndexOfIgnoreCase("abc", "", 9)); assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)); assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)); assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8)); assertEquals(2, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 3)); assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1)); assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)); assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)); assertEquals(1, StringUtils.lastIndexOfIgnoreCase("aab", "AB", 1)); }
public void testContainsChar() { assertEquals(false, StringUtils.contains(null, ' ')); assertEquals(false, StringUtils.contains("", ' ')); assertEquals(false, StringUtils.contains("",null)); assertEquals(false, StringUtils.contains(null,null)); assertEquals(true, StringUtils.contains("abc", 'a')); assertEquals(true, StringUtils.contains("abc", 'b')); assertEquals(true, StringUtils.contains("abc", 'c')); assertEquals(false, StringUtils.contains("abc", 'z')); }
public void testContainsString() { assertEquals(false, StringUtils.contains(null, null)); assertEquals(false, StringUtils.contains(null, "")); assertEquals(false, StringUtils.contains(null, "a")); assertEquals(false, StringUtils.contains("", null)); assertEquals(true, StringUtils.contains("", "")); assertEquals(false, StringUtils.contains("", "a")); assertEquals(true, StringUtils.contains("abc", "a")); assertEquals(true, StringUtils.contains("abc", "b")); assertEquals(true, StringUtils.contains("abc", "c")); assertEquals(true, StringUtils.contains("abc", "abc")); assertEquals(false, StringUtils.contains("abc", "z")); }
public void testContainsIgnoreCase_StringString() { assertFalse(StringUtils.containsIgnoreCase(null, null)); // Null tests assertFalse(StringUtils.containsIgnoreCase(null, "")); assertFalse(StringUtils.containsIgnoreCase(null, "a")); assertFalse(StringUtils.containsIgnoreCase(null, "abc")); assertFalse(StringUtils.containsIgnoreCase("", null)); assertFalse(StringUtils.containsIgnoreCase("a", null)); assertFalse(StringUtils.containsIgnoreCase("abc", null)); // Match len = 0 assertTrue(StringUtils.containsIgnoreCase("", "")); assertTrue(StringUtils.containsIgnoreCase("a", "")); assertTrue(StringUtils.containsIgnoreCase("abc", "")); // Match len = 1 assertFalse(StringUtils.containsIgnoreCase("", "a")); assertTrue(StringUtils.containsIgnoreCase("a", "a")); assertTrue(StringUtils.containsIgnoreCase("abc", "a")); assertFalse(StringUtils.containsIgnoreCase("", "A")); assertTrue(StringUtils.containsIgnoreCase("a", "A")); assertTrue(StringUtils.containsIgnoreCase("abc", "A")); // Match len > 1 assertFalse(StringUtils.containsIgnoreCase("", "abc")); assertFalse(StringUtils.containsIgnoreCase("a", "abc")); assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); assertFalse(StringUtils.containsIgnoreCase("", "ABC")); assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); }
public void testContainsIgnoreCase_LocaleIndependence() { Locale orig = Locale.getDefault(); Locale[] locales = { Locale.ENGLISH, new Locale("tr"), Locale.getDefault() }; String[][] tdata = { { "i", "I" }, { "I", "i" }, { "\u03C2", "\u03C3" }, { "\u03A3", "\u03C2" }, { "\u03A3", "\u03C3" }, }; String[][] fdata = { { "\u00DF", "SS" }, }; try { for (int i = 0; i < locales.length; i++) { Locale.setDefault(locales[i]); for (int j = 0; j < tdata.length; j++) { assertTrue(Locale.getDefault() + ": " + j + " " + tdata[j][0] + " " + tdata[j][1], StringUtils .containsIgnoreCase(tdata[j][0], tdata[j][1])); } for (int j = 0; j < fdata.length; j++) { assertFalse(Locale.getDefault() + ": " + j + " " + fdata[j][0] + " " + fdata[j][1], StringUtils .containsIgnoreCase(fdata[j][0], fdata[j][1])); } } } finally { Locale.setDefault(orig); } }
public void testIndexOfAny_StringStringarray() { assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); assertEquals(-1, StringUtils.indexOfAny("", new String[0])); assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"})); assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""})); assertEquals(0, StringUtils.indexOfAny("", new String[] {""})); assertEquals(-1, StringUtils.indexOfAny("", new String[] {"a"})); assertEquals(-1, StringUtils.indexOfAny("", new String[] {null})); assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null})); assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null})); }
public void testLastIndexOfAny_StringStringarray() { assertEquals(-1, StringUtils.lastIndexOfAny(null, null)); assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null)); assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0])); assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0])); assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0])); assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"})); assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""})); assertEquals(0, StringUtils.lastIndexOfAny("", new String[] {""})); assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {"a"})); assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {null})); assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null})); assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null})); }
public void testIndexOfAny_StringChararray() { assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null)); assertEquals(-1, StringUtils.indexOfAny(null, new char[0])); assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'})); assertEquals(-1, StringUtils.indexOfAny("", (char[]) null)); assertEquals(-1, StringUtils.indexOfAny("", new char[0])); assertEquals(-1, StringUtils.indexOfAny("", new char[] {'a','b'})); assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (char[]) null)); assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", new char[0])); assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", new char[] {'z','a'})); assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", new char[] {'b','y'})); assertEquals(-1, StringUtils.indexOfAny("ab", new char[] {'z'})); }
public void testIndexOfAny_StringString() { assertEquals(-1, StringUtils.indexOfAny(null, (String) null)); assertEquals(-1, StringUtils.indexOfAny(null, "")); assertEquals(-1, StringUtils.indexOfAny(null, "ab")); assertEquals(-1, StringUtils.indexOfAny("", (String) null)); assertEquals(-1, StringUtils.indexOfAny("", "")); assertEquals(-1, StringUtils.indexOfAny("", "ab")); assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null)); assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", "")); assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za")); assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by")); assertEquals(-1, StringUtils.indexOfAny("ab", "z")); }
public void testContainsAny_StringChararray() { assertFalse(StringUtils.containsAny(null, (char[]) null)); assertFalse(StringUtils.containsAny(null, new char[0])); assertFalse(StringUtils.containsAny(null, new char[] {'a','b'})); assertFalse(StringUtils.containsAny("", (char[]) null)); assertFalse(StringUtils.containsAny("", new char[0])); assertFalse(StringUtils.containsAny("", new char[] {'a','b'})); assertFalse(StringUtils.containsAny("zzabyycdxx", (char[]) null)); assertFalse(StringUtils.containsAny("zzabyycdxx", new char[0])); assertTrue(StringUtils.containsAny("zzabyycdxx", new char[] {'z','a'})); assertTrue(StringUtils.containsAny("zzabyycdxx", new char[] {'b','y'})); assertFalse(StringUtils.containsAny("ab", new char[] {'z'})); }
public void testContainsAny_StringString() { assertFalse(StringUtils.containsAny(null, (String) null)); assertFalse(StringUtils.containsAny(null, "")); assertFalse(StringUtils.containsAny(null, "ab")); assertFalse(StringUtils.containsAny("", (String) null)); assertFalse(StringUtils.containsAny("", "")); assertFalse(StringUtils.containsAny("", "ab")); assertFalse(StringUtils.containsAny("zzabyycdxx", (String) null)); assertFalse(StringUtils.containsAny("zzabyycdxx", "")); assertTrue(StringUtils.containsAny("zzabyycdxx", "za")); assertTrue(StringUtils.containsAny("zzabyycdxx", "by")); assertFalse(StringUtils.containsAny("ab", "z")); }
public void testIndexOfAnyBut_StringChararray() { assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null)); assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0])); assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'})); assertEquals(-1, StringUtils.indexOfAnyBut("", (char[]) null)); assertEquals(-1, StringUtils.indexOfAnyBut("", new char[0])); assertEquals(-1, StringUtils.indexOfAnyBut("", new char[] {'a','b'})); assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (char[]) null)); assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", new char[0])); assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {'z','a'})); assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {'b','y'})); assertEquals(0, StringUtils.indexOfAnyBut("ab", new char[] {'z'})); }
public void testIndexOfAnyBut_StringString() { assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null)); assertEquals(-1, StringUtils.indexOfAnyBut(null, "")); assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab")); assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null)); assertEquals(-1, StringUtils.indexOfAnyBut("", "")); assertEquals(-1, StringUtils.indexOfAnyBut("", "ab")); assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null)); assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", "")); assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za")); assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by")); assertEquals(0, StringUtils.indexOfAnyBut("ab", "z")); }
public void testContainsOnly_String() { String str1 = "a"; String str2 = "b"; String str3 = "ab"; String chars1= "b"; String chars2= "a"; String chars3= "ab"; assertEquals(false, StringUtils.containsOnly(null, (String) null)); assertEquals(false, StringUtils.containsOnly("", (String) null)); assertEquals(false, StringUtils.containsOnly(null, "")); assertEquals(false, StringUtils.containsOnly(str1, "")); assertEquals(true, StringUtils.containsOnly("", "")); assertEquals(true, StringUtils.containsOnly("", chars1)); assertEquals(false, StringUtils.containsOnly(str1, chars1)); assertEquals(true, StringUtils.containsOnly(str1, chars2)); assertEquals(true, StringUtils.containsOnly(str1, chars3)); assertEquals(true, StringUtils.containsOnly(str2, chars1)); assertEquals(false, StringUtils.containsOnly(str2, chars2)); assertEquals(true, StringUtils.containsOnly(str2, chars3)); assertEquals(false, StringUtils.containsOnly(str3, chars1)); assertEquals(false, StringUtils.containsOnly(str3, chars2)); assertEquals(true, StringUtils.containsOnly(str3, chars3)); }
public void testContainsOnly_Chararray() { String str1 = "a"; String str2 = "b"; String str3 = "ab"; char[] chars1= {'b'}; char[] chars2= {'a'}; char[] chars3= {'a', 'b'}; char[] emptyChars = new char[0]; assertEquals(false, StringUtils.containsOnly(null, (char[]) null)); assertEquals(false, StringUtils.containsOnly("", (char[]) null)); assertEquals(false, StringUtils.containsOnly(null, emptyChars)); assertEquals(false, StringUtils.containsOnly(str1, emptyChars)); assertEquals(true, StringUtils.containsOnly("", emptyChars)); assertEquals(true, StringUtils.containsOnly("", chars1)); assertEquals(false, StringUtils.containsOnly(str1, chars1)); assertEquals(true, StringUtils.containsOnly(str1, chars2)); assertEquals(true, StringUtils.containsOnly(str1, chars3)); assertEquals(true, StringUtils.containsOnly(str2, chars1)); assertEquals(false, StringUtils.containsOnly(str2, chars2)); assertEquals(true, StringUtils.containsOnly(str2, chars3)); assertEquals(false, StringUtils.containsOnly(str3, chars1)); assertEquals(false, StringUtils.containsOnly(str3, chars2)); assertEquals(true, StringUtils.containsOnly(str3, chars3)); }
public void testContainsNone_String() { String str1 = "a"; String str2 = "b"; String str3 = "ab."; String chars1= "b"; String chars2= "."; String chars3= "cd"; assertEquals(true, StringUtils.containsNone(null, (String) null)); assertEquals(true, StringUtils.containsNone("", (String) null)); assertEquals(true, StringUtils.containsNone(null, "")); assertEquals(true, StringUtils.containsNone(str1, "")); assertEquals(true, StringUtils.containsNone("", "")); assertEquals(true, StringUtils.containsNone("", chars1)); assertEquals(true, StringUtils.containsNone(str1, chars1)); assertEquals(true, StringUtils.containsNone(str1, chars2)); assertEquals(true, StringUtils.containsNone(str1, chars3)); assertEquals(false, StringUtils.containsNone(str2, chars1)); assertEquals(true, StringUtils.containsNone(str2, chars2)); assertEquals(true, StringUtils.containsNone(str2, chars3)); assertEquals(false, StringUtils.containsNone(str3, chars1)); assertEquals(false, StringUtils.containsNone(str3, chars2)); assertEquals(true, StringUtils.containsNone(str3, chars3)); }
public void testContainsNone_Chararray() { String str1 = "a"; String str2 = "b"; String str3 = "ab."; char[] chars1= {'b'}; char[] chars2= {'.'}; char[] chars3= {'c', 'd'}; char[] emptyChars = new char[0]; assertEquals(true, StringUtils.containsNone(null, (char[]) null)); assertEquals(true, StringUtils.containsNone("", (char[]) null)); assertEquals(true, StringUtils.containsNone(null, emptyChars)); assertEquals(true, StringUtils.containsNone(str1, emptyChars)); assertEquals(true, StringUtils.containsNone("", emptyChars)); assertEquals(true, StringUtils.containsNone("", chars1)); assertEquals(true, StringUtils.containsNone(str1, chars1)); assertEquals(true, StringUtils.containsNone(str1, chars2)); assertEquals(true, StringUtils.containsNone(str1, chars3)); assertEquals(false, StringUtils.containsNone(str2, chars1)); assertEquals(true, StringUtils.containsNone(str2, chars2)); assertEquals(true, StringUtils.containsNone(str2, chars3)); assertEquals(false, StringUtils.containsNone(str3, chars1)); assertEquals(false, StringUtils.containsNone(str3, chars2)); assertEquals(true, StringUtils.containsNone(str3, chars3)); }
public void testContainsStringWithSupplementaryChars() { assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000)); assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001)); assertEquals(true, StringUtils.contains(CharU20000, CharU20000)); assertEquals(false, StringUtils.contains(CharU20000, CharU20001)); }
public void testContainsAnyStringWithSupplementaryChars() { assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000)); assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001)); assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000)); // Sanity check: assertEquals(-1, CharU20000.indexOf(CharU20001)); assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); // Test: assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001)); assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000)); }
public void testContainsAnyCharArrayWithSupplementaryChars() { assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray())); assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray())); assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray())); // Sanity check: assertEquals(-1, CharU20000.indexOf(CharU20001)); assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); // Test: assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray())); assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray())); }
