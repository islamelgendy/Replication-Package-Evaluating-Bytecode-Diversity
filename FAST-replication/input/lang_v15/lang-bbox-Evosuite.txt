public void test00() throws Throwable { Class<String> class0 = String.class; ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); doReturn(class0).when(parameterizedType0).getRawType(); boolean boolean0 = TypeUtils.isAssignable(class0, parameterizedType0); assertTrue(boolean0); }
public void test01() throws Throwable { // Undeclared exception! try { TypeUtils.getTypeArguments((ParameterizedType) null); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // no message in exception (getMessage() returned null) // verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); } }
public void test02() throws Throwable { Class<String> class0 = String.class; ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments(); doReturn((Type) null).when(parameterizedType0).getOwnerType(); doReturn(class0).when(parameterizedType0).getRawType(); Class<Object> class1 = Object.class; Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) parameterizedType0, (Class<?>) class1); assertTrue(map0.isEmpty()); }
public void test03() throws Throwable { TypeUtils typeUtils0 = new TypeUtils(); }
public void test04() throws Throwable { Type[] typeArray0 = new Type[1]; WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); doReturn(typeArray0).when(wildcardType0).getLowerBounds(); doReturn(typeArray0).when(wildcardType0).getUpperBounds(); WildcardType wildcardType1 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); doReturn(typeArray0).when(wildcardType1).getLowerBounds(); doReturn(typeArray0).when(wildcardType1).getUpperBounds(); boolean boolean0 = TypeUtils.isAssignable(wildcardType0, wildcardType1); assertTrue(boolean0); }
public void test05() throws Throwable { Type[] typeArray0 = new Type[0]; WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); doReturn(typeArray0).when(wildcardType0).getLowerBounds(); doReturn(typeArray0).when(wildcardType0).getUpperBounds(); boolean boolean0 = TypeUtils.isInstance(wildcardType0, wildcardType0); assertTrue(boolean0); }
public void test06() throws Throwable { Type type0 = mock(Type.class, new ViolatedAssumptionAnswer()); doReturn((String) null).when(type0).toString(); // Undeclared exception! try { TypeUtils.isInstance(type0, type0); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // found an unhandled type: null // verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); } }
public void test07() throws Throwable { Type[] typeArray0 = new Type[4]; WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); doReturn(typeArray0).when(wildcardType0).getLowerBounds(); doReturn(typeArray0).when(wildcardType0).getUpperBounds(); boolean boolean0 = TypeUtils.isInstance(wildcardType0, wildcardType0); assertFalse(boolean0); }
public void test08() throws Throwable { Type type0 = mock(Type.class, new ViolatedAssumptionAnswer()); doReturn((String) null).when(type0).toString(); Class<String> class0 = String.class; // Undeclared exception! try { TypeUtils.isAssignable(type0, class0); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // found an unhandled type: Mock for Type, hashCode: 682375598 // verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); } }
public void test09() throws Throwable { Class<String> class0 = String.class; ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); doReturn(class0).when(parameterizedType0).getRawType(); boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, class0); assertTrue(boolean0); }
public void test10() throws Throwable { Class<String> class0 = String.class; WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); boolean boolean0 = TypeUtils.isAssignable(wildcardType0, class0); assertFalse(boolean0); }
public void test11() throws Throwable { ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); boolean boolean0 = TypeUtils.isAssignable((Type) null, parameterizedType0); assertTrue(boolean0); }
public void test12() throws Throwable { ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, parameterizedType0); assertTrue(boolean0); }
public void test13() throws Throwable { Class<String> class0 = String.class; ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); doReturn(class0).when(parameterizedType0).getRawType(); boolean boolean0 = TypeUtils.isInstance(class0, parameterizedType0); assertFalse(boolean0); }
public void test14() throws Throwable { WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); boolean boolean0 = TypeUtils.isAssignable((Type) null, wildcardType0); assertTrue(boolean0); }
public void test15() throws Throwable { WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); boolean boolean0 = TypeUtils.isAssignable(wildcardType0, wildcardType0); assertTrue(boolean0); }
public void test16() throws Throwable { Type[] typeArray0 = new Type[0]; WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); doReturn(typeArray0).when(wildcardType0).getUpperBounds(); Class<String> class0 = String.class; Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) wildcardType0, (Class<?>) class0); assertNull(map0); }
public void test17() throws Throwable { Type[] typeArray0 = new Type[9]; WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); doReturn(typeArray0).when(wildcardType0).getUpperBounds(); Class<Object> class0 = Object.class; // Undeclared exception! try { TypeUtils.getTypeArguments((Type) wildcardType0, (Class<?>) class0); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // found an unhandled type: null // verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); } }
public void test18() throws Throwable { Class<String> class0 = String.class; ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); doReturn(class0).when(parameterizedType0).getRawType(); Class<Integer> class1 = Integer.class; Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) parameterizedType0, (Class<?>) class1); assertNull(map0); }
public void test19() throws Throwable { Class<String> class0 = String.class; ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); doReturn(class0, (Type) null).when(parameterizedType0).getRawType(); // Undeclared exception! try { TypeUtils.determineTypeArguments(class0, parameterizedType0); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // Wait... What!? Type of rawType: null // verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); } }
public void test20() throws Throwable { Class<String> class0 = String.class; Class<Object> class1 = Object.class; Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class1); assertTrue(map0.isEmpty()); }
public void test21() throws Throwable { Class<String> class0 = String.class; ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); doReturn(class0).when(parameterizedType0).getRawType(); Class<Object> class1 = Object.class; Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class1, parameterizedType0); assertNull(map0); }
public void test22() throws Throwable { boolean boolean0 = TypeUtils.isInstance((Object) null, (Type) null); assertFalse(boolean0); }
public void test23() throws Throwable { WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); boolean boolean0 = TypeUtils.isInstance((Object) null, wildcardType0); assertTrue(boolean0); }
public void test24() throws Throwable { Class<Object> class0 = Object.class; boolean boolean0 = TypeUtils.isInstance((Object) null, class0); assertTrue(boolean0); }
public void test25() throws Throwable { Class<String> class0 = String.class; Type[] typeArray0 = new Type[4]; typeArray0[1] = (Type) class0; Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0); assertEquals(1, typeArray1.length); }
public void test26() throws Throwable { Class<Object> class0 = Object.class; Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class0); assertNotNull(map0); boolean boolean0 = TypeUtils.typesSatisfyVariables(map0); assertTrue(boolean0); }
public void test27() throws Throwable { ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); doReturn((Type) null).when(parameterizedType0).getRawType(); // Undeclared exception! try { TypeUtils.isInstance(parameterizedType0, parameterizedType0); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // Wait... What!? Type of rawType: null // verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); } }
public void test28() throws Throwable { ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); doReturn((Type) null).when(parameterizedType0).getRawType(); // Undeclared exception! try { TypeUtils.getRawType(parameterizedType0, parameterizedType0); fail("Expecting exception: IllegalStateException"); } catch(IllegalStateException e) { // // Wait... What!? Type of rawType: null // verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); } }
public void test29() throws Throwable { Class<Object> class0 = Object.class; Class<?> class1 = TypeUtils.getRawType(class0, class0); assertFalse(class1.isEnum()); }
public void test30() throws Throwable { WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); Class<?> class0 = TypeUtils.getRawType(wildcardType0, wildcardType0); assertNull(class0); }
public void test31() throws Throwable { // Undeclared exception! try { TypeUtils.getRawType((Type) null, (Type) null); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // unknown type: null // verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); } }
public void test32() throws Throwable { Class<Object> class0 = Object.class; boolean boolean0 = TypeUtils.isArrayType(class0); assertFalse(boolean0); }
public void test33() throws Throwable { boolean boolean0 = TypeUtils.isArrayType((Type) null); assertFalse(boolean0); }
public void test34() throws Throwable { Type type0 = TypeUtils.getArrayComponentType((Type) null); assertNull(type0); }
public void test35() throws Throwable { Class<Object> class0 = Object.class; Type type0 = TypeUtils.getArrayComponentType(class0); assertNull(type0); }
