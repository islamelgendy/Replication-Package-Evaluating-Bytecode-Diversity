public void test1501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1501"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); java.lang.Class<?> wildcardClass8 = complex6.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test1502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1502"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(0.018973359867228756d); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) 9.094947E-13f); org.junit.Assert.assertNotNull(complex3); }
public void test1503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1503"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(5.8774717541114375E-39d); double double2 = complex1.getImaginary(); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test1504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1504"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z(); org.apache.commons.math.complex.Complex complex34 = complex3.subtract(complex33); org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); org.apache.commons.math.complex.Complex complex38 = complex36.exp(); org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38); org.apache.commons.math.complex.Complex complex40 = complex39.sqrt(); double double41 = complex39.getReal(); double double42 = complex39.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2.718281828459045d + "'", double41 == 2.718281828459045d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.5707963267948966d + "'", double42 == 1.5707963267948966d); }
public void test1505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1505"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 10.000001f, number2, false); boolean boolean5 = numberIsTooSmallException4.getBoundIsAllowed(); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException4.getSuppressed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = numberIsTooSmallException4.getContext(); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(throwableArray6); org.junit.Assert.assertNotNull(exceptionContext7); }
public void test1506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1506"); double double1 = org.apache.commons.math.util.FastMath.abs(0.08440610170928502d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.08440610170928502d + "'", double1 == 0.08440610170928502d); }
public void test1507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1507"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); boolean boolean12 = complex10.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19); org.apache.commons.math.complex.Complex complex21 = complex4.subtract(complex19); org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex(9.536747711537457E-7d); org.apache.commons.math.complex.Complex complex24 = complex19.subtract(complex23); org.apache.commons.math.complex.Complex complex25 = complex24.sin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); }
public void test1508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1508"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((-1.5574077246549023d)); org.apache.commons.math.complex.Complex complex2 = complex1.tan(); org.apache.commons.math.complex.ComplexField complexField3 = complex1.getField(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); }
public void test1509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1509"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 0.9376558078861459d); }
public void test1510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1510"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex6 = complex3.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex6); }
public void test1511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1511"); double double2 = org.apache.commons.math.util.FastMath.atan2((double) 3.0562855E-37f, 1.5574077246549023d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.9624183750744705E-37d + "'", double2 == 1.9624183750744705E-37d); }
public void test1512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1512"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); org.apache.commons.math.complex.Complex complex42 = new org.apache.commons.math.complex.Complex(32.0d); org.apache.commons.math.complex.Complex complex43 = complex40.multiply(complex42); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex51 = complex50.cosh(); org.apache.commons.math.complex.Complex complex52 = complex51.sqrt(); boolean boolean53 = complex52.isInfinite(); org.apache.commons.math.complex.Complex complex54 = complex43.add(complex52); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(complex54); }
public void test1513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1513"); double double1 = org.apache.commons.math.util.FastMath.log1p(97.69314718056017d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.592015513234277d + "'", double1 == 4.592015513234277d); }
public void test1514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1514"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex1.subtract((double) 96.99999f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField5 = complex4.getField(); org.apache.commons.math.complex.Complex complex6 = complexField5.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexField5); org.junit.Assert.assertNotNull(complex6); }
public void test1515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1515"); int int1 = org.apache.commons.math.util.FastMath.round((float) '#'); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 35 + "'", int1 == 35); }
public void test1516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1516"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); java.lang.String str2 = complex1.toString(); org.apache.commons.math.complex.Complex complex3 = complex1.conjugate(); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(1.0, 0.0)" + "'", str2, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex3); }
public void test1517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1517"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); java.lang.String str18 = complex17.toString(); org.apache.commons.math.complex.Complex complex19 = complex17.log(); org.apache.commons.math.complex.Complex complex20 = complex17.negate(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 6, (double) (short) -1); org.apache.commons.math.complex.Complex complex24 = complex23.conjugate(); org.apache.commons.math.complex.Complex complex25 = complex23.cosh(); org.apache.commons.math.complex.Complex complex26 = complex20.subtract(complex25); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(NaN, NaN)" + "'", str18, "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); }
public void test1518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1518"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex4.getImaginary(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf(1.557407724654902d, 3.5553480614894135d); boolean boolean11 = complex10.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex4.add(complex10); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.557407724654902d + "'", double7 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test1519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1519"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException7 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext8 = numberIsTooSmallException7.getContext(); java.lang.Throwable[] throwableArray9 = numberIsTooSmallException7.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException10 = new org.apache.commons.math.exception.NullArgumentException(localizable3, (java.lang.Object[]) throwableArray9); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) throwableArray9); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) throwableArray9); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray9); org.junit.Assert.assertNotNull(exceptionContext8); org.junit.Assert.assertNotNull(throwableArray9); }
public void test1520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1520"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(Double.POSITIVE_INFINITY); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.subtract((double) 96.99999f); org.apache.commons.math.complex.Complex complex7 = complex1.add(complex6); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); double double17 = complex16.getArgument(); org.apache.commons.math.complex.Complex complex18 = complex9.subtract(complex16); org.apache.commons.math.complex.Complex complex19 = complex16.reciprocal(); org.apache.commons.math.complex.Complex complex21 = complex19.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex22 = complex19.sin(); org.apache.commons.math.complex.Complex complex23 = complex19.sinh(); org.apache.commons.math.complex.Complex complex25 = complex19.pow((double) (short) 100); java.lang.String str26 = complex25.toString(); org.apache.commons.math.complex.Complex complex27 = complex25.log(); org.apache.commons.math.complex.Complex complex28 = complex25.negate(); boolean boolean29 = complex25.isInfinite(); org.apache.commons.math.complex.Complex complex30 = complex1.add(complex25); org.apache.commons.math.complex.Complex complex31 = complex1.log(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(NaN, NaN)" + "'", str26, "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); }
public void test1521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1521"); long long2 = org.apache.commons.math.util.FastMath.min(0L, (long) (-20)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-20L) + "'", long2 == (-20L)); }
public void test1522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1522"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(1.5858074381301621d); org.junit.Assert.assertNotNull(complex1); }
public void test1523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1523"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 35.0f, (java.lang.Number) 14, false); }
public void test1524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1524"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((-15.653559774527022d)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex10 = complex6.add(0.8623188722876839d); org.apache.commons.math.complex.Complex complex11 = complex10.sin(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); boolean boolean17 = complex15.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); double double22 = complex21.getReal(); org.apache.commons.math.complex.Complex complex24 = complex21.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex25 = complex15.multiply(complex24); org.apache.commons.math.complex.Complex complex26 = complex25.cosh(); org.apache.commons.math.complex.Complex complex27 = complex25.atan(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex29.subtract(complex36); org.apache.commons.math.complex.Complex complex39 = complex36.reciprocal(); org.apache.commons.math.complex.Complex complex41 = complex39.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex42 = complex39.sin(); org.apache.commons.math.complex.Complex complex43 = complex25.pow(complex42); double double44 = complex43.getImaginary(); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex48 = complex47.log(); org.apache.commons.math.complex.Complex complex49 = complex47.tanh(); org.apache.commons.math.complex.Complex complex50 = complex49.sqrt1z(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex52 = complex49.add(complex51); org.apache.commons.math.complex.Complex complex53 = complex49.conjugate(); org.apache.commons.math.complex.Complex complex54 = complex49.tan(); org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex56 = complex54.add(complex55); org.apache.commons.math.complex.Complex complex57 = complex55.exp(); org.apache.commons.math.complex.Complex complex58 = complex43.subtract(complex57); org.apache.commons.math.complex.Complex complex59 = complex10.multiply(complex43); org.apache.commons.math.complex.Complex complex60 = complex1.add(complex43); java.util.List<org.apache.commons.math.complex.Complex> complexList62 = complex43.nthRoot(1); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue(Double.isNaN(double44)); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complexList62); }
public void test1525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1525"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex3.subtract(70.7906245758041d); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); org.apache.commons.math.complex.Complex complex10 = complex9.reciprocal(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex10.multiply(complex15); java.lang.Object obj17 = complex16.readResolve(); org.apache.commons.math.complex.Complex complex18 = complex16.sqrt(); org.apache.commons.math.complex.Complex complex19 = complex16.reciprocal(); org.apache.commons.math.complex.Complex complex21 = complex16.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex28 = complex26.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex29 = complex28.tanh(); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex31 = complex16.subtract(complex29); org.apache.commons.math.complex.Complex complex32 = complex29.exp(); org.apache.commons.math.complex.Complex complex33 = complex5.add(complex29); boolean boolean35 = complex33.equals((java.lang.Object) 4.67232872835526d); org.apache.commons.math.complex.Complex complex36 = complex33.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(complex36); }
public void test1526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1526"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(0.20204961826887402d, (double) 3); double double3 = complex2.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d); }
public void test1527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1527"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); boolean boolean29 = complex27.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); double double34 = complex33.getReal(); org.apache.commons.math.complex.Complex complex36 = complex33.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex37 = complex27.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex37.multiply((int) (byte) 100); org.apache.commons.math.complex.Complex complex40 = complex22.subtract(complex39); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) '#'); double double43 = complex40.getArgument(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue(Double.isNaN(double43)); }
public void test1528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1528"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); java.util.List<org.apache.commons.math.complex.Complex> complexList36 = complex34.nthRoot(3); java.lang.Object obj37 = complex34.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complexList36); org.junit.Assert.assertNotNull(obj37); org.junit.Assert.assertEquals(obj37.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "(NaN, NaN)"); }
public void test1529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1529"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.9073486E-6f); org.apache.commons.math.complex.Complex complex3 = complex1.pow(1.5515679276951895d); org.apache.commons.math.complex.Complex complex5 = complex3.subtract((-1.5842348303662568d)); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex21 = complex17.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex22 = complex21.sinh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex25 = complex24.sqrt(); org.apache.commons.math.complex.Complex complex26 = complex24.sin(); org.apache.commons.math.complex.Complex complex27 = complex5.add(complex26); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex29.subtract(complex36); org.apache.commons.math.complex.Complex complex39 = complex36.reciprocal(); org.apache.commons.math.complex.Complex complex41 = complex39.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex43 = complex39.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex44 = complex43.sinh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex52 = complex51.sqrt1z(); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex54 = complex51.add(complex53); org.apache.commons.math.complex.Complex complex55 = complex44.add(complex51); org.apache.commons.math.complex.Complex complex57 = complex55.pow(100.0d); org.apache.commons.math.complex.Complex complex60 = complex55.createComplex(11013.232874703393d, 0.0d); org.apache.commons.math.complex.Complex complex61 = complex26.multiply(complex55); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); }
public void test1530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1530"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (-4L), (java.lang.Number) 8.658293401173658E24d, true); }
public void test1531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1531"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(0.9999876561221204d); }
public void test1532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1532"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); boolean boolean14 = complex13.isNaN(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex16.subtract(complex23); org.apache.commons.math.complex.Complex complex26 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex28 = complex26.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex29 = complex26.sin(); org.apache.commons.math.complex.Complex complex30 = complex29.acos(); org.apache.commons.math.complex.Complex complex32 = complex30.pow(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex33 = complex32.tan(); org.apache.commons.math.complex.Complex complex34 = complex13.add(complex32); org.apache.commons.math.complex.Complex complex35 = complex34.exp(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); }
public void test1533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1533"); long long2 = org.apache.commons.math.util.FastMath.max((long) '4', 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 52L + "'", long2 == 52L); }
public void test1534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1534"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex8.subtract(3.584289651861328d); java.lang.Object obj16 = complex8.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(obj16); org.junit.Assert.assertEquals(obj16.toString(), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "(0.0, 1.557407724654902)"); }
public void test1535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1535"); double double1 = org.apache.commons.math.util.FastMath.signum((-0.519837923761782d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test1536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1536"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex12 = complex9.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1537"); float float1 = org.apache.commons.math.util.FastMath.signum(8.239729E30f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1538"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4095.718425316136d, (double) 96.99999f); org.apache.commons.math.complex.Complex complex4 = complex2.multiply(0); boolean boolean5 = complex2.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test1539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1539"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable1, (java.lang.Number) 97.0f, (java.lang.Number) 1.1920929E-7f, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException5.getContext(); java.lang.Throwable[] throwableArray7 = numberIsTooSmallException5.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray7); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(throwableArray7); }
public void test1540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1540"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z(); org.apache.commons.math.complex.Complex complex34 = complex3.subtract(complex33); org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); org.apache.commons.math.complex.Complex complex38 = complex36.exp(); org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38); org.apache.commons.math.complex.Complex complex40 = complex39.sqrt(); org.apache.commons.math.complex.Complex complex41 = complex40.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); }
public void test1541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1541"); double double1 = org.apache.commons.math.util.FastMath.toDegrees(1.0232274785475506d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 58.62661600258763d + "'", double1 == 58.62661600258763d); }
public void test1542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1542"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.atan(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex29 = complex26.add(complex28); org.apache.commons.math.complex.Complex complex30 = complex26.conjugate(); double double31 = complex30.getArgument(); org.apache.commons.math.complex.Complex complex32 = complex30.asin(); org.apache.commons.math.complex.Complex complex33 = complex21.subtract(complex32); org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.apache.commons.math.complex.Complex complex37 = complex33.subtract(complex35); org.apache.commons.math.complex.Complex complex38 = complex37.sqrt(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.5707963267948966d) + "'", double31 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test1543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1543"); float float1 = org.apache.commons.math.util.FastMath.signum((-18.999998f)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1.0f) + "'", float1 == (-1.0f)); }
public void test1544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1544"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(44.185235654058175d, 3.469446951953614E-18d); org.junit.Assert.assertNotNull(complex2); }
public void test1545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1545"); double double1 = org.apache.commons.math.util.FastMath.log1p(1.5707963267948966d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9442157056960554d + "'", double1 == 0.9442157056960554d); }
public void test1546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1546"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); java.lang.String str18 = complex17.toString(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf(4.065529698164491d, (-57.29577951308232d)); org.apache.commons.math.complex.Complex complex23 = complex21.multiply(0.8813735870195429d); org.apache.commons.math.complex.Complex complex24 = complex23.cos(); org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(NaN, NaN)" + "'", str18, "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); }
public void test1547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1547"); int int2 = org.apache.commons.math.util.FastMath.max(0, 32); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32); }
public void test1548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1548"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z(); org.apache.commons.math.complex.Complex complex34 = complex3.subtract(complex33); org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); org.apache.commons.math.complex.Complex complex38 = complex36.exp(); org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex34.subtract(4.592015513234277d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); }
public void test1549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1549"); double double1 = org.apache.commons.math.util.FastMath.cbrt((-11.894158187830156d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-2.2826775629888583d) + "'", double1 == (-2.2826775629888583d)); }
public void test1550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1550"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.atan(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex29 = complex26.add(complex28); org.apache.commons.math.complex.Complex complex30 = complex26.conjugate(); double double31 = complex30.getArgument(); org.apache.commons.math.complex.Complex complex32 = complex30.asin(); org.apache.commons.math.complex.Complex complex33 = complex21.subtract(complex32); org.apache.commons.math.complex.Complex complex34 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex35 = complex33.multiply(complex34); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.5707963267948966d) + "'", double31 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); }
public void test1551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1551"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex16 = complex11.cos(); org.apache.commons.math.complex.Complex complex17 = complex16.negate(); org.apache.commons.math.complex.Complex complex18 = complex16.asin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1552"); float float1 = org.apache.commons.math.util.FastMath.abs(4.5474735E-13f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 4.5474735E-13f + "'", float1 == 4.5474735E-13f); }
public void test1553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1553"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); org.apache.commons.math.complex.Complex complex39 = complex38.reciprocal(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z(); org.apache.commons.math.complex.Complex complex46 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex55 = complex53.multiply((int) (short) 0); double double56 = complex55.getArgument(); org.apache.commons.math.complex.Complex complex57 = complex48.subtract(complex55); org.apache.commons.math.complex.Complex complex58 = complex55.reciprocal(); org.apache.commons.math.complex.Complex complex59 = complex46.add(complex55); org.apache.commons.math.complex.Complex complex60 = complex33.add(complex46); org.apache.commons.math.complex.Complex complex63 = complex60.createComplex(0.0d, 27.308232836016487d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); }
public void test1554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1554"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test1555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1555"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0f, (java.lang.Number) 2.0d, false); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException5.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) throwableArray6); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray6); org.apache.commons.math.exception.util.ExceptionContext exceptionContext9 = mathIllegalArgumentException8.getContext(); // The following exception was thrown during execution in test generation try { java.lang.String str10 = mathIllegalArgumentException8.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(throwableArray6); org.junit.Assert.assertNotNull(exceptionContext9); }
public void test1556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1556"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 6); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(5729.578388440339d); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex8.subtract(70.7906245758041d); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.divide((double) 0.0f); org.apache.commons.math.complex.Complex complex18 = complex10.pow(complex17); org.apache.commons.math.complex.Complex complex19 = complex10.exp(); org.apache.commons.math.complex.Complex complex20 = complex1.subtract(complex10); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex22.subtract(complex29); org.apache.commons.math.complex.Complex complex32 = complex29.reciprocal(); org.apache.commons.math.complex.Complex complex34 = complex32.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex35 = complex32.sin(); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.apache.commons.math.complex.Complex complex37 = complex35.reciprocal(); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex41 = complex40.log(); org.apache.commons.math.complex.Complex complex42 = complex40.tanh(); org.apache.commons.math.complex.Complex complex44 = complex42.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex45 = complex44.cosh(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.negate(); org.apache.commons.math.complex.Complex complex50 = complex44.divide(complex48); org.apache.commons.math.complex.Complex complex52 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex53 = complex37.divide(complex44); org.apache.commons.math.complex.Complex complex54 = complex37.negate(); org.apache.commons.math.complex.Complex complex55 = complex1.multiply(complex37); org.apache.commons.math.complex.Complex complex58 = complex55.createComplex((double) 97, (double) 57L); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex58); }
public void test1557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1557"); double double1 = org.apache.commons.math.util.FastMath.ulp(22025.465794806754d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.637978807091713E-12d + "'", double1 == 3.637978807091713E-12d); }
public void test1558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1558"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); java.lang.Object obj4 = complex1.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(obj4); org.junit.Assert.assertEquals(obj4.toString(), "(1.0, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "(1.0, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "(1.0, 0.0)"); }
public void test1559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1559"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable2, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); boolean boolean7 = numberIsTooSmallException6.getBoundIsAllowed(); java.lang.Throwable[] throwableArray8 = numberIsTooSmallException6.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) throwableArray8); org.apache.commons.math.exception.NullArgumentException nullArgumentException10 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray8); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(throwableArray8); }
public void test1560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1560"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.Complex complex6 = complex2.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex8.subtract(complex15); double double18 = complex8.abs(); org.apache.commons.math.complex.Complex complex20 = complex8.multiply(32.0d); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex23 = complex6.add(complex22); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double28 = complex27.abs(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex32 = complex31.log(); org.apache.commons.math.complex.Complex complex33 = complex31.tanh(); org.apache.commons.math.complex.Complex complex35 = complex33.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex36 = complex27.divide(complex33); org.apache.commons.math.complex.Complex complex37 = complex24.pow(complex36); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); }
public void test1561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1561"); double double1 = org.apache.commons.math.util.FastMath.nextUp(5.7089790540118303E18d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.7089790540118313E18d + "'", double1 == 5.7089790540118313E18d); }
public void test1562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1562"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 3.056286E-37f); }
public void test1563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1563"); float float2 = org.apache.commons.math.util.FastMath.scalb((float) 10L, 2); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 40.0f + "'", float2 == 40.0f); }
public void test1564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1564"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.divide((double) 0.0f); org.apache.commons.math.complex.Complex complex7 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex8 = complex7.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test1565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1565"); double double1 = org.apache.commons.math.util.FastMath.cosh(1.3051531393776674d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.9796924391966007d + "'", double1 == 1.9796924391966007d); }
public void test1566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1566"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); boolean boolean12 = complex10.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19); org.apache.commons.math.complex.Complex complex21 = complex4.subtract(complex19); double double22 = complex21.getArgument(); double double23 = complex21.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.5707963267948966d + "'", double22 == 1.5707963267948966d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.9341765544273152d + "'", double23 == 0.9341765544273152d); }
public void test1567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1567"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex4 = complex3.log(); org.apache.commons.math.complex.Complex complex5 = complex3.tanh(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex8 = complex5.add(complex7); org.apache.commons.math.complex.Complex complex9 = complex5.conjugate(); double double10 = complex9.getArgument(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); double double20 = complex19.getArgument(); org.apache.commons.math.complex.Complex complex21 = complex12.subtract(complex19); org.apache.commons.math.complex.Complex complex22 = complex19.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex22.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex25 = complex22.sin(); org.apache.commons.math.complex.Complex complex26 = complex22.sinh(); org.apache.commons.math.complex.Complex complex28 = complex22.pow((double) (short) 100); java.lang.String str29 = complex28.toString(); org.apache.commons.math.complex.Complex complex30 = complex28.log(); java.lang.Object[] objArray32 = new java.lang.Object[] { double10, complex30, (-794.0f) }; org.apache.commons.math.exception.NullArgumentException nullArgumentException33 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray32); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.5707963267948966d) + "'", double10 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(NaN, NaN)" + "'", str29, "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(objArray32); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[-1.5707963267948966, (NaN, NaN), -794.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[-1.5707963267948966, (NaN, NaN), -794.0]"); }
public void test1568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1568"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(0.0f, 7276.563998161455d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.4E-45f + "'", float2 == 1.4E-45f); }
public void test1569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1569"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 6, (double) 7.6293945E-6f); org.apache.commons.math.complex.Complex complex11 = complex7.divide(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1570"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex10.sinh(); org.apache.commons.math.complex.Complex complex12 = complex11.tanh(); java.lang.String str13 = complex12.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(-0.39395350837755927, -0.0)" + "'", str13, "(-0.39395350837755927, -0.0)"); }
public void test1571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1571"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.atan(); org.apache.commons.math.complex.Complex complex22 = complex4.atan(); org.apache.commons.math.complex.Complex complex25 = new org.apache.commons.math.complex.Complex(6.657902725181949E-8d, 1.2599210498948732d); org.apache.commons.math.complex.Complex complex26 = complex4.pow(complex25); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField27 = complex4.getField(); org.apache.commons.math.complex.Complex complex28 = complexField27.getOne(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complexField27); org.junit.Assert.assertNotNull(complex28); }
public void test1572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1572"); float float1 = org.apache.commons.math.util.FastMath.abs((-57.0f)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 57.0f + "'", float1 == 57.0f); }
public void test1573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1573"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex2.sin(); boolean boolean12 = complex2.isInfinite(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex16.reciprocal(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex23 = complex22.sqrt1z(); org.apache.commons.math.complex.Complex complex24 = complex16.divide(complex22); org.apache.commons.math.complex.Complex complex25 = complex24.negate(); org.apache.commons.math.complex.Complex complex26 = complex2.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex2.conjugate(); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); }
public void test1574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1574"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.tanh(); org.apache.commons.math.complex.Complex complex12 = complex4.cos(); org.apache.commons.math.complex.Complex complex14 = complex4.pow((double) (byte) -1); org.apache.commons.math.complex.Complex complex16 = complex14.multiply(52); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); }
public void test1575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1575"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); java.lang.Object obj8 = complex6.readResolve(); double double9 = complex6.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(obj8); org.junit.Assert.assertEquals(obj8.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "(NaN, NaN)"); org.junit.Assert.assertTrue(Double.isNaN(double9)); }
public void test1576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1576"); double double1 = org.apache.commons.math.util.FastMath.tan((double) (-20)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-2.237160944224742d) + "'", double1 == (-2.237160944224742d)); }
public void test1577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1577"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.tanh(); org.apache.commons.math.complex.Complex complex12 = complex4.cos(); org.apache.commons.math.complex.Complex complex13 = complex12.tan(); java.lang.String str14 = complex13.toString(); double double15 = complex13.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(2.6469540575554267, 0.0)" + "'", str14, "(2.6469540575554267, 0.0)"); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 2.6469540575554267d + "'", double15 == 2.6469540575554267d); }
public void test1578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1578"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) 52); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5); }
public void test1579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1579"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex5.tanh(); org.apache.commons.math.complex.Complex complex9 = complex7.multiply((int) (short) 0); double double10 = complex9.getArgument(); org.apache.commons.math.complex.Complex complex11 = complex2.subtract(complex9); org.apache.commons.math.complex.Complex complex12 = complex9.reciprocal(); org.apache.commons.math.complex.Complex complex14 = complex12.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex12.sin(); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); org.apache.commons.math.complex.Complex complex19 = complex0.multiply(complex18); org.apache.commons.math.complex.Complex complex20 = complex0.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test1580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1580"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 0.20204961826887402d); }
public void test1581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1581"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex43 = complex40.tan(); org.apache.commons.math.complex.Complex complex44 = complex40.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); }
public void test1582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1582"); double double1 = org.apache.commons.math.util.FastMath.expm1(6.830189170065857E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.830212495861014E-6d + "'", double1 == 6.830212495861014E-6d); }
public void test1583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1583"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex1.subtract((double) 96.99999f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField5 = complex4.getField(); org.apache.commons.math.complex.Complex complex6 = complexField5.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexField5); org.junit.Assert.assertNotNull(complex6); }
public void test1584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1584"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); java.lang.Throwable[] throwableArray7 = numberIsTooSmallException4.getSuppressed(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 1.0d + "'", number5, 1.0d); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(throwableArray7); }
public void test1585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1585"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); boolean boolean22 = complex20.isNaN(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex24.subtract(complex31); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex34.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex37 = complex34.sin(); org.apache.commons.math.complex.Complex complex38 = complex34.sinh(); org.apache.commons.math.complex.Complex complex40 = complex34.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex41 = complex20.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double45 = complex44.abs(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex53 = complex44.divide(complex50); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex58.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double64 = complex63.abs(); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex68 = complex67.log(); org.apache.commons.math.complex.Complex complex69 = complex67.tanh(); org.apache.commons.math.complex.Complex complex71 = complex69.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex72 = complex63.divide(complex69); java.lang.String str73 = complex69.toString(); org.apache.commons.math.complex.Complex complex74 = complex58.divide(complex69); org.apache.commons.math.complex.Complex complex75 = complex50.subtract(complex58); org.apache.commons.math.complex.Complex complex76 = complex41.subtract(complex58); org.apache.commons.math.complex.Complex complex77 = complex15.subtract(complex58); java.lang.Object obj78 = complex58.readResolve(); org.apache.commons.math.complex.Complex complex79 = complex58.cos(); org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double83 = complex82.abs(); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex91 = complex82.divide(complex88); java.lang.String str92 = complex88.toString(); org.apache.commons.math.complex.Complex complex93 = complex88.sqrt(); org.apache.commons.math.complex.Complex complex94 = complex93.negate(); org.apache.commons.math.complex.Complex complex95 = complex79.multiply(complex94); org.apache.commons.math.complex.Complex complex96 = complex95.sqrt1z(); org.apache.commons.math.complex.Complex complex98 = complex96.pow(0.0d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(0.0, 1.557407724654902)" + "'", str73, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(obj78); org.junit.Assert.assertEquals(obj78.toString(), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(0.0, 1.557407724654902)" + "'", str92, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertNotNull(complex96); org.junit.Assert.assertNotNull(complex98); }
public void test1586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1586"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex2.sin(); org.apache.commons.math.complex.Complex complex12 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex20 = complex17.add(complex19); org.apache.commons.math.complex.Complex complex21 = complex17.conjugate(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); boolean boolean39 = complex37.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); double double44 = complex43.getReal(); org.apache.commons.math.complex.Complex complex46 = complex43.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex47 = complex37.multiply(complex46); org.apache.commons.math.complex.Complex complex48 = complex47.cosh(); boolean boolean49 = complex47.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField50 = complex47.getField(); org.apache.commons.math.complex.Complex complex51 = complex24.pow(complex47); org.apache.commons.math.complex.Complex complex52 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex53 = complex11.subtract(complex24); java.lang.String str54 = complex53.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(complexField50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(0.0, 0.17520119364380138)" + "'", str54, "(0.0, 0.17520119364380138)"); }
public void test1587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1587"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 1.543080634815244d, (java.lang.Number) 5.545454545454546d, false); }
public void test1588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1588"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex19 = complex11.pow(5.117509926296107d); java.lang.String str20 = complex11.toString(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(NaN, NaN)" + "'", str20, "(NaN, NaN)"); }
public void test1589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1589"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex3 = complex1.pow((double) 20L); org.apache.commons.math.complex.Complex complex4 = complex1.tan(); java.util.List<org.apache.commons.math.complex.Complex> complexList6 = complex4.nthRoot(63); org.apache.commons.math.complex.Complex complex8 = complex4.subtract(0.9999999999999996d); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexList6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test1590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1590"); float float2 = org.apache.commons.math.util.FastMath.min((float) 0L, 6.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test1591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1591"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex33 = complex32.negate(); boolean boolean34 = complex18.equals((java.lang.Object) complex33); org.apache.commons.math.complex.Complex complex35 = complex33.sqrt1z(); org.apache.commons.math.complex.Complex complex36 = complex35.sinh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test1592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1592"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex36 = complex33.add((double) 97); org.apache.commons.math.complex.Complex complex38 = complex33.add(21.487562597358306d); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex41 = complex40.atan(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); double double51 = complex50.getArgument(); org.apache.commons.math.complex.Complex complex52 = complex43.subtract(complex50); org.apache.commons.math.complex.Complex complex53 = complex50.reciprocal(); org.apache.commons.math.complex.Complex complex55 = complex53.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex56 = complex53.asin(); org.apache.commons.math.complex.Complex complex57 = complex41.multiply(complex53); org.apache.commons.math.complex.Complex complex58 = complex41.sqrt(); org.apache.commons.math.complex.Complex complex59 = complex58.negate(); org.apache.commons.math.complex.Complex complex60 = complex33.add(complex58); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); }
public void test1593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1593"); double double2 = org.apache.commons.math.util.FastMath.hypot(0.5403023058681398d, 2005.3522829578812d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2005.3523557447375d + "'", double2 == 2005.3523557447375d); }
public void test1594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1594"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (-1023.0f), (double) 32L); org.junit.Assert.assertNotNull(complex2); }
public void test1595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1595"); double double1 = org.apache.commons.math.util.FastMath.log((double) 97L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.574710978503383d + "'", double1 == 4.574710978503383d); }
public void test1596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1596"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex36 = complex33.add((double) 97); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex40 = complex38.pow((double) 20L); org.apache.commons.math.complex.Complex complex41 = complex38.tanh(); org.apache.commons.math.complex.Complex complex42 = complex36.add(complex41); org.apache.commons.math.complex.Complex complex44 = complex42.multiply(0); org.apache.commons.math.complex.Complex complex46 = complex44.pow((double) 32.0f); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); }
public void test1597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1597"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(Double.NEGATIVE_INFINITY, 1.5566711019112178d); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test1598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1598"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); boolean boolean6 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex7 = complex5.asin(); org.apache.commons.math.complex.Complex complex9 = complex5.add((-102.58578272287191d)); java.lang.Object obj10 = complex5.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(obj10); org.junit.Assert.assertEquals(obj10.toString(), "(1.8508157176809255, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "(1.8508157176809255, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "(1.8508157176809255, 0.0)"); }
public void test1599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1599"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(32.000004f, 100.00000000000001d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 32.000008f + "'", float2 == 32.000008f); }
public void test1600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1600"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex11.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1601"); float float2 = org.apache.commons.math.util.FastMath.min(1.9073486E-6f, (float) (-4)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-4.0f) + "'", float2 == (-4.0f)); }
public void test1602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1602"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); double double11 = complex9.getReal(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex9.multiply(complex20); org.apache.commons.math.complex.Complex complex25 = complex24.exp(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex34 = complex30.add(0.8623188722876839d); org.apache.commons.math.complex.ComplexField complexField35 = complex30.getField(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double39 = complex38.abs(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.negate(); boolean boolean53 = complex51.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); double double58 = complex57.getReal(); org.apache.commons.math.complex.Complex complex60 = complex57.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex61 = complex51.multiply(complex60); org.apache.commons.math.complex.Complex complex62 = complex61.cosh(); boolean boolean63 = complex61.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField64 = complex61.getField(); org.apache.commons.math.complex.Complex complex65 = complex38.pow(complex61); org.apache.commons.math.complex.Complex complex66 = complex30.subtract(complex61); org.apache.commons.math.complex.Complex complex67 = complex24.subtract(complex61); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complexField35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(complexField64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); }
public void test1603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1603"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) (byte) -1); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test1604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1604"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex11.multiply(complex16); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply((int) (short) 0); double double28 = complex27.getArgument(); org.apache.commons.math.complex.Complex complex29 = complex20.subtract(complex27); double double30 = complex20.abs(); org.apache.commons.math.complex.Complex complex32 = complex20.multiply(32.0d); org.apache.commons.math.complex.Complex complex33 = complex32.reciprocal(); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); boolean boolean39 = complex37.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); double double44 = complex43.getReal(); org.apache.commons.math.complex.Complex complex46 = complex43.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex47 = complex37.multiply(complex46); org.apache.commons.math.complex.Complex complex49 = complex46.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex50 = complex33.pow(complex46); org.apache.commons.math.complex.Complex complex51 = complex18.multiply(complex50); org.apache.commons.math.complex.Complex complex52 = complex6.subtract(complex18); double double53 = complex52.getReal(); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf(5.0d, (-15.653559774527022d)); org.apache.commons.math.complex.Complex complex57 = complex52.divide(complex56); org.apache.commons.math.complex.Complex complex58 = complex56.tan(); org.apache.commons.math.complex.Complex complex59 = complex56.sqrt(); org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex63 = complex62.log(); org.apache.commons.math.complex.Complex complex64 = complex62.tanh(); org.apache.commons.math.complex.Complex complex66 = complex64.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex67 = complex66.acos(); org.apache.commons.math.complex.Complex complex68 = complex66.reciprocal(); org.apache.commons.math.complex.Complex complex69 = complex56.divide(complex68); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.41647126877660395d + "'", double53 == 0.41647126877660395d); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); }
public void test1605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1605"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex43 = complex40.tan(); org.apache.commons.math.complex.Complex complex44 = complex40.log(); double double45 = complex44.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); }
public void test1606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1606"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1.0000000000291038d); }
public void test1607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1607"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) 0); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.4E-45f + "'", float1 == 1.4E-45f); }
public void test1608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1608"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(21.487562597358306d); double double2 = complex1.abs(); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 21.487562597358306d + "'", double2 == 21.487562597358306d); }
public void test1609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1609"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); double double17 = complex16.getArgument(); org.apache.commons.math.complex.Complex complex18 = complex9.subtract(complex16); org.apache.commons.math.complex.Complex complex19 = complex16.reciprocal(); org.apache.commons.math.complex.Complex complex21 = complex19.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex22 = complex19.sin(); org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex22.reciprocal(); org.apache.commons.math.complex.Complex complex25 = complex24.tanh(); double double26 = complex24.getReal(); org.apache.commons.math.complex.Complex complex27 = complex24.negate(); org.apache.commons.math.complex.Complex complex28 = complex5.divide(complex24); org.apache.commons.math.complex.Complex complex29 = complex24.sqrt1z(); org.apache.commons.math.complex.Complex complex32 = complex29.createComplex(0.0d, (double) (-19)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue(Double.isNaN(double26)); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); }
public void test1610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1610"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex8.subtract(3.584289651861328d); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); java.lang.Object obj17 = complex16.readResolve(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex26.reciprocal(); org.apache.commons.math.complex.Complex complex28 = complex20.subtract(complex26); org.apache.commons.math.complex.Complex complex29 = complex20.sin(); org.apache.commons.math.complex.Complex complex30 = complex29.tanh(); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex38 = complex35.add(complex37); org.apache.commons.math.complex.Complex complex39 = complex35.conjugate(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double43 = complex42.abs(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex51 = complex42.divide(complex48); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.negate(); boolean boolean57 = complex55.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); double double62 = complex61.getReal(); org.apache.commons.math.complex.Complex complex64 = complex61.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex65 = complex55.multiply(complex64); org.apache.commons.math.complex.Complex complex66 = complex65.cosh(); boolean boolean67 = complex65.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField68 = complex65.getField(); org.apache.commons.math.complex.Complex complex69 = complex42.pow(complex65); org.apache.commons.math.complex.Complex complex70 = complex35.subtract(complex42); org.apache.commons.math.complex.Complex complex71 = complex29.subtract(complex42); org.apache.commons.math.complex.Complex complex72 = complex16.add(complex29); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(complexField68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); }
public void test1611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1611"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex36 = complex33.add((double) 97); boolean boolean37 = complex33.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); }
public void test1612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1612"); int int1 = org.apache.commons.math.util.FastMath.round((float) ' '); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32); }
public void test1613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1613"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.negate(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 6, (double) (short) -1); org.apache.commons.math.complex.Complex complex25 = complex4.subtract(complex24); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); }
public void test1614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1614"); double double1 = org.apache.commons.math.util.FastMath.cos(1.2599210498948732d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.3058920750576734d + "'", double1 == 0.3058920750576734d); }
public void test1615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1615"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex12 = complex11.atan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1616"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((-4.999999999999999d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-286.47889756541156d) + "'", double1 == (-286.47889756541156d)); }
public void test1617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1617"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((int) (short) 0); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex14.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex17 = complex14.asin(); org.apache.commons.math.complex.Complex complex18 = complex2.multiply(complex14); boolean boolean19 = complex18.isInfinite(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test1618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1618"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (byte) 0, (java.lang.Number) (-1), true); java.lang.Throwable[] throwableArray5 = numberIsTooSmallException4.getSuppressed(); org.junit.Assert.assertNotNull(throwableArray5); }
public void test1619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1619"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); double double21 = complex20.getImaginary(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex26 = complex20.divide(complex25); org.apache.commons.math.complex.Complex complex27 = complex26.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); }
public void test1620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1620"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.acos(); org.apache.commons.math.complex.Complex complex8 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex8.divide((double) 100.00001f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField11 = complex8.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complexField11); }
public void test1621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1621"); long long1 = org.apache.commons.math.util.FastMath.round((double) 2.9999995f); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 3L + "'", long1 == 3L); }
public void test1622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1622"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex1.pow((double) 52.0f); org.apache.commons.math.complex.Complex complex6 = complex1.pow((double) 18L); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); }
public void test1623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1623"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.acos(); org.apache.commons.math.complex.Complex complex38 = complex8.createComplex(4.594700892207039d, 0.0d); org.apache.commons.math.complex.Complex complex39 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex43.reciprocal(); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex48 = complex47.log(); org.apache.commons.math.complex.Complex complex49 = complex48.reciprocal(); org.apache.commons.math.complex.Complex complex50 = complex44.multiply(complex49); org.apache.commons.math.complex.Complex complex51 = complex44.tanh(); org.apache.commons.math.complex.Complex complex52 = complex44.cos(); org.apache.commons.math.complex.Complex complex54 = complex44.pow((double) (byte) -1); org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex58 = complex57.log(); org.apache.commons.math.complex.Complex complex59 = complex57.tanh(); org.apache.commons.math.complex.Complex complex61 = complex59.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex62 = complex61.tanh(); org.apache.commons.math.complex.Complex complex63 = complex62.negate(); org.apache.commons.math.complex.Complex complex64 = complex44.add(complex63); org.apache.commons.math.complex.Complex complex65 = complex39.subtract(complex44); org.apache.commons.math.complex.Complex complex66 = complex39.log(); double double67 = complex39.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.6420926159343308d + "'", double67 == 0.6420926159343308d); }
public void test1624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1624"); long long1 = org.apache.commons.math.util.FastMath.abs(20L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 20L + "'", long1 == 20L); }
public void test1625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1625"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex6.getArgument(); boolean boolean8 = complex6.isInfinite(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.createComplex((double) (short) 1, (-0.0d)); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField13 = complex12.getField(); org.apache.commons.math.complex.Complex complex15 = complex12.pow(1.9073486328113436E-6d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complexField13); org.junit.Assert.assertNotNull(complex15); }
public void test1626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1626"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(0.8902037290562788d, (double) 794.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.8902037290562788d + "'", double2 == 0.8902037290562788d); }
public void test1627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1627"); org.apache.commons.math.exception.NullArgumentException nullArgumentException0 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable[] throwableArray1 = nullArgumentException0.getSuppressed(); org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable2, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number7 = numberIsTooSmallException6.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext8 = numberIsTooSmallException6.getContext(); nullArgumentException0.addSuppressed((java.lang.Throwable) numberIsTooSmallException6); java.lang.Throwable[] throwableArray10 = numberIsTooSmallException6.getSuppressed(); org.apache.commons.math.exception.util.Localizable localizable11 = null; org.apache.commons.math.exception.util.Localizable localizable12 = null; org.apache.commons.math.exception.util.Localizable localizable13 = null; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double19 = complex18.abs(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex27 = complex18.divide(complex24); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex36.reciprocal(); org.apache.commons.math.complex.Complex complex38 = complex32.multiply(complex37); java.lang.Object[] objArray39 = new java.lang.Object[] { 0.0f, (short) 0, complex24, complex37 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException40 = new org.apache.commons.math.exception.NullArgumentException(localizable13, objArray39); org.apache.commons.math.exception.NullArgumentException nullArgumentException41 = new org.apache.commons.math.exception.NullArgumentException(localizable12, objArray39); java.lang.Throwable[] throwableArray42 = nullArgumentException41.getSuppressed(); java.lang.Throwable[] throwableArray43 = nullArgumentException41.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException44 = new org.apache.commons.math.exception.NullArgumentException(localizable11, (java.lang.Object[]) throwableArray43); numberIsTooSmallException6.addSuppressed((java.lang.Throwable) nullArgumentException44); org.apache.commons.math.exception.util.ExceptionContext exceptionContext46 = nullArgumentException44.getContext(); org.junit.Assert.assertNotNull(throwableArray1); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 3.831008000716577E22d + "'", number7, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext8); org.junit.Assert.assertNotNull(throwableArray10); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(objArray39); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(throwableArray42); org.junit.Assert.assertNotNull(throwableArray43); org.junit.Assert.assertNotNull(exceptionContext46); }
public void test1628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1628"); double double1 = org.apache.commons.math.util.FastMath.asin((-0.9760228232420635d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.3513715712638301d) + "'", double1 == (-1.3513715712638301d)); }
public void test1629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1629"); double double1 = org.apache.commons.math.util.FastMath.tanh((-0.20117422114931716d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.1985035352247044d) + "'", double1 == (-0.1985035352247044d)); }
public void test1630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1630"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); boolean boolean8 = complex6.isNaN(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex16 = complex13.add(complex15); java.lang.Object obj17 = complex15.readResolve(); org.apache.commons.math.complex.Complex complex18 = complex15.negate(); org.apache.commons.math.complex.Complex complex19 = complex6.subtract(complex18); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); }
public void test1631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1631"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField5 = complex4.getField(); org.apache.commons.math.complex.Complex complex6 = complexField5.getOne(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexField5); org.junit.Assert.assertNotNull(complex6); }
public void test1632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1632"); double double2 = org.apache.commons.math.util.FastMath.pow(0.8813735870195429d, 2.147483647E9d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test1633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1633"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z(); org.apache.commons.math.complex.Complex complex22 = complex21.cosh(); org.apache.commons.math.complex.Complex complex24 = complex21.add((double) (-52)); org.apache.commons.math.complex.Complex complex25 = complex24.asin(); org.apache.commons.math.complex.Complex complex26 = complex24.tan(); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex29 = complex26.divide((-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); }
public void test1634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1634"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double27 = complex26.abs(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = complex26.divide(complex32); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.log(); org.apache.commons.math.complex.Complex complex40 = complex38.tanh(); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double46 = complex45.abs(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex54 = complex45.divide(complex51); java.lang.String str55 = complex51.toString(); org.apache.commons.math.complex.Complex complex56 = complex40.divide(complex51); org.apache.commons.math.complex.Complex complex57 = complex32.subtract(complex40); org.apache.commons.math.complex.Complex complex58 = complex23.subtract(complex40); java.lang.Object obj59 = complex58.readResolve(); org.apache.commons.math.complex.Complex complex60 = complex58.log(); org.apache.commons.math.complex.Complex complex62 = complex60.add(0.8617695280319277d); java.lang.Class<?> wildcardClass63 = complex62.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(0.0, 1.557407724654902)" + "'", str55, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(obj59); org.junit.Assert.assertEquals(obj59.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(wildcardClass63); }
public void test1635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1635"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex6 = complex2.multiply(6); org.apache.commons.math.complex.Complex complex7 = complex2.tanh(); double double8 = complex2.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); }
public void test1636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1636"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(5.117509926296107d, 7.93006726156721E14d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 5.1175099262961075d + "'", double2 == 5.1175099262961075d); }
public void test1637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1637"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(0.9341765544273152d, (double) Float.NEGATIVE_INFINITY); org.junit.Assert.assertNotNull(complex2); }
public void test1638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1638"); float float2 = org.apache.commons.math.util.FastMath.min(35.0f, (float) 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test1639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1639"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); double double11 = complex1.abs(); org.apache.commons.math.complex.Complex complex13 = complex1.multiply(32.0d); org.apache.commons.math.complex.Complex complex14 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.negate(); boolean boolean20 = complex18.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); double double25 = complex24.getReal(); org.apache.commons.math.complex.Complex complex27 = complex24.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex28 = complex18.multiply(complex27); org.apache.commons.math.complex.Complex complex30 = complex27.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex31 = complex14.pow(complex27); org.apache.commons.math.complex.Complex complex32 = complex14.asin(); org.apache.commons.math.complex.Complex complex33 = complex14.cosh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); }
public void test1640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1640"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex8.subtract(3.584289651861328d); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); java.lang.Object obj17 = complex16.readResolve(); org.apache.commons.math.complex.Complex complex19 = complex16.add(0.0d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test1641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1641"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.log(); java.util.List<org.apache.commons.math.complex.Complex> complexList23 = complex4.nthRoot(35); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complexList23); }
public void test1642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1642"); long long2 = org.apache.commons.math.util.FastMath.max((long) (short) 100, (long) 102); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 102L + "'", long2 == 102L); }
public void test1643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1643"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.sqrt1z(); org.apache.commons.math.complex.Complex complex45 = complex40.createComplex(1.5845632502852868E31d, (-0.9999999999999999d)); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.apache.commons.math.complex.Complex complex54 = complex52.multiply((int) (short) 0); double double55 = complex54.getArgument(); org.apache.commons.math.complex.Complex complex56 = complex47.subtract(complex54); org.apache.commons.math.complex.Complex complex57 = complex54.reciprocal(); org.apache.commons.math.complex.Complex complex59 = complex57.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex60 = complex57.sin(); org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex62 = complex60.reciprocal(); org.apache.commons.math.complex.Complex complex63 = complex62.tanh(); double double64 = complex62.getReal(); org.apache.commons.math.complex.Complex complex65 = complex62.negate(); double double66 = complex62.getImaginary(); org.apache.commons.math.complex.Complex complex68 = complex62.pow(4.594700892207039d); boolean boolean69 = complex45.equals((java.lang.Object) complex62); org.apache.commons.math.complex.Complex complex70 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex71 = complex45.divide(complex70); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertTrue(Double.isNaN(double64)); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertTrue(Double.isNaN(double66)); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); }
public void test1644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1644"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); boolean boolean20 = complex18.isInfinite(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test1645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1645"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) (-0.0d), (java.lang.Number) 9.536743164063946E-7d, true); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException5.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) throwableArray6); java.lang.Throwable[] throwableArray8 = nullArgumentException7.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray8); org.junit.Assert.assertNotNull(throwableArray6); org.junit.Assert.assertNotNull(throwableArray8); }
public void test1646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1646"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); org.apache.commons.math.complex.Complex complex34 = complex31.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test1647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1647"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 0.0f); org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable2, (java.lang.Number) 1L, (java.lang.Number) (-44.8534693539332d), true); notPositiveException1.addSuppressed((java.lang.Throwable) numberIsTooSmallException6); java.lang.Throwable[] throwableArray8 = notPositiveException1.getSuppressed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext9 = notPositiveException1.getContext(); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertNotNull(exceptionContext9); }
public void test1648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1648"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 10.000001f, number2, false); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex29.reciprocal(); org.apache.commons.math.complex.Complex complex31 = complex25.multiply(complex30); java.lang.Object[] objArray32 = new java.lang.Object[] { 0.0f, (short) 0, complex17, complex30 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException33 = new org.apache.commons.math.exception.NullArgumentException(localizable6, objArray32); org.apache.commons.math.exception.NullArgumentException nullArgumentException34 = new org.apache.commons.math.exception.NullArgumentException(localizable5, objArray32); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) nullArgumentException34); org.apache.commons.math.exception.NotPositiveException notPositiveException37 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 0.8441419035741337d); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) notPositiveException37); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(objArray32); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); }
public void test1649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1649"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z(); org.apache.commons.math.complex.Complex complex34 = complex3.subtract(complex33); org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); org.apache.commons.math.complex.Complex complex38 = complex36.exp(); org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex38.pow(1.3296138015683576d); org.apache.commons.math.complex.Complex complex43 = complex41.subtract(1.0210669954417597d); boolean boolean44 = complex43.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test1650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1650"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); double double22 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex23 = complex15.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); org.apache.commons.math.complex.Complex complex31 = complex29.tanh(); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((int) (short) 0); double double34 = complex33.getArgument(); org.apache.commons.math.complex.Complex complex35 = complex26.subtract(complex33); org.apache.commons.math.complex.Complex complex36 = complex33.reciprocal(); org.apache.commons.math.complex.Complex complex38 = complex36.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex39 = complex36.sin(); org.apache.commons.math.complex.Complex complex40 = complex36.sinh(); org.apache.commons.math.complex.Complex complex42 = complex36.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex43 = complex24.pow(complex42); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue(Double.isNaN(double22)); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); }
public void test1651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1651"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); java.lang.Object obj15 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); double double26 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex27 = complex18.subtract(complex25); org.apache.commons.math.complex.Complex complex28 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex28.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex32 = complex28.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex33 = complex32.sinh(); org.apache.commons.math.complex.Complex complex35 = complex33.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex40.reciprocal(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex47 = complex41.multiply(complex46); org.apache.commons.math.complex.Complex complex48 = complex35.divide(complex47); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex52.reciprocal(); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex59 = complex58.sqrt1z(); org.apache.commons.math.complex.Complex complex60 = complex52.divide(complex58); org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex66 = complex65.log(); org.apache.commons.math.complex.Complex complex67 = complex65.tanh(); org.apache.commons.math.complex.Complex complex69 = complex67.multiply((int) (short) 0); double double70 = complex69.getArgument(); org.apache.commons.math.complex.Complex complex71 = complex62.subtract(complex69); org.apache.commons.math.complex.Complex complex72 = complex69.reciprocal(); org.apache.commons.math.complex.Complex complex73 = complex60.add(complex69); org.apache.commons.math.complex.Complex complex74 = complex35.divide(complex60); double double75 = complex35.getArgument(); org.apache.commons.math.complex.Complex complex76 = complex16.subtract(complex35); org.apache.commons.math.complex.Complex complex77 = complex76.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(obj15); org.junit.Assert.assertEquals(obj15.toString(), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertTrue(Double.isNaN(double75)); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); }
public void test1652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1652"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.multiply((int) '4'); org.apache.commons.math.complex.Complex complex6 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField7 = complex6.getField(); org.apache.commons.math.complex.Complex complex8 = complexField7.getZero(); org.apache.commons.math.complex.Complex complex9 = complexField7.getZero(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); boolean boolean11 = complex10.isNaN(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexField7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); }
public void test1653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1653"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); org.apache.commons.math.complex.Complex complex19 = complex18.atan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); }
public void test1654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1654"); double double2 = org.apache.commons.math.util.FastMath.log((double) 35.0f, 5.2983448608830095d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.4689820666073787d + "'", double2 == 0.4689820666073787d); }
public void test1655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1655"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); boolean boolean22 = complex20.isNaN(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex24.subtract(complex31); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex34.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex37 = complex34.sin(); org.apache.commons.math.complex.Complex complex38 = complex34.sinh(); org.apache.commons.math.complex.Complex complex40 = complex34.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex41 = complex20.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double45 = complex44.abs(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex53 = complex44.divide(complex50); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex58.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double64 = complex63.abs(); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex68 = complex67.log(); org.apache.commons.math.complex.Complex complex69 = complex67.tanh(); org.apache.commons.math.complex.Complex complex71 = complex69.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex72 = complex63.divide(complex69); java.lang.String str73 = complex69.toString(); org.apache.commons.math.complex.Complex complex74 = complex58.divide(complex69); org.apache.commons.math.complex.Complex complex75 = complex50.subtract(complex58); org.apache.commons.math.complex.Complex complex76 = complex41.subtract(complex58); org.apache.commons.math.complex.Complex complex77 = complex15.subtract(complex58); java.lang.Object obj78 = complex58.readResolve(); org.apache.commons.math.complex.Complex complex79 = complex58.cos(); org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double83 = complex82.abs(); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex91 = complex82.divide(complex88); java.lang.String str92 = complex88.toString(); org.apache.commons.math.complex.Complex complex93 = complex88.sqrt(); org.apache.commons.math.complex.Complex complex94 = complex93.negate(); org.apache.commons.math.complex.Complex complex95 = complex79.multiply(complex94); org.apache.commons.math.complex.Complex complex97 = complex94.multiply(4.0d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(0.0, 1.557407724654902)" + "'", str73, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(obj78); org.junit.Assert.assertEquals(obj78.toString(), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(0.0, 1.557407724654902)" + "'", str92, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertNotNull(complex97); }
public void test1656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1656"); long long1 = org.apache.commons.math.util.FastMath.round(0.9999999999995453d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1657"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(5.916079783099616d, 0.8813648585528526d); org.junit.Assert.assertNotNull(complex2); }
public void test1658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1658"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double39 = complex38.abs(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.apache.commons.math.complex.Complex complex54 = complex52.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double58 = complex57.abs(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex62 = complex61.log(); org.apache.commons.math.complex.Complex complex63 = complex61.tanh(); org.apache.commons.math.complex.Complex complex65 = complex63.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex66 = complex57.divide(complex63); java.lang.String str67 = complex63.toString(); org.apache.commons.math.complex.Complex complex68 = complex52.divide(complex63); org.apache.commons.math.complex.Complex complex69 = complex44.subtract(complex52); org.apache.commons.math.complex.Complex complex70 = complex44.log(); org.apache.commons.math.complex.Complex complex71 = complex44.acos(); org.apache.commons.math.complex.Complex complex72 = complex8.divide(complex71); org.apache.commons.math.complex.Complex complex73 = complex8.asin(); boolean boolean74 = complex73.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(0.0, 1.557407724654902)" + "'", str67, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); }
public void test1659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1659"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) (byte) 0); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.4E-45f + "'", float1 == 1.4E-45f); }
public void test1660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1660"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.acos(); org.apache.commons.math.complex.Complex complex8 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex8.divide((double) 100.00001f); org.apache.commons.math.complex.Complex complex11 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex12 = complex8.multiply(complex11); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); }
public void test1661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1661"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(102.66025548936804d, (double) 5); org.junit.Assert.assertNotNull(complex2); }
public void test1662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1662"); double double2 = org.apache.commons.math.util.FastMath.scalb(10.000000000000002d, 3); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 80.00000000000001d + "'", double2 == 80.00000000000001d); }
public void test1663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1663"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 6); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(5729.578388440339d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField5 = complex4.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexField5); }
public void test1664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1664"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); java.lang.Object obj11 = complex1.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex1.asin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(10.0, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(10.0, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(10.0, 0.0)"); org.junit.Assert.assertNotNull(complex12); }
public void test1665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1665"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); java.lang.String str8 = complex7.toString(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); java.lang.String str10 = complex7.toString(); org.apache.commons.math.complex.Complex complex12 = complex7.add(1.5707962935076714d); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z(); boolean boolean19 = complex18.isNaN(); org.apache.commons.math.complex.Complex complex20 = complex18.asin(); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt(); org.apache.commons.math.complex.Complex complex22 = complex7.pow(complex21); org.apache.commons.math.complex.Complex complex25 = complex7.createComplex((-0.005429048803495734d), (double) Float.POSITIVE_INFINITY); double double26 = complex7.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(1.0, 0.0)" + "'", str10, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d); }
public void test1666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1666"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(2.3300002726942934E104d); org.junit.Assert.assertNotNull(complex1); }
public void test1667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1667"); int int2 = org.apache.commons.math.util.FastMath.min(100, 6); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6); }
public void test1668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1668"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 100L); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex1.negate(); double double4 = complex3.getArgument(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-3.141592653589793d) + "'", double4 == (-3.141592653589793d)); }
public void test1669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1669"); double double2 = org.apache.commons.math.util.FastMath.max((double) (-5.0f), 5.837716327408224d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 5.837716327408224d + "'", double2 == 5.837716327408224d); }
public void test1670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1670"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex16.cosh(); org.apache.commons.math.complex.Complex complex35 = complex16.cos(); org.apache.commons.math.complex.Complex complex37 = complex16.pow(9.0d); org.apache.commons.math.complex.Complex complex38 = complex37.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test1671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1671"); float float2 = org.apache.commons.math.util.FastMath.max((-4.0f), 7.6293945E-6f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 7.6293945E-6f + "'", float2 == 7.6293945E-6f); }
public void test1672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1672"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.Complex complex6 = complex2.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex8.subtract(complex15); double double18 = complex8.abs(); org.apache.commons.math.complex.Complex complex20 = complex8.multiply(32.0d); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex23 = complex6.add(complex22); org.apache.commons.math.complex.Complex complex25 = complex6.multiply(18); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.log(); java.lang.Object obj31 = complex28.readResolve(); org.apache.commons.math.complex.ComplexField complexField32 = complex28.getField(); org.apache.commons.math.complex.Complex complex33 = complexField32.getZero(); org.apache.commons.math.complex.Complex complex34 = complexField32.getOne(); org.apache.commons.math.complex.Complex complex35 = complex6.multiply(complex34); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(obj31); org.junit.Assert.assertEquals(obj31.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complexField32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); }
public void test1673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1673"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.9073486E-6f); org.apache.commons.math.complex.Complex complex3 = complex1.pow(1.5515679276951895d); org.apache.commons.math.complex.Complex complex5 = complex3.subtract((-1.5842348303662568d)); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex21 = complex17.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex22 = complex21.sinh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex25 = complex24.sqrt(); org.apache.commons.math.complex.Complex complex26 = complex24.sin(); org.apache.commons.math.complex.Complex complex27 = complex5.add(complex26); org.apache.commons.math.complex.ComplexField complexField28 = complex5.getField(); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complexField28); }
public void test1674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1674"); org.apache.commons.math.exception.NullArgumentException nullArgumentException0 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.String str1 = nullArgumentException0.toString(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "org.apache.commons.math.exception.NullArgumentException: null is not allowed" + "'", str1, "org.apache.commons.math.exception.NullArgumentException: null is not allowed"); }
public void test1675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1675"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex8.tanh(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex41.tanh(); org.apache.commons.math.complex.Complex complex45 = complex43.multiply((int) (short) 0); double double46 = complex45.getArgument(); org.apache.commons.math.complex.Complex complex47 = complex38.subtract(complex45); org.apache.commons.math.complex.Complex complex48 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex50 = complex48.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex51 = complex48.sin(); org.apache.commons.math.complex.Complex complex52 = complex48.sinh(); org.apache.commons.math.complex.Complex complex53 = complex48.cos(); org.apache.commons.math.complex.Complex complex54 = complex8.multiply(complex53); boolean boolean55 = complex8.isInfinite(); org.apache.commons.math.complex.Complex complex56 = complex8.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(complex56); }
public void test1676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1676"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 6.830189170118965E-6d, (java.lang.Number) 3.831008000716577E22d, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 3.831008000716577E22d + "'", number5, 3.831008000716577E22d); }
public void test1677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1677"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z(); org.apache.commons.math.complex.Complex complex22 = complex21.cosh(); org.apache.commons.math.complex.Complex complex24 = complex21.add((double) (-52)); java.util.List<org.apache.commons.math.complex.Complex> complexList26 = complex21.nthRoot((int) '#'); org.apache.commons.math.complex.Complex complex27 = complex21.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complexList26); org.junit.Assert.assertNotNull(complex27); }
public void test1678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1678"); double double2 = org.apache.commons.math.util.FastMath.min(0.36226697660137147d, (-1.5574077246549018d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.5574077246549018d) + "'", double2 == (-1.5574077246549018d)); }
public void test1679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1679"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); boolean boolean22 = complex20.isNaN(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex24.subtract(complex31); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex34.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex37 = complex34.sin(); org.apache.commons.math.complex.Complex complex38 = complex34.sinh(); org.apache.commons.math.complex.Complex complex40 = complex34.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex41 = complex20.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double45 = complex44.abs(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex53 = complex44.divide(complex50); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex58.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double64 = complex63.abs(); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex68 = complex67.log(); org.apache.commons.math.complex.Complex complex69 = complex67.tanh(); org.apache.commons.math.complex.Complex complex71 = complex69.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex72 = complex63.divide(complex69); java.lang.String str73 = complex69.toString(); org.apache.commons.math.complex.Complex complex74 = complex58.divide(complex69); org.apache.commons.math.complex.Complex complex75 = complex50.subtract(complex58); org.apache.commons.math.complex.Complex complex76 = complex41.subtract(complex58); org.apache.commons.math.complex.Complex complex77 = complex15.subtract(complex58); org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex83 = complex82.log(); org.apache.commons.math.complex.Complex complex84 = complex82.tanh(); org.apache.commons.math.complex.Complex complex86 = complex84.multiply((int) (short) 0); double double87 = complex86.getArgument(); org.apache.commons.math.complex.Complex complex88 = complex79.subtract(complex86); double double89 = complex79.abs(); org.apache.commons.math.complex.Complex complex91 = complex79.multiply(32.0d); org.apache.commons.math.complex.Complex complex92 = complex91.reciprocal(); org.apache.commons.math.complex.Complex complex93 = complex15.add(complex92); org.apache.commons.math.complex.Complex complex94 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex95 = complex92.pow(complex94); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(0.0, 1.557407724654902)" + "'", str73, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex84); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 10.0d + "'", double89 == 10.0d); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex93); }
public void test1680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1680"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex18 = complex17.cos(); boolean boolean20 = complex17.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex17); org.apache.commons.math.complex.Complex complex22 = complex11.sin(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex23.add((double) 35); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex29.reciprocal(); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex29.divide(complex35); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex41 = complex40.log(); org.apache.commons.math.complex.Complex complex42 = complex40.tanh(); org.apache.commons.math.complex.Complex complex44 = complex42.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double48 = complex47.abs(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex55 = complex53.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex56 = complex47.divide(complex53); java.lang.String str57 = complex53.toString(); org.apache.commons.math.complex.Complex complex58 = complex42.divide(complex53); org.apache.commons.math.complex.Complex complex59 = complex58.sqrt1z(); org.apache.commons.math.complex.Complex complex60 = complex29.subtract(complex59); org.apache.commons.math.complex.Complex complex61 = complex25.divide(complex29); org.apache.commons.math.complex.Complex complex63 = complex25.multiply(2.718281828459045d); org.apache.commons.math.complex.Complex complex64 = complex63.sqrt1z(); org.apache.commons.math.complex.Complex complex65 = complex11.divide(complex63); boolean boolean66 = complex65.isNaN(); java.lang.Object obj67 = complex65.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(0.0, 1.557407724654902)" + "'", str57, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(obj67); org.junit.Assert.assertEquals(obj67.toString(), "(0.0, 0.01591495231728147)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "(0.0, 0.01591495231728147)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "(0.0, 0.01591495231728147)"); }
public void test1681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1681"); double double2 = org.apache.commons.math.util.FastMath.scalb(7276.563998161455d, 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 7276.563998161455d + "'", double2 == 7276.563998161455d); }
public void test1682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1682"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 10L, 117.10114144809786d); org.apache.commons.math.complex.Complex complex4 = complex2.multiply(20); org.junit.Assert.assertNotNull(complex4); }
public void test1683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1683"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex9 = complex7.add((-26.786565881784615d)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); }
public void test1684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1684"); double double1 = org.apache.commons.math.util.FastMath.cos(5.117509926296107d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.39412991916578377d + "'", double1 == 0.39412991916578377d); }
public void test1685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1685"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((-2.0148455219795967d)); org.junit.Assert.assertNotNull(complex1); }
public void test1686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1686"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); double double22 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex23 = complex15.log(); org.apache.commons.math.complex.Complex complex25 = complex15.divide((double) (-20L)); org.apache.commons.math.complex.Complex complex26 = complex25.conjugate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue(Double.isNaN(double22)); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); }
public void test1687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1687"); double double1 = org.apache.commons.math.util.FastMath.toRadians(0.7350525871447157d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.012829087820977834d + "'", double1 == 0.012829087820977834d); }
public void test1688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1688"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex16.sinh(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex26.reciprocal(); org.apache.commons.math.complex.Complex complex28 = complex20.subtract(complex26); org.apache.commons.math.complex.Complex complex29 = complex20.sin(); org.apache.commons.math.complex.Complex complex30 = complex29.tanh(); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex38 = complex35.add(complex37); org.apache.commons.math.complex.Complex complex39 = complex35.conjugate(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double43 = complex42.abs(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex51 = complex42.divide(complex48); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.negate(); boolean boolean57 = complex55.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); double double62 = complex61.getReal(); org.apache.commons.math.complex.Complex complex64 = complex61.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex65 = complex55.multiply(complex64); org.apache.commons.math.complex.Complex complex66 = complex65.cosh(); boolean boolean67 = complex65.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField68 = complex65.getField(); org.apache.commons.math.complex.Complex complex69 = complex42.pow(complex65); org.apache.commons.math.complex.Complex complex70 = complex35.subtract(complex42); org.apache.commons.math.complex.Complex complex71 = complex29.subtract(complex42); org.apache.commons.math.complex.Complex complex73 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField74 = complex73.getField(); org.apache.commons.math.complex.Complex complex75 = complexField74.getZero(); org.apache.commons.math.complex.Complex complex76 = complexField74.getZero(); org.apache.commons.math.complex.Complex complex77 = complexField74.getZero(); org.apache.commons.math.complex.Complex complex78 = complexField74.getZero(); org.apache.commons.math.complex.Complex complex79 = complexField74.getZero(); org.apache.commons.math.complex.Complex complex80 = complex29.subtract(complex79); org.apache.commons.math.complex.Complex complex81 = complex17.add(complex79); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(complexField68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complexField74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertNotNull(complex81); }
public void test0501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0501"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.7182482745272054d, 9.536747711537455E-7d); org.apache.commons.math.complex.Complex complex3 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex4 = complex2.multiply(complex3); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); }
public void test0502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0502"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex16.cosh(); org.apache.commons.math.complex.Complex complex35 = complex16.cos(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.negate(); boolean boolean41 = complex39.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); double double46 = complex45.getReal(); org.apache.commons.math.complex.Complex complex48 = complex45.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex49 = complex39.multiply(complex48); org.apache.commons.math.complex.Complex complex50 = complex49.cosh(); double double51 = complex49.getArgument(); org.apache.commons.math.complex.Complex complex52 = complex16.add(complex49); double double53 = complex16.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 3.141592653589793d + "'", double51 == 3.141592653589793d); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.557407724654902d + "'", double53 == 1.557407724654902d); }
public void test0503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0503"); int int2 = org.apache.commons.math.util.FastMath.min((int) '4', (int) (short) -1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test0504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0504"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) (-20), (java.lang.Number) 7.629394531101971E-6d, true); }
public void test0505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0505"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex17 = complex15.asin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0506"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex43 = complex41.add((double) 35); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex47.reciprocal(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex54 = complex53.sqrt1z(); org.apache.commons.math.complex.Complex complex55 = complex47.divide(complex53); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex59 = complex58.log(); org.apache.commons.math.complex.Complex complex60 = complex58.tanh(); org.apache.commons.math.complex.Complex complex62 = complex60.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double66 = complex65.abs(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex70 = complex69.log(); org.apache.commons.math.complex.Complex complex71 = complex69.tanh(); org.apache.commons.math.complex.Complex complex73 = complex71.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex74 = complex65.divide(complex71); java.lang.String str75 = complex71.toString(); org.apache.commons.math.complex.Complex complex76 = complex60.divide(complex71); org.apache.commons.math.complex.Complex complex77 = complex76.sqrt1z(); org.apache.commons.math.complex.Complex complex78 = complex47.subtract(complex77); org.apache.commons.math.complex.Complex complex79 = complex43.divide(complex47); org.apache.commons.math.complex.Complex complex81 = complex43.pow(1.0d); double double82 = complex81.getImaginary(); org.apache.commons.math.complex.Complex complex83 = complex81.negate(); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex91 = complex90.acos(); org.apache.commons.math.complex.Complex complex92 = complex81.divide(complex91); org.apache.commons.math.complex.Complex complex93 = complex81.sqrt1z(); org.apache.commons.math.complex.Complex complex94 = complex2.divide(complex81); org.apache.commons.math.complex.Complex complex96 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex97 = complex96.atan(); org.apache.commons.math.complex.Complex complex98 = complex81.pow(complex97); org.apache.commons.math.complex.Complex complex99 = complex97.tan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(0.0, 1.557407724654902)" + "'", str75, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex96); org.junit.Assert.assertNotNull(complex97); org.junit.Assert.assertNotNull(complex98); org.junit.Assert.assertNotNull(complex99); }
public void test0507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0507"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex2.sin(); org.apache.commons.math.complex.Complex complex12 = complex11.tanh(); java.lang.String str13 = complex12.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(0.0, 2.3945753355078105)" + "'", str13, "(0.0, 2.3945753355078105)"); }
public void test0508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0508"); int int1 = org.apache.commons.math.util.FastMath.getExponent(1.0000000000233258d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0509"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 171.49903622517783d); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((int) (short) 0); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex14.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex18 = complex14.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex19 = complex18.sinh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex29 = complex26.add(complex28); org.apache.commons.math.complex.Complex complex30 = complex19.add(complex26); org.apache.commons.math.complex.Complex complex32 = complex30.pow(100.0d); double double33 = complex32.abs(); java.lang.Number number34 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException37 = new org.apache.commons.math.exception.NumberIsTooSmallException(number34, (java.lang.Number) 1.5515679276951895d, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext38 = numberIsTooSmallException37.getContext(); boolean boolean39 = complex32.equals((java.lang.Object) numberIsTooSmallException37); notPositiveException2.addSuppressed((java.lang.Throwable) numberIsTooSmallException37); java.lang.Throwable throwable41 = null; // The following exception was thrown during execution in test generation try { notPositiveException2.addSuppressed(throwable41); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception."); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue(Double.isNaN(double33)); org.junit.Assert.assertNotNull(exceptionContext38); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); }
public void test0510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0510"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); double double32 = complex31.abs(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue(Double.isNaN(double32)); }
public void test0511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0511"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex6 = complex4.pow(complex5); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0512"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex1.add((double) 35); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex7.reciprocal(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); org.apache.commons.math.complex.Complex complex15 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex18.tanh(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double26 = complex25.abs(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); org.apache.commons.math.complex.Complex complex31 = complex29.tanh(); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex34 = complex25.divide(complex31); java.lang.String str35 = complex31.toString(); org.apache.commons.math.complex.Complex complex36 = complex20.divide(complex31); org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z(); org.apache.commons.math.complex.Complex complex38 = complex7.subtract(complex37); org.apache.commons.math.complex.Complex complex39 = complex3.divide(complex7); java.lang.Object[] objArray41 = new java.lang.Object[] { complex3, 3.5553480614894135d }; org.apache.commons.math.exception.NullArgumentException nullArgumentException42 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray41); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(0.0, 1.557407724654902)" + "'", str35, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(objArray41); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[(36.0, 0.0), 3.5553480614894135]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[(36.0, 0.0), 3.5553480614894135]"); }
public void test0513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0513"); double double1 = org.apache.commons.math.util.FastMath.log1p(0.9999876561221204d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.693141008601959d + "'", double1 == 0.693141008601959d); }
public void test0514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0514"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList6 = complex2.nthRoot((-1023)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -1,023"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test0515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0515"); double double1 = org.apache.commons.math.util.FastMath.abs(0.28366218546322625d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.28366218546322625d + "'", double1 == 0.28366218546322625d); }
public void test0516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0516"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); double double9 = complex7.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test0517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0517"); float float1 = org.apache.commons.math.util.FastMath.nextUp(20.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 20.000002f + "'", float1 == 20.000002f); }
public void test0518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0518"); double double1 = org.apache.commons.math.util.FastMath.tan(1.0963785756763116d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.9472827946549436d + "'", double1 == 1.9472827946549436d); }
public void test0519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0519"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.reciprocal(); org.apache.commons.math.complex.Complex complex5 = complex3.pow((double) '4'); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); org.apache.commons.math.complex.Complex complex10 = complex8.tanh(); org.apache.commons.math.complex.Complex complex12 = complex10.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double16 = complex15.abs(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex15.divide(complex21); java.lang.String str25 = complex21.toString(); org.apache.commons.math.complex.Complex complex26 = complex10.divide(complex21); double double27 = complex26.getImaginary(); org.apache.commons.math.complex.Complex complex28 = complex3.divide(complex26); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex37 = complex35.multiply((int) (short) 0); double double38 = complex37.getArgument(); org.apache.commons.math.complex.Complex complex39 = complex30.subtract(complex37); org.apache.commons.math.complex.Complex complex40 = complex37.reciprocal(); org.apache.commons.math.complex.Complex complex42 = complex40.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex44 = complex40.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex45 = complex44.sinh(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex49.reciprocal(); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex54 = complex53.log(); org.apache.commons.math.complex.Complex complex55 = complex54.reciprocal(); org.apache.commons.math.complex.Complex complex56 = complex50.multiply(complex55); java.lang.Object obj57 = complex56.readResolve(); org.apache.commons.math.complex.Complex complex58 = complex56.sqrt(); org.apache.commons.math.complex.Complex complex59 = complex56.reciprocal(); org.apache.commons.math.complex.Complex complex61 = complex56.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex62 = complex45.divide(complex56); org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField65 = complex64.getField(); org.apache.commons.math.complex.Complex complex66 = complexField65.getZero(); org.apache.commons.math.complex.Complex complex67 = complexField65.getZero(); org.apache.commons.math.complex.Complex complex68 = complexField65.getZero(); org.apache.commons.math.complex.Complex complex69 = complexField65.getZero(); org.apache.commons.math.complex.Complex complex70 = complex62.multiply(complex69); org.apache.commons.math.complex.Complex complex71 = complex3.add(complex69); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(0.0, 1.557407724654902)" + "'", str25, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(obj57); org.junit.Assert.assertEquals(obj57.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complexField65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); }
public void test0520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0520"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); java.lang.String str21 = complex4.toString(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex30 = complex28.multiply((int) (short) 0); double double31 = complex30.getArgument(); org.apache.commons.math.complex.Complex complex32 = complex23.subtract(complex30); org.apache.commons.math.complex.Complex complex33 = complex32.reciprocal(); org.apache.commons.math.complex.Complex complex34 = complex4.multiply(complex33); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(0.0, 1.557407724654902)" + "'", str21, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test0521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0521"); double double2 = org.apache.commons.math.util.FastMath.atan2(2005.3522829578812d, (double) (-57)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5992126092811243d + "'", double2 == 1.5992126092811243d); }
public void test0522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0522"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(10.04987562112089d, 1.19209289552635E-7d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.049875621120888d + "'", double2 == 10.049875621120888d); }
public void test0523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0523"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double39 = complex38.abs(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.apache.commons.math.complex.Complex complex54 = complex52.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double58 = complex57.abs(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex62 = complex61.log(); org.apache.commons.math.complex.Complex complex63 = complex61.tanh(); org.apache.commons.math.complex.Complex complex65 = complex63.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex66 = complex57.divide(complex63); java.lang.String str67 = complex63.toString(); org.apache.commons.math.complex.Complex complex68 = complex52.divide(complex63); org.apache.commons.math.complex.Complex complex69 = complex44.subtract(complex52); org.apache.commons.math.complex.Complex complex70 = complex44.log(); org.apache.commons.math.complex.Complex complex71 = complex44.acos(); org.apache.commons.math.complex.Complex complex72 = complex8.divide(complex71); org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex76 = complex75.log(); org.apache.commons.math.complex.Complex complex77 = complex75.tanh(); org.apache.commons.math.complex.Complex complex79 = complex77.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex80 = complex79.acos(); org.apache.commons.math.complex.Complex complex82 = complex79.add(1.3270448216204096d); org.apache.commons.math.complex.Complex complex83 = complex72.divide(complex82); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(0.0, 1.557407724654902)" + "'", str67, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertNotNull(complex83); }
public void test0524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0524"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.20204961826887402d); org.junit.Assert.assertNotNull(complex1); }
public void test0525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0525"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext4 = numberIsTooSmallException3.getContext(); java.lang.Throwable[] throwableArray5 = numberIsTooSmallException3.getSuppressed(); java.lang.String str6 = numberIsTooSmallException3.toString(); org.junit.Assert.assertNotNull(exceptionContext4); org.junit.Assert.assertNotNull(throwableArray5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.apache.commons.math.exception.NumberIsTooSmallException: 0 is smaller than the minimum (1)" + "'", str6, "org.apache.commons.math.exception.NumberIsTooSmallException: 0 is smaller than the minimum (1)"); }
public void test0526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0526"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); org.apache.commons.math.complex.Complex complex25 = complex24.sqrt(); java.lang.Object obj26 = complex25.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(obj26); org.junit.Assert.assertEquals(obj26.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "(NaN, NaN)"); }
public void test0527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0527"); int int1 = org.apache.commons.math.util.FastMath.round(9.999999f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10); }
public void test0528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0528"); double double1 = org.apache.commons.math.util.FastMath.toRadians(3.6531350888106995E-295d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.375923531988217E-297d + "'", double1 == 6.375923531988217E-297d); }
public void test0529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0529"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex4.getImaginary(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf(1.557407724654902d, 3.5553480614894135d); boolean boolean11 = complex10.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex4.add(complex10); org.apache.commons.math.complex.Complex complex13 = complex10.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.557407724654902d + "'", double7 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0530"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double6 = complex5.abs(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex14 = complex5.divide(complex11); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex18.reciprocal(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex25 = complex19.multiply(complex24); java.lang.Object[] objArray26 = new java.lang.Object[] { 0.0f, (short) 0, complex11, complex24 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException27 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray26); // The following exception was thrown during execution in test generation try { java.lang.String str28 = nullArgumentException27.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(objArray26); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); }
public void test0531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0531"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-1.4987863014408054d), 0.0d); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0532"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (-5.117509926296107d), (java.lang.Number) 3L, false); }
public void test0533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0533"); double double1 = org.apache.commons.math.util.FastMath.cbrt(0.20204961826887402d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.5867944687299709d + "'", double1 == 0.5867944687299709d); }
public void test0534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0534"); double double1 = org.apache.commons.math.util.FastMath.ceil((double) (-127)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-127.0d) + "'", double1 == (-127.0d)); }
public void test0535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0535"); double double1 = org.apache.commons.math.util.FastMath.acosh(100.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.298292365610485d + "'", double1 == 5.298292365610485d); }
public void test0536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0536"); double double1 = org.apache.commons.math.util.FastMath.ceil(0.8941226291179729d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0537"); double double1 = org.apache.commons.math.util.FastMath.log1p((double) 2147483647); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 21.487562597358306d + "'", double1 == 21.487562597358306d); }
public void test0538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0538"); double double1 = org.apache.commons.math.util.FastMath.sin(23.781369657454515d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.9760228232420635d) + "'", double1 == (-0.9760228232420635d)); }
public void test0539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0539"); float float1 = org.apache.commons.math.util.FastMath.nextUp((float) (-18)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-17.999998f) + "'", float1 == (-17.999998f)); }
public void test0540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0540"); float float2 = org.apache.commons.math.util.FastMath.copySign(2.9999995f, 2.9999995f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.9999995f + "'", float2 == 2.9999995f); }
public void test0541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0541"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 3.5553480614894135d); boolean boolean2 = notPositiveException1.getBoundIsAllowed(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test0542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0542"); double double1 = org.apache.commons.math.util.FastMath.cosh(0.8624452039349472d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.395537401368072d + "'", double1 == 1.395537401368072d); }
public void test0543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0543"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double27 = complex26.abs(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = complex26.divide(complex32); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.log(); org.apache.commons.math.complex.Complex complex40 = complex38.tanh(); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double46 = complex45.abs(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex54 = complex45.divide(complex51); java.lang.String str55 = complex51.toString(); org.apache.commons.math.complex.Complex complex56 = complex40.divide(complex51); org.apache.commons.math.complex.Complex complex57 = complex32.subtract(complex40); org.apache.commons.math.complex.Complex complex58 = complex23.subtract(complex40); double double59 = complex40.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(0.0, 1.557407724654902)" + "'", str55, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); }
public void test0544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0544"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) 1, (float) '4'); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f); }
public void test0545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0545"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex3.subtract(70.7906245758041d); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); double double20 = complex17.getImaginary(); org.apache.commons.math.complex.Complex complex21 = complex12.multiply(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex24 = complex23.cos(); boolean boolean26 = complex23.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex27 = complex17.subtract(complex23); org.apache.commons.math.complex.Complex complex28 = complex3.subtract(complex23); double double29 = complex3.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.557407724654902d + "'", double20 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); }
public void test0546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0546"); double double1 = org.apache.commons.math.util.FastMath.acos(3.732511156817248d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0547"); double double1 = org.apache.commons.math.util.FastMath.asin((-0.02001872128744539d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.020020058609725087d) + "'", double1 == (-0.020020058609725087d)); }
public void test0548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0548"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.7182482745272054d, 9.536747711537455E-7d); org.apache.commons.math.complex.Complex complex3 = complex2.acos(); java.lang.Class<?> wildcardClass4 = complex3.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(wildcardClass4); }
public void test0549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0549"); double double1 = org.apache.commons.math.util.FastMath.floor(0.9999999999999996d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0550"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); org.apache.commons.math.complex.Complex complex22 = complex21.conjugate(); org.apache.commons.math.complex.Complex complex23 = complex21.asin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); }
public void test0551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0551"); double double1 = org.apache.commons.math.util.FastMath.tan((double) 127); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.185891831851989d + "'", double1 == 4.185891831851989d); }
public void test0552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0552"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) (-57.29577951308232d)); org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex4.add((double) 35); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex17 = complex16.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = complex10.divide(complex16); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double29 = complex28.abs(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex37 = complex28.divide(complex34); java.lang.String str38 = complex34.toString(); org.apache.commons.math.complex.Complex complex39 = complex23.divide(complex34); org.apache.commons.math.complex.Complex complex40 = complex39.sqrt1z(); org.apache.commons.math.complex.Complex complex41 = complex10.subtract(complex40); org.apache.commons.math.complex.Complex complex42 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex44 = complex10.subtract((double) (-1L)); java.lang.Object obj45 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.apache.commons.math.complex.Complex complex54 = complex52.multiply((int) (short) 0); double double55 = complex54.getArgument(); org.apache.commons.math.complex.Complex complex56 = complex47.subtract(complex54); org.apache.commons.math.complex.Complex complex57 = complex54.reciprocal(); org.apache.commons.math.complex.Complex complex59 = complex57.subtract(1.5707963267948966d); java.lang.Class<?> wildcardClass60 = complex59.getClass(); org.apache.commons.math.complex.Complex complex62 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex63 = complex62.negate(); org.apache.commons.math.complex.Complex complex65 = complex62.divide(14.142135623730951d); java.lang.Object[] objArray66 = new java.lang.Object[] { obj45, wildcardClass60, complex62 }; org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException67 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable3, objArray66); notPositiveException2.addSuppressed((java.lang.Throwable) mathIllegalArgumentException67); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(0.0, 1.557407724654902)" + "'", str38, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(obj45); org.junit.Assert.assertEquals(obj45.toString(), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(wildcardClass60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(objArray66); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[(0.0, 1.5707963267948966), class org.apache.commons.math.complex.Complex, (1.0, 0.0)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[(0.0, 1.5707963267948966), class org.apache.commons.math.complex.Complex, (1.0, 0.0)]"); }
public void test0553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0553"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((-1.5574077246549023d)); org.apache.commons.math.complex.Complex complex43 = complex40.subtract(complex42); org.apache.commons.math.complex.Complex complex45 = complex40.add((double) 97); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); }
public void test0554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0554"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); org.apache.commons.math.complex.Complex complex32 = complex27.createComplex(11013.232874703393d, 0.0d); org.apache.commons.math.complex.Complex complex33 = complex32.conjugate(); org.apache.commons.math.complex.Complex complex35 = complex32.add(3.555348061489414d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); }
public void test0555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0555"); long long2 = org.apache.commons.math.util.FastMath.max((long) 32, (long) 97); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 97L + "'", long2 == 97L); }
public void test0556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0556"); double double2 = org.apache.commons.math.util.FastMath.hypot(1.5845632502852868E31d, 9.79298026353578d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5845632502852868E31d + "'", double2 == 1.5845632502852868E31d); }
public void test0557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0557"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(2.993222846126381d); }
public void test0558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0558"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(100.0d, (double) 6L); org.junit.Assert.assertNotNull(complex2); }
public void test0559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0559"); double double1 = org.apache.commons.math.util.FastMath.asin((double) (short) 1); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5707963267948966d + "'", double1 == 1.5707963267948966d); }
public void test0560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0560"); int int1 = org.apache.commons.math.util.FastMath.round((float) (-1023)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1023) + "'", int1 == (-1023)); }
public void test0561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0561"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); java.lang.Object obj8 = complex6.readResolve(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); boolean boolean10 = complex9.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(obj8); org.junit.Assert.assertEquals(obj8.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test0562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0562"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z(); org.apache.commons.math.complex.Complex complex34 = complex3.subtract(complex33); org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); org.apache.commons.math.complex.Complex complex38 = complex36.exp(); org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38); java.lang.String str40 = complex39.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(2.718281828459045, 1.5707963267948966)" + "'", str40, "(2.718281828459045, 1.5707963267948966)"); }
public void test0563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0563"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex17.reciprocal(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex23); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double36 = complex35.abs(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex43 = complex41.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex44 = complex35.divide(complex41); java.lang.String str45 = complex41.toString(); org.apache.commons.math.complex.Complex complex46 = complex30.divide(complex41); org.apache.commons.math.complex.Complex complex47 = complex46.sqrt1z(); org.apache.commons.math.complex.Complex complex48 = complex17.subtract(complex47); org.apache.commons.math.complex.Complex complex49 = complex8.multiply(complex47); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(0.0, 1.557407724654902)" + "'", str45, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); }
public void test0564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0564"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.exp(); double double12 = complex11.abs(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); }
public void test0565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0565"); long long2 = org.apache.commons.math.util.FastMath.max((long) 100, (long) (-4)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L); }
public void test0566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0566"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex13.asin(); double double16 = complex13.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.8824419880804919d + "'", double16 == 0.8824419880804919d); }
public void test0567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0567"); double double2 = org.apache.commons.math.util.FastMath.min((-0.807872122398715d), 8.881784197001252E-16d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.807872122398715d) + "'", double2 == (-0.807872122398715d)); }
public void test0568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0568"); float float1 = org.apache.commons.math.util.FastMath.signum((float) (byte) 10); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0569"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex6.add((double) 35); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex12.reciprocal(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt1z(); org.apache.commons.math.complex.Complex complex20 = complex12.divide(complex18); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double31 = complex30.abs(); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex34.tanh(); org.apache.commons.math.complex.Complex complex38 = complex36.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex39 = complex30.divide(complex36); java.lang.String str40 = complex36.toString(); org.apache.commons.math.complex.Complex complex41 = complex25.divide(complex36); org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = complex12.subtract(complex42); org.apache.commons.math.complex.Complex complex44 = complex8.divide(complex12); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex48 = complex47.log(); org.apache.commons.math.complex.Complex complex49 = complex8.subtract(complex48); boolean boolean50 = complex2.equals((java.lang.Object) complex49); org.apache.commons.math.complex.Complex complex52 = complex49.pow(1.0986122886681098d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(0.0, 1.557407724654902)" + "'", str40, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertNotNull(complex52); }
public void test0570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0570"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); boolean boolean18 = complex15.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField19 = complex15.getField(); org.apache.commons.math.complex.Complex complex20 = complexField19.getZero(); java.util.List<org.apache.commons.math.complex.Complex> complexList22 = complex20.nthRoot((int) 'a'); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complexField19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complexList22); }
public void test0571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0571"); float float1 = org.apache.commons.math.util.FastMath.abs(96.999985f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 96.999985f + "'", float1 == 96.999985f); }
public void test0572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0572"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex18 = complex17.cos(); boolean boolean20 = complex17.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex17); org.apache.commons.math.complex.Complex complex22 = complex11.sinh(); org.apache.commons.math.complex.Complex complex23 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex24 = complex11.divide(complex23); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test0573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0573"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); java.lang.String str8 = complex5.toString(); org.apache.commons.math.complex.Complex complex9 = complex5.negate(); org.apache.commons.math.complex.Complex complex10 = complex9.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.8508157176809255, 0.0)" + "'", str8, "(1.8508157176809255, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0574"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double8 = complex7.abs(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object[] objArray28 = new java.lang.Object[] { 0.0f, (short) 0, complex13, complex26 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable2, objArray28); org.apache.commons.math.exception.NullArgumentException nullArgumentException30 = new org.apache.commons.math.exception.NullArgumentException(localizable1, objArray28); java.lang.Throwable[] throwableArray31 = nullArgumentException30.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException32 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray31); java.lang.Throwable[] throwableArray33 = mathIllegalArgumentException32.getSuppressed(); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(throwableArray31); org.junit.Assert.assertNotNull(throwableArray33); }
public void test0575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0575"); double double2 = org.apache.commons.math.util.FastMath.pow((double) 1.5845633E31f, (double) 3.8146973E-6f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0002740871105988d + "'", double2 == 1.0002740871105988d); }
public void test0576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0576"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex12 = complex9.add(complex11); org.apache.commons.math.complex.Complex complex13 = complex9.conjugate(); org.apache.commons.math.complex.Complex complex14 = complex9.tan(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex17 = complex15.add((double) 35); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex28 = complex27.sqrt1z(); org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex27); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double40 = complex39.abs(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex44 = complex43.log(); org.apache.commons.math.complex.Complex complex45 = complex43.tanh(); org.apache.commons.math.complex.Complex complex47 = complex45.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex48 = complex39.divide(complex45); java.lang.String str49 = complex45.toString(); org.apache.commons.math.complex.Complex complex50 = complex34.divide(complex45); org.apache.commons.math.complex.Complex complex51 = complex50.sqrt1z(); org.apache.commons.math.complex.Complex complex52 = complex21.subtract(complex51); org.apache.commons.math.complex.Complex complex53 = complex17.divide(complex21); org.apache.commons.math.complex.Complex complex55 = complex17.multiply(2.718281828459045d); org.apache.commons.math.complex.Complex complex56 = complex9.subtract(complex55); org.apache.commons.math.complex.Complex complex57 = complex3.add(complex55); java.lang.Class<?> wildcardClass58 = complex55.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(0.0, 1.557407724654902)" + "'", str49, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(wildcardClass58); }
public void test0577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0577"); double double1 = org.apache.commons.math.util.FastMath.asin(1.19209289552635E-7d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.192092895526353E-7d + "'", double1 == 1.192092895526353E-7d); }
public void test0578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0578"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 1.5845633E31f, 9.999999999999998d); org.junit.Assert.assertNotNull(complex2); }
public void test0579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0579"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex12.pow(2.7182482745272054d); boolean boolean16 = complex12.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); }
public void test0580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0580"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex16 = complex11.cos(); org.apache.commons.math.complex.Complex complex17 = complex16.negate(); double double18 = complex16.getImaginary(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue(Double.isNaN(double18)); }
public void test0581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0581"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(71.84044670030279d, 0.6217142807768795d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 71.84044670030278d + "'", double2 == 71.84044670030278d); }
public void test0582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0582"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex16.tanh(); double double18 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.negate(); java.lang.Class<?> wildcardClass20 = complex16.getClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue(Double.isNaN(double18)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test0583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0583"); long long1 = org.apache.commons.math.util.FastMath.round((double) (-1023)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1023L) + "'", long1 == (-1023L)); }
public void test0584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0584"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex11.add(complex20); org.apache.commons.math.complex.Complex complex25 = complex11.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); }
public void test0585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0585"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double14 = complex13.abs(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex22 = complex13.divide(complex19); java.lang.String str23 = complex19.toString(); org.apache.commons.math.complex.Complex complex24 = complex8.divide(complex19); org.apache.commons.math.complex.Complex complex27 = complex19.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex29.subtract(complex36); org.apache.commons.math.complex.Complex complex39 = complex19.subtract(complex38); org.apache.commons.math.complex.ComplexField complexField40 = complex39.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass41 = complexField40.getRuntimeClass(); boolean boolean42 = complex2.equals((java.lang.Object) wildcardClass41); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(0.0, 1.557407724654902)" + "'", str23, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complexField40); org.junit.Assert.assertNotNull(wildcardClass41); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test0586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0586"); float float1 = org.apache.commons.math.util.FastMath.signum((-20.0f)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1.0f) + "'", float1 == (-1.0f)); }
public void test0587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0587"); float float1 = org.apache.commons.math.util.FastMath.ulp(100.00001f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 7.6293945E-6f + "'", float1 == 7.6293945E-6f); }
public void test0588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0588"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex16.tanh(); double double18 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.negate(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex25 = complex24.sqrt1z(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); double double35 = complex34.getArgument(); org.apache.commons.math.complex.Complex complex36 = complex27.subtract(complex34); org.apache.commons.math.complex.Complex complex37 = complex34.reciprocal(); org.apache.commons.math.complex.Complex complex39 = complex37.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex40 = complex24.subtract(complex37); org.apache.commons.math.complex.Complex complex41 = complex24.atan(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex47 = complex46.sqrt1z(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex49 = complex46.add(complex48); org.apache.commons.math.complex.Complex complex50 = complex46.conjugate(); double double51 = complex50.getArgument(); org.apache.commons.math.complex.Complex complex52 = complex50.asin(); org.apache.commons.math.complex.Complex complex53 = complex41.subtract(complex52); org.apache.commons.math.complex.Complex complex54 = complex16.multiply(complex53); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue(Double.isNaN(double18)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-1.5707963267948966d) + "'", double51 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); }
public void test0589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0589"); int int1 = org.apache.commons.math.util.FastMath.getExponent(1.9073486E-6f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-19) + "'", int1 == (-19)); }
public void test0590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0590"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.tanh(); org.apache.commons.math.complex.Complex complex12 = complex4.cos(); org.apache.commons.math.complex.Complex complex14 = complex4.pow((double) (byte) -1); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex22 = complex21.tanh(); org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex4.add(complex23); org.apache.commons.math.complex.Complex complex25 = complex4.exp(); boolean boolean26 = complex4.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); }
public void test0591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0591"); double double1 = org.apache.commons.math.util.FastMath.abs(2.993222846126381d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.993222846126381d + "'", double1 == 2.993222846126381d); }
public void test0592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0592"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); boolean boolean29 = complex27.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); double double34 = complex33.getReal(); org.apache.commons.math.complex.Complex complex36 = complex33.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex37 = complex27.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex37.multiply((int) (byte) 100); org.apache.commons.math.complex.Complex complex40 = complex22.subtract(complex39); org.apache.commons.math.complex.Complex complex41 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex42 = complex39.add(complex41); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); }
public void test0593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0593"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z(); org.apache.commons.math.complex.Complex complex17 = complex15.tan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0594"); double double1 = org.apache.commons.math.util.FastMath.acosh((-0.9760228232420635d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0595"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.5553480614894135d, (java.lang.Number) (short) 10, false); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException9 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable5, (java.lang.Number) 1.1752011936438014d, (java.lang.Number) 2.7182482745272054d, true); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException9); java.lang.Number number11 = numberIsTooSmallException9.getMin(); org.junit.Assert.assertEquals("'" + number11 + "' != '" + 2.7182482745272054d + "'", number11, 2.7182482745272054d); }
public void test0596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0596"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((-1.5574077246549023d)); org.apache.commons.math.complex.Complex complex43 = complex40.subtract(complex42); org.apache.commons.math.complex.Complex complex44 = complex43.asin(); org.apache.commons.math.complex.Complex complex45 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex46 = complex43.pow(complex45); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); }
public void test0597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0597"); long long2 = org.apache.commons.math.util.FastMath.max((-1023L), 3L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3L + "'", long2 == 3L); }
public void test0598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0598"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = complex18.createComplex(0.0d, 0.0d); org.apache.commons.math.complex.Complex complex22 = complex18.reciprocal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test0599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0599"); long long1 = org.apache.commons.math.util.FastMath.round(1.0002740871105988d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test0600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0600"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object obj28 = complex27.readResolve(); org.apache.commons.math.complex.Complex complex29 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex30 = complex27.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex27.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex33 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex34 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex35 = complex27.subtract(complex34); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(obj28); org.junit.Assert.assertEquals(obj28.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); }
public void test0601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0601"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.sin(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex29 = complex26.add(complex28); org.apache.commons.math.complex.Complex complex30 = complex26.conjugate(); org.apache.commons.math.complex.Complex complex31 = complex26.tan(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex34 = complex32.add((double) 35); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); org.apache.commons.math.complex.Complex complex39 = complex38.reciprocal(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z(); org.apache.commons.math.complex.Complex complex46 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double57 = complex56.abs(); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); org.apache.commons.math.complex.Complex complex62 = complex60.tanh(); org.apache.commons.math.complex.Complex complex64 = complex62.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex65 = complex56.divide(complex62); java.lang.String str66 = complex62.toString(); org.apache.commons.math.complex.Complex complex67 = complex51.divide(complex62); org.apache.commons.math.complex.Complex complex68 = complex67.sqrt1z(); org.apache.commons.math.complex.Complex complex69 = complex38.subtract(complex68); org.apache.commons.math.complex.Complex complex70 = complex34.divide(complex38); org.apache.commons.math.complex.Complex complex72 = complex34.multiply(2.718281828459045d); org.apache.commons.math.complex.Complex complex73 = complex26.subtract(complex72); org.apache.commons.math.complex.Complex complex74 = complex20.add(complex72); org.apache.commons.math.complex.Complex complex75 = complex15.add(complex74); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(0.0, 1.557407724654902)" + "'", str66, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); }
public void test0602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0602"); double double1 = org.apache.commons.math.util.FastMath.acosh(1.9459101490553132d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.2851503027842335d + "'", double1 == 1.2851503027842335d); }
public void test0603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0603"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); boolean boolean4 = complex3.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test0604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0604"); double double2 = org.apache.commons.math.util.FastMath.scalb((double) (-4L), (-1)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-2.0d) + "'", double2 == (-2.0d)); }
public void test0605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0605"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); double double11 = complex9.getReal(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex9.multiply(complex20); org.apache.commons.math.complex.Complex complex25 = complex24.tanh(); org.apache.commons.math.complex.Complex complex27 = complex25.divide(0.0d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); }
public void test0606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0606"); double double1 = org.apache.commons.math.util.FastMath.rint((double) (short) 100); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 100.0d + "'", double1 == 100.0d); }
public void test0607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0607"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); java.util.List<org.apache.commons.math.complex.Complex> complexList5 = complex3.nthRoot((int) (byte) 1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexList5); }
public void test0608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0608"); double double1 = org.apache.commons.math.util.FastMath.acosh(1.2414372125137612d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.6816196479851241d + "'", double1 == 0.6816196479851241d); }
public void test0609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0609"); double double2 = org.apache.commons.math.util.FastMath.atan2(6.830189170118965E-6d, 2.6881376506005913E43d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.540862879024422E-49d + "'", double2 == 2.540862879024422E-49d); }
public void test0610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0610"); float float2 = org.apache.commons.math.util.FastMath.scalb((float) (-18), (int) (byte) 100); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-2.281771E31f) + "'", float2 == (-2.281771E31f)); }
public void test0611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0611"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex12.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex18.tanh(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex23 = complex22.cosh(); java.lang.String str24 = complex23.toString(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply((int) ' '); org.apache.commons.math.complex.Complex complex28 = complex25.conjugate(); org.apache.commons.math.complex.Complex complex29 = complex15.subtract(complex25); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(1.0, 0.0)" + "'", str24, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); }
public void test0612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0612"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); double double30 = complex29.abs(); org.apache.commons.math.exception.util.Localizable localizable31 = null; java.lang.Number number33 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException35 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable31, (java.lang.Number) 10.000001f, number33, false); org.apache.commons.math.exception.util.Localizable localizable36 = null; org.apache.commons.math.exception.util.Localizable localizable37 = null; org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double43 = complex42.abs(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex51 = complex42.divide(complex48); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.log(); org.apache.commons.math.complex.Complex complex56 = complex55.reciprocal(); org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex60 = complex59.log(); org.apache.commons.math.complex.Complex complex61 = complex60.reciprocal(); org.apache.commons.math.complex.Complex complex62 = complex56.multiply(complex61); java.lang.Object[] objArray63 = new java.lang.Object[] { 0.0f, (short) 0, complex48, complex61 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException64 = new org.apache.commons.math.exception.NullArgumentException(localizable37, objArray63); org.apache.commons.math.exception.NullArgumentException nullArgumentException65 = new org.apache.commons.math.exception.NullArgumentException(localizable36, objArray63); numberIsTooSmallException35.addSuppressed((java.lang.Throwable) nullArgumentException65); boolean boolean67 = complex29.equals((java.lang.Object) numberIsTooSmallException35); java.lang.Number number68 = numberIsTooSmallException35.getArgument(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue(Double.isNaN(double30)); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(objArray63); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertEquals("'" + number68 + "' != '" + 10.000001f + "'", number68, 10.000001f); }
public void test0613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0613"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.7182482745272054d, 9.536747711537455E-7d); org.apache.commons.math.complex.Complex complex3 = complex2.reciprocal(); org.apache.commons.math.complex.Complex complex4 = complex2.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0614"); double double1 = org.apache.commons.math.util.FastMath.rint(1.401298464324817E-45d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0615"); int int1 = org.apache.commons.math.util.FastMath.getExponent((-126.99999999999997d)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6); }
public void test0616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0616"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex13 = complex12.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0617"); double double2 = org.apache.commons.math.util.FastMath.hypot(4.185891831851989d, (double) 0L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.185891831851989d + "'", double2 == 4.185891831851989d); }
public void test0618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0618"); double double1 = org.apache.commons.math.util.FastMath.sinh(1.2414372125137612d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5858074381301621d + "'", double1 == 1.5858074381301621d); }
public void test0619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0619"); double double1 = org.apache.commons.math.util.FastMath.acos((-57.29577951308232d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0620"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); double double30 = complex29.abs(); java.lang.Number number31 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException34 = new org.apache.commons.math.exception.NumberIsTooSmallException(number31, (java.lang.Number) 1.5515679276951895d, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext35 = numberIsTooSmallException34.getContext(); boolean boolean36 = complex29.equals((java.lang.Object) numberIsTooSmallException34); java.lang.String str37 = numberIsTooSmallException34.toString(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue(Double.isNaN(double30)); org.junit.Assert.assertNotNull(exceptionContext35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.apache.commons.math.exception.NumberIsTooSmallException: null is smaller than, or equal to, the minimum (1.552)" + "'", str37, "org.apache.commons.math.exception.NumberIsTooSmallException: null is smaller than, or equal to, the minimum (1.552)"); }
public void test0621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0621"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) (byte) 10, Float.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f); }
public void test0622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0622"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex14 = complex6.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = complex6.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test0623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0623"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); boolean boolean14 = complex13.isNaN(); org.apache.commons.math.complex.Complex complex15 = complex13.cos(); org.apache.commons.math.complex.Complex complex16 = complex15.sin(); org.apache.commons.math.complex.Complex complex17 = complex16.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0624"); double double1 = org.apache.commons.math.util.FastMath.ulp(0.27036181096446554d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.551115123125783E-17d + "'", double1 == 5.551115123125783E-17d); }
public void test0625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0625"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.acos(); org.apache.commons.math.complex.Complex complex8 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex8.divide((double) 100.00001f); java.lang.Object obj11 = complex8.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(NaN, NaN)"); }
public void test0626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0626"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 1.5707894966057265d); }
public void test0627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0627"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.sinh(); org.apache.commons.math.complex.Complex complex8 = complex7.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0628"); double double1 = org.apache.commons.math.util.FastMath.sin(7.629394531101971E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.629394531027956E-6d + "'", double1 == 7.629394531027956E-6d); }
public void test0629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0629"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0f, (java.lang.Number) 2.0d, false); java.lang.Throwable[] throwableArray5 = numberIsTooSmallException4.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException6 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray5); org.junit.Assert.assertNotNull(throwableArray5); }
public void test0630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0630"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); java.lang.String str8 = complex5.toString(); org.apache.commons.math.complex.Complex complex9 = complex5.negate(); org.apache.commons.math.complex.Complex complex10 = complex9.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.8508157176809255, 0.0)" + "'", str8, "(1.8508157176809255, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0631"); float float2 = org.apache.commons.math.util.FastMath.min(100.0f, (float) 794L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f); }
public void test0632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0632"); double double2 = org.apache.commons.math.util.FastMath.scalb(0.0d, (int) (short) 1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0633"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.5430806348152437d, 1.000000953675226d); }
public void test0634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0634"); long long1 = org.apache.commons.math.util.FastMath.abs((long) (-4)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 4L + "'", long1 == 4L); }
public void test0635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0635"); double double2 = org.apache.commons.math.util.FastMath.max((double) 127L, 0.9999876561221204d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 127.0d + "'", double2 == 127.0d); }
public void test0636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0636"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex18 = complex17.cos(); boolean boolean20 = complex17.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex17); org.apache.commons.math.complex.Complex complex22 = complex17.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test0637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0637"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.5553480614894135d, (java.lang.Number) (short) 10, false); java.lang.Throwable[] throwableArray5 = numberIsTooSmallException4.getSuppressed(); org.junit.Assert.assertNotNull(throwableArray5); }
public void test0638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0638"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.1856605344040803E-4d, (-1023.0d)); org.junit.Assert.assertNotNull(complex2); }
public void test0639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0639"); float float2 = org.apache.commons.math.util.FastMath.max((float) (short) 1, Float.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + float2 + "' != '" + Float.POSITIVE_INFINITY + "'", float2 == Float.POSITIVE_INFINITY); }
public void test0640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0640"); float float2 = org.apache.commons.math.util.FastMath.scalb(0.0f, 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test0641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0641"); double double1 = org.apache.commons.math.util.FastMath.cbrt(4.242640687119285d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.6188704068605666d + "'", double1 == 1.6188704068605666d); }
public void test0642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0642"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex2.subtract(complex42); org.apache.commons.math.complex.Complex complex45 = complex42.pow(1.557407724654902d); double double46 = complex45.getImaginary(); boolean boolean48 = complex45.equals((java.lang.Object) 127.0f); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.294183431150302d + "'", double46 == 1.294183431150302d); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); }
public void test0643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0643"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) 9223372036854775807L, (float) (-57)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-9.223372E18f) + "'", float2 == (-9.223372E18f)); }
public void test0644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0644"); double double1 = org.apache.commons.math.util.FastMath.ceil(21.487562597358306d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 22.0d + "'", double1 == 22.0d); }
public void test0645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0645"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); boolean boolean12 = complex10.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19); org.apache.commons.math.complex.Complex complex21 = complex4.subtract(complex19); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex30 = complex28.multiply((int) (short) 0); double double31 = complex30.getArgument(); org.apache.commons.math.complex.Complex complex32 = complex23.subtract(complex30); org.apache.commons.math.complex.Complex complex33 = complex30.reciprocal(); org.apache.commons.math.complex.Complex complex35 = complex33.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex37 = complex33.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex38 = complex37.sinh(); org.apache.commons.math.complex.Complex complex40 = complex38.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex41 = complex40.sqrt(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex50.reciprocal(); org.apache.commons.math.complex.Complex complex52 = complex46.multiply(complex51); org.apache.commons.math.complex.Complex complex53 = complex40.divide(complex52); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex57.reciprocal(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex62 = complex61.log(); org.apache.commons.math.complex.Complex complex63 = complex61.tanh(); org.apache.commons.math.complex.Complex complex64 = complex63.sqrt1z(); org.apache.commons.math.complex.Complex complex65 = complex57.divide(complex63); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex71 = complex70.log(); org.apache.commons.math.complex.Complex complex72 = complex70.tanh(); org.apache.commons.math.complex.Complex complex74 = complex72.multiply((int) (short) 0); double double75 = complex74.getArgument(); org.apache.commons.math.complex.Complex complex76 = complex67.subtract(complex74); org.apache.commons.math.complex.Complex complex77 = complex74.reciprocal(); org.apache.commons.math.complex.Complex complex78 = complex65.add(complex74); org.apache.commons.math.complex.Complex complex79 = complex40.divide(complex65); org.apache.commons.math.complex.Complex complex80 = complex19.add(complex79); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); }
public void test0646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0646"); int int1 = org.apache.commons.math.util.FastMath.getExponent(0.04491118145049999d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-5) + "'", int1 == (-5)); }
public void test0647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0647"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex3 = complex1.pow((double) 20L); double double4 = complex3.abs(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 8.76995679608269E9d + "'", double4 == 8.76995679608269E9d); }
public void test0648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0648"); double double2 = org.apache.commons.math.util.FastMath.pow((double) '#', 5.685719999335932E24d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY); }
public void test0649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0649"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object obj28 = complex27.readResolve(); org.apache.commons.math.complex.Complex complex29 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex30 = complex27.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex27.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex33 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField36 = complex35.getField(); org.apache.commons.math.complex.Complex complex37 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex38 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex39 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex40 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex41 = complex33.multiply(complex40); org.apache.commons.math.exception.util.Localizable localizable42 = null; java.lang.Object[] objArray43 = null; org.apache.commons.math.exception.NullArgumentException nullArgumentException44 = new org.apache.commons.math.exception.NullArgumentException(localizable42, objArray43); boolean boolean45 = complex40.equals((java.lang.Object) objArray43); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(obj28); org.junit.Assert.assertEquals(obj28.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complexField36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); }
public void test0650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0650"); double double2 = org.apache.commons.math.util.FastMath.min((double) (-18), 3.732511156817248d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-18.0d) + "'", double2 == (-18.0d)); }
public void test0651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0651"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.ComplexField complexField12 = complex4.getField(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply((int) (short) 0); double double27 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex31 = complex30.cos(); boolean boolean33 = complex30.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex34 = complex24.subtract(complex30); org.apache.commons.math.complex.Complex complex35 = complex4.subtract(complex30); org.apache.commons.math.complex.Complex complex36 = complex30.sin(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.negate(); boolean boolean41 = complex39.isNaN(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); double double51 = complex50.getArgument(); org.apache.commons.math.complex.Complex complex52 = complex43.subtract(complex50); org.apache.commons.math.complex.Complex complex53 = complex50.reciprocal(); org.apache.commons.math.complex.Complex complex55 = complex53.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex56 = complex53.sin(); org.apache.commons.math.complex.Complex complex57 = complex53.sinh(); org.apache.commons.math.complex.Complex complex59 = complex53.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex60 = complex39.multiply(complex59); org.apache.commons.math.complex.Complex complex61 = complex60.acos(); double double62 = complex61.getImaginary(); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex66 = complex65.log(); double double67 = complex66.getReal(); org.apache.commons.math.complex.Complex complex68 = complex61.add(complex66); org.apache.commons.math.complex.Complex complex69 = complex66.negate(); org.apache.commons.math.complex.Complex complex70 = complex30.divide(complex66); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.557407724654902d + "'", double27 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertTrue(Double.isNaN(double62)); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); }
public void test0652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0652"); double double1 = org.apache.commons.math.util.FastMath.sqrt(0.8813648585528526d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9388103421633427d + "'", double1 == 0.9388103421633427d); }
public void test0653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0653"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex11.add(complex20); org.apache.commons.math.complex.Complex complex26 = complex20.multiply(0.0d); org.apache.commons.math.complex.Complex complex29 = complex20.createComplex(3.141592653589793d, (-5.117509926296107d)); double double30 = complex29.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 3.141592653589793d + "'", double30 == 3.141592653589793d); }
public void test0654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0654"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double31 = complex30.abs(); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex34.tanh(); org.apache.commons.math.complex.Complex complex38 = complex36.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex39 = complex30.divide(complex36); java.lang.String str40 = complex36.toString(); org.apache.commons.math.complex.Complex complex41 = complex25.divide(complex36); org.apache.commons.math.complex.Complex complex44 = complex36.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); double double54 = complex53.getArgument(); org.apache.commons.math.complex.Complex complex55 = complex46.subtract(complex53); org.apache.commons.math.complex.Complex complex56 = complex36.subtract(complex55); org.apache.commons.math.complex.ComplexField complexField57 = complex56.getField(); org.apache.commons.math.complex.Complex complex58 = complexField57.getOne(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass59 = complexField57.getRuntimeClass(); boolean boolean60 = complex4.equals((java.lang.Object) wildcardClass59); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(0.0, 1.557407724654902)" + "'", str40, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complexField57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(wildcardClass59); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); }
public void test0655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0655"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) 100L, 3.8146973E-6f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f); }
public void test0656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0656"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(1.5912754690222415E-7d); org.junit.Assert.assertNotNull(complex1); }
public void test0657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0657"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0d, (java.lang.Number) 0.8623188722876839d, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext4 = numberIsTooSmallException3.getContext(); java.lang.String str5 = numberIsTooSmallException3.toString(); org.junit.Assert.assertNotNull(exceptionContext4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.exception.NumberIsTooSmallException: 100 is smaller than the minimum (0.862)" + "'", str5, "org.apache.commons.math.exception.NumberIsTooSmallException: 100 is smaller than the minimum (0.862)"); }
public void test0658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0658"); long long1 = org.apache.commons.math.util.FastMath.round((double) (-57)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-57L) + "'", long1 == (-57L)); }
public void test0659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0659"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); double double3 = complex2.getReal(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex4.add((double) 35); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex17 = complex16.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = complex10.divide(complex16); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double29 = complex28.abs(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex37 = complex28.divide(complex34); java.lang.String str38 = complex34.toString(); org.apache.commons.math.complex.Complex complex39 = complex23.divide(complex34); org.apache.commons.math.complex.Complex complex40 = complex39.sqrt1z(); org.apache.commons.math.complex.Complex complex41 = complex10.subtract(complex40); org.apache.commons.math.complex.Complex complex42 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex44 = complex6.pow(1.0d); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((-1.5574077246549023d)); org.apache.commons.math.complex.Complex complex47 = complex44.subtract(complex46); org.apache.commons.math.complex.Complex complex48 = complex2.multiply(complex47); boolean boolean49 = complex2.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 36.0d + "'", double3 == 36.0d); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(0.0, 1.557407724654902)" + "'", str38, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test0660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0660"); double double1 = org.apache.commons.math.util.FastMath.exp(6.830189170118965E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0000068302124958d + "'", double1 == 1.0000068302124958d); }
public void test0661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0661"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex2.subtract(complex42); org.apache.commons.math.complex.Complex complex45 = complex42.pow(1.557407724654902d); double double46 = complex45.getImaginary(); org.apache.commons.math.complex.Complex complex47 = complex45.asin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.294183431150302d + "'", double46 == 1.294183431150302d); org.junit.Assert.assertNotNull(complex47); }
public void test0662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0662"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex40.sqrt(); org.apache.commons.math.complex.Complex complex53 = complex52.conjugate(); boolean boolean54 = complex52.isNaN(); boolean boolean55 = complex52.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); }
public void test0663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0663"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex43 = complex41.add((double) 35); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex47.reciprocal(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex54 = complex53.sqrt1z(); org.apache.commons.math.complex.Complex complex55 = complex47.divide(complex53); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex59 = complex58.log(); org.apache.commons.math.complex.Complex complex60 = complex58.tanh(); org.apache.commons.math.complex.Complex complex62 = complex60.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double66 = complex65.abs(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex70 = complex69.log(); org.apache.commons.math.complex.Complex complex71 = complex69.tanh(); org.apache.commons.math.complex.Complex complex73 = complex71.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex74 = complex65.divide(complex71); java.lang.String str75 = complex71.toString(); org.apache.commons.math.complex.Complex complex76 = complex60.divide(complex71); org.apache.commons.math.complex.Complex complex77 = complex76.sqrt1z(); org.apache.commons.math.complex.Complex complex78 = complex47.subtract(complex77); org.apache.commons.math.complex.Complex complex79 = complex43.divide(complex47); org.apache.commons.math.complex.Complex complex81 = complex43.pow(1.0d); double double82 = complex81.getImaginary(); org.apache.commons.math.complex.Complex complex83 = complex81.negate(); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex91 = complex90.acos(); org.apache.commons.math.complex.Complex complex92 = complex81.divide(complex91); org.apache.commons.math.complex.Complex complex93 = complex81.sqrt1z(); org.apache.commons.math.complex.Complex complex94 = complex2.divide(complex81); org.apache.commons.math.complex.Complex complex96 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex97 = complex96.atan(); org.apache.commons.math.complex.Complex complex98 = complex81.pow(complex97); org.apache.commons.math.complex.Complex complex99 = complex97.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(0.0, 1.557407724654902)" + "'", str75, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex96); org.junit.Assert.assertNotNull(complex97); org.junit.Assert.assertNotNull(complex98); org.junit.Assert.assertNotNull(complex99); }
public void test0664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0664"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext5 = numberIsTooSmallException4.getContext(); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException4.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray6); org.apache.commons.math.exception.util.ExceptionContext exceptionContext8 = mathIllegalArgumentException7.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext9 = mathIllegalArgumentException7.getContext(); org.junit.Assert.assertNotNull(exceptionContext5); org.junit.Assert.assertNotNull(throwableArray6); org.junit.Assert.assertNotNull(exceptionContext8); org.junit.Assert.assertNotNull(exceptionContext9); }
public void test0665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0665"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); boolean boolean26 = complex24.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); double double31 = complex30.getReal(); org.apache.commons.math.complex.Complex complex33 = complex30.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex34 = complex24.multiply(complex33); org.apache.commons.math.complex.Complex complex35 = complex34.cosh(); boolean boolean36 = complex34.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField37 = complex34.getField(); org.apache.commons.math.complex.Complex complex38 = complex11.pow(complex34); org.apache.commons.math.complex.Complex complex39 = complex4.subtract(complex11); org.apache.commons.math.complex.ComplexField complexField40 = complex39.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass41 = complexField40.getRuntimeClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complexField37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complexField40); org.junit.Assert.assertNotNull(wildcardClass41); }
public void test0666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0666"); double double1 = org.apache.commons.math.util.FastMath.ulp(7.642595581083531E24d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.073741824E9d + "'", double1 == 1.073741824E9d); }
public void test0667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0667"); double double1 = org.apache.commons.math.util.FastMath.log1p(18.82795958245219d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.9870930417485533d + "'", double1 == 2.9870930417485533d); }
public void test0668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0668"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex6.getArgument(); boolean boolean8 = complex6.isInfinite(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); java.lang.String str10 = complex6.toString(); org.apache.commons.math.complex.Complex complex12 = complex6.subtract(4.9E-324d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(0.0, 0.0)" + "'", str10, "(0.0, 0.0)"); org.junit.Assert.assertNotNull(complex12); }
public void test0669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0669"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(1.3051531393776674d, 0.10471975511965978d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.3051531393776672d + "'", double2 == 1.3051531393776672d); }
public void test0670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0670"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex2.sin(); boolean boolean12 = complex2.isInfinite(); boolean boolean13 = complex2.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test0671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0671"); double double1 = org.apache.commons.math.util.FastMath.cbrt(0.8623188722876839d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9518224930797358d + "'", double1 == 0.9518224930797358d); }
public void test0672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0672"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex16.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.cosh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test0673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0673"); double double2 = org.apache.commons.math.util.FastMath.hypot(9.536743164063946E-7d, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 9.536743164063946E-7d + "'", double2 == 9.536743164063946E-7d); }
public void test0674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0674"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); java.lang.Object obj8 = complex6.readResolve(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = complex9.subtract(complex14); org.apache.commons.math.complex.Complex complex19 = complex14.divide(1.8380461242828246E74d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(obj8); org.junit.Assert.assertEquals(obj8.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); }
public void test0675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0675"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((-4)); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); }
public void test0676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0676"); int int1 = org.apache.commons.math.util.FastMath.round((float) 5L); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5); }
public void test0677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0677"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex4 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex5 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex7.add((double) 35); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex13.divide(complex19); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex28 = complex26.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double32 = complex31.abs(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex35.tanh(); org.apache.commons.math.complex.Complex complex39 = complex37.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex40 = complex31.divide(complex37); java.lang.String str41 = complex37.toString(); org.apache.commons.math.complex.Complex complex42 = complex26.divide(complex37); org.apache.commons.math.complex.Complex complex43 = complex42.sqrt1z(); org.apache.commons.math.complex.Complex complex44 = complex13.subtract(complex43); org.apache.commons.math.complex.Complex complex45 = complex9.divide(complex13); org.apache.commons.math.complex.Complex complex47 = complex9.pow(1.0d); double double48 = complex47.getImaginary(); org.apache.commons.math.complex.Complex complex50 = complex47.multiply(1.9867717342662448d); org.apache.commons.math.complex.Complex complex51 = complex6.pow(complex47); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0d + "'", double32 == 1.0d); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(0.0, 1.557407724654902)" + "'", str41, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); }
public void test0678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0678"); double double1 = org.apache.commons.math.util.FastMath.toDegrees(5.8774717541114375E-39d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.3675432571793813E-37d + "'", double1 == 3.3675432571793813E-37d); }
public void test0679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0679"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); double double22 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex23 = complex15.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex26 = complex23.subtract((double) 6.1035156E-5f); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue(Double.isNaN(double22)); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); }
public void test0680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0680"); float float1 = org.apache.commons.math.util.FastMath.nextUp((float) (short) 10); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 10.000001f + "'", float1 == 10.000001f); }
public void test0681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0681"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); boolean boolean15 = complex12.equals((java.lang.Object) 35.00000000000001d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test0682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0682"); float float2 = org.apache.commons.math.util.FastMath.min(3.8146973E-6f, (float) 794L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 3.8146973E-6f + "'", float2 == 3.8146973E-6f); }
public void test0683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0683"); long long2 = org.apache.commons.math.util.FastMath.min((long) '4', (long) 32); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 32L + "'", long2 == 32L); }
public void test0684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0684"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); boolean boolean32 = complex18.isInfinite(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test0685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0685"); double double2 = org.apache.commons.math.util.FastMath.hypot(2.972195942014659d, (double) 0L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.972195942014659d + "'", double2 == 2.972195942014659d); }
public void test0686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0686"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.apache.commons.math.complex.Complex complex37 = complex36.reciprocal(); org.apache.commons.math.complex.Complex complex38 = complex31.multiply(complex37); org.apache.commons.math.complex.Complex complex40 = complex31.divide((-0.005429048803495734d)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); }
public void test0687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0687"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex23.cosh(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.negate(); org.apache.commons.math.complex.Complex complex29 = complex23.divide(complex27); org.apache.commons.math.complex.Complex complex31 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex23); org.apache.commons.math.complex.Complex complex33 = complex16.exp(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); }
public void test0688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0688"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex9 = complex4.tan(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex11 = complex9.add(complex10); double double12 = complex9.getReal(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(32); org.apache.commons.math.complex.Complex complex15 = complex14.sin(); java.lang.Object obj16 = complex14.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(obj16); org.junit.Assert.assertEquals(obj16.toString(), "(0.0, 29.279983863574646)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "(0.0, 29.279983863574646)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "(0.0, 29.279983863574646)"); }
public void test0689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0689"); int int1 = org.apache.commons.math.util.FastMath.round((float) (-5)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-5) + "'", int1 == (-5)); }
public void test0690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0690"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex29); double double32 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex36 = complex24.subtract(complex35); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test0691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0691"); int int1 = org.apache.commons.math.util.FastMath.getExponent(2.9870930417485533d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0692"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.9518224930797358d, 32.0d); }
public void test0693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0693"); double double2 = org.apache.commons.math.util.FastMath.hypot(96.99999999999999d, (double) (byte) 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 96.99999999999999d + "'", double2 == 96.99999999999999d); }
public void test0694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0694"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.ComplexField complexField12 = complex4.getField(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply((int) (short) 0); double double27 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex31 = complex30.cos(); boolean boolean33 = complex30.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex34 = complex24.subtract(complex30); org.apache.commons.math.complex.Complex complex35 = complex4.subtract(complex30); org.apache.commons.math.complex.Complex complex37 = complex35.divide((double) 0L); org.apache.commons.math.complex.Complex complex39 = complex37.multiply(0); org.apache.commons.math.complex.Complex complex40 = complex39.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.557407724654902d + "'", double27 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); }
public void test0695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0695"); double double1 = org.apache.commons.math.util.FastMath.abs((double) 97L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 97.0d + "'", double1 == 97.0d); }
public void test0696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0696"); float float1 = org.apache.commons.math.util.FastMath.nextUp(2.24E-44f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.4E-44f + "'", float1 == 2.4E-44f); }
public void test0697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0697"); long long2 = org.apache.commons.math.util.FastMath.max((long) (short) 1, (long) 6); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 6L + "'", long2 == 6L); }
public void test0698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0698"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField18 = complex11.getField(); org.apache.commons.math.complex.Complex complex19 = complexField18.getOne(); org.apache.commons.math.complex.Complex complex21 = complex19.divide((-1.5574077246549018d)); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complexField18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); }
public void test0699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0699"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.acos(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test0700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0700"); double double1 = org.apache.commons.math.util.FastMath.sinh(36.07140440247275d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.3151646937170245E15d + "'", double1 == 2.3151646937170245E15d); }
public void test0701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0701"); double double2 = org.apache.commons.math.util.FastMath.hypot(24.88324087887704d, (-0.017453292519943295d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 24.883246999811686d + "'", double2 == 24.883246999811686d); }
public void test0702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0702"); int int2 = org.apache.commons.math.util.FastMath.max((int) (short) 1, (int) '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35); }
public void test0703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0703"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex3.subtract(70.7906245758041d); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); org.apache.commons.math.complex.Complex complex10 = complex9.reciprocal(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex10.multiply(complex15); java.lang.Object obj17 = complex16.readResolve(); org.apache.commons.math.complex.Complex complex18 = complex16.sqrt(); org.apache.commons.math.complex.Complex complex19 = complex16.reciprocal(); org.apache.commons.math.complex.Complex complex21 = complex16.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex28 = complex26.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex29 = complex28.tanh(); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex31 = complex16.subtract(complex29); org.apache.commons.math.complex.Complex complex32 = complex29.exp(); org.apache.commons.math.complex.Complex complex33 = complex5.add(complex29); boolean boolean35 = complex33.equals((java.lang.Object) 4.67232872835526d); org.apache.commons.math.complex.Complex complex37 = complex33.multiply(0.9376558078861459d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(complex37); }
public void test0704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0704"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double7 = complex6.abs(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex19.reciprocal(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex26 = complex20.multiply(complex25); java.lang.Object[] objArray27 = new java.lang.Object[] { 0.0f, (short) 0, complex12, complex25 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException28 = new org.apache.commons.math.exception.NullArgumentException(localizable1, objArray27); java.lang.Throwable[] throwableArray29 = nullArgumentException28.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException30 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray29); // The following exception was thrown during execution in test generation try { java.lang.String str31 = nullArgumentException30.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(throwableArray29); }
public void test0705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0705"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((float) 3L, (-4.557889368543449d)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.9999998f + "'", float2 == 2.9999998f); }
public void test0706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0706"); double double1 = org.apache.commons.math.util.FastMath.cosh(7.62939453110197E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0000000000291038d + "'", double1 == 1.0000000000291038d); }
public void test0707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0707"); double double2 = org.apache.commons.math.util.FastMath.scalb((double) 10L, 1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 20.0d + "'", double2 == 20.0d); }
public void test0708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0708"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex15.exp(); org.apache.commons.math.complex.Complex complex20 = complex15.createComplex((double) (short) 10, 0.015050303523504572d); org.apache.commons.math.complex.Complex complex21 = complex20.atan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test0709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0709"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0710"); double double1 = org.apache.commons.math.util.FastMath.signum(5.8774717541114375E-39d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0711"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (byte) 0, (java.lang.Number) (-1), true); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + (-1) + "'", number5, (-1)); }
public void test0712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0712"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); double double21 = complex20.getImaginary(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex26 = complex20.divide(complex25); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField27 = complex20.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complexField27); }
public void test0713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0713"); double double2 = org.apache.commons.math.util.FastMath.nextAfter((double) '#', (double) 2147483647L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 35.00000000000001d + "'", double2 == 35.00000000000001d); }
public void test0714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0714"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.exp(); org.apache.commons.math.complex.Complex complex13 = complex8.pow(0.0d); org.apache.commons.math.complex.Complex complex15 = complex8.pow((-0.15901677465164d)); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); }
public void test0715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0715"); double double1 = org.apache.commons.math.util.FastMath.toRadians((-0.807398602382685d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.014091763987578387d) + "'", double1 == (-0.014091763987578387d)); }
public void test0716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0716"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(2.3151646937170245E15d); }
public void test0717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0717"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex16.tan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); }
public void test0718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0718"); int int2 = org.apache.commons.math.util.FastMath.min((int) (short) 1, (int) (byte) 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0719"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); boolean boolean8 = complex6.isNaN(); org.apache.commons.math.complex.Complex complex10 = complex6.multiply(102); org.apache.commons.math.complex.Complex complex11 = complex6.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test0720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0720"); double double1 = org.apache.commons.math.util.FastMath.log(4.440892098500626E-16d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-35.35050620855721d) + "'", double1 == (-35.35050620855721d)); }
public void test0721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0721"); double double2 = org.apache.commons.math.util.FastMath.hypot((double) (-57), 1.3259810419622984d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 57.01542094664954d + "'", double2 == 57.01542094664954d); }
public void test0722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0722"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex8.tanh(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex36.sinh(); org.apache.commons.math.complex.ComplexField complexField39 = complex36.getField(); org.apache.commons.math.complex.Complex complex40 = complexField39.getOne(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.5707963267948966d + "'", double37 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complexField39); org.junit.Assert.assertNotNull(complex40); }
public void test0723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0723"); float float2 = org.apache.commons.math.util.FastMath.min(3.0562855E-37f, 9.536743E-7f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 3.0562855E-37f + "'", float2 == 3.0562855E-37f); }
public void test0724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0724"); int int2 = org.apache.commons.math.util.FastMath.max(4, (-1023)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4); }
public void test0725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0725"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.ComplexField complexField12 = complex4.getField(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply((int) (short) 0); double double27 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex31 = complex30.cos(); boolean boolean33 = complex30.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex34 = complex24.subtract(complex30); org.apache.commons.math.complex.Complex complex35 = complex4.subtract(complex30); org.apache.commons.math.complex.Complex complex37 = complex35.divide((double) 0L); org.apache.commons.math.complex.Complex complex38 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex39 = complex35.pow(complex38); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.557407724654902d + "'", double27 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); }
public void test0726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0726"); double double1 = org.apache.commons.math.util.FastMath.rint((-11.894158187830156d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-12.0d) + "'", double1 == (-12.0d)); }
public void test0727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0727"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); org.apache.commons.math.complex.Complex complex25 = complex24.sqrt(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); }
public void test0728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0728"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.ComplexField complexField6 = complex2.getField(); org.apache.commons.math.complex.Complex complex7 = complexField6.getZero(); org.apache.commons.math.complex.Complex complex8 = complexField6.getZero(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0729"); double double1 = org.apache.commons.math.util.FastMath.tanh(2.9870930417485533d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9949257636842541d + "'", double1 == 0.9949257636842541d); }
public void test0730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0730"); double double1 = org.apache.commons.math.util.FastMath.tan(4.67232872835526d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 24.949044273619414d + "'", double1 == 24.949044273619414d); }
public void test0731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0731"); double double1 = org.apache.commons.math.util.FastMath.log10(3.469446951953614E-18d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-17.45973974851091d) + "'", double1 == (-17.45973974851091d)); }
public void test0732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0732"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.atan(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex29 = complex26.add(complex28); org.apache.commons.math.complex.Complex complex30 = complex26.conjugate(); double double31 = complex30.getArgument(); org.apache.commons.math.complex.Complex complex32 = complex30.asin(); org.apache.commons.math.complex.Complex complex33 = complex21.subtract(complex32); org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.apache.commons.math.complex.Complex complex37 = complex33.subtract(complex35); org.apache.commons.math.complex.Complex complex38 = complex35.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField39 = complex35.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.5707963267948966d) + "'", double31 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complexField39); }
public void test0733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0733"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(8.658293401173658E24d); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex5.reciprocal(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex12 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex13 = complex6.tanh(); org.apache.commons.math.complex.Complex complex14 = complex6.cos(); org.apache.commons.math.complex.Complex complex15 = complex14.tan(); org.apache.commons.math.complex.Complex complex16 = complex1.multiply(complex14); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField17 = complex14.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass18 = complexField17.getRuntimeClass(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass19 = complexField17.getRuntimeClass(); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complexField17); org.junit.Assert.assertNotNull(wildcardClass18); org.junit.Assert.assertNotNull(wildcardClass19); }
public void test0734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0734"); float float2 = org.apache.commons.math.util.FastMath.copySign(0.0f, (float) 18); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test0735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0735"); double double1 = org.apache.commons.math.util.FastMath.ceil(0.6217142807768795d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0736"); double double1 = org.apache.commons.math.util.FastMath.cos(0.9999876561221203d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.540312692842052d + "'", double1 == 0.540312692842052d); }
public void test0737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0737"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex6.getArgument(); boolean boolean8 = complex6.isInfinite(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.createComplex((double) (short) 1, (-0.0d)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex16.reciprocal(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex23 = complex17.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex17.asin(); org.apache.commons.math.complex.Complex complex25 = complex17.cosh(); org.apache.commons.math.complex.Complex complex26 = complex25.conjugate(); org.apache.commons.math.complex.Complex complex29 = complex26.createComplex(10.04987562112089d, 3.141592653589793d); org.apache.commons.math.complex.Complex complex30 = complex12.add(complex26); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); }
public void test0738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0738"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-15.653559774527022d)); java.lang.String str2 = notPositiveException1.toString(); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.exception.NotPositiveException: -15.654 is smaller than the minimum (0)" + "'", str2, "org.apache.commons.math.exception.NotPositiveException: -15.654 is smaller than the minimum (0)"); }
public void test0739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0739"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); java.lang.Throwable[] throwableArray7 = numberIsTooSmallException4.getSuppressed(); java.lang.Number number8 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException11 = new org.apache.commons.math.exception.NumberIsTooSmallException(number8, (java.lang.Number) 1.5515679276951895d, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext12 = numberIsTooSmallException11.getContext(); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException11); java.lang.Number number14 = numberIsTooSmallException4.getMin(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 1.0d + "'", number5, 1.0d); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(throwableArray7); org.junit.Assert.assertNotNull(exceptionContext12); org.junit.Assert.assertEquals("'" + number14 + "' != '" + 1.0d + "'", number14, 1.0d); }
public void test0740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0740"); int int1 = org.apache.commons.math.util.FastMath.abs((int) (byte) 10); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10); }
public void test0741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0741"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); boolean boolean32 = complex30.isNaN(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test0742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0742"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex23 = complex15.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); java.lang.Class<?> wildcardClass25 = complex23.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(wildcardClass25); }
public void test0743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0743"); double double1 = org.apache.commons.math.util.FastMath.atan(2.972195942014659d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.2462419869011496d + "'", double1 == 1.2462419869011496d); }
public void test0744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0744"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 3L, (java.lang.Number) (-0.017453292519943295d), false); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException5.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) throwableArray6); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray6); org.junit.Assert.assertNotNull(throwableArray6); }
public void test0745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0745"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.0232274785475506d, (double) 100L); org.apache.commons.math.complex.Complex complex5 = complex2.createComplex((double) 6, (double) (-4.0f)); org.junit.Assert.assertNotNull(complex5); }
public void test0746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0746"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); boolean boolean12 = complex10.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19); org.apache.commons.math.complex.Complex complex21 = complex4.subtract(complex19); org.apache.commons.math.complex.Complex complex22 = complex21.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test0747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0747"); double double1 = org.apache.commons.math.util.FastMath.toRadians(2.802596928649634E-45d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.891454401121671E-47d + "'", double1 == 4.891454401121671E-47d); }
public void test0748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0748"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); java.lang.Object obj19 = complex16.readResolve(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf(Double.POSITIVE_INFINITY); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex26 = complex23.subtract((double) 96.99999f); org.apache.commons.math.complex.Complex complex27 = complex21.add(complex26); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex29.subtract(complex36); org.apache.commons.math.complex.Complex complex39 = complex36.reciprocal(); org.apache.commons.math.complex.Complex complex41 = complex39.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex42 = complex39.sin(); org.apache.commons.math.complex.Complex complex43 = complex39.sinh(); org.apache.commons.math.complex.Complex complex45 = complex39.pow((double) (short) 100); java.lang.String str46 = complex45.toString(); org.apache.commons.math.complex.Complex complex47 = complex45.log(); org.apache.commons.math.complex.Complex complex48 = complex45.negate(); boolean boolean49 = complex45.isInfinite(); org.apache.commons.math.complex.Complex complex50 = complex21.add(complex45); org.apache.commons.math.complex.Complex complex51 = complex16.divide(complex50); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(obj19); org.junit.Assert.assertEquals(obj19.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(NaN, NaN)" + "'", str46, "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); }
public void test0749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0749"); int int2 = org.apache.commons.math.util.FastMath.min((int) '#', (int) '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35); }
public void test0750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0750"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); boolean boolean9 = complex7.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test0751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0751"); double double1 = org.apache.commons.math.util.FastMath.nextUp(71.84044670030278d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 71.84044670030279d + "'", double1 == 71.84044670030279d); }
public void test0752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0752"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex29); double double32 = complex24.getImaginary(); double double33 = complex24.getReal(); org.apache.commons.math.complex.Complex complex34 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex35 = complex24.subtract(complex34); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertTrue(Double.isNaN(double33)); }
public void test0753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0753"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); boolean boolean6 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex7 = complex5.asin(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); boolean boolean9 = complex8.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test0754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0754"); double double1 = org.apache.commons.math.util.FastMath.ulp((double) (-52L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.105427357601002E-15d + "'", double1 == 7.105427357601002E-15d); }
public void test0755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0755"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); double double5 = complex2.getImaginary(); org.apache.commons.math.complex.Complex complex6 = complex2.tan(); org.apache.commons.math.complex.Complex complex7 = complex2.cos(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList9 = complex7.nthRoot((-5)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -5"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0756"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex4 = complex2.sinh(); org.apache.commons.math.complex.Complex complex5 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex21 = complex17.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex22 = complex21.sinh(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex26.reciprocal(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex33 = complex27.multiply(complex32); java.lang.Object obj34 = complex33.readResolve(); org.apache.commons.math.complex.Complex complex35 = complex33.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex33.reciprocal(); org.apache.commons.math.complex.Complex complex38 = complex33.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex39 = complex22.divide(complex33); org.apache.commons.math.complex.Complex complex40 = complex5.pow(complex22); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(obj34); org.junit.Assert.assertEquals(obj34.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); }
public void test0757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0757"); double double1 = org.apache.commons.math.util.FastMath.log10((double) 20.000002f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.3010300370815286d + "'", double1 == 1.3010300370815286d); }
public void test0758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0758"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); double double11 = complex9.getReal(); org.apache.commons.math.complex.Complex complex14 = complex9.createComplex(0.9999876561221204d, (double) 1.4E-45f); boolean boolean15 = complex9.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test0759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0759"); double double1 = org.apache.commons.math.util.FastMath.log1p(9.536747711537457E-7d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 9.536743164062502E-7d + "'", double1 == 9.536743164062502E-7d); }
public void test0760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0760"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.acos(); org.apache.commons.math.complex.Complex complex36 = complex8.atan(); org.apache.commons.math.complex.Complex complex37 = complex8.conjugate(); org.apache.commons.math.complex.Complex complex38 = complex8.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test0761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0761"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); boolean boolean22 = complex20.isNaN(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex24.subtract(complex31); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex34.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex37 = complex34.sin(); org.apache.commons.math.complex.Complex complex38 = complex34.sinh(); org.apache.commons.math.complex.Complex complex40 = complex34.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex41 = complex20.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double45 = complex44.abs(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex53 = complex44.divide(complex50); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex58.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double64 = complex63.abs(); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex68 = complex67.log(); org.apache.commons.math.complex.Complex complex69 = complex67.tanh(); org.apache.commons.math.complex.Complex complex71 = complex69.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex72 = complex63.divide(complex69); java.lang.String str73 = complex69.toString(); org.apache.commons.math.complex.Complex complex74 = complex58.divide(complex69); org.apache.commons.math.complex.Complex complex75 = complex50.subtract(complex58); org.apache.commons.math.complex.Complex complex76 = complex41.subtract(complex58); org.apache.commons.math.complex.Complex complex77 = complex15.subtract(complex58); java.lang.Object obj78 = complex58.readResolve(); org.apache.commons.math.complex.Complex complex79 = complex58.cos(); org.apache.commons.math.complex.Complex complex80 = complex58.tan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(0.0, 1.557407724654902)" + "'", str73, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(obj78); org.junit.Assert.assertEquals(obj78.toString(), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); }
public void test0762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0762"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.negate(); boolean boolean57 = complex55.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); double double62 = complex61.getReal(); org.apache.commons.math.complex.Complex complex64 = complex61.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex65 = complex55.multiply(complex64); org.apache.commons.math.complex.Complex complex66 = complex65.cosh(); org.apache.commons.math.complex.Complex complex67 = complex65.atan(); double double68 = complex65.getReal(); org.apache.commons.math.complex.Complex complex69 = complex50.divide(complex65); org.apache.commons.math.complex.Complex complex72 = complex69.createComplex((double) 20.000002f, (double) 1.5845633E31f); org.apache.commons.math.complex.Complex complex73 = complex69.reciprocal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.5707963267948966d) + "'", double68 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); }
public void test0763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0763"); double double1 = org.apache.commons.math.util.FastMath.exp(1.9472827946549436d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.00961511676157d + "'", double1 == 7.00961511676157d); }
public void test0764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0764"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double27 = complex26.abs(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = complex26.divide(complex32); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.log(); org.apache.commons.math.complex.Complex complex40 = complex38.tanh(); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double46 = complex45.abs(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex54 = complex45.divide(complex51); java.lang.String str55 = complex51.toString(); org.apache.commons.math.complex.Complex complex56 = complex40.divide(complex51); org.apache.commons.math.complex.Complex complex57 = complex32.subtract(complex40); org.apache.commons.math.complex.Complex complex58 = complex23.subtract(complex40); java.lang.Class<?> wildcardClass59 = complex40.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(0.0, 1.557407724654902)" + "'", str55, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(wildcardClass59); }
public void test0765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0765"); double double1 = org.apache.commons.math.util.FastMath.sin(2.1474836469999998E9d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.7249163909130705d) + "'", double1 == (-0.7249163909130705d)); }
public void test0766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0766"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.Complex complex12 = complex4.cosh(); org.apache.commons.math.complex.Complex complex13 = complex12.conjugate(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.divide((double) 0.0f); org.apache.commons.math.complex.Complex complex21 = complex18.sqrt1z(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex21); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test0767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0767"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex18 = complex11.createComplex((double) 10.000001f, (-1.5574077246549023d)); org.apache.commons.math.complex.Complex complex20 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField21 = complex20.getField(); org.apache.commons.math.complex.Complex complex22 = complexField21.getZero(); org.apache.commons.math.complex.Complex complex23 = complexField21.getZero(); org.apache.commons.math.complex.Complex complex24 = complex18.subtract(complex23); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complexField21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); }
public void test0768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0768"); double double1 = org.apache.commons.math.util.FastMath.cbrt(1.7453292519943295d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.2039980656902276d + "'", double1 == 1.2039980656902276d); }
public void test0769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0769"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.0941931165837544d, 96.99999999999999d); }
public void test0770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0770"); double double1 = org.apache.commons.math.util.FastMath.sqrt(36.07140440247275d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.005947419223111d + "'", double1 == 6.005947419223111d); }
public void test0771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0771"); float float1 = org.apache.commons.math.util.FastMath.nextUp((float) (-20L)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-19.999998f) + "'", float1 == (-19.999998f)); }
public void test0772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0772"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); org.apache.commons.math.complex.Complex complex22 = complex21.conjugate(); org.apache.commons.math.complex.Complex complex23 = complex22.sqrt(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField24 = complex22.getField(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complexField24); }
public void test0773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0773"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (byte) -1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); }
public void test0774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0774"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.apache.commons.math.complex.Complex complex37 = complex36.reciprocal(); org.apache.commons.math.complex.Complex complex38 = complex31.multiply(complex37); org.apache.commons.math.complex.Complex complex39 = complex31.asin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); }
public void test0775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0775"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.9073486E-6f); org.apache.commons.math.complex.Complex complex3 = complex1.pow(1.5515679276951895d); org.apache.commons.math.complex.Complex complex5 = complex3.add(9.536747711540346E-7d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test0776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0776"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); boolean boolean33 = complex23.isNaN(); org.apache.commons.math.complex.Complex complex34 = complex23.exp(); org.apache.commons.math.complex.Complex complex35 = complex23.negate(); java.lang.Object obj36 = complex23.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(obj36); org.junit.Assert.assertEquals(obj36.toString(), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "(0.0, 1.557407724654902)"); }
public void test0777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0777"); double double1 = org.apache.commons.math.util.FastMath.tanh((-0.02001872128744539d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.02001604755384965d) + "'", double1 == (-0.02001604755384965d)); }
public void test0778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0778"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.ComplexField complexField6 = complex2.getField(); org.apache.commons.math.complex.Complex complex7 = complexField6.getOne(); org.apache.commons.math.complex.Complex complex8 = complexField6.getZero(); org.apache.commons.math.complex.Complex complex9 = complexField6.getZero(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test0779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0779"); long long1 = org.apache.commons.math.util.FastMath.abs(97L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 97L + "'", long1 == 97L); }
public void test0780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0780"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(21.487562597358306d, (double) 127.0f); org.junit.Assert.assertNotNull(complex2); }
public void test0781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0781"); double double1 = org.apache.commons.math.util.FastMath.sin((double) (-1L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.8414709848078965d) + "'", double1 == (-0.8414709848078965d)); }
public void test0782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0782"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex35.reciprocal(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = complex35.divide(complex41); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); double double53 = complex52.getArgument(); org.apache.commons.math.complex.Complex complex54 = complex45.subtract(complex52); org.apache.commons.math.complex.Complex complex55 = complex52.reciprocal(); org.apache.commons.math.complex.Complex complex56 = complex43.add(complex52); org.apache.commons.math.complex.Complex complex57 = complex18.divide(complex43); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex59 = complex58.log(); org.apache.commons.math.complex.Complex complex60 = complex59.negate(); org.apache.commons.math.complex.Complex complex61 = complex60.reciprocal(); org.apache.commons.math.complex.Complex complex63 = complex61.pow((double) '4'); org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex67 = complex66.log(); org.apache.commons.math.complex.Complex complex68 = complex66.tanh(); org.apache.commons.math.complex.Complex complex70 = complex68.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double74 = complex73.abs(); org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex78 = complex77.log(); org.apache.commons.math.complex.Complex complex79 = complex77.tanh(); org.apache.commons.math.complex.Complex complex81 = complex79.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex82 = complex73.divide(complex79); java.lang.String str83 = complex79.toString(); org.apache.commons.math.complex.Complex complex84 = complex68.divide(complex79); double double85 = complex84.getImaginary(); org.apache.commons.math.complex.Complex complex86 = complex61.divide(complex84); org.apache.commons.math.complex.Complex complex87 = complex86.cos(); org.apache.commons.math.complex.Complex complex88 = complex86.sinh(); org.apache.commons.math.complex.Complex complex89 = complex57.pow(complex86); double double90 = complex86.getReal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(0.0, 1.557407724654902)" + "'", str83, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertTrue(Double.isNaN(double90)); }
public void test0783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0783"); float float1 = org.apache.commons.math.util.FastMath.ulp(2.9999995f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.3841858E-7f + "'", float1 == 2.3841858E-7f); }
public void test0784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0784"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(3.141592653589793d, 4.3713210687233457E-4d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-7.579850167540366E-5d) + "'", double2 == (-7.579850167540366E-5d)); }
public void test0785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0785"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 10L); double double2 = complex1.getArgument(); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0786"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); java.lang.String str8 = complex7.toString(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); java.lang.String str10 = complex7.toString(); org.apache.commons.math.complex.Complex complex12 = complex7.add(1.5707962935076714d); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z(); boolean boolean19 = complex18.isNaN(); org.apache.commons.math.complex.Complex complex20 = complex18.asin(); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt(); org.apache.commons.math.complex.Complex complex22 = complex7.pow(complex21); org.apache.commons.math.complex.Complex complex23 = complex7.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(1.0, 0.0)" + "'", str10, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); }
public void test0787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0787"); double double1 = org.apache.commons.math.util.FastMath.signum((double) 96.999985f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0788"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double11 = complex10.abs(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex19 = complex10.divide(complex16); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.log(); java.lang.Object obj25 = complex22.readResolve(); org.apache.commons.math.complex.Complex complex26 = complex16.multiply(complex22); org.apache.commons.math.complex.Complex complex27 = complex7.subtract(complex26); double double28 = complex27.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(obj25); org.junit.Assert.assertEquals(obj25.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.9210023617182077d + "'", double28 == 1.9210023617182077d); }
public void test0789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0789"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (byte) -1); org.apache.commons.math.complex.Complex complex17 = complex16.negate(); org.apache.commons.math.complex.Complex complex19 = complex16.subtract(0.0d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); }
public void test0790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0790"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException4.getSuppressed(); // The following exception was thrown during execution in test generation try { java.lang.String str7 = numberIsTooSmallException4.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + number5 + "' != '" + 3.831008000716577E22d + "'", number5, 3.831008000716577E22d); org.junit.Assert.assertNotNull(throwableArray6); }
public void test0791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0791"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex12.pow(2.7182482745272054d); boolean boolean16 = complex12.isInfinite(); org.apache.commons.math.complex.Complex complex17 = complex12.exp(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(complex17); }
public void test0792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0792"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex14 = complex13.negate(); java.util.List<org.apache.commons.math.complex.Complex> complexList16 = complex14.nthRoot(20); double double17 = complex14.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexList16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.8824419880804919d) + "'", double17 == (-0.8824419880804919d)); }
public void test0793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0793"); double double2 = org.apache.commons.math.util.FastMath.nextAfter((-0.02001604755384965d), 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.020016047553849645d) + "'", double2 == (-0.020016047553849645d)); }
public void test0794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0794"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); double double12 = complex3.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.5707963267948966d + "'", double12 == 1.5707963267948966d); }
public void test0795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0795"); double double1 = org.apache.commons.math.util.FastMath.acos((double) 2.0f); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0796"); double double1 = org.apache.commons.math.util.FastMath.cosh(32.55764119219941d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.8956294834295336E13d + "'", double1 == 6.8956294834295336E13d); }
public void test0797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0797"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.acos(); org.apache.commons.math.complex.Complex complex8 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); double double18 = complex17.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex10.subtract(complex17); org.apache.commons.math.complex.Complex complex20 = complex17.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex20.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex24 = complex20.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex25 = complex24.sinh(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply(3.141592653589793d); org.apache.commons.math.complex.Complex complex28 = complex25.sin(); org.apache.commons.math.complex.Complex complex29 = complex28.sinh(); org.apache.commons.math.complex.Complex complex30 = complex6.divide(complex28); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); }
public void test0798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0798"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); java.lang.String str18 = complex17.toString(); org.apache.commons.math.complex.Complex complex19 = complex17.log(); org.apache.commons.math.complex.Complex complex20 = complex17.negate(); boolean boolean21 = complex17.isInfinite(); org.apache.commons.math.complex.Complex complex24 = complex17.createComplex((-0.0d), 1.0941931165837544d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(NaN, NaN)" + "'", str18, "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(complex24); }
public void test0799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0799"); double double1 = org.apache.commons.math.util.FastMath.tanh(23.78136965745452d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0800"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.sqrt1z(); org.apache.commons.math.complex.Complex complex45 = complex40.createComplex(1.5845632502852868E31d, (-0.9999999999999999d)); java.lang.String str46 = complex40.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(36.0, 0.0)" + "'", str46, "(36.0, 0.0)"); }
public void test0801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0801"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0802"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(71.48377175636405d, (-2.0d)); org.junit.Assert.assertNotNull(complex2); }
public void test0803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0803"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext5 = numberIsTooSmallException4.getContext(); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException4.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray6); java.lang.Throwable throwable8 = null; // The following exception was thrown during execution in test generation try { nullArgumentException7.addSuppressed(throwable8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception."); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(exceptionContext5); org.junit.Assert.assertNotNull(throwableArray6); }
public void test0804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0804"); double double1 = org.apache.commons.math.util.FastMath.ceil((-26.786565881784615d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-26.0d) + "'", double1 == (-26.0d)); }
public void test0805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0805"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex2.subtract(complex42); org.apache.commons.math.complex.Complex complex45 = complex42.pow(1.557407724654902d); double double46 = complex42.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.5707963267948966d + "'", double46 == 1.5707963267948966d); }
public void test0806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0806"); double double1 = org.apache.commons.math.util.FastMath.ulp(1.2414372125137612d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.220446049250313E-16d + "'", double1 == 2.220446049250313E-16d); }
public void test0807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0807"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); org.apache.commons.math.complex.Complex complex32 = complex27.createComplex(11013.232874703393d, 0.0d); org.apache.commons.math.complex.Complex complex33 = complex32.conjugate(); boolean boolean34 = complex32.isNaN(); org.apache.commons.math.complex.Complex complex35 = complex32.reciprocal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(complex35); }
public void test0808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0808"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); double double32 = complex31.getImaginary(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex35.tanh(); org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex40 = complex37.add(complex39); org.apache.commons.math.complex.Complex complex41 = complex37.conjugate(); org.apache.commons.math.complex.Complex complex42 = complex37.tan(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex44 = complex42.add(complex43); org.apache.commons.math.complex.Complex complex45 = complex43.exp(); org.apache.commons.math.complex.Complex complex46 = complex31.subtract(complex45); double double47 = complex46.getArgument(); org.apache.commons.math.complex.Complex complex49 = complex46.divide(171.49903622517783d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertTrue(Double.isNaN(double47)); org.junit.Assert.assertNotNull(complex49); }
public void test0809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0809"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 3L, (java.lang.Number) (-0.017453292519943295d), false); java.lang.Throwable[] throwableArray4 = numberIsTooSmallException3.getSuppressed(); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.exception.util.Localizable localizable7 = null; org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double13 = complex12.abs(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = complex12.divide(complex18); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); org.apache.commons.math.complex.Complex complex31 = complex30.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex26.multiply(complex31); java.lang.Object[] objArray33 = new java.lang.Object[] { 0.0f, (short) 0, complex18, complex31 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException34 = new org.apache.commons.math.exception.NullArgumentException(localizable7, objArray33); org.apache.commons.math.exception.NullArgumentException nullArgumentException35 = new org.apache.commons.math.exception.NullArgumentException(localizable6, objArray33); org.apache.commons.math.exception.NullArgumentException nullArgumentException36 = new org.apache.commons.math.exception.NullArgumentException(localizable5, objArray33); numberIsTooSmallException3.addSuppressed((java.lang.Throwable) nullArgumentException36); org.junit.Assert.assertNotNull(throwableArray4); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(objArray33); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); }
public void test0810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0810"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(4.7683716E-7f, 0.0d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 4.7683713E-7f + "'", float2 == 4.7683713E-7f); }
public void test0811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0811"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z(); org.apache.commons.math.complex.Complex complex4 = complex1.multiply(0); org.apache.commons.math.complex.Complex complex5 = complex4.reciprocal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0812"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) (byte) 0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-127) + "'", int1 == (-127)); }
public void test0813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0813"); double double1 = org.apache.commons.math.util.FastMath.nextUp((-4.565564159565622E-4d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-4.5655641595656216E-4d) + "'", double1 == (-4.5655641595656216E-4d)); }
public void test0814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0814"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.negate(); boolean boolean57 = complex55.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); double double62 = complex61.getReal(); org.apache.commons.math.complex.Complex complex64 = complex61.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex65 = complex55.multiply(complex64); org.apache.commons.math.complex.Complex complex66 = complex65.cosh(); org.apache.commons.math.complex.Complex complex67 = complex65.atan(); double double68 = complex65.getReal(); org.apache.commons.math.complex.Complex complex69 = complex50.divide(complex65); double double70 = complex50.abs(); org.apache.commons.math.complex.Complex complex71 = complex50.acos(); org.apache.commons.math.complex.Complex complex72 = complex50.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.5707963267948966d) + "'", double68 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.5707963267948966d + "'", double70 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); }
public void test0815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0815"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField18 = complex11.getField(); org.apache.commons.math.complex.Complex complex19 = complexField18.getZero(); org.apache.commons.math.complex.Complex complex20 = complexField18.getZero(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complexField18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test0816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0816"); double double1 = org.apache.commons.math.util.FastMath.signum((double) 5.5459714E30f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0817"); double double1 = org.apache.commons.math.util.FastMath.cosh(0.9950436612504093d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5372748689064095d + "'", double1 == 1.5372748689064095d); }
public void test0818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0818"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(0.0d, (double) (short) 10); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0819"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double39 = complex38.abs(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.apache.commons.math.complex.Complex complex54 = complex52.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double58 = complex57.abs(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex62 = complex61.log(); org.apache.commons.math.complex.Complex complex63 = complex61.tanh(); org.apache.commons.math.complex.Complex complex65 = complex63.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex66 = complex57.divide(complex63); java.lang.String str67 = complex63.toString(); org.apache.commons.math.complex.Complex complex68 = complex52.divide(complex63); org.apache.commons.math.complex.Complex complex69 = complex44.subtract(complex52); org.apache.commons.math.complex.Complex complex70 = complex44.log(); org.apache.commons.math.complex.Complex complex71 = complex44.acos(); org.apache.commons.math.complex.Complex complex72 = complex8.divide(complex71); org.apache.commons.math.complex.Complex complex73 = complex72.sqrt(); org.apache.commons.math.complex.Complex complex75 = complex72.subtract((-0.013438099090886106d)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(0.0, 1.557407724654902)" + "'", str67, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex75); }
public void test0820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0820"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); double double11 = complex9.getReal(); org.apache.commons.math.complex.Complex complex14 = complex9.createComplex(0.9999876561221204d, (double) 1.4E-45f); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex16.subtract(complex23); org.apache.commons.math.complex.Complex complex26 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex28 = complex26.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex29 = complex26.sin(); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex32 = complex30.add(11013.232874703393d); double double33 = complex32.abs(); org.apache.commons.math.complex.Complex complex34 = complex14.multiply(complex32); org.apache.commons.math.complex.Complex complex36 = complex32.subtract((double) (-4)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue(Double.isNaN(double33)); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); }
public void test0821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0821"); float float2 = org.apache.commons.math.util.FastMath.min((float) 5L, 3.8146973E-6f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 3.8146973E-6f + "'", float2 == 3.8146973E-6f); }
public void test0822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0822"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4.274112777602188d, (double) 7.6293945E-6f); org.junit.Assert.assertNotNull(complex2); }
public void test0823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0823"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex16.tanh(); double double18 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.negate(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex20.add((double) 35); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex26.reciprocal(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z(); org.apache.commons.math.complex.Complex complex34 = complex26.divide(complex32); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); org.apache.commons.math.complex.Complex complex39 = complex37.tanh(); org.apache.commons.math.complex.Complex complex41 = complex39.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double45 = complex44.abs(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex53 = complex44.divide(complex50); java.lang.String str54 = complex50.toString(); org.apache.commons.math.complex.Complex complex55 = complex39.divide(complex50); org.apache.commons.math.complex.Complex complex56 = complex55.sqrt1z(); org.apache.commons.math.complex.Complex complex57 = complex26.subtract(complex56); org.apache.commons.math.complex.Complex complex58 = complex22.divide(complex26); org.apache.commons.math.complex.Complex complex60 = complex22.multiply(2.718281828459045d); org.apache.commons.math.complex.Complex complex61 = complex60.sqrt1z(); org.apache.commons.math.complex.Complex complex62 = complex60.tan(); org.apache.commons.math.complex.Complex complex63 = complex19.divide(complex62); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue(Double.isNaN(double18)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(0.0, 1.557407724654902)" + "'", str54, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); }
public void test0824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0824"); double double1 = org.apache.commons.math.util.FastMath.asinh(6.830189170118965E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.830189170065858E-6d + "'", double1 == 6.830189170065858E-6d); }
public void test0825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0825"); double double1 = org.apache.commons.math.util.FastMath.tanh(0.5867944687299709d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.5275862405410617d + "'", double1 == 0.5275862405410617d); }
public void test0826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0826"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; boolean boolean1 = complex0.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true); }
public void test0827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0827"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 1.2851503027842335d, (java.lang.Number) 2.2583571068820263E-32d, false); }
public void test0828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0828"); long long1 = org.apache.commons.math.util.FastMath.abs(794L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 794L + "'", long1 == 794L); }
public void test0829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0829"); float float2 = org.apache.commons.math.util.FastMath.min(5.0f, (float) 9223372036854775807L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 5.0f + "'", float2 == 5.0f); }
public void test0830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0830"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex18 = complex15.sin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex18); }
public void test0831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0831"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); org.apache.commons.math.complex.Complex complex39 = complex38.reciprocal(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z(); org.apache.commons.math.complex.Complex complex46 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex55 = complex53.multiply((int) (short) 0); double double56 = complex55.getArgument(); org.apache.commons.math.complex.Complex complex57 = complex48.subtract(complex55); org.apache.commons.math.complex.Complex complex58 = complex55.reciprocal(); org.apache.commons.math.complex.Complex complex59 = complex46.add(complex55); org.apache.commons.math.complex.Complex complex60 = complex33.add(complex46); org.apache.commons.math.complex.Complex complex61 = complex46.reciprocal(); org.apache.commons.math.complex.Complex complex62 = complex46.atan(); double double63 = complex62.getArgument(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); }
public void test0832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0832"); java.lang.Number number0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException(number0, (java.lang.Number) (byte) -1, false); org.apache.commons.math.exception.util.Localizable localizable4 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException8 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable4, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); boolean boolean9 = numberIsTooSmallException8.getBoundIsAllowed(); java.lang.Number number10 = numberIsTooSmallException8.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext11 = numberIsTooSmallException8.getContext(); numberIsTooSmallException3.addSuppressed((java.lang.Throwable) numberIsTooSmallException8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertEquals("'" + number10 + "' != '" + 3.831008000716577E22d + "'", number10, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext11); }
public void test0833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0833"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); double double15 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex13.cosh(); org.apache.commons.math.complex.Complex complex18 = complex13.divide(2.2165681500327987d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); }
public void test0834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0834"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 0.0012726338013398083d, (java.lang.Number) (-0.013438099090886106d), true); }
public void test0835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0835"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex43 = complex41.add((double) 35); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex47.reciprocal(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex54 = complex53.sqrt1z(); org.apache.commons.math.complex.Complex complex55 = complex47.divide(complex53); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex59 = complex58.log(); org.apache.commons.math.complex.Complex complex60 = complex58.tanh(); org.apache.commons.math.complex.Complex complex62 = complex60.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double66 = complex65.abs(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex70 = complex69.log(); org.apache.commons.math.complex.Complex complex71 = complex69.tanh(); org.apache.commons.math.complex.Complex complex73 = complex71.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex74 = complex65.divide(complex71); java.lang.String str75 = complex71.toString(); org.apache.commons.math.complex.Complex complex76 = complex60.divide(complex71); org.apache.commons.math.complex.Complex complex77 = complex76.sqrt1z(); org.apache.commons.math.complex.Complex complex78 = complex47.subtract(complex77); org.apache.commons.math.complex.Complex complex79 = complex43.divide(complex47); org.apache.commons.math.complex.Complex complex81 = complex43.pow(1.0d); double double82 = complex81.getImaginary(); org.apache.commons.math.complex.Complex complex83 = complex81.negate(); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex91 = complex90.acos(); org.apache.commons.math.complex.Complex complex92 = complex81.divide(complex91); org.apache.commons.math.complex.Complex complex93 = complex81.sqrt1z(); org.apache.commons.math.complex.Complex complex94 = complex2.divide(complex81); double double95 = complex94.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(0.0, 1.557407724654902)" + "'", str75, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d); }
public void test0836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0836"); double double1 = org.apache.commons.math.util.FastMath.abs((-2.3352273239847907d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.3352273239847907d + "'", double1 == 2.3352273239847907d); }
public void test0837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0837"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); boolean boolean6 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex7 = complex5.asin(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); org.apache.commons.math.complex.Complex complex10 = complex7.multiply(100.0d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); }
public void test0838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0838"); int int1 = org.apache.commons.math.util.FastMath.getExponent(0.8623188722876839d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1)); }
public void test0839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0839"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex10.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex18.tanh(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex23 = complex22.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex10.subtract(complex23); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); double double35 = complex34.getArgument(); org.apache.commons.math.complex.Complex complex36 = complex27.subtract(complex34); org.apache.commons.math.complex.Complex complex37 = complex34.reciprocal(); org.apache.commons.math.complex.Complex complex39 = complex37.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex40 = complex37.sin(); org.apache.commons.math.complex.Complex complex41 = complex37.sinh(); org.apache.commons.math.complex.Complex complex43 = complex37.pow((double) (short) 100); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField44 = complex37.getField(); org.apache.commons.math.complex.Complex complex45 = complexField44.getZero(); org.apache.commons.math.complex.Complex complex46 = complex10.divide(complex45); org.apache.commons.math.complex.Complex complex47 = complex46.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complexField44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); }
public void test0840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0840"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable2, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number7 = numberIsTooSmallException6.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext8 = numberIsTooSmallException6.getContext(); java.lang.Throwable[] throwableArray9 = numberIsTooSmallException6.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) throwableArray9); org.apache.commons.math.exception.util.Localizable localizable11 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException15 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable11, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number16 = numberIsTooSmallException15.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext17 = numberIsTooSmallException15.getContext(); mathIllegalArgumentException10.addSuppressed((java.lang.Throwable) numberIsTooSmallException15); java.lang.Throwable[] throwableArray19 = mathIllegalArgumentException10.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray19); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 1.0d + "'", number7, 1.0d); org.junit.Assert.assertNotNull(exceptionContext8); org.junit.Assert.assertNotNull(throwableArray9); org.junit.Assert.assertEquals("'" + number16 + "' != '" + 1.0d + "'", number16, 1.0d); org.junit.Assert.assertNotNull(exceptionContext17); org.junit.Assert.assertNotNull(throwableArray19); }
public void test0841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0841"); double double2 = org.apache.commons.math.util.FastMath.log(2.3300002726942934E104d, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.NEGATIVE_INFINITY + "'", double2 == Double.NEGATIVE_INFINITY); }
public void test0842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0842"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.cos(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex30); org.apache.commons.math.complex.Complex complex33 = complex30.subtract(1.7182818284590453d); double double34 = complex30.abs(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex41 = complex40.log(); org.apache.commons.math.complex.Complex complex42 = complex40.tanh(); org.apache.commons.math.complex.Complex complex44 = complex42.multiply((int) (short) 0); double double45 = complex44.getArgument(); org.apache.commons.math.complex.Complex complex46 = complex37.subtract(complex44); org.apache.commons.math.complex.Complex complex47 = complex44.reciprocal(); org.apache.commons.math.complex.Complex complex49 = complex47.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex50 = complex47.sin(); org.apache.commons.math.complex.Complex complex51 = complex50.negate(); org.apache.commons.math.complex.Complex complex52 = complex50.reciprocal(); org.apache.commons.math.complex.Complex complex53 = complex52.sinh(); org.apache.commons.math.complex.Complex complex54 = complex35.multiply(complex53); org.apache.commons.math.complex.Complex complex55 = complex30.multiply(complex53); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.5430806348152437d + "'", double34 == 1.5430806348152437d); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); }
public void test0843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0843"); long long1 = org.apache.commons.math.util.FastMath.round(0.28366218546322625d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test0844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0844"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.multiply(2.718281828459045d); java.lang.String str41 = complex40.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(97.85814582452562, 0.0)" + "'", str41, "(97.85814582452562, 0.0)"); }
public void test0845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0845"); double double1 = org.apache.commons.math.util.FastMath.tanh(0.04491118145049999d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.04488101029532904d + "'", double1 == 0.04488101029532904d); }
public void test0846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0846"); double double2 = org.apache.commons.math.util.FastMath.atan2(0.0d, 4.242640687119285d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0847"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex2.sin(); org.apache.commons.math.complex.Complex complex12 = complex11.tanh(); java.lang.Object obj13 = complex11.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(obj13); org.junit.Assert.assertEquals(obj13.toString(), "(0.0, 1.1752011936438014)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "(0.0, 1.1752011936438014)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "(0.0, 1.1752011936438014)"); }
public void test0848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0848"); double double1 = org.apache.commons.math.util.FastMath.exp((double) 3.8146973E-6f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0000038147045416d + "'", double1 == 1.0000038147045416d); }
public void test0849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0849"); double double1 = org.apache.commons.math.util.FastMath.atan(1.5912754690222415E-7d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.591275469022228E-7d + "'", double1 == 1.591275469022228E-7d); }
public void test0850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0850"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); double double22 = complex19.getArgument(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); }
public void test0851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0851"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex12 = complex3.negate(); org.apache.commons.math.complex.Complex complex13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex14 = complex3.add(complex13); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0852"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex6 = complex4.subtract((double) 5L); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); }
public void test0853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0853"); double double1 = org.apache.commons.math.util.FastMath.acosh(97.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.267831587699267d + "'", double1 == 5.267831587699267d); }
public void test0854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0854"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex33 = complex32.negate(); boolean boolean34 = complex18.equals((java.lang.Object) complex33); java.lang.Class<?> wildcardClass35 = complex18.getClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(wildcardClass35); }
public void test0855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0855"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); double double22 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex23 = complex15.log(); org.apache.commons.math.complex.Complex complex26 = complex15.createComplex(5.837716327408224d, (double) 32.0f); java.lang.Object obj27 = complex15.readResolve(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField28 = complex15.getField(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue(Double.isNaN(double22)); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(obj27); org.junit.Assert.assertEquals(obj27.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complexField28); }
public void test0856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0856"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex8.subtract(3.584289651861328d); org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test0857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0857"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 100.0d); }
public void test0858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0858"); double double1 = org.apache.commons.math.util.FastMath.log10((-1.1469882410193186d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0859"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); boolean boolean26 = complex24.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); double double31 = complex30.getReal(); org.apache.commons.math.complex.Complex complex33 = complex30.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex34 = complex24.multiply(complex33); org.apache.commons.math.complex.Complex complex35 = complex34.cosh(); boolean boolean36 = complex34.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField37 = complex34.getField(); org.apache.commons.math.complex.Complex complex38 = complex11.pow(complex34); org.apache.commons.math.complex.Complex complex39 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex41 = complex4.divide((double) 5L); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.negate(); boolean boolean47 = complex45.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); double double52 = complex51.getReal(); org.apache.commons.math.complex.Complex complex54 = complex51.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex55 = complex45.multiply(complex54); org.apache.commons.math.complex.Complex complex56 = complex55.cosh(); org.apache.commons.math.complex.Complex complex57 = complex55.atan(); org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex63 = complex62.log(); org.apache.commons.math.complex.Complex complex64 = complex62.tanh(); org.apache.commons.math.complex.Complex complex66 = complex64.multiply((int) (short) 0); double double67 = complex66.getArgument(); org.apache.commons.math.complex.Complex complex68 = complex59.subtract(complex66); org.apache.commons.math.complex.Complex complex69 = complex66.reciprocal(); org.apache.commons.math.complex.Complex complex71 = complex69.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex72 = complex69.sin(); org.apache.commons.math.complex.Complex complex73 = complex55.pow(complex72); org.apache.commons.math.complex.Complex complex75 = complex73.multiply((double) 10); org.apache.commons.math.complex.Complex complex76 = complex73.reciprocal(); java.util.List<org.apache.commons.math.complex.Complex> complexList78 = complex76.nthRoot(3); org.apache.commons.math.complex.Complex complex79 = complex41.divide(complex76); org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex83 = complex82.negate(); boolean boolean85 = complex83.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex88 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex89 = complex88.log(); double double90 = complex89.getReal(); org.apache.commons.math.complex.Complex complex92 = complex89.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex93 = complex83.multiply(complex92); org.apache.commons.math.complex.Complex complex95 = complex93.subtract(2.9870930417485533d); double double96 = complex95.getReal(); org.apache.commons.math.complex.Complex complex97 = complex76.divide(complex95); org.apache.commons.math.complex.Complex complex98 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex99 = complex95.add(complex98); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complexField37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complexList78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-4.557889368543449d) + "'", double96 == (-4.557889368543449d)); org.junit.Assert.assertNotNull(complex97); }
public void test0860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0860"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getOne(); org.apache.commons.math.complex.Complex complex4 = complexField2.getZero(); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0861"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); java.lang.String str8 = complex7.toString(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((int) ' '); boolean boolean12 = complex11.isNaN(); org.apache.commons.math.complex.Complex complex13 = complex11.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex13); }
public void test0862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0862"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); org.apache.commons.math.complex.Complex complex25 = complex24.sqrt(); org.apache.commons.math.complex.ComplexField complexField26 = complex24.getField(); double double27 = complex24.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complexField26); org.junit.Assert.assertTrue(Double.isNaN(double27)); }
public void test0863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0863"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 9223372036854775807L, (java.lang.Number) 1.1752011936438014d, true); org.apache.commons.math.exception.util.Localizable localizable4 = null; java.lang.Number number6 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException8 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable4, (java.lang.Number) 10.000001f, number6, false); org.apache.commons.math.exception.util.Localizable localizable9 = null; org.apache.commons.math.exception.util.Localizable localizable10 = null; org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double16 = complex15.abs(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex15.divide(complex21); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex33.reciprocal(); org.apache.commons.math.complex.Complex complex35 = complex29.multiply(complex34); java.lang.Object[] objArray36 = new java.lang.Object[] { 0.0f, (short) 0, complex21, complex34 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException37 = new org.apache.commons.math.exception.NullArgumentException(localizable10, objArray36); org.apache.commons.math.exception.NullArgumentException nullArgumentException38 = new org.apache.commons.math.exception.NullArgumentException(localizable9, objArray36); numberIsTooSmallException8.addSuppressed((java.lang.Throwable) nullArgumentException38); numberIsTooSmallException3.addSuppressed((java.lang.Throwable) numberIsTooSmallException8); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(objArray36); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); }
public void test0864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0864"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(3.555348061489414d, 3.732511156817248d); org.junit.Assert.assertNotNull(complex2); }
public void test0865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0865"); double double1 = org.apache.commons.math.util.FastMath.atan(4.9E-324d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.9E-324d + "'", double1 == 4.9E-324d); }
public void test0866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0866"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex40.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); }
public void test0867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0867"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex18 = complex11.createComplex((double) 10.000001f, (-1.5574077246549023d)); java.lang.Class<?> wildcardClass19 = complex11.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(wildcardClass19); }
public void test0868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0868"); long long1 = org.apache.commons.math.util.FastMath.abs(1L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test0869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0869"); double double1 = org.apache.commons.math.util.FastMath.expm1((-0.15901677465164d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.14701794962762918d) + "'", double1 == (-0.14701794962762918d)); }
public void test0870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0870"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); boolean boolean33 = complex23.isNaN(); org.apache.commons.math.complex.Complex complex34 = complex23.exp(); org.apache.commons.math.complex.Complex complex35 = complex23.negate(); org.apache.commons.math.complex.Complex complex36 = complex23.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test0871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0871"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 96.99999f); org.apache.commons.math.complex.Complex complex2 = complex1.reciprocal(); org.junit.Assert.assertNotNull(complex2); }
public void test0872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0872"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (byte) -1); org.apache.commons.math.complex.Complex complex17 = complex16.negate(); org.apache.commons.math.complex.Complex complex18 = complex17.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test0873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0873"); long long1 = org.apache.commons.math.util.FastMath.round(100.0002495400294d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 100L + "'", long1 == 100L); }
public void test0874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0874"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((float) (-57), 1.2039980656902276d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-56.999996f) + "'", float2 == (-56.999996f)); }
public void test0875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0875"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex13 = complex8.multiply((int) (short) 100); org.apache.commons.math.complex.Complex complex14 = complex8.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); }
public void test0876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0876"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 6); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(5729.578388440339d); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z(); org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex14); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double27 = complex26.abs(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = complex26.divide(complex32); java.lang.String str36 = complex32.toString(); org.apache.commons.math.complex.Complex complex37 = complex21.divide(complex32); org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z(); org.apache.commons.math.complex.Complex complex39 = complex8.subtract(complex38); org.apache.commons.math.complex.Complex complex41 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex42 = complex41.negate(); org.apache.commons.math.complex.Complex complex43 = complex41.exp(); org.apache.commons.math.complex.Complex complex44 = complex39.add(complex43); org.apache.commons.math.complex.Complex complex45 = complex44.sqrt(); org.apache.commons.math.complex.Complex complex46 = complex1.multiply(complex45); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(0.0, 1.557407724654902)" + "'", str36, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); }
public void test0877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0877"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex8.tanh(); org.apache.commons.math.complex.Complex complex37 = complex8.cosh(); java.lang.String str38 = complex8.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(0.0, 1.557407724654902)" + "'", str38, "(0.0, 1.557407724654902)"); }
public void test0878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0878"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); java.lang.Object obj15 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); double double26 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex27 = complex18.subtract(complex25); org.apache.commons.math.complex.Complex complex28 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex28.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex32 = complex28.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex33 = complex32.sinh(); org.apache.commons.math.complex.Complex complex35 = complex33.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex40.reciprocal(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex47 = complex41.multiply(complex46); org.apache.commons.math.complex.Complex complex48 = complex35.divide(complex47); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex52.reciprocal(); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex59 = complex58.sqrt1z(); org.apache.commons.math.complex.Complex complex60 = complex52.divide(complex58); org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex66 = complex65.log(); org.apache.commons.math.complex.Complex complex67 = complex65.tanh(); org.apache.commons.math.complex.Complex complex69 = complex67.multiply((int) (short) 0); double double70 = complex69.getArgument(); org.apache.commons.math.complex.Complex complex71 = complex62.subtract(complex69); org.apache.commons.math.complex.Complex complex72 = complex69.reciprocal(); org.apache.commons.math.complex.Complex complex73 = complex60.add(complex69); org.apache.commons.math.complex.Complex complex74 = complex35.divide(complex60); double double75 = complex35.getArgument(); org.apache.commons.math.complex.Complex complex76 = complex16.subtract(complex35); double double77 = complex35.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(obj15); org.junit.Assert.assertEquals(obj15.toString(), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertTrue(Double.isNaN(double75)); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertTrue(Double.isNaN(double77)); }
public void test0879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0879"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable1, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); boolean boolean6 = numberIsTooSmallException5.getBoundIsAllowed(); java.lang.Throwable[] throwableArray7 = numberIsTooSmallException5.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray7); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(throwableArray7); }
public void test0880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0880"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); boolean boolean8 = complex6.isNaN(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double19 = complex18.abs(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex27 = complex18.divide(complex24); java.lang.String str28 = complex24.toString(); org.apache.commons.math.complex.Complex complex29 = complex13.divide(complex24); org.apache.commons.math.complex.ComplexField complexField30 = complex29.getField(); org.apache.commons.math.complex.Complex complex31 = complexField30.getOne(); org.apache.commons.math.complex.Complex complex32 = complex6.add(complex31); double double33 = complex31.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(0.0, 1.557407724654902)" + "'", str28, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complexField30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d); }
public void test0881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0881"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 2.33185731606167d); }
public void test0882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0882"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = complex40.tanh(); org.apache.commons.math.complex.Complex complex46 = complex40.createComplex(1.7453292519943295d, 0.0d); double double47 = complex40.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); }
public void test0883() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0883"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex4 = complex2.multiply((int) (byte) 100); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); }
public void test0884() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0884"); long long2 = org.apache.commons.math.util.FastMath.min(10L, (-1L)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L)); }
public void test0885() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0885"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex11.multiply(complex16); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply((int) (short) 0); double double28 = complex27.getArgument(); org.apache.commons.math.complex.Complex complex29 = complex20.subtract(complex27); double double30 = complex20.abs(); org.apache.commons.math.complex.Complex complex32 = complex20.multiply(32.0d); org.apache.commons.math.complex.Complex complex33 = complex32.reciprocal(); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); boolean boolean39 = complex37.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); double double44 = complex43.getReal(); org.apache.commons.math.complex.Complex complex46 = complex43.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex47 = complex37.multiply(complex46); org.apache.commons.math.complex.Complex complex49 = complex46.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex50 = complex33.pow(complex46); org.apache.commons.math.complex.Complex complex51 = complex18.multiply(complex50); org.apache.commons.math.complex.Complex complex52 = complex6.subtract(complex18); double double53 = complex52.getReal(); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf(5.0d, (-15.653559774527022d)); org.apache.commons.math.complex.Complex complex57 = complex52.divide(complex56); org.apache.commons.math.complex.Complex complex58 = complex57.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.41647126877660395d + "'", double53 == 0.41647126877660395d); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); }
public void test0886() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0886"); double double1 = org.apache.commons.math.util.FastMath.ulp(2.0438004761129083d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.440892098500626E-16d + "'", double1 == 4.440892098500626E-16d); }
public void test0887() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0887"); double double1 = org.apache.commons.math.util.FastMath.asinh(100.0002495400294d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.2983448608830095d + "'", double1 == 5.2983448608830095d); }
public void test0888() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0888"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(8.658293401173658E24d, 0.0d); }
public void test0889() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0889"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); double double15 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex13.negate(); boolean boolean17 = complex16.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test0890() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0890"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable1, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number6 = numberIsTooSmallException5.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = numberIsTooSmallException5.getContext(); java.lang.Throwable[] throwableArray8 = numberIsTooSmallException5.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray8); org.apache.commons.math.exception.util.Localizable localizable10 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException14 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable10, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number15 = numberIsTooSmallException14.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext16 = numberIsTooSmallException14.getContext(); mathIllegalArgumentException9.addSuppressed((java.lang.Throwable) numberIsTooSmallException14); // The following exception was thrown during execution in test generation try { java.lang.String str18 = mathIllegalArgumentException9.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + number6 + "' != '" + 1.0d + "'", number6, 1.0d); org.junit.Assert.assertNotNull(exceptionContext7); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertEquals("'" + number15 + "' != '" + 1.0d + "'", number15, 1.0d); org.junit.Assert.assertNotNull(exceptionContext16); }
public void test0891() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0891"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); org.apache.commons.math.complex.Complex complex32 = complex18.reciprocal(); org.apache.commons.math.complex.Complex complex34 = complex18.subtract(0.5658337507667913d); double double35 = complex18.getImaginary(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue(Double.isNaN(double35)); }
public void test0892() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0892"); double double1 = org.apache.commons.math.util.FastMath.abs((double) 4.5474735E-13f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.547473508864641E-13d + "'", double1 == 4.547473508864641E-13d); }
public void test0893() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0893"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); double double11 = complex9.getReal(); org.apache.commons.math.complex.Complex complex14 = complex9.createComplex(0.9999876561221204d, (double) 1.4E-45f); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex16.subtract(complex23); org.apache.commons.math.complex.Complex complex26 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex28 = complex26.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex29 = complex26.sin(); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex32 = complex30.add(11013.232874703393d); double double33 = complex32.abs(); org.apache.commons.math.complex.Complex complex34 = complex14.multiply(complex32); org.apache.commons.math.complex.Complex complex35 = complex14.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue(Double.isNaN(double33)); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); }
public void test0894() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0894"); double double1 = org.apache.commons.math.util.FastMath.nextUp((double) 100); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 100.00000000000001d + "'", double1 == 100.00000000000001d); }
public void test0895() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0895"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex22 = complex17.multiply((-1023)); org.apache.commons.math.complex.Complex complex24 = complex22.subtract((double) 2147483647); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); }
public void test0896() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0896"); double double2 = org.apache.commons.math.util.FastMath.max((double) 3.8146973E-6f, 1.9459101490553132d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.9459101490553132d + "'", double2 == 1.9459101490553132d); }
public void test0897() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0897"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.acos(); org.apache.commons.math.complex.Complex complex17 = complex14.subtract(7.62939453110197E-6d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); }
public void test0898() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0898"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 6.830189170118964E-6d); java.lang.Throwable[] throwableArray2 = notPositiveException1.getSuppressed(); boolean boolean3 = notPositiveException1.getBoundIsAllowed(); org.junit.Assert.assertNotNull(throwableArray2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test0899() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0899"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); boolean boolean18 = complex15.isInfinite(); org.apache.commons.math.complex.Complex complex19 = complex15.acos(); org.apache.commons.math.complex.Complex complex20 = complex15.atan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test0900() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0900"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); double double22 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex23 = complex15.log(); org.apache.commons.math.complex.Complex complex26 = complex15.createComplex(5.837716327408224d, (double) 32.0f); org.apache.commons.math.complex.Complex complex28 = complex26.divide(1.570771867645528d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue(Double.isNaN(double22)); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); }
public void test0901() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0901"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(97.0d, 0.0d); org.junit.Assert.assertNotNull(complex2); }
public void test0902() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0902"); double double2 = org.apache.commons.math.util.FastMath.log(0.0d, 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test0903() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0903"); double double1 = org.apache.commons.math.util.FastMath.atan((double) 10L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.4711276743037347d + "'", double1 == 1.4711276743037347d); }
public void test0904() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0904"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object obj28 = complex27.readResolve(); org.apache.commons.math.complex.Complex complex29 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex30 = complex27.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex27.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex33 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex34 = complex33.sin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(obj28); org.junit.Assert.assertEquals(obj28.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test0905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0905"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); double double5 = complex2.getImaginary(); org.apache.commons.math.complex.Complex complex6 = complex2.tan(); org.apache.commons.math.complex.Complex complex7 = complex2.cos(); org.apache.commons.math.complex.ComplexField complexField8 = complex2.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass9 = complexField8.getRuntimeClass(); org.apache.commons.math.complex.Complex complex10 = complexField8.getOne(); org.apache.commons.math.complex.Complex complex11 = complexField8.getOne(); org.apache.commons.math.complex.Complex complex12 = complexField8.getOne(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complexField8); org.junit.Assert.assertNotNull(wildcardClass9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0906"); double double2 = org.apache.commons.math.util.FastMath.atan2((double) 57.0f, (double) (short) 100); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.5180685284567209d + "'", double2 == 0.5180685284567209d); }
public void test0907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0907"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) (-57.29577951308232d)); java.lang.Throwable[] throwableArray3 = notPositiveException2.getSuppressed(); org.junit.Assert.assertNotNull(throwableArray3); }
public void test0908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0908"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex6 = complex2.multiply(6); org.apache.commons.math.complex.Complex complex7 = complex2.tanh(); org.apache.commons.math.complex.Complex complex8 = complex7.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0909"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex2 = complex1.cos(); boolean boolean4 = complex1.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex5 = complex1.acos(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList7 = complex1.nthRoot((-19)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -19"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex5); }
public void test0910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0910"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); org.apache.commons.math.complex.Complex complex39 = complex38.reciprocal(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z(); org.apache.commons.math.complex.Complex complex46 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex55 = complex53.multiply((int) (short) 0); double double56 = complex55.getArgument(); org.apache.commons.math.complex.Complex complex57 = complex48.subtract(complex55); org.apache.commons.math.complex.Complex complex58 = complex55.reciprocal(); org.apache.commons.math.complex.Complex complex59 = complex46.add(complex55); org.apache.commons.math.complex.Complex complex60 = complex33.add(complex46); org.apache.commons.math.complex.Complex complex61 = complex46.reciprocal(); org.apache.commons.math.complex.Complex complex62 = complex46.atan(); double double63 = complex46.getArgument(); java.lang.Class<?> wildcardClass64 = complex46.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(wildcardClass64); }
public void test0911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0911"); double double2 = org.apache.commons.math.util.FastMath.log(0.0d, (double) 1.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.0d) + "'", double2 == (-0.0d)); }
public void test0912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0912"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex1.add((double) 35); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex7.reciprocal(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); org.apache.commons.math.complex.Complex complex15 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex18.tanh(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double26 = complex25.abs(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); org.apache.commons.math.complex.Complex complex31 = complex29.tanh(); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex34 = complex25.divide(complex31); java.lang.String str35 = complex31.toString(); org.apache.commons.math.complex.Complex complex36 = complex20.divide(complex31); org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z(); org.apache.commons.math.complex.Complex complex38 = complex7.subtract(complex37); org.apache.commons.math.complex.Complex complex39 = complex3.divide(complex7); org.apache.commons.math.complex.Complex complex41 = complex7.subtract((double) (-1L)); java.lang.Object obj42 = complex7.readResolve(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex48 = complex47.log(); org.apache.commons.math.complex.Complex complex49 = complex47.tanh(); org.apache.commons.math.complex.Complex complex51 = complex49.multiply((int) (short) 0); double double52 = complex51.getArgument(); org.apache.commons.math.complex.Complex complex53 = complex44.subtract(complex51); org.apache.commons.math.complex.Complex complex54 = complex51.reciprocal(); org.apache.commons.math.complex.Complex complex56 = complex54.subtract(1.5707963267948966d); java.lang.Class<?> wildcardClass57 = complex56.getClass(); org.apache.commons.math.complex.Complex complex59 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex60 = complex59.negate(); org.apache.commons.math.complex.Complex complex62 = complex59.divide(14.142135623730951d); java.lang.Object[] objArray63 = new java.lang.Object[] { obj42, wildcardClass57, complex59 }; org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException64 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, objArray63); java.lang.Class<?> wildcardClass65 = mathIllegalArgumentException64.getClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(0.0, 1.557407724654902)" + "'", str35, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(obj42); org.junit.Assert.assertEquals(obj42.toString(), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(wildcardClass57); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(objArray63); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[(0.0, 1.5707963267948966), class org.apache.commons.math.complex.Complex, (1.0, 0.0)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[(0.0, 1.5707963267948966), class org.apache.commons.math.complex.Complex, (1.0, 0.0)]"); org.junit.Assert.assertNotNull(wildcardClass65); }
public void test0913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0913"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex35.reciprocal(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = complex35.divide(complex41); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); double double53 = complex52.getArgument(); org.apache.commons.math.complex.Complex complex54 = complex45.subtract(complex52); org.apache.commons.math.complex.Complex complex55 = complex52.reciprocal(); org.apache.commons.math.complex.Complex complex56 = complex43.add(complex52); org.apache.commons.math.complex.Complex complex57 = complex18.divide(complex43); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex59 = complex58.log(); org.apache.commons.math.complex.Complex complex60 = complex59.negate(); org.apache.commons.math.complex.Complex complex61 = complex60.reciprocal(); org.apache.commons.math.complex.Complex complex63 = complex61.pow((double) '4'); org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex67 = complex66.log(); org.apache.commons.math.complex.Complex complex68 = complex66.tanh(); org.apache.commons.math.complex.Complex complex70 = complex68.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double74 = complex73.abs(); org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex78 = complex77.log(); org.apache.commons.math.complex.Complex complex79 = complex77.tanh(); org.apache.commons.math.complex.Complex complex81 = complex79.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex82 = complex73.divide(complex79); java.lang.String str83 = complex79.toString(); org.apache.commons.math.complex.Complex complex84 = complex68.divide(complex79); double double85 = complex84.getImaginary(); org.apache.commons.math.complex.Complex complex86 = complex61.divide(complex84); org.apache.commons.math.complex.Complex complex87 = complex86.cos(); org.apache.commons.math.complex.Complex complex88 = complex86.sinh(); org.apache.commons.math.complex.Complex complex89 = complex57.pow(complex86); boolean boolean90 = complex89.isInfinite(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(0.0, 1.557407724654902)" + "'", str83, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); }
public void test0914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0914"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = numberIsTooSmallException4.getContext(); java.lang.Throwable[] throwableArray8 = numberIsTooSmallException4.getSuppressed(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 3.831008000716577E22d + "'", number5, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(exceptionContext7); org.junit.Assert.assertNotNull(throwableArray8); }
public void test0915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0915"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); java.lang.Object obj17 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex18 = complex8.multiply(complex14); java.lang.Object obj19 = complex14.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(obj19); org.junit.Assert.assertEquals(obj19.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "(0.0, 1.0)"); }
public void test0916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0916"); long long2 = org.apache.commons.math.util.FastMath.min((long) 6, (long) 20); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 6L + "'", long2 == 6L); }
public void test0917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0917"); double double2 = org.apache.commons.math.util.FastMath.log(0.9376558078861459d, 100.0002495400294d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-71.5396192034737d) + "'", double2 == (-71.5396192034737d)); }
public void test0918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0918"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); org.apache.commons.math.complex.Complex complex32 = complex27.createComplex(11013.232874703393d, 0.0d); org.apache.commons.math.complex.Complex complex33 = complex27.reciprocal(); java.lang.String str34 = complex33.toString(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(NaN, NaN)" + "'", str34, "(NaN, NaN)"); }
public void test0919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0919"); int int1 = org.apache.commons.math.util.FastMath.getExponent((double) (-1.0f)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0920"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-1.4987863014408054d), 0.0d); org.apache.commons.math.complex.Complex complex3 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex3.add((double) 1.0000001f); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test0921() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0921"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex21 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex22 = complex21.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test0922() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0922"); int int1 = org.apache.commons.math.util.FastMath.getExponent((double) 3); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0923() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0923"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex10.sinh(); org.apache.commons.math.complex.Complex complex12 = complex11.tanh(); java.lang.String str13 = complex11.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(-0.41647126877660395, -0.0)" + "'", str13, "(-0.41647126877660395, -0.0)"); }
public void test0924() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0924"); double double1 = org.apache.commons.math.util.FastMath.ceil(3.6882538673612966d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d); }
public void test0925() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0925"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.Complex complex12 = complex4.cosh(); org.apache.commons.math.complex.Complex complex13 = complex12.conjugate(); boolean boolean14 = complex13.isInfinite(); boolean boolean15 = complex13.isNaN(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex16.add((double) 35); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex22.reciprocal(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); org.apache.commons.math.complex.Complex complex30 = complex22.divide(complex28); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex37 = complex35.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double41 = complex40.abs(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex48 = complex46.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex49 = complex40.divide(complex46); java.lang.String str50 = complex46.toString(); org.apache.commons.math.complex.Complex complex51 = complex35.divide(complex46); org.apache.commons.math.complex.Complex complex52 = complex51.sqrt1z(); org.apache.commons.math.complex.Complex complex53 = complex22.subtract(complex52); org.apache.commons.math.complex.Complex complex54 = complex18.divide(complex22); org.apache.commons.math.complex.Complex complex56 = complex18.pow(1.0d); double double57 = complex56.getImaginary(); org.apache.commons.math.complex.Complex complex58 = complex56.negate(); org.apache.commons.math.complex.Complex complex59 = complex13.subtract(complex58); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(0.0, 1.557407724654902)" + "'", str50, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); }
public void test0926() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0926"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex43 = complex41.add((double) 35); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex47.reciprocal(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex54 = complex53.sqrt1z(); org.apache.commons.math.complex.Complex complex55 = complex47.divide(complex53); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex59 = complex58.log(); org.apache.commons.math.complex.Complex complex60 = complex58.tanh(); org.apache.commons.math.complex.Complex complex62 = complex60.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double66 = complex65.abs(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex70 = complex69.log(); org.apache.commons.math.complex.Complex complex71 = complex69.tanh(); org.apache.commons.math.complex.Complex complex73 = complex71.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex74 = complex65.divide(complex71); java.lang.String str75 = complex71.toString(); org.apache.commons.math.complex.Complex complex76 = complex60.divide(complex71); org.apache.commons.math.complex.Complex complex77 = complex76.sqrt1z(); org.apache.commons.math.complex.Complex complex78 = complex47.subtract(complex77); org.apache.commons.math.complex.Complex complex79 = complex43.divide(complex47); org.apache.commons.math.complex.Complex complex81 = complex43.pow(1.0d); double double82 = complex81.getImaginary(); org.apache.commons.math.complex.Complex complex83 = complex81.negate(); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex91 = complex90.acos(); org.apache.commons.math.complex.Complex complex92 = complex81.divide(complex91); org.apache.commons.math.complex.Complex complex93 = complex81.sqrt1z(); org.apache.commons.math.complex.Complex complex94 = complex2.divide(complex81); org.apache.commons.math.complex.Complex complex96 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex97 = complex96.atan(); org.apache.commons.math.complex.Complex complex98 = complex81.pow(complex97); boolean boolean99 = complex81.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(0.0, 1.557407724654902)" + "'", str75, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex96); org.junit.Assert.assertNotNull(complex97); org.junit.Assert.assertNotNull(complex98); org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false); }
public void test0927() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0927"); int int1 = org.apache.commons.math.util.FastMath.getExponent(1.0d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0928() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0928"); float float1 = org.apache.commons.math.util.FastMath.ulp(Float.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + float1 + "' != '" + Float.POSITIVE_INFINITY + "'", float1 == Float.POSITIVE_INFINITY); }
public void test0929() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0929"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex16.sinh(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex26.reciprocal(); org.apache.commons.math.complex.Complex complex28 = complex22.multiply(complex27); org.apache.commons.math.complex.Complex complex29 = complex22.asin(); org.apache.commons.math.complex.Complex complex30 = complex22.cosh(); org.apache.commons.math.complex.Complex complex31 = complex30.conjugate(); boolean boolean32 = complex31.isInfinite(); org.apache.commons.math.complex.Complex complex33 = complex16.divide(complex31); org.apache.commons.math.complex.Complex complex35 = complex31.pow(0.693141008601959d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); }
public void test0930() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0930"); float float2 = org.apache.commons.math.util.FastMath.scalb(0.0f, 35); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test0931() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0931"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); java.lang.Object obj15 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); double double26 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex27 = complex18.subtract(complex25); org.apache.commons.math.complex.Complex complex28 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex28.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex32 = complex28.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex33 = complex32.sinh(); org.apache.commons.math.complex.Complex complex35 = complex33.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex40.reciprocal(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex47 = complex41.multiply(complex46); org.apache.commons.math.complex.Complex complex48 = complex35.divide(complex47); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex52.reciprocal(); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex59 = complex58.sqrt1z(); org.apache.commons.math.complex.Complex complex60 = complex52.divide(complex58); org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex66 = complex65.log(); org.apache.commons.math.complex.Complex complex67 = complex65.tanh(); org.apache.commons.math.complex.Complex complex69 = complex67.multiply((int) (short) 0); double double70 = complex69.getArgument(); org.apache.commons.math.complex.Complex complex71 = complex62.subtract(complex69); org.apache.commons.math.complex.Complex complex72 = complex69.reciprocal(); org.apache.commons.math.complex.Complex complex73 = complex60.add(complex69); org.apache.commons.math.complex.Complex complex74 = complex35.divide(complex60); double double75 = complex35.getArgument(); org.apache.commons.math.complex.Complex complex76 = complex16.subtract(complex35); org.apache.commons.math.complex.Complex complex78 = complex76.add(2.6881376506005913E43d); org.apache.commons.math.complex.Complex complex79 = complex78.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(obj15); org.junit.Assert.assertEquals(obj15.toString(), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertTrue(Double.isNaN(double75)); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); }
public void test0932() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0932"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(0.0d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = complex2.subtract(3.732511156817248d); boolean boolean5 = complex2.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test0933() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0933"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex11.add(complex20); org.apache.commons.math.complex.Complex complex26 = complex20.multiply(0.0d); org.apache.commons.math.complex.Complex complex29 = complex20.createComplex(3.141592653589793d, (-5.117509926296107d)); org.apache.commons.math.complex.Complex complex31 = complex20.multiply(1.5707962935076714d); org.apache.commons.math.complex.Complex complex32 = complex20.exp(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); }
public void test0934() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0934"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 8.658293401173658E24d, (java.lang.Number) (-2.0d), false); }
public void test0935() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0935"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex15.sqrt(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test0936() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0936"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); boolean boolean18 = complex15.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField19 = complex15.getField(); org.apache.commons.math.complex.Complex complex20 = complexField19.getOne(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complexField19); org.junit.Assert.assertNotNull(complex20); }
public void test0937() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0937"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 171.49903622517783d); org.apache.commons.math.exception.util.ExceptionContext exceptionContext3 = notPositiveException2.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext4 = notPositiveException2.getContext(); org.junit.Assert.assertNotNull(exceptionContext3); org.junit.Assert.assertNotNull(exceptionContext4); }
public void test0938() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0938"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); boolean boolean15 = complex13.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField16 = complex13.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass17 = complexField16.getRuntimeClass(); org.apache.commons.math.complex.Complex complex18 = complexField16.getOne(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(complexField16); org.junit.Assert.assertNotNull(wildcardClass17); org.junit.Assert.assertNotNull(complex18); }
public void test0939() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0939"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.negate(); boolean boolean22 = complex20.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); double double27 = complex26.getReal(); org.apache.commons.math.complex.Complex complex29 = complex26.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex30 = complex20.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex30.cosh(); org.apache.commons.math.complex.Complex complex32 = complex30.atan(); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); org.apache.commons.math.complex.Complex complex39 = complex37.tanh(); org.apache.commons.math.complex.Complex complex41 = complex39.multiply((int) (short) 0); double double42 = complex41.getArgument(); org.apache.commons.math.complex.Complex complex43 = complex34.subtract(complex41); org.apache.commons.math.complex.Complex complex44 = complex41.reciprocal(); org.apache.commons.math.complex.Complex complex46 = complex44.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex47 = complex44.sin(); org.apache.commons.math.complex.Complex complex48 = complex30.pow(complex47); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((double) 10); org.apache.commons.math.complex.Complex complex51 = complex48.reciprocal(); java.util.List<org.apache.commons.math.complex.Complex> complexList53 = complex51.nthRoot(3); org.apache.commons.math.complex.Complex complex54 = complex15.pow(complex51); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complexList53); org.junit.Assert.assertNotNull(complex54); }
public void test0940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0940"); float float2 = org.apache.commons.math.util.FastMath.copySign(4.440892E-15f, 18.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 4.440892E-15f + "'", float2 == 4.440892E-15f); }
public void test0941() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0941"); double double1 = org.apache.commons.math.util.FastMath.toDegrees(0.9999876561221203d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 57.29507226097699d + "'", double1 == 57.29507226097699d); }
public void test0942() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0942"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex6 = complex2.multiply(6); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList8 = complex2.nthRoot((-52)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -52"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); }
public void test0943() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0943"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((-20)); org.apache.commons.math.complex.Complex complex6 = complex3.cos(); java.lang.Class<?> wildcardClass7 = complex6.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test0944() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0944"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); double double13 = complex10.getArgument(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-3.141592653589793d) + "'", double13 == (-3.141592653589793d)); }
public void test0945() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0945"); double double2 = org.apache.commons.math.util.FastMath.copySign(35.00000000000001d, (double) (-1.0000001f)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-35.00000000000001d) + "'", double2 == (-35.00000000000001d)); }
public void test0946() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0946"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((double) 97L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5557.690612768985d + "'", double1 == 5557.690612768985d); }
public void test0947() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0947"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex18 = complex17.cos(); boolean boolean20 = complex17.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex17); org.apache.commons.math.complex.Complex complex22 = complex11.sin(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex23.add((double) 35); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex29.reciprocal(); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex29.divide(complex35); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex41 = complex40.log(); org.apache.commons.math.complex.Complex complex42 = complex40.tanh(); org.apache.commons.math.complex.Complex complex44 = complex42.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double48 = complex47.abs(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex55 = complex53.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex56 = complex47.divide(complex53); java.lang.String str57 = complex53.toString(); org.apache.commons.math.complex.Complex complex58 = complex42.divide(complex53); org.apache.commons.math.complex.Complex complex59 = complex58.sqrt1z(); org.apache.commons.math.complex.Complex complex60 = complex29.subtract(complex59); org.apache.commons.math.complex.Complex complex61 = complex25.divide(complex29); org.apache.commons.math.complex.Complex complex63 = complex25.multiply(2.718281828459045d); org.apache.commons.math.complex.Complex complex64 = complex63.sqrt1z(); org.apache.commons.math.complex.Complex complex65 = complex11.divide(complex63); org.apache.commons.math.complex.Complex complex67 = complex65.multiply(1.570771867645528d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(0.0, 1.557407724654902)" + "'", str57, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex67); }
public void test0948() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0948"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 0.0f); java.lang.Throwable[] throwableArray2 = notPositiveException1.getSuppressed(); org.junit.Assert.assertNotNull(throwableArray2); }
public void test0949() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0949"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex18 = complex17.cos(); boolean boolean20 = complex17.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex17); org.apache.commons.math.complex.Complex complex22 = complex11.sinh(); org.apache.commons.math.complex.Complex complex23 = complex22.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); }
public void test0950() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0950"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 2.718281828459045d, (java.lang.Number) (-1.4987863014408054d), false); java.lang.Throwable[] throwableArray5 = numberIsTooSmallException4.getSuppressed(); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException9 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0f, (java.lang.Number) 2.0d, false); java.lang.Number number10 = numberIsTooSmallException9.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext11 = numberIsTooSmallException9.getContext(); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException9); org.junit.Assert.assertNotNull(throwableArray5); org.junit.Assert.assertEquals("'" + number10 + "' != '" + 2.0d + "'", number10, 2.0d); org.junit.Assert.assertNotNull(exceptionContext11); }
public void test0951() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0951"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.Complex complex12 = complex4.negate(); org.apache.commons.math.complex.Complex complex13 = complex12.asin(); org.apache.commons.math.complex.Complex complex14 = complex12.negate(); java.lang.String str15 = complex14.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0.0, -0.6366197723675814)" + "'", str15, "(0.0, -0.6366197723675814)"); }
public void test0952() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0952"); double double1 = org.apache.commons.math.util.FastMath.log1p((double) 0); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0953() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0953"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.acos(); org.apache.commons.math.complex.Complex complex38 = complex8.createComplex(4.594700892207039d, 0.0d); org.apache.commons.math.complex.Complex complex39 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex43.reciprocal(); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex48 = complex47.log(); org.apache.commons.math.complex.Complex complex49 = complex48.reciprocal(); org.apache.commons.math.complex.Complex complex50 = complex44.multiply(complex49); org.apache.commons.math.complex.Complex complex51 = complex44.tanh(); org.apache.commons.math.complex.Complex complex52 = complex44.cos(); org.apache.commons.math.complex.Complex complex54 = complex44.pow((double) (byte) -1); org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex58 = complex57.log(); org.apache.commons.math.complex.Complex complex59 = complex57.tanh(); org.apache.commons.math.complex.Complex complex61 = complex59.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex62 = complex61.tanh(); org.apache.commons.math.complex.Complex complex63 = complex62.negate(); org.apache.commons.math.complex.Complex complex64 = complex44.add(complex63); org.apache.commons.math.complex.Complex complex65 = complex39.subtract(complex44); org.apache.commons.math.complex.Complex complex66 = complex39.log(); org.apache.commons.math.complex.Complex complex68 = complex66.multiply((int) (byte) 100); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex68); }
public void test0954() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0954"); double double1 = org.apache.commons.math.util.FastMath.atan(71.48377175636405d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5568080501466526d + "'", double1 == 1.5568080501466526d); }
public void test0955() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0955"); double double2 = org.apache.commons.math.util.FastMath.max(7.719892785972937d, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 7.719892785972937d + "'", double2 == 7.719892785972937d); }
public void test0956() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0956"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); double double11 = complex1.abs(); org.apache.commons.math.complex.Complex complex13 = complex1.multiply(32.0d); org.apache.commons.math.complex.Complex complex14 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.negate(); boolean boolean20 = complex18.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); double double25 = complex24.getReal(); org.apache.commons.math.complex.Complex complex27 = complex24.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex28 = complex18.multiply(complex27); org.apache.commons.math.complex.Complex complex30 = complex27.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex31 = complex14.pow(complex27); org.apache.commons.math.complex.Complex complex32 = complex31.acos(); org.apache.commons.math.complex.Complex complex33 = complex31.exp(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); }
public void test0957() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0957"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex4.add((double) 35); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex17 = complex16.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = complex10.divide(complex16); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double29 = complex28.abs(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex37 = complex28.divide(complex34); java.lang.String str38 = complex34.toString(); org.apache.commons.math.complex.Complex complex39 = complex23.divide(complex34); org.apache.commons.math.complex.Complex complex40 = complex39.sqrt1z(); org.apache.commons.math.complex.Complex complex41 = complex10.subtract(complex40); org.apache.commons.math.complex.Complex complex42 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex44 = complex6.pow(1.0d); double double45 = complex44.getImaginary(); org.apache.commons.math.complex.Complex complex46 = complex44.negate(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex54 = complex53.acos(); org.apache.commons.math.complex.Complex complex55 = complex44.divide(complex54); org.apache.commons.math.complex.Complex complex56 = complex2.subtract(complex44); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex59 = complex58.tan(); org.apache.commons.math.complex.Complex complex60 = complex2.add(complex58); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(0.0, 1.557407724654902)" + "'", str38, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); }
public void test0958() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0958"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.7182482745272054d, 9.536747711537455E-7d); org.apache.commons.math.complex.Complex complex3 = complex2.acos(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0959() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0959"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext4 = numberIsTooSmallException3.getContext(); java.lang.Throwable[] throwableArray5 = numberIsTooSmallException3.getSuppressed(); java.lang.Number number6 = numberIsTooSmallException3.getArgument(); java.lang.Number number7 = numberIsTooSmallException3.getMin(); java.lang.Number number8 = numberIsTooSmallException3.getArgument(); org.junit.Assert.assertNotNull(exceptionContext4); org.junit.Assert.assertNotNull(throwableArray5); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 0.0d + "'", number6, 0.0d); org.junit.Assert.assertEquals("'" + number7 + "' != '" + (short) 1 + "'", number7, (short) 1); org.junit.Assert.assertEquals("'" + number8 + "' != '" + 0.0d + "'", number8, 0.0d); }
public void test0960() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0960"); double double1 = org.apache.commons.math.util.FastMath.cosh(97.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.691673596021348E41d + "'", double1 == 6.691673596021348E41d); }
public void test0961() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0961"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply(0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); }
public void test0962() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0962"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 1.5607966601082315d, (java.lang.Number) (-1.0d), false); java.lang.Number number4 = numberIsTooSmallException3.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext5 = numberIsTooSmallException3.getContext(); java.lang.Number number6 = numberIsTooSmallException3.getArgument(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + (-1.0d) + "'", number4, (-1.0d)); org.junit.Assert.assertNotNull(exceptionContext5); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 1.5607966601082315d + "'", number6, 1.5607966601082315d); }
public void test0963() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0963"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); boolean boolean6 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex7 = complex5.asin(); org.apache.commons.math.complex.Complex complex9 = complex5.add((-102.58578272287191d)); org.apache.commons.math.complex.Complex complex10 = complex9.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0964() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0964"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.Complex complex12 = complex4.negate(); org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex12.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.0d) + "'", double14 == (-0.0d)); }
public void test0965() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0965"); double double2 = org.apache.commons.math.util.FastMath.pow(1.0963785756763116d, (double) ' '); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 18.999286554360147d + "'", double2 == 18.999286554360147d); }
public void test0966() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0966"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 3.8146973E-6f); org.apache.commons.math.exception.NotPositiveException notPositiveException4 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 0.0f); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException9 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable5, (java.lang.Number) 1L, (java.lang.Number) (-44.8534693539332d), true); notPositiveException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException9); notPositiveException2.addSuppressed((java.lang.Throwable) numberIsTooSmallException9); }
public void test0967() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0967"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1.0986122886681098d); }
public void test0968() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0968"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); double double5 = complex2.getImaginary(); org.apache.commons.math.complex.Complex complex6 = complex2.tan(); org.apache.commons.math.complex.Complex complex7 = complex2.cos(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0969"); double double2 = org.apache.commons.math.util.FastMath.copySign(0.9999876561221203d, 1.2599210498948732d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.9999876561221203d + "'", double2 == 0.9999876561221203d); }
public void test0970() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0970"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex11.add(complex20); org.apache.commons.math.complex.Complex complex25 = complex20.sqrt1z(); org.apache.commons.math.complex.Complex complex26 = complex20.cosh(); double double27 = complex20.abs(); org.apache.commons.math.complex.Complex complex28 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex29 = complex20.divide(complex28); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); }
public void test0971() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0971"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, 0.9999876561221203d); }
public void test0972() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0972"); double double2 = org.apache.commons.math.util.FastMath.hypot(1.9459101490553132d, (-38.93377811521302d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 38.98237607731007d + "'", double2 == 38.98237607731007d); }
public void test0973() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0973"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex11.add(complex20); org.apache.commons.math.complex.Complex complex25 = complex20.sqrt1z(); org.apache.commons.math.complex.Complex complex26 = complex20.cosh(); boolean boolean27 = complex26.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); }
public void test0974() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0974"); double double2 = org.apache.commons.math.util.FastMath.atan2(0.0d, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0975() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0975"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 3L, (java.lang.Number) (-0.017453292519943295d), false); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException5.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) throwableArray6); org.apache.commons.math.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray6); org.junit.Assert.assertNotNull(throwableArray6); }
public void test0976() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0976"); double double2 = org.apache.commons.math.util.FastMath.atan2(1.9867717342662448d, 2.7182482745272054d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.6311656040923515d + "'", double2 == 0.6311656040923515d); }
public void test0977() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0977"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((float) (byte) 10, 0.9950436612504093d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 9.999999f + "'", float2 == 9.999999f); }
public void test0978() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0978"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.ComplexField complexField12 = complex4.getField(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply((int) (short) 0); double double27 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex31 = complex30.cos(); boolean boolean33 = complex30.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex34 = complex24.subtract(complex30); org.apache.commons.math.complex.Complex complex35 = complex4.subtract(complex30); org.apache.commons.math.complex.Complex complex37 = complex35.divide((double) 0L); org.apache.commons.math.complex.Complex complex38 = complex35.sin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.557407724654902d + "'", double27 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test0979() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0979"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex43 = complex41.add((double) 35); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex47.reciprocal(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex54 = complex53.sqrt1z(); org.apache.commons.math.complex.Complex complex55 = complex47.divide(complex53); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex59 = complex58.log(); org.apache.commons.math.complex.Complex complex60 = complex58.tanh(); org.apache.commons.math.complex.Complex complex62 = complex60.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double66 = complex65.abs(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex70 = complex69.log(); org.apache.commons.math.complex.Complex complex71 = complex69.tanh(); org.apache.commons.math.complex.Complex complex73 = complex71.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex74 = complex65.divide(complex71); java.lang.String str75 = complex71.toString(); org.apache.commons.math.complex.Complex complex76 = complex60.divide(complex71); org.apache.commons.math.complex.Complex complex77 = complex76.sqrt1z(); org.apache.commons.math.complex.Complex complex78 = complex47.subtract(complex77); org.apache.commons.math.complex.Complex complex79 = complex43.divide(complex47); org.apache.commons.math.complex.Complex complex81 = complex43.pow(1.0d); double double82 = complex81.getImaginary(); org.apache.commons.math.complex.Complex complex83 = complex81.negate(); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex91 = complex90.acos(); org.apache.commons.math.complex.Complex complex92 = complex81.divide(complex91); org.apache.commons.math.complex.Complex complex93 = complex81.sqrt1z(); org.apache.commons.math.complex.Complex complex94 = complex2.divide(complex81); org.apache.commons.math.complex.Complex complex97 = complex2.createComplex(2005.3522829578812d, (-1.8359303289748807d)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(0.0, 1.557407724654902)" + "'", str75, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex97); }
public void test0980() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0980"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) (-0.0d), (java.lang.Number) 9.536743164063946E-7d, true); java.lang.Throwable[] throwableArray5 = numberIsTooSmallException4.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray5); org.junit.Assert.assertNotNull(throwableArray5); }
public void test0981() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0981"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double17 = complex16.abs(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex25 = complex16.divide(complex22); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double36 = complex35.abs(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex43 = complex41.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex44 = complex35.divide(complex41); java.lang.String str45 = complex41.toString(); org.apache.commons.math.complex.Complex complex46 = complex30.divide(complex41); org.apache.commons.math.complex.Complex complex47 = complex22.subtract(complex30); org.apache.commons.math.complex.Complex complex48 = complex22.log(); org.apache.commons.math.complex.Complex complex49 = complex22.sqrt(); org.apache.commons.math.complex.Complex complex50 = complex22.tanh(); org.apache.commons.math.complex.Complex complex51 = complex22.cosh(); org.apache.commons.math.complex.Complex complex52 = complex13.subtract(complex51); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(0.0, 1.557407724654902)" + "'", str45, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); }
public void test0982() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0982"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 171.49903622517783d); java.lang.Number number3 = notPositiveException2.getMin(); org.junit.Assert.assertEquals("'" + number3 + "' != '" + 0 + "'", number3, 0); }
public void test0983() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0983"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList6 = complex3.nthRoot((int) (byte) 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0984() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0984"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex26 = complex24.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); }
public void test0985() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0985"); int int2 = org.apache.commons.math.util.FastMath.min(20, 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20); }
public void test0986() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0986"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex8.asin(); java.util.List<org.apache.commons.math.complex.Complex> complexList12 = complex8.nthRoot((int) (short) 1); org.apache.commons.math.complex.Complex complex13 = complex8.sin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.5707963267948966d) + "'", double9 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complexList12); org.junit.Assert.assertNotNull(complex13); }
public void test0987() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0987"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex1.subtract((double) 96.99999f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField5 = complex4.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass6 = complexField5.getRuntimeClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexField5); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test0988() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0988"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex9 = complex4.tan(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex11 = complex9.add(complex10); org.apache.commons.math.complex.Complex complex12 = complex9.reciprocal(); org.apache.commons.math.complex.Complex complex14 = complex12.pow(1.9073486328125E-6d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); }
public void test0989() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0989"); float float1 = org.apache.commons.math.util.FastMath.ulp((-56.999996f)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 3.8146973E-6f + "'", float1 == 3.8146973E-6f); }
public void test0990() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0990"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); double double16 = complex6.abs(); org.apache.commons.math.complex.Complex complex17 = complex6.tan(); org.apache.commons.math.complex.Complex complex18 = complex6.cos(); org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.5707963267948966d + "'", double16 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); }
public void test0991() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0991"); double double1 = org.apache.commons.math.util.FastMath.tan((-4.903379179828082E-4d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-4.903379572803354E-4d) + "'", double1 == (-4.903379572803354E-4d)); }
public void test0992() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0992"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex2 = complex1.cos(); boolean boolean4 = complex1.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex5 = complex1.acos(); org.apache.commons.math.complex.Complex complex6 = complex1.reciprocal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test0993() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0993"); double double2 = org.apache.commons.math.util.FastMath.max((-0.6207186062568806d), (double) 20L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 20.0d + "'", double2 == 20.0d); }
public void test0994() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0994"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex51.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); }
public void test0995() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0995"); double double1 = org.apache.commons.math.util.FastMath.cos(71.8404467003028d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.9146381679731819d) + "'", double1 == (-0.9146381679731819d)); }
public void test0996() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0996"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); java.lang.Object obj17 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex18 = complex8.multiply(complex14); org.apache.commons.math.complex.Complex complex20 = complex18.subtract(2.7755575615628914E-17d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); }
public void test0997() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0997"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 2.147483647E9d); }
public void test0998() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0998"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (-0.9556607434207506d), (java.lang.Number) (-0.014091763987578387d), false); }
public void test0999() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0999"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); double double15 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex13.cosh(); org.apache.commons.math.complex.Complex complex17 = complex16.sqrt(); org.apache.commons.math.complex.Complex complex18 = complex17.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test1000"); double double2 = org.apache.commons.math.util.FastMath.hypot(1.591275469022228E-7d, (-0.9999998408724531d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.9999998408724657d + "'", double2 == 0.9999998408724657d); }
public void test1001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1001"); int int1 = org.apache.commons.math.util.FastMath.getExponent(1.0428388188642803d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test1002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1002"); double double1 = org.apache.commons.math.util.FastMath.log1p((double) 2.910383E-11f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.9103830456310187E-11d + "'", double1 == 2.9103830456310187E-11d); }
public void test1003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1003"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.atan(); org.apache.commons.math.complex.Complex complex23 = complex4.divide(2.7182482745272054d); org.apache.commons.math.complex.Complex complex24 = complex4.negate(); org.apache.commons.math.complex.Complex complex26 = complex24.divide((-4.903379179828082E-4d)); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex29 = complex28.cos(); boolean boolean31 = complex28.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex32 = complex28.acos(); org.apache.commons.math.complex.Complex complex33 = complex24.multiply(complex32); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); }
public void test1004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1004"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object obj28 = complex27.readResolve(); org.apache.commons.math.complex.Complex complex29 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex30 = complex27.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex27.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex33 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex34 = complex16.sqrt1z(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(obj28); org.junit.Assert.assertEquals(obj28.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test1005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1005"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.tanh(); org.apache.commons.math.complex.Complex complex12 = complex4.cos(); org.apache.commons.math.complex.Complex complex13 = complex4.atan(); double double14 = complex4.getArgument(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.5707963267948966d) + "'", double14 == (-1.5707963267948966d)); }
public void test1006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1006"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex8.exp(); boolean boolean37 = complex36.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test1007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1007"); org.apache.commons.math.exception.NullArgumentException nullArgumentException0 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable[] throwableArray1 = nullArgumentException0.getSuppressed(); org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable2, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number7 = numberIsTooSmallException6.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext8 = numberIsTooSmallException6.getContext(); nullArgumentException0.addSuppressed((java.lang.Throwable) numberIsTooSmallException6); java.lang.Throwable[] throwableArray10 = numberIsTooSmallException6.getSuppressed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext11 = numberIsTooSmallException6.getContext(); org.apache.commons.math.exception.util.Localizable localizable12 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException16 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable12, (java.lang.Number) 2.718281828459045d, (java.lang.Number) (-1.4987863014408054d), false); numberIsTooSmallException6.addSuppressed((java.lang.Throwable) numberIsTooSmallException16); org.junit.Assert.assertNotNull(throwableArray1); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 3.831008000716577E22d + "'", number7, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext8); org.junit.Assert.assertNotNull(throwableArray10); org.junit.Assert.assertNotNull(exceptionContext11); }
public void test1008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1008"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex22 = complex17.multiply((-1023)); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex28 = complex27.sqrt1z(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex30 = complex27.add(complex29); org.apache.commons.math.complex.Complex complex31 = complex27.conjugate(); org.apache.commons.math.complex.Complex complex32 = complex27.tan(); org.apache.commons.math.complex.Complex complex33 = complex27.conjugate(); org.apache.commons.math.complex.Complex complex34 = complex22.multiply(complex27); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test1009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1009"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = complex15.pow((-2.0d)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); }
public void test1010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1010"); double double1 = org.apache.commons.math.util.FastMath.tan(0.0012726338013398083d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0012726344883914609d + "'", double1 == 0.0012726344883914609d); }
public void test1011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1011"); long long1 = org.apache.commons.math.util.FastMath.round((-0.02001604755384965d)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test1012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1012"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double8 = complex7.abs(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object[] objArray28 = new java.lang.Object[] { 0.0f, (short) 0, complex13, complex26 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable2, objArray28); org.apache.commons.math.exception.NullArgumentException nullArgumentException30 = new org.apache.commons.math.exception.NullArgumentException(localizable1, objArray28); org.apache.commons.math.exception.NullArgumentException nullArgumentException31 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray28); // The following exception was thrown during execution in test generation try { java.lang.String str32 = nullArgumentException31.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); }
public void test1013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1013"); int int1 = org.apache.commons.math.util.FastMath.getExponent((double) 18); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4); }
public void test1014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1014"); float float2 = org.apache.commons.math.util.FastMath.copySign(0.0f, (float) (-1023)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-0.0f) + "'", float2 == (-0.0f)); }
public void test1015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1015"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); double double11 = complex1.abs(); org.apache.commons.math.complex.Complex complex12 = complex1.conjugate(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField13 = complex12.getField(); double double14 = complex12.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex12.asin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complexField13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.0d) + "'", double14 == (-0.0d)); org.junit.Assert.assertNotNull(complex15); }
public void test1016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1016"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 20L); org.apache.commons.math.exception.util.ExceptionContext exceptionContext2 = notPositiveException1.getContext(); java.lang.Class<?> wildcardClass3 = notPositiveException1.getClass(); org.junit.Assert.assertNotNull(exceptionContext2); org.junit.Assert.assertNotNull(wildcardClass3); }
public void test1017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1017"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(2.6469779601696886E-23d); org.junit.Assert.assertNotNull(complex1); }
public void test1018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1018"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); boolean boolean6 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex7 = complex5.asin(); org.apache.commons.math.complex.Complex complex9 = complex5.add((-102.58578272287191d)); java.lang.Class<?> wildcardClass10 = complex9.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test1019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1019"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(2.9870930417485533d); org.apache.commons.math.complex.Complex complex2 = complex1.sqrt(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); }
public void test1020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1020"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0f, (java.lang.Number) 2.0d, false); java.lang.Throwable[] throwableArray7 = numberIsTooSmallException6.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException8 = new org.apache.commons.math.exception.NullArgumentException(localizable2, (java.lang.Object[]) throwableArray7); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) throwableArray7); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray7); org.junit.Assert.assertNotNull(throwableArray7); }
public void test1021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1021"); double double1 = org.apache.commons.math.util.FastMath.tanh(1.5992126092811243d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9215499447319303d + "'", double1 == 0.9215499447319303d); }
public void test1022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1022"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField18 = complex11.getField(); org.apache.commons.math.complex.Complex complex19 = complexField18.getOne(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass20 = complexField18.getRuntimeClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complexField18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test1023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1023"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(171.88733853924697d, 2.972195942014659d); org.junit.Assert.assertNotNull(complex2); }
public void test1024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1024"); double double1 = org.apache.commons.math.util.FastMath.sinh((double) 1.9073486E-6f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.9073486328136566E-6d + "'", double1 == 1.9073486328136566E-6d); }
public void test1025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1025"); int int2 = org.apache.commons.math.util.FastMath.min((-20), (int) 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-20) + "'", int2 == (-20)); }
public void test1026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1026"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NullArgumentException nullArgumentException1 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable[] throwableArray2 = nullArgumentException1.getSuppressed(); java.lang.Throwable[] throwableArray3 = nullArgumentException1.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException4 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray3); org.junit.Assert.assertNotNull(throwableArray2); org.junit.Assert.assertNotNull(throwableArray3); }
public void test1027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1027"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object obj28 = complex27.readResolve(); org.apache.commons.math.complex.Complex complex29 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex30 = complex27.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex27.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex33 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField36 = complex35.getField(); org.apache.commons.math.complex.Complex complex37 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex38 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex39 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex40 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex41 = complex33.multiply(complex40); org.apache.commons.math.complex.Complex complex42 = complex41.conjugate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(obj28); org.junit.Assert.assertEquals(obj28.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complexField36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); }
public void test1028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1028"); double double1 = org.apache.commons.math.util.FastMath.cos(4.185891831851989d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.5025079609365614d) + "'", double1 == (-0.5025079609365614d)); }
public void test1029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1029"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.exp(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(102); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); }
public void test1030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1030"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Throwable[] throwableArray5 = numberIsTooSmallException4.getSuppressed(); org.junit.Assert.assertNotNull(throwableArray5); }
public void test1031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1031"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex10.tan(); org.apache.commons.math.complex.Complex complex12 = complex10.sin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1032"); double double1 = org.apache.commons.math.util.FastMath.cosh((-0.15901677465164d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0126698313893454d + "'", double1 == 1.0126698313893454d); }
public void test1033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1033"); double double1 = org.apache.commons.math.util.FastMath.cbrt(3.6882538673612966d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5450419258580483d + "'", double1 == 1.5450419258580483d); }
public void test1034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1034"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex3.subtract(70.7906245758041d); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); double double20 = complex17.getImaginary(); org.apache.commons.math.complex.Complex complex21 = complex12.multiply(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex24 = complex23.cos(); boolean boolean26 = complex23.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex27 = complex17.subtract(complex23); org.apache.commons.math.complex.Complex complex28 = complex3.subtract(complex23); org.apache.commons.math.complex.Complex complex29 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex30 = complex28.pow(complex29); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.557407724654902d + "'", double20 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); }
public void test1035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1035"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-1.4987863014408054d), 0.0d); org.apache.commons.math.complex.Complex complex3 = complex2.tanh(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex2.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass5 = complexField4.getRuntimeClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(wildcardClass5); }
public void test1036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1036"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex12 = complex9.sin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1037"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.Complex complex7 = complex2.multiply((-18)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex7); }
public void test1038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1038"); double double2 = org.apache.commons.math.util.FastMath.max((-0.5291083670041681d), 9.29117392892733d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 9.29117392892733d + "'", double2 == 9.29117392892733d); }
public void test1039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1039"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(2.9870930417485533d); double double2 = complex1.getReal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.9870930417485533d + "'", double2 == 2.9870930417485533d); }
public void test1040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1040"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 97.0f, (java.lang.Number) 1.1920929E-7f, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext5 = numberIsTooSmallException4.getContext(); org.junit.Assert.assertNotNull(exceptionContext5); }
public void test1041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1041"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); double double15 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex13.negate(); double double17 = complex16.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.5707963267948966d + "'", double17 == 1.5707963267948966d); }
public void test1042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1042"); double double1 = org.apache.commons.math.util.FastMath.atan((double) (-19.999998f)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.520837926316473d) + "'", double1 == (-1.520837926316473d)); }
public void test1043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1043"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1.543080634815244d); }
public void test1044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1044"); double double2 = org.apache.commons.math.util.FastMath.max((-0.9650615547698913d), 10.049875621120888d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.049875621120888d + "'", double2 == 10.049875621120888d); }
public void test1045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1045"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.3051531393776672d, (double) (byte) -1); }
public void test1046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1046"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((float) 5L, 3.732511156817248d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 4.9999995f + "'", float2 == 4.9999995f); }
public void test1047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1047"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(1.7763568394002505E-15d); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); }
public void test1048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1048"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder((-0.15901677465164d), (double) 1.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.15901677465164d) + "'", double2 == (-0.15901677465164d)); }
public void test1049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1049"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); double double22 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex23 = complex15.log(); org.apache.commons.math.complex.Complex complex25 = complex15.divide((double) (-20L)); boolean boolean26 = complex25.isNaN(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue(Double.isNaN(double22)); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true); }
public void test1050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1050"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex31 = complex27.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex32 = complex31.sinh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex35 = complex34.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex15.divide(complex34); org.apache.commons.math.complex.Complex complex37 = complex36.cosh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); }
public void test1051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1051"); double double1 = org.apache.commons.math.util.FastMath.nextUp(0.41078129050290885d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.4107812905029089d + "'", double1 == 0.4107812905029089d); }
public void test1052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1052"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex35 = complex33.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex35); }
public void test1053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1053"); double double1 = org.apache.commons.math.util.FastMath.tan((double) 2.910383E-11f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.9103830456733704E-11d + "'", double1 == 2.9103830456733704E-11d); }
public void test1054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1054"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.8623188722876839d, (java.lang.Number) 1.4E-45f, false); boolean boolean4 = numberIsTooSmallException3.getBoundIsAllowed(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test1055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1055"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double7 = complex6.abs(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex19.reciprocal(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex26 = complex20.multiply(complex25); java.lang.Object[] objArray27 = new java.lang.Object[] { 0.0f, (short) 0, complex12, complex25 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException28 = new org.apache.commons.math.exception.NullArgumentException(localizable1, objArray27); org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray27); java.lang.Throwable[] throwableArray30 = nullArgumentException29.getSuppressed(); java.lang.Throwable[] throwableArray31 = nullArgumentException29.getSuppressed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext32 = nullArgumentException29.getContext(); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(throwableArray30); org.junit.Assert.assertNotNull(throwableArray31); org.junit.Assert.assertNotNull(exceptionContext32); }
public void test1056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1056"); double double1 = org.apache.commons.math.util.FastMath.ceil((double) '#'); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 35.0d + "'", double1 == 35.0d); }
public void test1057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1057"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex10.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex18.tanh(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex23 = complex22.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex10.subtract(complex23); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); double double35 = complex34.getArgument(); org.apache.commons.math.complex.Complex complex36 = complex27.subtract(complex34); org.apache.commons.math.complex.Complex complex37 = complex34.reciprocal(); org.apache.commons.math.complex.Complex complex39 = complex37.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex40 = complex37.sin(); org.apache.commons.math.complex.Complex complex41 = complex37.sinh(); org.apache.commons.math.complex.Complex complex43 = complex37.pow((double) (short) 100); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField44 = complex37.getField(); org.apache.commons.math.complex.Complex complex45 = complexField44.getZero(); org.apache.commons.math.complex.Complex complex46 = complex10.divide(complex45); org.apache.commons.math.complex.Complex complex47 = complex10.asin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complexField44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); }
public void test1058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1058"); double double2 = org.apache.commons.math.util.FastMath.max(1.0000068302124958d, 1.073741824E9d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.073741824E9d + "'", double2 == 1.073741824E9d); }
public void test1059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1059"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); double double28 = complex23.getReal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); }
public void test1060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1060"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 7.629394531101971E-6d); }
public void test1061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1061"); float float2 = org.apache.commons.math.util.FastMath.min((-57.0f), 9.094947E-13f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-57.0f) + "'", float2 == (-57.0f)); }
public void test1062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1062"); double double1 = org.apache.commons.math.util.FastMath.rint(3.5553480614894135d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d); }
public void test1063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1063"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z(); org.apache.commons.math.complex.Complex complex34 = complex3.subtract(complex33); org.apache.commons.math.complex.Complex complex36 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); org.apache.commons.math.complex.Complex complex38 = complex36.exp(); org.apache.commons.math.complex.Complex complex39 = complex34.add(complex38); org.apache.commons.math.complex.Complex complex40 = complex39.sqrt(); java.lang.Object obj41 = complex40.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(obj41); org.junit.Assert.assertEquals(obj41.toString(), "(1.7114002078102506, 0.45892139069117627)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "(1.7114002078102506, 0.45892139069117627)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "(1.7114002078102506, 0.45892139069117627)"); }
public void test1064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1064"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.asin(); java.lang.Object obj15 = complex11.readResolve(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(obj15); org.junit.Assert.assertEquals(obj15.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "(NaN, NaN)"); }
public void test1065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1065"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.2414372125137612d, (-0.5025079609365614d)); }
public void test1066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1066"); int int1 = org.apache.commons.math.util.FastMath.getExponent(0.0d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1023) + "'", int1 == (-1023)); }
public void test1067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1067"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex4 = complex2.sinh(); org.apache.commons.math.complex.Complex complex5 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = complex5.asin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test1068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1068"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(22025.465794806754d, (-4.5655641595656216E-4d)); }
public void test1069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1069"); double double1 = org.apache.commons.math.util.FastMath.sin(9.999999999999998d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.5440211108893683d) + "'", double1 == (-0.5440211108893683d)); }
public void test1070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1070"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); boolean boolean22 = complex20.isNaN(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex24.subtract(complex31); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex34.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex37 = complex34.sin(); org.apache.commons.math.complex.Complex complex38 = complex34.sinh(); org.apache.commons.math.complex.Complex complex40 = complex34.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex41 = complex20.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double45 = complex44.abs(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex53 = complex44.divide(complex50); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex58.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double64 = complex63.abs(); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex68 = complex67.log(); org.apache.commons.math.complex.Complex complex69 = complex67.tanh(); org.apache.commons.math.complex.Complex complex71 = complex69.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex72 = complex63.divide(complex69); java.lang.String str73 = complex69.toString(); org.apache.commons.math.complex.Complex complex74 = complex58.divide(complex69); org.apache.commons.math.complex.Complex complex75 = complex50.subtract(complex58); org.apache.commons.math.complex.Complex complex76 = complex41.subtract(complex58); org.apache.commons.math.complex.Complex complex77 = complex15.subtract(complex58); java.lang.Object obj78 = complex58.readResolve(); org.apache.commons.math.complex.Complex complex79 = complex58.cos(); org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double83 = complex82.abs(); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex91 = complex82.divide(complex88); java.lang.String str92 = complex88.toString(); org.apache.commons.math.complex.Complex complex93 = complex88.sqrt(); org.apache.commons.math.complex.Complex complex94 = complex93.negate(); org.apache.commons.math.complex.Complex complex95 = complex79.multiply(complex94); org.apache.commons.math.complex.Complex complex97 = complex79.subtract(5.0d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(0.0, 1.557407724654902)" + "'", str73, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(obj78); org.junit.Assert.assertEquals(obj78.toString(), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(0.0, 1.557407724654902)" + "'", str92, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertNotNull(complex97); }
public void test1071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1071"); double double1 = org.apache.commons.math.util.FastMath.ulp(1.8380461242828246E74d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.5108406941546723E58d + "'", double1 == 2.5108406941546723E58d); }
public void test1072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1072"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex4 = complex2.sinh(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField5 = complex2.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexField5); }
public void test1073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1073"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 1L, (java.lang.Number) (-44.8534693539332d), true); // The following exception was thrown during execution in test generation try { java.lang.String str5 = numberIsTooSmallException4.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test1074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1074"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.multiply((int) '4'); org.apache.commons.math.complex.Complex complex5 = complex4.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1075"); java.lang.Number number0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException(number0, (java.lang.Number) 1.5515679276951895d, false); org.apache.commons.math.exception.NotPositiveException notPositiveException5 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 3.5553480614894135d); numberIsTooSmallException3.addSuppressed((java.lang.Throwable) notPositiveException5); java.lang.Number number7 = notPositiveException5.getMin(); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 0 + "'", number7, 0); }
public void test1076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1076"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); boolean boolean18 = complex15.isInfinite(); org.apache.commons.math.complex.Complex complex19 = complex15.acos(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double24 = complex23.abs(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex32 = complex23.divide(complex29); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); boolean boolean38 = complex36.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); double double43 = complex42.getReal(); org.apache.commons.math.complex.Complex complex45 = complex42.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex46 = complex36.multiply(complex45); org.apache.commons.math.complex.Complex complex47 = complex46.cosh(); boolean boolean48 = complex46.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField49 = complex46.getField(); org.apache.commons.math.complex.Complex complex50 = complex23.pow(complex46); org.apache.commons.math.complex.Complex complex51 = complex50.tan(); org.apache.commons.math.complex.Complex complex52 = complex20.subtract(complex50); org.apache.commons.math.complex.Complex complex53 = complex19.add(complex52); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(complexField49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); }
public void test1077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1077"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex13.add(complex16); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = complex18.add((double) 35); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex31 = complex30.sqrt1z(); org.apache.commons.math.complex.Complex complex32 = complex24.divide(complex30); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex35.tanh(); org.apache.commons.math.complex.Complex complex39 = complex37.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double43 = complex42.abs(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex51 = complex42.divide(complex48); java.lang.String str52 = complex48.toString(); org.apache.commons.math.complex.Complex complex53 = complex37.divide(complex48); org.apache.commons.math.complex.Complex complex54 = complex53.sqrt1z(); org.apache.commons.math.complex.Complex complex55 = complex24.subtract(complex54); org.apache.commons.math.complex.Complex complex56 = complex20.divide(complex24); org.apache.commons.math.complex.Complex complex58 = complex20.pow(1.0d); double double59 = complex58.getImaginary(); org.apache.commons.math.complex.Complex complex60 = complex58.negate(); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex64 = complex63.log(); org.apache.commons.math.complex.Complex complex65 = complex63.tanh(); org.apache.commons.math.complex.Complex complex67 = complex65.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex68 = complex67.acos(); org.apache.commons.math.complex.Complex complex69 = complex58.divide(complex68); org.apache.commons.math.complex.Complex complex70 = complex16.add(complex58); org.apache.commons.math.complex.Complex complex71 = complex70.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(0.0, 1.557407724654902)" + "'", str52, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); }
public void test1078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1078"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1079"); double double1 = org.apache.commons.math.util.FastMath.atanh(3.831008000716577E22d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1080"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 10.000001f, number2, false); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex29.reciprocal(); org.apache.commons.math.complex.Complex complex31 = complex25.multiply(complex30); java.lang.Object[] objArray32 = new java.lang.Object[] { 0.0f, (short) 0, complex17, complex30 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException33 = new org.apache.commons.math.exception.NullArgumentException(localizable6, objArray32); org.apache.commons.math.exception.NullArgumentException nullArgumentException34 = new org.apache.commons.math.exception.NullArgumentException(localizable5, objArray32); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) nullArgumentException34); org.apache.commons.math.exception.util.ExceptionContext exceptionContext36 = numberIsTooSmallException4.getContext(); java.lang.Number number37 = numberIsTooSmallException4.getMin(); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(objArray32); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(exceptionContext36); org.junit.Assert.assertNull(number37); }
public void test1081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1081"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double27 = complex26.abs(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = complex26.divide(complex32); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.log(); org.apache.commons.math.complex.Complex complex40 = complex38.tanh(); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double46 = complex45.abs(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex54 = complex45.divide(complex51); java.lang.String str55 = complex51.toString(); org.apache.commons.math.complex.Complex complex56 = complex40.divide(complex51); org.apache.commons.math.complex.Complex complex57 = complex32.subtract(complex40); org.apache.commons.math.complex.Complex complex58 = complex23.subtract(complex40); org.apache.commons.math.complex.ComplexField complexField59 = complex40.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(0.0, 1.557407724654902)" + "'", str55, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complexField59); }
public void test1082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1082"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0f, (java.lang.Number) 2.0d, false); java.lang.Throwable[] throwableArray4 = numberIsTooSmallException3.getSuppressed(); java.lang.Number number5 = numberIsTooSmallException3.getMin(); org.junit.Assert.assertNotNull(throwableArray4); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 2.0d + "'", number5, 2.0d); }
public void test1083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1083"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.apache.commons.math.complex.Complex complex37 = complex36.reciprocal(); org.apache.commons.math.complex.Complex complex38 = complex31.multiply(complex37); double double39 = complex38.getArgument(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue(Double.isNaN(double39)); }
public void test1084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1084"); int int2 = org.apache.commons.math.util.FastMath.max(127, 2); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 127 + "'", int2 == 127); }
public void test1085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1085"); double double1 = org.apache.commons.math.util.FastMath.expm1((-126.99999999999999d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test1086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1086"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex8.subtract(3.584289651861328d); org.apache.commons.math.complex.Complex complex16 = complex8.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test1087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1087"); float float2 = org.apache.commons.math.util.FastMath.max((float) 'a', (float) '#'); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 97.0f + "'", float2 == 97.0f); }
public void test1088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1088"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex31 = complex27.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex32 = complex31.sinh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex35 = complex34.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex15.divide(complex34); org.apache.commons.math.complex.Complex complex37 = complex15.conjugate(); double double38 = complex37.getReal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertTrue(Double.isNaN(double38)); }
public void test1089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1089"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex16 = complex11.cos(); org.apache.commons.math.complex.ComplexField complexField17 = complex16.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass18 = complexField17.getRuntimeClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complexField17); org.junit.Assert.assertNotNull(wildcardClass18); }
public void test1090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1090"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); org.apache.commons.math.complex.Complex complex31 = complex27.add((double) 52.000004f); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); }
public void test1091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1091"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); java.util.List<org.apache.commons.math.complex.Complex> complexList33 = complex30.nthRoot((int) '#'); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complexList33); }
public void test1092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1092"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.ComplexField complexField12 = complex4.getField(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply((int) (short) 0); double double27 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex24); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex31 = complex30.cos(); boolean boolean33 = complex30.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex34 = complex24.subtract(complex30); org.apache.commons.math.complex.Complex complex35 = complex4.subtract(complex30); org.apache.commons.math.complex.Complex complex37 = complex35.divide((double) 0L); org.apache.commons.math.complex.Complex complex39 = complex37.multiply(0); org.apache.commons.math.complex.Complex complex40 = complex37.tanh(); org.apache.commons.math.complex.Complex complex42 = complex40.subtract(32.0d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.557407724654902d + "'", double27 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); }
public void test1093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1093"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 2.8E-45f, 6.375923531988218E-297d); }
public void test1094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1094"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex2.pow((double) (-56.999996f)); org.apache.commons.math.complex.Complex complex6 = complex2.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test1095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1095"); double double1 = org.apache.commons.math.util.FastMath.abs(0.5275862405410617d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.5275862405410617d + "'", double1 == 0.5275862405410617d); }
public void test1096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1096"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); java.lang.Object obj15 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); double double26 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex27 = complex18.subtract(complex25); org.apache.commons.math.complex.Complex complex28 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex28.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex32 = complex28.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex33 = complex32.sinh(); org.apache.commons.math.complex.Complex complex35 = complex33.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex40.reciprocal(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex47 = complex41.multiply(complex46); org.apache.commons.math.complex.Complex complex48 = complex35.divide(complex47); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex52.reciprocal(); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex59 = complex58.sqrt1z(); org.apache.commons.math.complex.Complex complex60 = complex52.divide(complex58); org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex66 = complex65.log(); org.apache.commons.math.complex.Complex complex67 = complex65.tanh(); org.apache.commons.math.complex.Complex complex69 = complex67.multiply((int) (short) 0); double double70 = complex69.getArgument(); org.apache.commons.math.complex.Complex complex71 = complex62.subtract(complex69); org.apache.commons.math.complex.Complex complex72 = complex69.reciprocal(); org.apache.commons.math.complex.Complex complex73 = complex60.add(complex69); org.apache.commons.math.complex.Complex complex74 = complex35.divide(complex60); double double75 = complex35.getArgument(); org.apache.commons.math.complex.Complex complex76 = complex16.subtract(complex35); org.apache.commons.math.complex.Complex complex78 = complex76.add(2.6881376506005913E43d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField79 = complex76.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(obj15); org.junit.Assert.assertEquals(obj15.toString(), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertTrue(Double.isNaN(double75)); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complexField79); }
public void test1097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1097"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex35.reciprocal(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = complex35.divide(complex41); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); double double53 = complex52.getArgument(); org.apache.commons.math.complex.Complex complex54 = complex45.subtract(complex52); org.apache.commons.math.complex.Complex complex55 = complex52.reciprocal(); org.apache.commons.math.complex.Complex complex56 = complex43.add(complex52); org.apache.commons.math.complex.Complex complex57 = complex18.divide(complex43); org.apache.commons.math.complex.Complex complex58 = complex43.atan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); }
public void test1098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1098"); long long2 = org.apache.commons.math.util.FastMath.max((long) (short) 10, (long) 2147483647); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2147483647L + "'", long2 == 2147483647L); }
public void test1099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1099"); double double1 = org.apache.commons.math.util.FastMath.expm1(35.00000000000001d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.586013452313441E15d + "'", double1 == 1.586013452313441E15d); }
public void test1100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1100"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.Complex complex12 = complex4.negate(); org.apache.commons.math.complex.Complex complex13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex14 = complex12.add(complex13); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1101"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex27.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex21.subtract(complex27); org.apache.commons.math.complex.Complex complex30 = complex21.sin(); org.apache.commons.math.complex.Complex complex31 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex34.tanh(); org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex39 = complex36.add(complex38); org.apache.commons.math.complex.Complex complex40 = complex36.conjugate(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double44 = complex43.abs(); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex48 = complex47.log(); org.apache.commons.math.complex.Complex complex49 = complex47.tanh(); org.apache.commons.math.complex.Complex complex51 = complex49.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex52 = complex43.divide(complex49); org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex56 = complex55.negate(); boolean boolean58 = complex56.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex62 = complex61.log(); double double63 = complex62.getReal(); org.apache.commons.math.complex.Complex complex65 = complex62.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex66 = complex56.multiply(complex65); org.apache.commons.math.complex.Complex complex67 = complex66.cosh(); boolean boolean68 = complex66.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField69 = complex66.getField(); org.apache.commons.math.complex.Complex complex70 = complex43.pow(complex66); org.apache.commons.math.complex.Complex complex71 = complex36.subtract(complex43); org.apache.commons.math.complex.Complex complex72 = complex30.subtract(complex43); org.apache.commons.math.complex.Complex complex73 = complex16.pow(complex43); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertNotNull(complexField69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); }
public void test1102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1102"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); java.lang.String str8 = complex5.toString(); org.apache.commons.math.complex.Complex complex10 = complex5.multiply((-19)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.8508157176809255, 0.0)" + "'", str8, "(1.8508157176809255, 0.0)"); org.junit.Assert.assertNotNull(complex10); }
public void test1103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1103"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 1.7453292519943298d, number2, false); }
public void test1104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1104"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); boolean boolean18 = complex15.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField19 = complex15.getField(); org.apache.commons.math.complex.Complex complex20 = complexField19.getZero(); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complexField19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test1105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1105"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex12 = complex9.add(complex11); org.apache.commons.math.complex.Complex complex13 = complex9.conjugate(); org.apache.commons.math.complex.Complex complex14 = complex9.tan(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex17 = complex15.add((double) 35); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex28 = complex27.sqrt1z(); org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex27); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double40 = complex39.abs(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex44 = complex43.log(); org.apache.commons.math.complex.Complex complex45 = complex43.tanh(); org.apache.commons.math.complex.Complex complex47 = complex45.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex48 = complex39.divide(complex45); java.lang.String str49 = complex45.toString(); org.apache.commons.math.complex.Complex complex50 = complex34.divide(complex45); org.apache.commons.math.complex.Complex complex51 = complex50.sqrt1z(); org.apache.commons.math.complex.Complex complex52 = complex21.subtract(complex51); org.apache.commons.math.complex.Complex complex53 = complex17.divide(complex21); org.apache.commons.math.complex.Complex complex55 = complex17.multiply(2.718281828459045d); org.apache.commons.math.complex.Complex complex56 = complex9.subtract(complex55); org.apache.commons.math.complex.Complex complex57 = complex3.add(complex55); org.apache.commons.math.complex.Complex complex58 = complex57.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(0.0, 1.557407724654902)" + "'", str49, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); }
public void test1106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1106"); long long2 = org.apache.commons.math.util.FastMath.max(18L, 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 18L + "'", long2 == 18L); }
public void test1107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1107"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); java.lang.Object obj43 = complex40.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(obj43); org.junit.Assert.assertEquals(obj43.toString(), "(36.0, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "(36.0, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "(36.0, 0.0)"); }
public void test1108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1108"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 9.536743E-7f); org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double9 = complex8.abs(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = complex8.divide(complex14); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double28 = complex27.abs(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex32 = complex31.log(); org.apache.commons.math.complex.Complex complex33 = complex31.tanh(); org.apache.commons.math.complex.Complex complex35 = complex33.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex36 = complex27.divide(complex33); java.lang.String str37 = complex33.toString(); org.apache.commons.math.complex.Complex complex38 = complex22.divide(complex33); org.apache.commons.math.complex.Complex complex39 = complex14.subtract(complex22); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex44 = complex43.log(); double double45 = complex44.getReal(); org.apache.commons.math.complex.Complex complex47 = complex44.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex51.reciprocal(); org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex56 = complex55.log(); org.apache.commons.math.complex.Complex complex57 = complex55.tanh(); org.apache.commons.math.complex.Complex complex58 = complex57.sqrt1z(); org.apache.commons.math.complex.Complex complex59 = complex51.divide(complex57); java.lang.Object[] objArray60 = new java.lang.Object[] { (-1L), 7.6293945E-6f, complex39, 1.9867717342662448d, complex47, complex51 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException61 = new org.apache.commons.math.exception.NullArgumentException(localizable3, objArray60); notPositiveException2.addSuppressed((java.lang.Throwable) nullArgumentException61); org.apache.commons.math.exception.util.ExceptionContext exceptionContext63 = nullArgumentException61.getContext(); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(0.0, 1.557407724654902)" + "'", str37, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(objArray60); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[-1, 7.6293945E-6, (0.0, 0.0), 1.9867717342662448, (-0.0, -1.5707963267948966), (0.0, 1.5707963267948966)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[-1, 7.6293945E-6, (0.0, 0.0), 1.9867717342662448, (-0.0, -1.5707963267948966), (0.0, 1.5707963267948966)]"); org.junit.Assert.assertNotNull(exceptionContext63); }
public void test1109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1109"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z(); org.apache.commons.math.complex.Complex complex4 = complex1.multiply(0); org.apache.commons.math.complex.Complex complex5 = complex4.tanh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1110"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException10 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext11 = numberIsTooSmallException10.getContext(); java.lang.Throwable[] throwableArray12 = numberIsTooSmallException10.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable6, (java.lang.Object[]) throwableArray12); org.apache.commons.math.exception.util.ExceptionContext exceptionContext14 = mathIllegalArgumentException13.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext15 = mathIllegalArgumentException13.getContext(); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException13); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 1.0d + "'", number5, 1.0d); org.junit.Assert.assertNotNull(exceptionContext11); org.junit.Assert.assertNotNull(throwableArray12); org.junit.Assert.assertNotNull(exceptionContext14); org.junit.Assert.assertNotNull(exceptionContext15); }
public void test1111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1111"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 6.830189170118965E-6d, (java.lang.Number) 3.831008000716577E22d, false); java.lang.Throwable throwable5 = null; // The following exception was thrown during execution in test generation try { numberIsTooSmallException4.addSuppressed(throwable5); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception."); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test1112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1112"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex16.add((double) 35); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex22.reciprocal(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); org.apache.commons.math.complex.Complex complex30 = complex22.divide(complex28); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex37 = complex35.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double41 = complex40.abs(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex48 = complex46.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex49 = complex40.divide(complex46); java.lang.String str50 = complex46.toString(); org.apache.commons.math.complex.Complex complex51 = complex35.divide(complex46); org.apache.commons.math.complex.Complex complex52 = complex51.sqrt1z(); org.apache.commons.math.complex.Complex complex53 = complex22.subtract(complex52); org.apache.commons.math.complex.Complex complex54 = complex18.divide(complex22); org.apache.commons.math.complex.Complex complex56 = complex18.pow(1.0d); double double57 = complex56.getImaginary(); org.apache.commons.math.complex.Complex complex58 = complex56.sqrt1z(); org.apache.commons.math.complex.Complex complex61 = complex56.createComplex(1.5845632502852868E31d, (-0.9999999999999999d)); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex67 = complex66.log(); org.apache.commons.math.complex.Complex complex68 = complex66.tanh(); org.apache.commons.math.complex.Complex complex70 = complex68.multiply((int) (short) 0); double double71 = complex70.getArgument(); org.apache.commons.math.complex.Complex complex72 = complex63.subtract(complex70); org.apache.commons.math.complex.Complex complex73 = complex70.reciprocal(); org.apache.commons.math.complex.Complex complex75 = complex73.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex76 = complex73.sin(); org.apache.commons.math.complex.Complex complex77 = complex76.negate(); org.apache.commons.math.complex.Complex complex78 = complex76.reciprocal(); org.apache.commons.math.complex.Complex complex79 = complex78.tanh(); double double80 = complex78.getReal(); org.apache.commons.math.complex.Complex complex81 = complex78.negate(); double double82 = complex78.getImaginary(); org.apache.commons.math.complex.Complex complex84 = complex78.pow(4.594700892207039d); boolean boolean85 = complex61.equals((java.lang.Object) complex78); org.apache.commons.math.complex.Complex complex86 = complex15.subtract(complex61); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(0.0, 1.557407724654902)" + "'", str50, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertTrue(Double.isNaN(double80)); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertTrue(Double.isNaN(double82)); org.junit.Assert.assertNotNull(complex84); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(complex86); }
public void test1113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1113"); double double2 = org.apache.commons.math.util.FastMath.copySign((-1.5574077246549023d), 5.298292365610485d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5574077246549023d + "'", double2 == 1.5574077246549023d); }
public void test1114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1114"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); boolean boolean8 = complex6.isNaN(); org.apache.commons.math.complex.Complex complex9 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex6.log(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1115"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 2.3300002726942934E104d); }
public void test1116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1116"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); double double15 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex13.sqrt(); org.apache.commons.math.complex.Complex complex17 = complex13.log(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test1117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1117"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex13.asin(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex19.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.negate(); boolean boolean28 = complex26.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex32 = complex31.log(); double double33 = complex32.getReal(); org.apache.commons.math.complex.Complex complex35 = complex32.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex36 = complex26.multiply(complex35); org.apache.commons.math.complex.Complex complex37 = complex20.subtract(complex35); org.apache.commons.math.complex.Complex complex39 = new org.apache.commons.math.complex.Complex(9.536747711537457E-7d); org.apache.commons.math.complex.Complex complex40 = complex35.subtract(complex39); org.apache.commons.math.complex.Complex complex41 = complex13.divide(complex40); boolean boolean43 = complex13.equals((java.lang.Object) (byte) 100); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); }
public void test1118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1118"); double double1 = org.apache.commons.math.util.FastMath.exp(100.00000000000001d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.6881171418161737E43d + "'", double1 == 2.6881171418161737E43d); }
public void test1119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1119"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex40.sqrt(); org.apache.commons.math.complex.Complex complex53 = complex52.exp(); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex58.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex61 = complex60.cosh(); java.lang.String str62 = complex61.toString(); org.apache.commons.math.complex.Complex complex63 = complex61.tanh(); java.lang.String str64 = complex61.toString(); org.apache.commons.math.complex.Complex complex66 = complex61.add(1.5707962935076714d); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex70 = complex69.log(); org.apache.commons.math.complex.Complex complex71 = complex69.tanh(); org.apache.commons.math.complex.Complex complex72 = complex71.sqrt1z(); boolean boolean73 = complex72.isNaN(); org.apache.commons.math.complex.Complex complex74 = complex72.asin(); org.apache.commons.math.complex.Complex complex75 = complex74.sqrt(); org.apache.commons.math.complex.Complex complex76 = complex61.pow(complex75); org.apache.commons.math.complex.Complex complex79 = complex61.createComplex((-0.005429048803495734d), (double) Float.POSITIVE_INFINITY); org.apache.commons.math.complex.Complex complex80 = complex53.divide(complex61); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(1.0, 0.0)" + "'", str62, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(1.0, 0.0)" + "'", str64, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); }
public void test1120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1120"); double double1 = org.apache.commons.math.util.FastMath.cosh((double) (-4L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 27.308232836016487d + "'", double1 == 27.308232836016487d); }
public void test1121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1121"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.9999999999999999d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex9 = complex7.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); boolean boolean15 = complex13.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); double double20 = complex19.getReal(); org.apache.commons.math.complex.Complex complex22 = complex19.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex23 = complex13.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex7.subtract(complex22); org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex(9.536747711537457E-7d); org.apache.commons.math.complex.Complex complex27 = complex22.subtract(complex26); org.apache.commons.math.complex.Complex complex28 = complex1.pow(complex27); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); }
public void test1122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1122"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(0.8144772166995121d, 2.802596928649634E-45d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test1123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1123"); double double1 = org.apache.commons.math.util.FastMath.cbrt(24.883246999811686d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.919458795980739d + "'", double1 == 2.919458795980739d); }
public void test1124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1124"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex11.multiply(complex16); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply((int) (short) 0); double double28 = complex27.getArgument(); org.apache.commons.math.complex.Complex complex29 = complex20.subtract(complex27); double double30 = complex20.abs(); org.apache.commons.math.complex.Complex complex32 = complex20.multiply(32.0d); org.apache.commons.math.complex.Complex complex33 = complex32.reciprocal(); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); boolean boolean39 = complex37.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); double double44 = complex43.getReal(); org.apache.commons.math.complex.Complex complex46 = complex43.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex47 = complex37.multiply(complex46); org.apache.commons.math.complex.Complex complex49 = complex46.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex50 = complex33.pow(complex46); org.apache.commons.math.complex.Complex complex51 = complex18.multiply(complex50); org.apache.commons.math.complex.Complex complex52 = complex6.subtract(complex18); double double53 = complex52.getReal(); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf(5.0d, (-15.653559774527022d)); org.apache.commons.math.complex.Complex complex57 = complex52.divide(complex56); org.apache.commons.math.complex.Complex complex58 = complex56.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.41647126877660395d + "'", double53 == 0.41647126877660395d); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); }
public void test1125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1125"); double double1 = org.apache.commons.math.util.FastMath.atan(127.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.562922473770796d + "'", double1 == 1.562922473770796d); }
public void test1126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1126"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); boolean boolean18 = complex15.isInfinite(); org.apache.commons.math.complex.Complex complex19 = complex15.sin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complex19); }
public void test1127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1127"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); double double5 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex6 = complex2.atan(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = complex11.add(0.8623188722876839d); org.apache.commons.math.complex.ComplexField complexField16 = complex11.getField(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double20 = complex19.abs(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex28 = complex19.divide(complex25); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex32 = complex31.negate(); boolean boolean34 = complex32.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); double double39 = complex38.getReal(); org.apache.commons.math.complex.Complex complex41 = complex38.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex42 = complex32.multiply(complex41); org.apache.commons.math.complex.Complex complex43 = complex42.cosh(); boolean boolean44 = complex42.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField45 = complex42.getField(); org.apache.commons.math.complex.Complex complex46 = complex19.pow(complex42); org.apache.commons.math.complex.Complex complex47 = complex11.subtract(complex42); org.apache.commons.math.complex.Complex complex48 = complex6.add(complex42); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.5707963267948966d + "'", double5 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complexField16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(complexField45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); }
public void test1128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1128"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); double double11 = complex1.abs(); org.apache.commons.math.complex.Complex complex13 = complex1.multiply(32.0d); org.apache.commons.math.complex.Complex complex14 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.negate(); boolean boolean20 = complex18.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); double double25 = complex24.getReal(); org.apache.commons.math.complex.Complex complex27 = complex24.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex28 = complex18.multiply(complex27); org.apache.commons.math.complex.Complex complex30 = complex27.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex31 = complex14.pow(complex27); org.apache.commons.math.complex.Complex complex32 = complex14.asin(); org.apache.commons.math.complex.Complex complex34 = complex32.pow((double) 32); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); }
public void test1129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1129"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.9721522630525295E-31d, 4.9E-324d); }
public void test1130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1130"); float float1 = org.apache.commons.math.util.FastMath.nextUp(6.044629E23f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 6.04463E23f + "'", float1 == 6.04463E23f); }
public void test1131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1131"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); double double11 = complex1.abs(); org.apache.commons.math.complex.Complex complex13 = complex1.multiply(32.0d); org.apache.commons.math.complex.Complex complex14 = complex1.exp(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); }
public void test1132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1132"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); boolean boolean5 = numberIsTooSmallException4.getBoundIsAllowed(); java.lang.Number number6 = numberIsTooSmallException4.getMin(); java.lang.Number number7 = numberIsTooSmallException4.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext8 = numberIsTooSmallException4.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext9 = numberIsTooSmallException4.getContext(); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 1.0d + "'", number6, 1.0d); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 3.831008000716577E22d + "'", number7, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext8); org.junit.Assert.assertNotNull(exceptionContext9); }
public void test1133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1133"); double double1 = org.apache.commons.math.util.FastMath.abs(4.242640687119285d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.242640687119285d + "'", double1 == 4.242640687119285d); }
public void test1134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1134"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex8 = complex4.add(0.8623188722876839d); org.apache.commons.math.complex.Complex complex9 = complex8.sin(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); boolean boolean15 = complex13.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); double double20 = complex19.getReal(); org.apache.commons.math.complex.Complex complex22 = complex19.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex23 = complex13.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.cosh(); org.apache.commons.math.complex.Complex complex25 = complex23.atan(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); double double35 = complex34.getArgument(); org.apache.commons.math.complex.Complex complex36 = complex27.subtract(complex34); org.apache.commons.math.complex.Complex complex37 = complex34.reciprocal(); org.apache.commons.math.complex.Complex complex39 = complex37.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex40 = complex37.sin(); org.apache.commons.math.complex.Complex complex41 = complex23.pow(complex40); double double42 = complex41.getImaginary(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex48 = complex47.sqrt1z(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex50 = complex47.add(complex49); org.apache.commons.math.complex.Complex complex51 = complex47.conjugate(); org.apache.commons.math.complex.Complex complex52 = complex47.tan(); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex54 = complex52.add(complex53); org.apache.commons.math.complex.Complex complex55 = complex53.exp(); org.apache.commons.math.complex.Complex complex56 = complex41.subtract(complex55); org.apache.commons.math.complex.Complex complex57 = complex8.multiply(complex41); org.apache.commons.math.complex.Complex complex58 = complex41.sqrt(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertTrue(Double.isNaN(double42)); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); }
public void test1135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1135"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-2.216568150032798d)); }
public void test1136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1136"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex3.subtract(70.7906245758041d); org.apache.commons.math.complex.Complex complex6 = complex3.negate(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField7 = complex3.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexField7); }
public void test1137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1137"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.asin(); org.apache.commons.math.complex.Complex complex15 = complex14.tan(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex16.add((double) 35); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex22.reciprocal(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); org.apache.commons.math.complex.Complex complex30 = complex22.divide(complex28); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex37 = complex35.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double41 = complex40.abs(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex48 = complex46.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex49 = complex40.divide(complex46); java.lang.String str50 = complex46.toString(); org.apache.commons.math.complex.Complex complex51 = complex35.divide(complex46); org.apache.commons.math.complex.Complex complex52 = complex51.sqrt1z(); org.apache.commons.math.complex.Complex complex53 = complex22.subtract(complex52); org.apache.commons.math.complex.Complex complex54 = complex18.divide(complex22); org.apache.commons.math.complex.Complex complex56 = complex18.pow(1.0d); double double57 = complex56.getImaginary(); org.apache.commons.math.complex.Complex complex58 = complex56.sqrt1z(); org.apache.commons.math.complex.Complex complex59 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex15.pow(complex56); org.apache.commons.math.complex.Complex complex61 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex65 = complex64.log(); org.apache.commons.math.complex.Complex complex66 = complex64.tanh(); org.apache.commons.math.complex.Complex complex67 = complex66.sqrt1z(); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex69 = complex66.add(complex68); org.apache.commons.math.complex.Complex complex70 = complex66.conjugate(); org.apache.commons.math.complex.Complex complex71 = complex66.tan(); org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex75 = complex74.log(); org.apache.commons.math.complex.Complex complex76 = complex74.tanh(); org.apache.commons.math.complex.Complex complex78 = complex76.multiply((int) (short) 0); double double79 = complex78.getArgument(); boolean boolean80 = complex78.isInfinite(); org.apache.commons.math.complex.Complex complex81 = complex71.add(complex78); boolean boolean82 = complex78.isInfinite(); org.apache.commons.math.complex.Complex complex83 = complex15.divide(complex78); double double84 = complex15.getReal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(0.0, 1.557407724654902)" + "'", str50, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertTrue(Double.isNaN(double84)); }
public void test1138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1138"); double double1 = org.apache.commons.math.util.FastMath.acosh(0.6311656040923515d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1139"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = numberIsTooSmallException4.getContext(); boolean boolean8 = numberIsTooSmallException4.getBoundIsAllowed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext9 = numberIsTooSmallException4.getContext(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 3.831008000716577E22d + "'", number5, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(exceptionContext7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(exceptionContext9); }
public void test1140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1140"); double double1 = org.apache.commons.math.util.FastMath.sqrt(3.831008000716577E22d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.9572960942883878E11d + "'", double1 == 1.9572960942883878E11d); }
public void test1141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1141"); double double1 = org.apache.commons.math.util.FastMath.rint(1.791759469228055d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.0d + "'", double1 == 2.0d); }
public void test1142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1142"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 117.10114144809786d, (java.lang.Number) 1.7763568394002505E-15d, true); java.lang.Number number4 = numberIsTooSmallException3.getMin(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 1.7763568394002505E-15d + "'", number4, 1.7763568394002505E-15d); }
public void test1143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1143"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(4.67232872835526d); org.junit.Assert.assertNotNull(complex1); }
public void test1144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1144"); int int2 = org.apache.commons.math.util.FastMath.max(0, (int) (byte) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100); }
public void test1145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1145"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.asin(); org.apache.commons.math.complex.Complex complex15 = complex14.tan(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex16.add((double) 35); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex22.reciprocal(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); org.apache.commons.math.complex.Complex complex30 = complex22.divide(complex28); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex37 = complex35.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double41 = complex40.abs(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex48 = complex46.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex49 = complex40.divide(complex46); java.lang.String str50 = complex46.toString(); org.apache.commons.math.complex.Complex complex51 = complex35.divide(complex46); org.apache.commons.math.complex.Complex complex52 = complex51.sqrt1z(); org.apache.commons.math.complex.Complex complex53 = complex22.subtract(complex52); org.apache.commons.math.complex.Complex complex54 = complex18.divide(complex22); org.apache.commons.math.complex.Complex complex56 = complex18.pow(1.0d); double double57 = complex56.getImaginary(); org.apache.commons.math.complex.Complex complex58 = complex56.sqrt1z(); org.apache.commons.math.complex.Complex complex59 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex15.pow(complex56); org.apache.commons.math.complex.Complex complex61 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex65 = complex64.log(); org.apache.commons.math.complex.Complex complex66 = complex64.tanh(); org.apache.commons.math.complex.Complex complex67 = complex66.sqrt1z(); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex69 = complex66.add(complex68); org.apache.commons.math.complex.Complex complex70 = complex66.conjugate(); org.apache.commons.math.complex.Complex complex71 = complex66.tan(); org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex75 = complex74.log(); org.apache.commons.math.complex.Complex complex76 = complex74.tanh(); org.apache.commons.math.complex.Complex complex78 = complex76.multiply((int) (short) 0); double double79 = complex78.getArgument(); boolean boolean80 = complex78.isInfinite(); org.apache.commons.math.complex.Complex complex81 = complex71.add(complex78); boolean boolean82 = complex78.isInfinite(); org.apache.commons.math.complex.Complex complex83 = complex15.divide(complex78); org.apache.commons.math.complex.Complex complex84 = complex83.atan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(0.0, 1.557407724654902)" + "'", str50, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex84); }
public void test1146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1146"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-11.894158187830156d), 0.0d); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1147"); long long2 = org.apache.commons.math.util.FastMath.min((long) 63, 19L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 19L + "'", long2 == 19L); }
public void test1148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1148"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex2 = complex1.cos(); java.lang.String str3 = complex2.toString(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(-0.8390715290764524, 0.0)" + "'", str3, "(-0.8390715290764524, 0.0)"); }
public void test1149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1149"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((int) (short) 0); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex14.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex17 = complex14.asin(); org.apache.commons.math.complex.Complex complex18 = complex2.multiply(complex14); org.apache.commons.math.complex.Complex complex19 = complex18.reciprocal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); }
public void test1150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1150"); float float2 = org.apache.commons.math.util.FastMath.scalb((float) (-5L), 127); org.junit.Assert.assertTrue("'" + float2 + "' != '" + Float.NEGATIVE_INFINITY + "'", float2 == Float.NEGATIVE_INFINITY); }
public void test1151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1151"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 2.0f); }
public void test1152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1152"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.ComplexField complexField12 = complex4.getField(); double double13 = complex4.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.6366197723675814d + "'", double13 == 0.6366197723675814d); }
public void test1153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1153"); double double2 = org.apache.commons.math.util.FastMath.scalb(5.298292365610485d, (-4)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.3311432728506553d + "'", double2 == 0.3311432728506553d); }
public void test1154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1154"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.negate(); org.apache.commons.math.complex.Complex complex22 = complex4.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test1155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1155"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) (-0.0f)); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.junit.Assert.assertNotNull(complex2); }
public void test1156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1156"); double double1 = org.apache.commons.math.util.FastMath.abs(8.425302986013009E-12d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 8.425302986013009E-12d + "'", double1 == 8.425302986013009E-12d); }
public void test1157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1157"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex4 = complex3.log(); org.apache.commons.math.complex.Complex complex5 = complex4.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex0.multiply(complex5); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex8.subtract(complex15); org.apache.commons.math.complex.Complex complex18 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex20 = complex18.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex22 = complex18.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); org.apache.commons.math.complex.Complex complex24 = complex0.multiply(complex23); org.apache.commons.math.complex.Complex complex25 = complex24.sqrt(); java.lang.Class<?> wildcardClass26 = complex25.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(wildcardClass26); }
public void test1158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1158"); double double1 = org.apache.commons.math.util.FastMath.acos(1.5568080501466526d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1159"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double16 = complex15.abs(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex15.divide(complex21); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double35 = complex34.abs(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.log(); org.apache.commons.math.complex.Complex complex40 = complex38.tanh(); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex43 = complex34.divide(complex40); java.lang.String str44 = complex40.toString(); org.apache.commons.math.complex.Complex complex45 = complex29.divide(complex40); org.apache.commons.math.complex.Complex complex46 = complex21.subtract(complex29); org.apache.commons.math.complex.Complex complex47 = complex29.cosh(); org.apache.commons.math.complex.Complex complex48 = complex29.cos(); org.apache.commons.math.complex.Complex complex49 = complex6.multiply(complex48); org.apache.commons.math.complex.Complex complex50 = complex48.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(0.0, 1.557407724654902)" + "'", str44, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); }
public void test1160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1160"); double double1 = org.apache.commons.math.util.FastMath.nextUp(2.1474836469999998E9d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.147483647E9d + "'", double1 == 2.147483647E9d); }
public void test1161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1161"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.ComplexField complexField6 = complex2.getField(); org.apache.commons.math.complex.Complex complex7 = complexField6.getZero(); org.apache.commons.math.complex.Complex complex8 = complexField6.getOne(); java.lang.Class<?> wildcardClass9 = complex8.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test1162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1162"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); double double30 = complex29.abs(); org.apache.commons.math.exception.util.Localizable localizable31 = null; java.lang.Number number33 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException35 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable31, (java.lang.Number) 10.000001f, number33, false); org.apache.commons.math.exception.util.Localizable localizable36 = null; org.apache.commons.math.exception.util.Localizable localizable37 = null; org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double43 = complex42.abs(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex51 = complex42.divide(complex48); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.log(); org.apache.commons.math.complex.Complex complex56 = complex55.reciprocal(); org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex60 = complex59.log(); org.apache.commons.math.complex.Complex complex61 = complex60.reciprocal(); org.apache.commons.math.complex.Complex complex62 = complex56.multiply(complex61); java.lang.Object[] objArray63 = new java.lang.Object[] { 0.0f, (short) 0, complex48, complex61 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException64 = new org.apache.commons.math.exception.NullArgumentException(localizable37, objArray63); org.apache.commons.math.exception.NullArgumentException nullArgumentException65 = new org.apache.commons.math.exception.NullArgumentException(localizable36, objArray63); numberIsTooSmallException35.addSuppressed((java.lang.Throwable) nullArgumentException65); boolean boolean67 = complex29.equals((java.lang.Object) numberIsTooSmallException35); org.apache.commons.math.complex.Complex complex68 = complex29.negate(); org.apache.commons.math.complex.Complex complex69 = complex29.reciprocal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue(Double.isNaN(double30)); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(objArray63); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); }
public void test1163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1163"); double double1 = org.apache.commons.math.util.FastMath.log10(2.2583571068820263E-32d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-31.646207383365102d) + "'", double1 == (-31.646207383365102d)); }
public void test1164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1164"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); boolean boolean12 = complex10.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19); org.apache.commons.math.complex.Complex complex21 = complex4.subtract(complex19); org.apache.commons.math.complex.Complex complex22 = complex4.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test1165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1165"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.ComplexField complexField16 = complex15.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complexField16); }
public void test1166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1166"); int int1 = org.apache.commons.math.util.FastMath.round(20.0f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20); }
public void test1167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1167"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); java.lang.Object obj17 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex18 = complex8.multiply(complex14); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex22.reciprocal(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); org.apache.commons.math.complex.Complex complex30 = complex22.divide(complex28); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex35.tanh(); org.apache.commons.math.complex.Complex complex39 = complex37.multiply((int) (short) 0); double double40 = complex39.getArgument(); org.apache.commons.math.complex.Complex complex41 = complex32.subtract(complex39); org.apache.commons.math.complex.Complex complex42 = complex39.reciprocal(); org.apache.commons.math.complex.Complex complex43 = complex30.add(complex39); org.apache.commons.math.complex.Complex complex45 = complex39.multiply(0.0d); org.apache.commons.math.complex.Complex complex46 = complex8.divide(complex39); org.apache.commons.math.complex.Complex complex47 = complex46.atan(); org.apache.commons.math.complex.Complex complex48 = complex46.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); }
public void test1168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1168"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); boolean boolean6 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex7 = complex5.asin(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt(); double double10 = complex9.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.1718498713186263d + "'", double10 == 1.1718498713186263d); }
public void test1169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1169"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (byte) 0, (java.lang.Number) (-1), true); boolean boolean5 = numberIsTooSmallException4.getBoundIsAllowed(); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); }
public void test1170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1170"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException10 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext11 = numberIsTooSmallException10.getContext(); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException10); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException16 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0d, (java.lang.Number) 0.8623188722876839d, true); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException16); java.lang.Number number18 = numberIsTooSmallException4.getMin(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 3.831008000716577E22d + "'", number5, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(exceptionContext11); org.junit.Assert.assertEquals("'" + number18 + "' != '" + 1.0d + "'", number18, 1.0d); }
public void test1171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1171"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); java.lang.String str8 = complex7.toString(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); java.lang.String str10 = complex7.toString(); double double11 = complex7.getImaginary(); org.apache.commons.math.complex.Complex complex12 = complex7.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(1.0, 0.0)" + "'", str10, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex12); }
public void test1172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1172"); double double1 = org.apache.commons.math.util.FastMath.tanh((double) 3.0562855E-37f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.056285536345702E-37d + "'", double1 == 3.056285536345702E-37d); }
public void test1173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1173"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); }
public void test1174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1174"); double double1 = org.apache.commons.math.util.FastMath.exp((double) (byte) 10); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 22026.465794806718d + "'", double1 == 22026.465794806718d); }
public void test1175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1175"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex13 = complex12.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test1176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1176"); double double2 = org.apache.commons.math.util.FastMath.atan2(0.6816196479851241d, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5707963267948966d + "'", double2 == 1.5707963267948966d); }
public void test1177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1177"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.tanh(); org.apache.commons.math.complex.Complex complex12 = complex4.cos(); org.apache.commons.math.complex.Complex complex14 = complex4.pow((double) (byte) -1); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex22 = complex21.tanh(); org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex4.add(complex23); org.apache.commons.math.complex.Complex complex25 = complex4.exp(); org.apache.commons.math.complex.Complex complex27 = complex25.subtract((double) 20); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); }
public void test1178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1178"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); boolean boolean8 = complex6.isNaN(); org.apache.commons.math.complex.Complex complex9 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex6.asin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1179"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) (-0.0d), (java.lang.Number) 9.536743164063946E-7d, true); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException5.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) throwableArray6); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray6); org.junit.Assert.assertNotNull(throwableArray6); }
public void test1180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1180"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex4 = complex3.log(); org.apache.commons.math.complex.Complex complex5 = complex4.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex0.multiply(complex5); org.apache.commons.math.complex.Complex complex7 = complex0.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test1181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1181"); int int1 = org.apache.commons.math.util.FastMath.getExponent(6.04463E23f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 79 + "'", int1 == 79); }
public void test1182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1182"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); boolean boolean26 = complex24.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); double double31 = complex30.getReal(); org.apache.commons.math.complex.Complex complex33 = complex30.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex34 = complex24.multiply(complex33); org.apache.commons.math.complex.Complex complex35 = complex34.cosh(); boolean boolean36 = complex34.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField37 = complex34.getField(); org.apache.commons.math.complex.Complex complex38 = complex11.pow(complex34); org.apache.commons.math.complex.Complex complex39 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex41 = complex4.divide((double) 5L); org.apache.commons.math.complex.Complex complex43 = complex4.add((double) 3.8146973E-6f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField44 = complex4.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complexField37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complexField44); }
public void test1183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1183"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder((-11.894158187830156d), (-0.017453292519943295d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.008465981748771664d) + "'", double2 == (-0.008465981748771664d)); }
public void test1184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1184"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); org.apache.commons.math.complex.Complex complex33 = complex32.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); }
public void test1185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1185"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 8.239729E30f, (java.lang.Number) 22025.465794806754d, false); }
public void test1186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1186"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex31 = complex27.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex32 = complex31.sinh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex35 = complex34.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex15.divide(complex34); org.apache.commons.math.complex.Complex complex37 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex38 = complex15.divide(complex37); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test1187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1187"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex4 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex5 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex8 = complexField2.getZero(); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test1188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1188"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((-127.0d)); org.junit.Assert.assertNotNull(complex1); }
public void test1189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1189"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double39 = complex38.abs(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.apache.commons.math.complex.Complex complex54 = complex52.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double58 = complex57.abs(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex62 = complex61.log(); org.apache.commons.math.complex.Complex complex63 = complex61.tanh(); org.apache.commons.math.complex.Complex complex65 = complex63.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex66 = complex57.divide(complex63); java.lang.String str67 = complex63.toString(); org.apache.commons.math.complex.Complex complex68 = complex52.divide(complex63); org.apache.commons.math.complex.Complex complex69 = complex44.subtract(complex52); org.apache.commons.math.complex.Complex complex70 = complex44.log(); org.apache.commons.math.complex.Complex complex71 = complex44.acos(); org.apache.commons.math.complex.Complex complex72 = complex8.divide(complex71); org.apache.commons.math.complex.Complex complex74 = complex71.multiply((double) (-1023)); org.apache.commons.math.complex.Complex complex75 = complex71.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(0.0, 1.557407724654902)" + "'", str67, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); }
public void test1190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1190"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable1, (java.lang.Number) (short) 100, (java.lang.Number) (-13.862943611198906d), false); org.apache.commons.math.exception.NullArgumentException nullArgumentException6 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable[] throwableArray7 = nullArgumentException6.getSuppressed(); org.apache.commons.math.exception.util.Localizable localizable8 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException12 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable8, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number13 = numberIsTooSmallException12.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext14 = numberIsTooSmallException12.getContext(); nullArgumentException6.addSuppressed((java.lang.Throwable) numberIsTooSmallException12); numberIsTooSmallException5.addSuppressed((java.lang.Throwable) nullArgumentException6); java.lang.Throwable[] throwableArray17 = nullArgumentException6.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException18 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray17); org.junit.Assert.assertNotNull(throwableArray7); org.junit.Assert.assertEquals("'" + number13 + "' != '" + 3.831008000716577E22d + "'", number13, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext14); org.junit.Assert.assertNotNull(throwableArray17); }
public void test1191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1191"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex16 = complex11.cos(); org.apache.commons.math.complex.ComplexField complexField17 = complex16.getField(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex26.reciprocal(); org.apache.commons.math.complex.Complex complex28 = complex22.multiply(complex27); double double29 = complex27.getReal(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex34.tanh(); org.apache.commons.math.complex.Complex complex38 = complex36.multiply((int) (short) 0); double double39 = complex38.getArgument(); org.apache.commons.math.complex.Complex complex40 = complex31.subtract(complex38); org.apache.commons.math.complex.Complex complex41 = complex38.reciprocal(); org.apache.commons.math.complex.Complex complex42 = complex27.multiply(complex38); org.apache.commons.math.complex.Complex complex43 = complex38.tanh(); org.apache.commons.math.complex.Complex complex44 = complex16.multiply(complex43); org.apache.commons.math.complex.ComplexField complexField45 = complex16.getField(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complexField17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complexField45); }
public void test1192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1192"); float float2 = org.apache.commons.math.util.FastMath.min((float) 1, (float) 79); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f); }
public void test1193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1193"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex2 = complex1.cos(); boolean boolean4 = complex1.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex7 = complex1.createComplex((double) 1, (-0.519837923761782d)); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex7); }
public void test1194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1194"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex8.subtract(3.584289651861328d); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); java.lang.Object obj17 = complex16.readResolve(); org.apache.commons.math.complex.Complex complex19 = complex16.add(0.0d); boolean boolean20 = complex19.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); }
public void test1195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1195"); double double1 = org.apache.commons.math.util.FastMath.cosh(0.018301073243732067d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.000167469315056d + "'", double1 == 1.000167469315056d); }
public void test1196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1196"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex8.createComplex((-55.29395405864811d), 0.0d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); }
public void test1197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1197"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4.065529698164491d, (-57.29577951308232d)); org.apache.commons.math.complex.Complex complex4 = complex2.multiply(0.8813735870195429d); double double5 = complex4.getImaginary(); org.apache.commons.math.complex.Complex complex7 = complex4.add(6.830189170065858E-6d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-50.49898671052621d) + "'", double5 == (-50.49898671052621d)); org.junit.Assert.assertNotNull(complex7); }
public void test1198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1198"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) (-0.0d), (java.lang.Number) 9.536743164063946E-7d, true); org.apache.commons.math.exception.NotPositiveException notPositiveException5 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) Double.NaN); numberIsTooSmallException3.addSuppressed((java.lang.Throwable) notPositiveException5); }
public void test1199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1199"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); java.lang.String str18 = complex17.toString(); org.apache.commons.math.complex.Complex complex19 = complex17.log(); org.apache.commons.math.complex.Complex complex20 = complex17.negate(); boolean boolean21 = complex17.isInfinite(); org.apache.commons.math.complex.Complex complex22 = complex17.tan(); org.apache.commons.math.complex.Complex complex23 = complex17.tanh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(NaN, NaN)" + "'", str18, "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); }
public void test1200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1200"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.acos(); double double8 = complex6.getReal(); java.lang.Class<?> wildcardClass9 = complex6.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test1201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1201"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex3.subtract(70.7906245758041d); double double6 = complex3.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0000000000233258d + "'", double6 == 1.0000000000233258d); }
public void test1202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1202"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); java.lang.Object obj8 = complex6.readResolve(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = complex9.subtract(complex14); org.apache.commons.math.complex.Complex complex19 = complex14.multiply(3); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(obj8); org.junit.Assert.assertEquals(obj8.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); }
public void test1203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1203"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex8.tanh(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex41.tanh(); org.apache.commons.math.complex.Complex complex45 = complex43.multiply((int) (short) 0); double double46 = complex45.getArgument(); org.apache.commons.math.complex.Complex complex47 = complex38.subtract(complex45); org.apache.commons.math.complex.Complex complex48 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex50 = complex48.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex51 = complex48.sin(); org.apache.commons.math.complex.Complex complex52 = complex48.sinh(); org.apache.commons.math.complex.Complex complex53 = complex48.cos(); org.apache.commons.math.complex.Complex complex54 = complex8.multiply(complex53); double double55 = complex8.abs(); double double56 = complex8.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.557407724654902d + "'", double55 == 1.557407724654902d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.557407724654902d + "'", double56 == 1.557407724654902d); }
public void test1204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1204"); double double1 = org.apache.commons.math.util.FastMath.cos(0.06981317007977318d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9975640502598242d + "'", double1 == 0.9975640502598242d); }
public void test1205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1205"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex11.add(complex20); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList26 = complex24.nthRoot((-4)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -4"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); }
public void test1206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1206"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.044896079154123525d, 4.594700892207039d); }
public void test1207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1207"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) (-0.48469922679209587d), (java.lang.Number) (-7.968412679546787E-6d), false); }
public void test1208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1208"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; java.lang.String str1 = complex0.toString(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); double double6 = complex5.getReal(); org.apache.commons.math.complex.Complex complex8 = complex5.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); double double16 = complex13.getImaginary(); org.apache.commons.math.complex.Complex complex17 = complex8.multiply(complex13); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = complex19.cos(); boolean boolean22 = complex19.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex23 = complex13.subtract(complex19); org.apache.commons.math.complex.Complex complex24 = complex0.divide(complex19); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(Infinity, Infinity)" + "'", str1, "(Infinity, Infinity)"); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.557407724654902d + "'", double16 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); }
public void test1209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1209"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(0.8902037290562788d); }
public void test1210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1210"); double double2 = org.apache.commons.math.util.FastMath.log(1.5515679276951895d, (double) 3); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.501018344096993d + "'", double2 == 2.501018344096993d); }
public void test1211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1211"); float float2 = org.apache.commons.math.util.FastMath.max((float) 35, (-1.0f)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 35.0f + "'", float2 == 35.0f); }
public void test1212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1212"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = complex20.tanh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test1213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1213"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 8.454807612025483d); }
public void test1214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1214"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex9 = complex4.tan(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex11 = complex9.add(complex10); double double12 = complex9.getReal(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(32); org.apache.commons.math.complex.Complex complex15 = complex14.asin(); org.apache.commons.math.complex.Complex complex16 = complex14.sin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test1215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1215"); double double2 = org.apache.commons.math.util.FastMath.scalb(4.274112777602188d, (-52)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 9.49043683107706E-16d + "'", double2 == 9.49043683107706E-16d); }
public void test1216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1216"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4.065529698164491d, (-57.29577951308232d)); org.apache.commons.math.complex.Complex complex4 = complex2.multiply(0.8813735870195429d); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex9.multiply(complex14); org.apache.commons.math.complex.Complex complex16 = complex15.tan(); org.apache.commons.math.complex.Complex complex17 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) '#'); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); }
public void test1217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1217"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex6.getArgument(); boolean boolean8 = complex6.isInfinite(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double13 = complex12.abs(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = complex12.divide(complex18); java.lang.String str22 = complex18.toString(); org.apache.commons.math.complex.Complex complex23 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex23.asin(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex29.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); boolean boolean38 = complex36.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); double double43 = complex42.getReal(); org.apache.commons.math.complex.Complex complex45 = complex42.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex46 = complex36.multiply(complex45); org.apache.commons.math.complex.Complex complex47 = complex30.subtract(complex45); org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex(9.536747711537457E-7d); org.apache.commons.math.complex.Complex complex50 = complex45.subtract(complex49); org.apache.commons.math.complex.Complex complex51 = complex23.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex6.divide(complex51); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(0.0, 1.557407724654902)" + "'", str22, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); }
public void test1218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1218"); double double2 = org.apache.commons.math.util.FastMath.nextAfter((double) 1.0f, 171.49903622517783d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0000000000000002d + "'", double2 == 1.0000000000000002d); }
public void test1219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1219"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex13 = complex8.multiply((int) (short) 100); org.apache.commons.math.complex.Complex complex14 = complex13.acos(); org.apache.commons.math.complex.Complex complex15 = complex14.sin(); java.util.List<org.apache.commons.math.complex.Complex> complexList17 = complex15.nthRoot((int) (byte) 100); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complexList17); }
public void test1220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1220"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex8 = complex4.add(9.536747711537455E-7d); org.apache.commons.math.complex.Complex complex9 = complex8.exp(); org.apache.commons.math.complex.Complex complex10 = complex8.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1221"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex4.getImaginary(); boolean boolean8 = complex4.isInfinite(); org.apache.commons.math.complex.Complex complex10 = complex4.divide((double) 32L); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(0); org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex18); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) '4'); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.557407724654902d + "'", double7 == 1.557407724654902d); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); }
public void test1222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1222"); double double1 = org.apache.commons.math.util.FastMath.nextUp(3.814697265625E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.814697265625001E-6d + "'", double1 == 3.814697265625001E-6d); }
public void test1223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1223"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex14 = complex6.subtract(7.105427357601002E-15d); org.apache.commons.math.complex.Complex complex15 = complex6.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test1224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1224"); double double1 = org.apache.commons.math.util.FastMath.sqrt(1.5681828607590422d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.2522710811797269d + "'", double1 == 1.2522710811797269d); }
public void test1225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1225"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); java.lang.Class<?> wildcardClass12 = complex11.getClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test1226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1226"); double double2 = org.apache.commons.math.util.FastMath.scalb(23.781369657454515d, 63); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.1934441989667262E20d + "'", double2 == 2.1934441989667262E20d); }
public void test1227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1227"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); java.lang.String str4 = complex3.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(2.1556157735575975E15, 0.0)" + "'", str4, "(2.1556157735575975E15, 0.0)"); }
public void test1228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1228"); double double1 = org.apache.commons.math.util.FastMath.sqrt((double) 10L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.1622776601683795d + "'", double1 == 3.1622776601683795d); }
public void test1229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1229"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex8.subtract(127.0d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); }
public void test1230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1230"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex3 = complex1.pow((double) 20L); org.apache.commons.math.complex.Complex complex4 = complex1.tan(); org.apache.commons.math.complex.Complex complex6 = complex1.add(100.0d); org.apache.commons.math.complex.Complex complex8 = complex1.add(5.267831587699267d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); }
public void test1231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1231"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.negate(); boolean boolean57 = complex55.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); double double62 = complex61.getReal(); org.apache.commons.math.complex.Complex complex64 = complex61.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex65 = complex55.multiply(complex64); org.apache.commons.math.complex.Complex complex66 = complex65.cosh(); org.apache.commons.math.complex.Complex complex67 = complex65.atan(); double double68 = complex65.getReal(); org.apache.commons.math.complex.Complex complex69 = complex50.divide(complex65); org.apache.commons.math.complex.Complex complex70 = complex65.sin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.5707963267948966d) + "'", double68 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); }
public void test1232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1232"); float float2 = org.apache.commons.math.util.FastMath.max((float) 3, 3.056286E-37f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 3.0f + "'", float2 == 3.0f); }
public void test1233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1233"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((-1.5574077246549023d)); org.apache.commons.math.complex.Complex complex2 = complex1.tan(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); }
public void test1234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1234"); double double1 = org.apache.commons.math.util.FastMath.log(14.142135623730951d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.649158683274018d + "'", double1 == 2.649158683274018d); }
public void test1235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1235"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.0d); org.junit.Assert.assertNotNull(complex1); }
public void test1236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1236"); double double1 = org.apache.commons.math.util.FastMath.acos(24.88324087887704d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1237"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex10.sinh(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); double double23 = complex13.abs(); org.apache.commons.math.complex.Complex complex25 = complex13.multiply(32.0d); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); boolean boolean32 = complex30.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); double double37 = complex36.getReal(); org.apache.commons.math.complex.Complex complex39 = complex36.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex40 = complex30.multiply(complex39); org.apache.commons.math.complex.Complex complex42 = complex39.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex43 = complex26.pow(complex39); org.apache.commons.math.complex.Complex complex44 = complex11.multiply(complex43); org.apache.commons.math.complex.Complex complex45 = complex43.conjugate(); org.apache.commons.math.complex.ComplexField complexField46 = complex45.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complexField46); }
public void test1238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1238"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); boolean boolean15 = complex13.isInfinite(); org.apache.commons.math.complex.Complex complex17 = complex13.multiply((int) (byte) 0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(complex17); }
public void test1239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1239"); java.lang.Number number1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 4.304824245795942E7d, number1, true); }
public void test1240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1240"); double double1 = org.apache.commons.math.util.FastMath.sinh(Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test1241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1241"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex6.getArgument(); boolean boolean8 = complex6.isInfinite(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); java.lang.String str10 = complex9.toString(); org.apache.commons.math.complex.Complex complex13 = complex9.createComplex(1.5568080501466526d, 1.19209289552635E-7d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(-0.0, -0.0)" + "'", str10, "(-0.0, -0.0)"); org.junit.Assert.assertNotNull(complex13); }
public void test1242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1242"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(2.4E-44f, 0.0d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.24E-44f + "'", float2 == 2.24E-44f); }
public void test1243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1243"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.9073486E-6f); org.apache.commons.math.complex.Complex complex3 = complex1.pow(1.5515679276951895d); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((-5)); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test1244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1244"); java.lang.Number number1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 17.514285714285712d, number1, false); java.lang.Throwable throwable4 = null; // The following exception was thrown during execution in test generation try { numberIsTooSmallException3.addSuppressed(throwable4); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception."); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test1245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1245"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex29); double double32 = complex24.getImaginary(); double double33 = complex24.getReal(); org.apache.commons.math.complex.Complex complex34 = complex24.log(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertTrue(Double.isNaN(double33)); org.junit.Assert.assertNotNull(complex34); }
public void test1246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1246"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(71.84044670030279d, (-0.008465981748771664d)); }
public void test1247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1247"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); boolean boolean34 = complex33.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); }
public void test1248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1248"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); boolean boolean33 = complex23.isNaN(); org.apache.commons.math.complex.Complex complex34 = complex23.exp(); org.apache.commons.math.complex.Complex complex35 = complex23.negate(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.negate(); boolean boolean40 = complex38.isNaN(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); double double50 = complex49.getArgument(); org.apache.commons.math.complex.Complex complex51 = complex42.subtract(complex49); org.apache.commons.math.complex.Complex complex52 = complex49.reciprocal(); org.apache.commons.math.complex.Complex complex54 = complex52.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex55 = complex52.sin(); org.apache.commons.math.complex.Complex complex56 = complex52.sinh(); org.apache.commons.math.complex.Complex complex58 = complex52.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex59 = complex38.multiply(complex58); org.apache.commons.math.complex.Complex complex60 = complex59.acos(); double double61 = complex60.getImaginary(); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex65 = complex64.log(); double double66 = complex65.getReal(); org.apache.commons.math.complex.Complex complex67 = complex60.add(complex65); double double68 = complex60.getImaginary(); double double69 = complex60.getReal(); org.apache.commons.math.complex.Complex complex70 = complex35.subtract(complex60); org.apache.commons.math.complex.Complex complex71 = complex70.cos(); org.apache.commons.math.complex.Complex complex72 = complex70.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertTrue(Double.isNaN(double61)); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertTrue(Double.isNaN(double68)); org.junit.Assert.assertTrue(Double.isNaN(double69)); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); }
public void test1249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1249"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, 14.142135623730951d); }
public void test1250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1250"); long long1 = org.apache.commons.math.util.FastMath.abs((long) 0); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test1251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1251"); float float2 = org.apache.commons.math.util.FastMath.copySign(5.5459714E30f, (float) 19L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 5.5459714E30f + "'", float2 == 5.5459714E30f); }
public void test1252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1252"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex16 = complex11.cos(); org.apache.commons.math.complex.ComplexField complexField17 = complex16.getField(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex26.reciprocal(); org.apache.commons.math.complex.Complex complex28 = complex22.multiply(complex27); double double29 = complex27.getReal(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex34.tanh(); org.apache.commons.math.complex.Complex complex38 = complex36.multiply((int) (short) 0); double double39 = complex38.getArgument(); org.apache.commons.math.complex.Complex complex40 = complex31.subtract(complex38); org.apache.commons.math.complex.Complex complex41 = complex38.reciprocal(); org.apache.commons.math.complex.Complex complex42 = complex27.multiply(complex38); org.apache.commons.math.complex.Complex complex43 = complex38.tanh(); org.apache.commons.math.complex.Complex complex44 = complex16.multiply(complex43); double double45 = complex43.getReal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complexField17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); }
public void test1253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1253"); double double2 = org.apache.commons.math.util.FastMath.atan2(0.9215499447319303d, (-71.5396192034737d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 3.1287116935450054d + "'", double2 == 3.1287116935450054d); }
public void test1254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1254"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double39 = complex38.abs(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.apache.commons.math.complex.Complex complex54 = complex52.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double58 = complex57.abs(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex62 = complex61.log(); org.apache.commons.math.complex.Complex complex63 = complex61.tanh(); org.apache.commons.math.complex.Complex complex65 = complex63.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex66 = complex57.divide(complex63); java.lang.String str67 = complex63.toString(); org.apache.commons.math.complex.Complex complex68 = complex52.divide(complex63); org.apache.commons.math.complex.Complex complex69 = complex44.subtract(complex52); org.apache.commons.math.complex.Complex complex70 = complex44.log(); org.apache.commons.math.complex.Complex complex71 = complex44.acos(); org.apache.commons.math.complex.Complex complex72 = complex8.divide(complex71); org.apache.commons.math.complex.Complex complex73 = complex8.asin(); org.apache.commons.math.complex.Complex complex74 = complex73.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(0.0, 1.557407724654902)" + "'", str67, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); }
public void test1255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1255"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex36 = complex33.add((double) 97); org.apache.commons.math.complex.Complex complex37 = complex33.exp(); org.apache.commons.math.complex.Complex complex38 = complex33.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test1256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1256"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.negate(); boolean boolean57 = complex55.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); double double62 = complex61.getReal(); org.apache.commons.math.complex.Complex complex64 = complex61.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex65 = complex55.multiply(complex64); org.apache.commons.math.complex.Complex complex66 = complex65.cosh(); org.apache.commons.math.complex.Complex complex67 = complex65.atan(); double double68 = complex65.getReal(); org.apache.commons.math.complex.Complex complex69 = complex50.divide(complex65); double double70 = complex50.abs(); org.apache.commons.math.complex.Complex complex71 = complex50.acos(); org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex75 = complex74.log(); org.apache.commons.math.complex.Complex complex76 = complex74.tanh(); org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex80 = complex79.log(); org.apache.commons.math.complex.Complex complex81 = complex80.reciprocal(); org.apache.commons.math.complex.Complex complex82 = complex74.subtract(complex80); boolean boolean83 = complex71.equals((java.lang.Object) complex82); org.apache.commons.math.complex.Complex complex85 = complex82.add((double) 20L); org.apache.commons.math.complex.Complex complex86 = complex82.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.5707963267948966d) + "'", double68 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.5707963267948966d + "'", double70 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertNotNull(complex85); org.junit.Assert.assertNotNull(complex86); }
public void test1257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1257"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double8 = complex7.abs(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex17 = complex2.divide(complex16); org.apache.commons.math.complex.Complex complex18 = complex17.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); }
public void test1258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1258"); long long1 = org.apache.commons.math.util.FastMath.round(1.7453292519943295d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 2L + "'", long1 == 2L); }
public void test1259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1259"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex3.subtract(70.7906245758041d); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); double double20 = complex17.getImaginary(); org.apache.commons.math.complex.Complex complex21 = complex12.multiply(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex24 = complex23.cos(); boolean boolean26 = complex23.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex27 = complex17.subtract(complex23); org.apache.commons.math.complex.Complex complex28 = complex3.subtract(complex23); org.apache.commons.math.complex.Complex complex30 = complex28.pow((double) (-18.999998f)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.557407724654902d + "'", double20 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); }
public void test1260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1260"); double double1 = org.apache.commons.math.util.FastMath.atanh(9.223372036854776E18d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1261"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); boolean boolean12 = complex10.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19); org.apache.commons.math.complex.Complex complex21 = complex4.subtract(complex19); org.apache.commons.math.complex.Complex complex23 = complex4.subtract((-102.58578272287191d)); double double24 = complex23.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 102.58775804938351d + "'", double24 == 102.58775804938351d); }
public void test1262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1262"); float float2 = org.apache.commons.math.util.FastMath.min(10.0f, (float) (-5L)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-5.0f) + "'", float2 == (-5.0f)); }
public void test1263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1263"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf(1.557407724654902d, 3.5553480614894135d); boolean boolean23 = complex22.isInfinite(); org.apache.commons.math.complex.Complex complex24 = complex18.add(complex22); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(complex24); }
public void test1264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1264"); double double2 = org.apache.commons.math.util.FastMath.max(2.919458795980739d, (double) 2); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.919458795980739d + "'", double2 == 2.919458795980739d); }
public void test1265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1265"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex18 = complex16.negate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex18); }
public void test1266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1266"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(5.048555707648512d, 1.543080634815244d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.4193138032027799d + "'", double2 == 0.4193138032027799d); }
public void test1267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1267"); int int1 = org.apache.commons.math.util.FastMath.getExponent(100.0f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6); }
public void test1268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1268"); double double2 = org.apache.commons.math.util.FastMath.copySign(10.067661995777765d, 10.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10.067661995777765d + "'", double2 == 10.067661995777765d); }
public void test1269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1269"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); boolean boolean29 = complex27.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); double double34 = complex33.getReal(); org.apache.commons.math.complex.Complex complex36 = complex33.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex37 = complex27.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex37.multiply((int) (byte) 100); org.apache.commons.math.complex.Complex complex40 = complex22.subtract(complex39); org.apache.commons.math.complex.Complex complex41 = complex22.cosh(); org.apache.commons.math.complex.Complex complex42 = complex41.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); }
public void test1270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1270"); double double1 = org.apache.commons.math.util.FastMath.acosh(1.19209289552635E-7d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1271"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); boolean boolean26 = complex24.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); double double31 = complex30.getReal(); org.apache.commons.math.complex.Complex complex33 = complex30.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex34 = complex24.multiply(complex33); org.apache.commons.math.complex.Complex complex35 = complex34.cosh(); boolean boolean36 = complex34.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField37 = complex34.getField(); org.apache.commons.math.complex.Complex complex38 = complex11.pow(complex34); org.apache.commons.math.complex.Complex complex39 = complex4.subtract(complex11); double double40 = complex39.getReal(); org.apache.commons.math.exception.util.Localizable localizable41 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException45 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext46 = numberIsTooSmallException45.getContext(); java.lang.Throwable[] throwableArray47 = numberIsTooSmallException45.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException48 = new org.apache.commons.math.exception.NullArgumentException(localizable41, (java.lang.Object[]) throwableArray47); boolean boolean49 = complex39.equals((java.lang.Object) throwableArray47); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complexField37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(exceptionContext46); org.junit.Assert.assertNotNull(throwableArray47); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); }
public void test1272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1272"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (-20.0f), 0.0d); org.apache.commons.math.complex.Complex complex4 = complex2.add((double) 127L); org.apache.commons.math.complex.Complex complex5 = complex4.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1273"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.acos(); org.apache.commons.math.complex.Complex complex3 = complex1.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test1274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1274"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(9.5367431640625E-7d, 0.0d); org.apache.commons.math.complex.Complex complex4 = complex2.subtract(0.9999999999999996d); org.apache.commons.math.complex.Complex complex5 = complex4.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1275"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); org.apache.commons.math.complex.Complex complex21 = complex18.createComplex((double) 6L, 70.7906245758041d); org.apache.commons.math.complex.Complex complex23 = complex18.pow(171.88733853924697d); boolean boolean24 = complex23.isNaN(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); }
public void test1276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1276"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.reciprocal(); org.apache.commons.math.complex.Complex complex5 = complex3.pow((double) '4'); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); org.apache.commons.math.complex.Complex complex10 = complex8.tanh(); org.apache.commons.math.complex.Complex complex12 = complex10.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double16 = complex15.abs(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex15.divide(complex21); java.lang.String str25 = complex21.toString(); org.apache.commons.math.complex.Complex complex26 = complex10.divide(complex21); double double27 = complex26.getImaginary(); org.apache.commons.math.complex.Complex complex28 = complex3.divide(complex26); org.apache.commons.math.complex.Complex complex29 = complex28.cos(); org.apache.commons.math.complex.Complex complex30 = complex28.sinh(); double double31 = complex30.getImaginary(); java.util.List<org.apache.commons.math.complex.Complex> complexList33 = complex30.nthRoot(127); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(0.0, 1.557407724654902)" + "'", str25, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue(Double.isNaN(double31)); org.junit.Assert.assertNotNull(complexList33); }
public void test1277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1277"); float float2 = org.apache.commons.math.util.FastMath.scalb(1.4551917E-11f, (-18)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 5.551116E-17f + "'", float2 == 5.551116E-17f); }
public void test1278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1278"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex29); double double32 = complex24.getImaginary(); double double33 = complex24.getReal(); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex37 = complex36.log(); org.apache.commons.math.complex.Complex complex38 = complex37.reciprocal(); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex42.reciprocal(); org.apache.commons.math.complex.Complex complex44 = complex38.multiply(complex43); java.lang.Object obj45 = complex44.readResolve(); org.apache.commons.math.complex.Complex complex46 = complex44.sqrt(); org.apache.commons.math.complex.Complex complex47 = complex44.reciprocal(); org.apache.commons.math.complex.Complex complex49 = complex44.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex50 = complex24.multiply(complex44); org.apache.commons.math.complex.Complex complex52 = complex44.multiply(79); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertTrue(Double.isNaN(double33)); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(obj45); org.junit.Assert.assertEquals(obj45.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); }
public void test1279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1279"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex35 = complex34.atan(); boolean boolean36 = complex5.equals((java.lang.Object) complex34); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex44 = complex41.add(complex43); org.apache.commons.math.complex.Complex complex45 = complex41.conjugate(); org.apache.commons.math.complex.Complex complex46 = complex41.tan(); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex48 = complex46.add(complex47); org.apache.commons.math.complex.Complex complex49 = complex5.divide(complex47); double double50 = complex49.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); }
public void test1280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1280"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex23.cosh(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.negate(); org.apache.commons.math.complex.Complex complex29 = complex23.divide(complex27); org.apache.commons.math.complex.Complex complex31 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex23); double double33 = complex16.getArgument(); org.apache.commons.math.complex.Complex complex35 = complex16.multiply((-19)); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.log(); org.apache.commons.math.complex.Complex complex40 = complex38.tanh(); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double46 = complex45.abs(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex54 = complex45.divide(complex51); java.lang.String str55 = complex51.toString(); org.apache.commons.math.complex.Complex complex56 = complex40.divide(complex51); org.apache.commons.math.complex.Complex complex57 = complex56.sqrt1z(); org.apache.commons.math.complex.Complex complex58 = complex57.cosh(); org.apache.commons.math.complex.Complex complex59 = complex16.divide(complex58); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue(Double.isNaN(double33)); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(0.0, 1.557407724654902)" + "'", str55, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); }
public void test1281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1281"); float float2 = org.apache.commons.math.util.FastMath.copySign((-4.0f), 6.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 4.0f + "'", float2 == 4.0f); }
public void test1282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1282"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); double double5 = complex2.getImaginary(); org.apache.commons.math.complex.Complex complex6 = complex2.tan(); org.apache.commons.math.complex.Complex complex7 = complex2.cos(); org.apache.commons.math.complex.ComplexField complexField8 = complex2.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass9 = complexField8.getRuntimeClass(); org.apache.commons.math.complex.Complex complex10 = complexField8.getOne(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass11 = complexField8.getRuntimeClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complexField8); org.junit.Assert.assertNotNull(wildcardClass9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test1283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1283"); double double1 = org.apache.commons.math.util.FastMath.cos((double) 52.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.16299078079570548d) + "'", double1 == (-0.16299078079570548d)); }
public void test1284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1284"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double7 = complex6.abs(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex18.tanh(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double26 = complex25.abs(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); org.apache.commons.math.complex.Complex complex31 = complex29.tanh(); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex34 = complex25.divide(complex31); java.lang.String str35 = complex31.toString(); org.apache.commons.math.complex.Complex complex36 = complex20.divide(complex31); org.apache.commons.math.complex.Complex complex37 = complex12.subtract(complex20); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); double double43 = complex42.getReal(); org.apache.commons.math.complex.Complex complex45 = complex42.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex49.reciprocal(); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex54 = complex53.log(); org.apache.commons.math.complex.Complex complex55 = complex53.tanh(); org.apache.commons.math.complex.Complex complex56 = complex55.sqrt1z(); org.apache.commons.math.complex.Complex complex57 = complex49.divide(complex55); java.lang.Object[] objArray58 = new java.lang.Object[] { (-1L), 7.6293945E-6f, complex37, 1.9867717342662448d, complex45, complex49 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException59 = new org.apache.commons.math.exception.NullArgumentException(localizable1, objArray58); org.apache.commons.math.exception.NullArgumentException nullArgumentException60 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray58); java.lang.Class<?> wildcardClass61 = objArray58.getClass(); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(0.0, 1.557407724654902)" + "'", str35, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(objArray58); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[-1, 7.6293945E-6, (0.0, 0.0), 1.9867717342662448, (-0.0, -1.5707963267948966), (0.0, 1.5707963267948966)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[-1, 7.6293945E-6, (0.0, 0.0), 1.9867717342662448, (-0.0, -1.5707963267948966), (0.0, 1.5707963267948966)]"); org.junit.Assert.assertNotNull(wildcardClass61); }
public void test1285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1285"); org.apache.commons.math.exception.NullArgumentException nullArgumentException0 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable[] throwableArray1 = nullArgumentException0.getSuppressed(); org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable2, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number7 = numberIsTooSmallException6.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext8 = numberIsTooSmallException6.getContext(); nullArgumentException0.addSuppressed((java.lang.Throwable) numberIsTooSmallException6); java.lang.Throwable[] throwableArray10 = numberIsTooSmallException6.getSuppressed(); java.lang.Number number11 = numberIsTooSmallException6.getArgument(); org.junit.Assert.assertNotNull(throwableArray1); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 3.831008000716577E22d + "'", number7, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext8); org.junit.Assert.assertNotNull(throwableArray10); org.junit.Assert.assertEquals("'" + number11 + "' != '" + 3.831008000716577E22d + "'", number11, 3.831008000716577E22d); }
public void test1286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1286"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.Complex complex6 = complex2.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex8.subtract(complex15); double double18 = complex8.abs(); org.apache.commons.math.complex.Complex complex20 = complex8.multiply(32.0d); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex23 = complex6.add(complex22); org.apache.commons.math.complex.Complex complex24 = complex6.atan(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex27 = complex25.add((double) 35); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex35.tanh(); org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z(); org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex37); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double50 = complex49.abs(); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex54 = complex53.log(); org.apache.commons.math.complex.Complex complex55 = complex53.tanh(); org.apache.commons.math.complex.Complex complex57 = complex55.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex58 = complex49.divide(complex55); java.lang.String str59 = complex55.toString(); org.apache.commons.math.complex.Complex complex60 = complex44.divide(complex55); org.apache.commons.math.complex.Complex complex61 = complex60.sqrt1z(); org.apache.commons.math.complex.Complex complex62 = complex31.subtract(complex61); org.apache.commons.math.complex.Complex complex63 = complex27.divide(complex31); org.apache.commons.math.complex.Complex complex65 = complex27.pow(1.0d); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((-1.5574077246549023d)); org.apache.commons.math.complex.Complex complex68 = complex65.subtract(complex67); org.apache.commons.math.complex.Complex complex69 = complex68.asin(); org.apache.commons.math.complex.Complex complex70 = complex24.divide(complex69); org.apache.commons.math.complex.ComplexField complexField71 = complex69.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(0.0, 1.557407724654902)" + "'", str59, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complexField71); }
public void test1287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1287"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.Complex complex6 = complex2.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex8.subtract(complex15); double double18 = complex8.abs(); org.apache.commons.math.complex.Complex complex20 = complex8.multiply(32.0d); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex23 = complex6.add(complex22); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = complex27.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex28.pow((double) '4'); org.apache.commons.math.complex.Complex complex31 = complex24.multiply(complex30); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); }
public void test1288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1288"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = complex10.tanh(); org.apache.commons.math.complex.Complex complex15 = complex10.cosh(); org.apache.commons.math.complex.Complex complex16 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex17 = complex15.subtract(complex16); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test1289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1289"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable2, (java.lang.Number) 2.718281828459045d, (java.lang.Number) (-1.4987863014408054d), false); java.lang.Throwable[] throwableArray7 = numberIsTooSmallException6.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) throwableArray7); org.apache.commons.math.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray7); org.junit.Assert.assertNotNull(throwableArray7); }
public void test1290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1290"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 6); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(5729.578388440339d); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex8.subtract(70.7906245758041d); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.divide((double) 0.0f); org.apache.commons.math.complex.Complex complex18 = complex10.pow(complex17); org.apache.commons.math.complex.Complex complex19 = complex10.exp(); org.apache.commons.math.complex.Complex complex20 = complex1.subtract(complex10); boolean boolean21 = complex10.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test1291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1291"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); java.util.List<org.apache.commons.math.complex.Complex> complexList36 = complex34.nthRoot(3); org.apache.commons.math.complex.Complex complex37 = complex34.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complexList36); org.junit.Assert.assertNotNull(complex37); }
public void test1292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1292"); float float1 = org.apache.commons.math.util.FastMath.abs((float) 20); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 20.0f + "'", float1 == 20.0f); }
public void test1293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1293"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex3 = complex1.pow((double) 20L); org.apache.commons.math.complex.Complex complex4 = complex1.tanh(); java.lang.String str5 = complex4.toString(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(0.9962720762207499, 0.0)" + "'", str5, "(0.9962720762207499, 0.0)"); }
public void test1294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1294"); double double1 = org.apache.commons.math.util.FastMath.signum(2.919458795980739d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test1295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1295"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.exp(); org.apache.commons.math.complex.Complex complex13 = complex8.pow(0.0d); org.apache.commons.math.complex.Complex complex14 = complex8.cosh(); double double15 = complex8.abs(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); }
public void test1296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1296"); double double1 = org.apache.commons.math.util.FastMath.signum(1.0126698313893454d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test1297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1297"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.Complex complex6 = complex2.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex8.subtract(complex15); double double18 = complex8.abs(); org.apache.commons.math.complex.Complex complex20 = complex8.multiply(32.0d); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex23 = complex6.add(complex22); org.apache.commons.math.complex.Complex complex24 = complex6.atan(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex27 = complex25.add((double) 35); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex35.tanh(); org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z(); org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex37); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double50 = complex49.abs(); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex54 = complex53.log(); org.apache.commons.math.complex.Complex complex55 = complex53.tanh(); org.apache.commons.math.complex.Complex complex57 = complex55.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex58 = complex49.divide(complex55); java.lang.String str59 = complex55.toString(); org.apache.commons.math.complex.Complex complex60 = complex44.divide(complex55); org.apache.commons.math.complex.Complex complex61 = complex60.sqrt1z(); org.apache.commons.math.complex.Complex complex62 = complex31.subtract(complex61); org.apache.commons.math.complex.Complex complex63 = complex27.divide(complex31); org.apache.commons.math.complex.Complex complex65 = complex27.pow(1.0d); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((-1.5574077246549023d)); org.apache.commons.math.complex.Complex complex68 = complex65.subtract(complex67); org.apache.commons.math.complex.Complex complex69 = complex68.asin(); org.apache.commons.math.complex.Complex complex70 = complex24.divide(complex69); org.apache.commons.math.complex.Complex complex71 = complex69.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(0.0, 1.557407724654902)" + "'", str59, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); }
public void test1298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1298"); int int1 = org.apache.commons.math.util.FastMath.getExponent(22025.465794806754d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 14 + "'", int1 == 14); }
public void test1299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1299"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex22 = complex4.multiply(20); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); }
public void test1300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1300"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); double double30 = complex29.abs(); java.lang.Number number31 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException34 = new org.apache.commons.math.exception.NumberIsTooSmallException(number31, (java.lang.Number) 1.5515679276951895d, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext35 = numberIsTooSmallException34.getContext(); boolean boolean36 = complex29.equals((java.lang.Object) numberIsTooSmallException34); org.apache.commons.math.exception.util.ExceptionContext exceptionContext37 = numberIsTooSmallException34.getContext(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue(Double.isNaN(double30)); org.junit.Assert.assertNotNull(exceptionContext35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(exceptionContext37); }
public void test1301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1301"); double double2 = org.apache.commons.math.util.FastMath.atan2((double) 127.0f, 2.080083823051904d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5544191783491335d + "'", double2 == 1.5544191783491335d); }
public void test1302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1302"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.acos(); org.apache.commons.math.complex.Complex complex8 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex8.divide((double) 100.00001f); org.apache.commons.math.complex.Complex complex12 = complex10.add((-1.2414372125137612d)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); }
public void test1303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1303"); int int2 = org.apache.commons.math.util.FastMath.max((-149), 2); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2); }
public void test1304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1304"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = complex40.tanh(); org.apache.commons.math.complex.Complex complex45 = complex40.multiply(0.0d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); }
public void test1305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1305"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = complex10.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.subtract(10.0d); org.apache.commons.math.complex.Complex complex17 = complex16.cos(); org.apache.commons.math.complex.Complex complex18 = complex16.log(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1306"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex1.divide(14.142135623730951d); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf(2.7182482745272054d, 9.536747711537455E-7d); org.apache.commons.math.complex.Complex complex8 = complex7.reciprocal(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.negate(); boolean boolean13 = complex11.isNaN(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex18.tanh(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((int) (short) 0); double double23 = complex22.getArgument(); org.apache.commons.math.complex.Complex complex24 = complex15.subtract(complex22); org.apache.commons.math.complex.Complex complex25 = complex22.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex25.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex28 = complex25.sin(); org.apache.commons.math.complex.Complex complex29 = complex25.sinh(); org.apache.commons.math.complex.Complex complex31 = complex25.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex32 = complex11.multiply(complex31); org.apache.commons.math.complex.Complex complex33 = complex32.acos(); double double34 = complex33.getImaginary(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); org.apache.commons.math.complex.Complex complex39 = complex37.cos(); org.apache.commons.math.complex.Complex complex40 = complex33.add(complex39); org.apache.commons.math.complex.Complex complex42 = complex33.pow(2.205992763916979d); org.apache.commons.math.complex.Complex complex43 = complex7.divide(complex42); org.apache.commons.math.complex.Complex complex44 = complex4.pow(complex7); org.apache.commons.math.complex.Complex complex46 = complex4.multiply(5); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); }
public void test1307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1307"); double double1 = org.apache.commons.math.util.FastMath.log(0.8624452039349472d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.1479836637644707d) + "'", double1 == (-0.1479836637644707d)); }
public void test1308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1308"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex6.subtract((double) (-1L)); java.lang.Object obj41 = complex6.readResolve(); org.apache.commons.math.complex.Complex complex42 = complex6.sin(); boolean boolean43 = complex6.isInfinite(); java.lang.Object obj44 = complex6.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(obj41); org.junit.Assert.assertEquals(obj41.toString(), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(obj44); org.junit.Assert.assertEquals(obj44.toString(), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "(0.0, 1.5707963267948966)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "(0.0, 1.5707963267948966)"); }
public void test1309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1309"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z(); org.apache.commons.math.complex.Complex complex17 = complex15.atan(); org.apache.commons.math.complex.Complex complex18 = complex17.tanh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1310"); double double1 = org.apache.commons.math.util.FastMath.ulp((double) 19L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.552713678800501E-15d + "'", double1 == 3.552713678800501E-15d); }
public void test1311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1311"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex8.tanh(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex41.tanh(); org.apache.commons.math.complex.Complex complex45 = complex43.multiply((int) (short) 0); double double46 = complex45.getArgument(); org.apache.commons.math.complex.Complex complex47 = complex38.subtract(complex45); org.apache.commons.math.complex.Complex complex48 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex50 = complex48.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex51 = complex48.sin(); org.apache.commons.math.complex.Complex complex52 = complex48.sinh(); org.apache.commons.math.complex.Complex complex53 = complex48.cos(); org.apache.commons.math.complex.Complex complex54 = complex8.multiply(complex53); java.lang.String str55 = complex54.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(NaN, NaN)" + "'", str55, "(NaN, NaN)"); }
public void test1312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1312"); double double1 = org.apache.commons.math.util.FastMath.log10(0.6292537014189683d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.20117422114931716d) + "'", double1 == (-0.20117422114931716d)); }
public void test1313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1313"); double double1 = org.apache.commons.math.util.FastMath.signum(1.791759469228055d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test1314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1314"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); java.lang.Object obj15 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); boolean boolean17 = complex16.isNaN(); org.apache.commons.math.complex.Complex complex20 = complex16.createComplex((double) 1.9836426E-4f, 0.0d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(obj15); org.junit.Assert.assertEquals(obj15.toString(), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex20); }
public void test1315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1315"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); java.lang.Throwable[] throwableArray7 = numberIsTooSmallException4.getSuppressed(); java.lang.Number number8 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException11 = new org.apache.commons.math.exception.NumberIsTooSmallException(number8, (java.lang.Number) 1.5515679276951895d, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext12 = numberIsTooSmallException11.getContext(); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException11); org.apache.commons.math.exception.util.ExceptionContext exceptionContext14 = numberIsTooSmallException4.getContext(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 1.0d + "'", number5, 1.0d); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(throwableArray7); org.junit.Assert.assertNotNull(exceptionContext12); org.junit.Assert.assertNotNull(exceptionContext14); }
public void test1316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1316"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex21 = complex18.divide(6.830189170065858E-6d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); }
public void test1317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1317"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(3.6531350888106995E-295d, (double) (-0.0f)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 3.653135088810699E-295d + "'", double2 == 3.653135088810699E-295d); }
public void test1318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1318"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.acos(); org.apache.commons.math.complex.Complex complex36 = complex8.atan(); org.apache.commons.math.complex.Complex complex37 = complex8.log(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); }
public void test1319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1319"); int int1 = org.apache.commons.math.util.FastMath.abs((-57)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 57 + "'", int1 == 57); }
public void test1320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1320"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.acos(); org.apache.commons.math.complex.Complex complex38 = complex8.createComplex(4.594700892207039d, 0.0d); org.apache.commons.math.complex.Complex complex39 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex40 = complex8.subtract(complex39); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); }
public void test1321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1321"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex2.subtract(complex42); org.apache.commons.math.complex.Complex complex45 = complex42.pow(1.557407724654902d); org.apache.commons.math.complex.Complex complex46 = complex45.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); }
public void test1322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1322"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(18.82795958245219d); org.junit.Assert.assertNotNull(complex1); }
public void test1323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1323"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex35.reciprocal(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = complex35.divide(complex41); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); double double53 = complex52.getArgument(); org.apache.commons.math.complex.Complex complex54 = complex45.subtract(complex52); org.apache.commons.math.complex.Complex complex55 = complex52.reciprocal(); org.apache.commons.math.complex.Complex complex56 = complex43.add(complex52); org.apache.commons.math.complex.Complex complex57 = complex18.divide(complex43); double double58 = complex18.getArgument(); double double59 = complex18.abs(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue(Double.isNaN(double58)); org.junit.Assert.assertTrue(Double.isNaN(double59)); }
public void test1324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1324"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); boolean boolean22 = complex20.isNaN(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex24.subtract(complex31); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex34.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex37 = complex34.sin(); org.apache.commons.math.complex.Complex complex38 = complex34.sinh(); org.apache.commons.math.complex.Complex complex40 = complex34.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex41 = complex20.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double45 = complex44.abs(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex53 = complex44.divide(complex50); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex58.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double64 = complex63.abs(); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex68 = complex67.log(); org.apache.commons.math.complex.Complex complex69 = complex67.tanh(); org.apache.commons.math.complex.Complex complex71 = complex69.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex72 = complex63.divide(complex69); java.lang.String str73 = complex69.toString(); org.apache.commons.math.complex.Complex complex74 = complex58.divide(complex69); org.apache.commons.math.complex.Complex complex75 = complex50.subtract(complex58); org.apache.commons.math.complex.Complex complex76 = complex41.subtract(complex58); org.apache.commons.math.complex.Complex complex77 = complex15.subtract(complex58); org.apache.commons.math.complex.Complex complex78 = complex77.sqrt1z(); org.apache.commons.math.complex.Complex complex79 = complex78.sinh(); org.apache.commons.math.complex.Complex complex80 = complex78.negate(); double double81 = complex78.getImaginary(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(0.0, 1.557407724654902)" + "'", str73, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertTrue(Double.isNaN(double81)); }
public void test1325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1325"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.6189687493033866d, 3.1287116935450054d); }
public void test1326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1326"); double double1 = org.apache.commons.math.util.FastMath.sin(Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1327"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); java.lang.Object obj19 = complex16.readResolve(); org.apache.commons.math.complex.Complex complex20 = complex16.conjugate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(obj19); org.junit.Assert.assertEquals(obj19.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex20); }
public void test1328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1328"); float float1 = org.apache.commons.math.util.FastMath.signum(6.1035156E-5f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1329"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((int) (short) 0); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex14.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex17 = complex14.asin(); org.apache.commons.math.complex.Complex complex18 = complex2.multiply(complex14); java.lang.Object obj19 = complex18.readResolve(); org.apache.commons.math.complex.Complex complex21 = complex18.multiply(57); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(obj19); org.junit.Assert.assertEquals(obj19.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex21); }
public void test1330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1330"); double double1 = org.apache.commons.math.util.FastMath.sinh((double) 9.536743E-7f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 9.536743164063946E-7d + "'", double1 == 9.536743164063946E-7d); }
public void test1331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1331"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); double double5 = complex2.getImaginary(); org.apache.commons.math.complex.Complex complex6 = complex2.tan(); org.apache.commons.math.complex.Complex complex7 = complex2.cos(); org.apache.commons.math.complex.ComplexField complexField8 = complex2.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass9 = complexField8.getRuntimeClass(); org.apache.commons.math.complex.Complex complex10 = complexField8.getOne(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField11 = complex10.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass12 = complexField11.getRuntimeClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complexField8); org.junit.Assert.assertNotNull(wildcardClass9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complexField11); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test1332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1332"); double double1 = org.apache.commons.math.util.FastMath.sinh(6.830189170012751E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.830189170065857E-6d + "'", double1 == 6.830189170065857E-6d); }
public void test1333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1333"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); double double16 = complex6.abs(); org.apache.commons.math.complex.Complex complex17 = complex6.tanh(); org.apache.commons.math.complex.Complex complex18 = complex17.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.5707963267948966d + "'", double16 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1334"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 117.10114144809786d, (java.lang.Number) 1.7763568394002505E-15d, true); boolean boolean4 = numberIsTooSmallException3.getBoundIsAllowed(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); }
public void test1335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1335"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); java.lang.String str8 = complex7.toString(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); java.lang.String str10 = complex7.toString(); double double11 = complex7.getImaginary(); org.apache.commons.math.complex.Complex complex12 = complex7.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(1.0, 0.0)" + "'", str10, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex12); }
public void test1336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1336"); double double1 = org.apache.commons.math.util.FastMath.sqrt((double) 52.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.211102550927978d + "'", double1 == 7.211102550927978d); }
public void test1337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1337"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex29); double double32 = complex24.getImaginary(); double double33 = complex24.getReal(); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex37 = complex36.log(); org.apache.commons.math.complex.Complex complex38 = complex37.reciprocal(); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex42.reciprocal(); org.apache.commons.math.complex.Complex complex44 = complex38.multiply(complex43); java.lang.Object obj45 = complex44.readResolve(); org.apache.commons.math.complex.Complex complex46 = complex44.sqrt(); org.apache.commons.math.complex.Complex complex47 = complex44.reciprocal(); org.apache.commons.math.complex.Complex complex49 = complex44.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex50 = complex24.multiply(complex44); double double51 = complex24.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertTrue(Double.isNaN(double33)); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(obj45); org.junit.Assert.assertEquals(obj45.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertTrue(Double.isNaN(double51)); }
public void test1338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1338"); double double1 = org.apache.commons.math.util.FastMath.expm1(97.00000000000023d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.3383347192045738E42d + "'", double1 == 1.3383347192045738E42d); }
public void test1339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1339"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.atan(); org.apache.commons.math.complex.Complex complex23 = complex4.divide(2.7182482745272054d); org.apache.commons.math.complex.Complex complex24 = complex4.negate(); org.apache.commons.math.complex.Complex complex25 = complex4.log(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); }
public void test1340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1340"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex51.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); }
public void test1341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1341"); float float2 = org.apache.commons.math.util.FastMath.copySign(1023.0f, (float) (-1023)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1023.0f) + "'", float2 == (-1023.0f)); }
public void test1342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1342"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); java.lang.String str8 = complex7.toString(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); java.lang.String str10 = complex7.toString(); org.apache.commons.math.complex.Complex complex12 = complex7.add(1.5707962935076714d); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z(); boolean boolean19 = complex18.isNaN(); org.apache.commons.math.complex.Complex complex20 = complex18.asin(); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt(); org.apache.commons.math.complex.Complex complex22 = complex7.pow(complex21); double double23 = complex22.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(1.0, 0.0)" + "'", str10, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); }
public void test1343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1343"); double double1 = org.apache.commons.math.util.FastMath.sin((double) 10); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.5440211108893698d) + "'", double1 == (-0.5440211108893698d)); }
public void test1344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1344"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); double double5 = complex2.getImaginary(); org.apache.commons.math.complex.Complex complex6 = complex2.tan(); org.apache.commons.math.complex.Complex complex7 = complex2.cos(); org.apache.commons.math.complex.ComplexField complexField8 = complex2.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass9 = complexField8.getRuntimeClass(); org.apache.commons.math.complex.Complex complex10 = complexField8.getOne(); org.apache.commons.math.complex.Complex complex11 = complex10.asin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complexField8); org.junit.Assert.assertNotNull(wildcardClass9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test1345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1345"); double double1 = org.apache.commons.math.util.FastMath.exp(18.82795958245219d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5027230642932388E8d + "'", double1 == 1.5027230642932388E8d); }
public void test1346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1346"); double double1 = org.apache.commons.math.util.FastMath.log(1.5707962935076714d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.4515826840981489d + "'", double1 == 0.4515826840981489d); }
public void test1347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1347"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); org.apache.commons.math.complex.Complex complex35 = complex5.createComplex((double) (-20.0f), 0.0d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); }
public void test1348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1348"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex23 = complex15.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex25.subtract(complex32); org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex34); org.apache.commons.math.complex.Complex complex36 = complex34.tan(); java.lang.Object obj37 = complex34.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(obj37); org.junit.Assert.assertEquals(obj37.toString(), "(10.0, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "(10.0, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "(10.0, 0.0)"); }
public void test1349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1349"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); double double16 = complex11.abs(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue(Double.isNaN(double16)); }
public void test1350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1350"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex23.cosh(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.negate(); org.apache.commons.math.complex.Complex complex29 = complex23.divide(complex27); org.apache.commons.math.complex.Complex complex31 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex23); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((double) (-57.0f)); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); }
public void test1351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1351"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 3L, (java.lang.Number) (-0.017453292519943295d), false); java.lang.Throwable[] throwableArray4 = numberIsTooSmallException3.getSuppressed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext5 = numberIsTooSmallException3.getContext(); org.junit.Assert.assertNotNull(throwableArray4); org.junit.Assert.assertNotNull(exceptionContext5); }
public void test1352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1352"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); double double3 = complex2.getReal(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex4.add((double) 35); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex17 = complex16.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = complex10.divide(complex16); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double29 = complex28.abs(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex37 = complex28.divide(complex34); java.lang.String str38 = complex34.toString(); org.apache.commons.math.complex.Complex complex39 = complex23.divide(complex34); org.apache.commons.math.complex.Complex complex40 = complex39.sqrt1z(); org.apache.commons.math.complex.Complex complex41 = complex10.subtract(complex40); org.apache.commons.math.complex.Complex complex42 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex44 = complex6.pow(1.0d); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((-1.5574077246549023d)); org.apache.commons.math.complex.Complex complex47 = complex44.subtract(complex46); org.apache.commons.math.complex.Complex complex48 = complex2.multiply(complex47); java.lang.Object obj49 = complex48.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 36.0d + "'", double3 == 36.0d); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(0.0, 1.557407724654902)" + "'", str38, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(obj49); org.junit.Assert.assertEquals(obj49.toString(), "(1352.0666780875765, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "(1352.0666780875765, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "(1352.0666780875765, 0.0)"); }
public void test1353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1353"); double double1 = org.apache.commons.math.util.FastMath.acosh((double) (-0.0f)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1354"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.9999999999999999d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((int) (short) 0); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex14.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex18 = complex14.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex19 = complex18.sinh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex29 = complex26.add(complex28); org.apache.commons.math.complex.Complex complex30 = complex19.add(complex26); org.apache.commons.math.complex.Complex complex32 = complex30.pow(100.0d); org.apache.commons.math.complex.Complex complex35 = complex30.createComplex(11013.232874703393d, 0.0d); org.apache.commons.math.complex.Complex complex36 = complex35.conjugate(); org.apache.commons.math.complex.Complex complex37 = complex1.subtract(complex36); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); }
public void test1355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1355"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) 6L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 4.7683716E-7f + "'", float1 == 4.7683716E-7f); }
public void test1356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1356"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex9 = complex4.tan(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); double double17 = complex16.getArgument(); boolean boolean18 = complex16.isInfinite(); org.apache.commons.math.complex.Complex complex19 = complex9.add(complex16); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test1357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1357"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex15.exp(); org.apache.commons.math.complex.Complex complex20 = complex15.createComplex((double) (short) 10, 0.015050303523504572d); org.apache.commons.math.complex.Complex complex21 = complex20.tanh(); org.apache.commons.math.complex.Complex complex22 = complex20.log(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test1358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1358"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); boolean boolean12 = complex10.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); double double17 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19); org.apache.commons.math.complex.Complex complex21 = complex20.cosh(); org.apache.commons.math.complex.Complex complex22 = complex20.atan(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex24.subtract(complex31); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex34.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex37 = complex34.sin(); org.apache.commons.math.complex.Complex complex38 = complex20.pow(complex37); org.apache.commons.math.complex.Complex complex40 = complex38.multiply((double) 10); double double41 = complex40.abs(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex52 = complex51.sqrt1z(); org.apache.commons.math.complex.Complex complex53 = complex45.divide(complex51); org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex59 = complex58.log(); org.apache.commons.math.complex.Complex complex60 = complex58.tanh(); org.apache.commons.math.complex.Complex complex62 = complex60.multiply((int) (short) 0); double double63 = complex62.getArgument(); org.apache.commons.math.complex.Complex complex64 = complex55.subtract(complex62); org.apache.commons.math.complex.Complex complex65 = complex62.reciprocal(); org.apache.commons.math.complex.Complex complex66 = complex53.add(complex62); org.apache.commons.math.complex.Complex complex67 = complex40.add(complex53); org.apache.commons.math.complex.Complex complex68 = complex53.reciprocal(); org.apache.commons.math.complex.Complex complex70 = complex68.add((double) (-56.999996f)); org.apache.commons.math.complex.Complex complex71 = complex6.multiply(complex70); java.util.List<org.apache.commons.math.complex.Complex> complexList73 = complex6.nthRoot((int) 'a'); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue(Double.isNaN(double41)); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complexList73); }
public void test1359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1359"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double8 = complex7.abs(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object[] objArray28 = new java.lang.Object[] { 0.0f, (short) 0, complex13, complex26 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable2, objArray28); java.lang.Throwable[] throwableArray30 = nullArgumentException29.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException31 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) throwableArray30); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException32 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray30); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(throwableArray30); }
public void test1360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1360"); double double1 = org.apache.commons.math.util.FastMath.asin(7.350109605470111E-7d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.350109605470773E-7d + "'", double1 == 7.350109605470773E-7d); }
public void test1361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1361"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex8.tanh(); java.lang.Object obj37 = complex8.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(obj37); org.junit.Assert.assertEquals(obj37.toString(), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "(0.0, 1.557407724654902)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "(0.0, 1.557407724654902)"); }
public void test1362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1362"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z(); org.apache.commons.math.complex.Complex complex22 = complex21.cosh(); org.apache.commons.math.complex.Complex complex25 = complex22.createComplex(6.830189170012752E-6d, (double) 9223372036854775807L); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex29.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex36.reciprocal(); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex41 = complex40.log(); org.apache.commons.math.complex.Complex complex42 = complex41.reciprocal(); org.apache.commons.math.complex.Complex complex43 = complex37.multiply(complex42); org.apache.commons.math.complex.Complex complex44 = complex43.sinh(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); double double54 = complex53.getArgument(); org.apache.commons.math.complex.Complex complex55 = complex46.subtract(complex53); double double56 = complex46.abs(); org.apache.commons.math.complex.Complex complex58 = complex46.multiply(32.0d); org.apache.commons.math.complex.Complex complex59 = complex58.reciprocal(); org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex63 = complex62.negate(); boolean boolean65 = complex63.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex69 = complex68.log(); double double70 = complex69.getReal(); org.apache.commons.math.complex.Complex complex72 = complex69.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex73 = complex63.multiply(complex72); org.apache.commons.math.complex.Complex complex75 = complex72.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex76 = complex59.pow(complex72); org.apache.commons.math.complex.Complex complex77 = complex44.multiply(complex76); org.apache.commons.math.complex.Complex complex78 = complex32.subtract(complex44); org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex82 = complex81.log(); org.apache.commons.math.complex.Complex complex83 = complex81.tanh(); org.apache.commons.math.complex.Complex complex85 = complex83.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex86 = complex85.cosh(); java.lang.String str87 = complex86.toString(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex89 = complex86.cosh(); org.apache.commons.math.complex.Complex complex90 = complex44.multiply(complex89); org.apache.commons.math.complex.Complex complex91 = complex22.divide(complex44); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex85); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(1.0, 0.0)" + "'", str87, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); }
public void test1363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1363"); double double1 = org.apache.commons.math.util.FastMath.nextUp(3.556962553722239E77d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.5569625537222395E77d + "'", double1 == 3.5569625537222395E77d); }
public void test1364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1364"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); org.apache.commons.math.complex.Complex complex34 = complex33.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test1365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1365"); double double1 = org.apache.commons.math.util.FastMath.atan((double) (-4)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.3258176636680326d) + "'", double1 == (-1.3258176636680326d)); }
public void test1366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1366"); double double1 = org.apache.commons.math.util.FastMath.acos(38.98237607731007d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1367"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex4.getImaginary(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf(1.557407724654902d, 3.5553480614894135d); boolean boolean11 = complex10.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex4.add(complex10); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.557407724654902d + "'", double7 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test1368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1368"); double double1 = org.apache.commons.math.util.FastMath.acos((double) (-4.0f)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1369"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.reciprocal(); org.apache.commons.math.complex.Complex complex5 = complex3.pow((double) '4'); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); org.apache.commons.math.complex.Complex complex10 = complex8.tanh(); org.apache.commons.math.complex.Complex complex12 = complex10.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double16 = complex15.abs(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex15.divide(complex21); java.lang.String str25 = complex21.toString(); org.apache.commons.math.complex.Complex complex26 = complex10.divide(complex21); double double27 = complex26.getImaginary(); org.apache.commons.math.complex.Complex complex28 = complex3.divide(complex26); org.apache.commons.math.complex.Complex complex29 = complex26.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(0.0, 1.557407724654902)" + "'", str25, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); }
public void test1370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1370"); double double2 = org.apache.commons.math.util.FastMath.scalb(2.501018344096993d, (int) (short) 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.501018344096993d + "'", double2 == 2.501018344096993d); }
public void test1371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1371"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((int) 'a'); org.apache.commons.math.complex.Complex complex9 = complex5.divide((-2.2165681500327983d)); double double10 = complex5.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.8508157176809255d + "'", double10 == 1.8508157176809255d); }
public void test1372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1372"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (byte) -1); org.apache.commons.math.complex.ComplexField complexField17 = complex16.getField(); double double18 = complex16.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complexField17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); }
public void test1373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1373"); double double1 = org.apache.commons.math.util.FastMath.asin(1.5566711019112176d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1374"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(2.2583571068820263E-32d); org.junit.Assert.assertNotNull(complex1); }
public void test1375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1375"); double double1 = org.apache.commons.math.util.FastMath.log(127.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.844187086458591d + "'", double1 == 4.844187086458591d); }
public void test1376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1376"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 6.044629E23f, 2.0d); org.junit.Assert.assertNotNull(complex2); }
public void test1377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1377"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.acos(); org.apache.commons.math.complex.Complex complex36 = complex8.atan(); double double37 = complex8.getReal(); org.apache.commons.math.complex.Complex complex38 = complex8.reciprocal(); java.lang.String str39 = complex38.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(0.0, -0.6420926159343308)" + "'", str39, "(0.0, -0.6420926159343308)"); }
public void test1378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1378"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((double) (-1)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex11.multiply(complex16); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply((int) (short) 0); double double28 = complex27.getArgument(); org.apache.commons.math.complex.Complex complex29 = complex20.subtract(complex27); double double30 = complex20.abs(); org.apache.commons.math.complex.Complex complex32 = complex20.multiply(32.0d); org.apache.commons.math.complex.Complex complex33 = complex32.reciprocal(); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex37 = complex36.negate(); boolean boolean39 = complex37.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); double double44 = complex43.getReal(); org.apache.commons.math.complex.Complex complex46 = complex43.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex47 = complex37.multiply(complex46); org.apache.commons.math.complex.Complex complex49 = complex46.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex50 = complex33.pow(complex46); org.apache.commons.math.complex.Complex complex51 = complex18.multiply(complex50); org.apache.commons.math.complex.Complex complex52 = complex6.subtract(complex18); double double53 = complex52.getReal(); org.apache.commons.math.complex.Complex complex54 = complex52.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.41647126877660395d + "'", double53 == 0.41647126877660395d); org.junit.Assert.assertNotNull(complex54); }
public void test1379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1379"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder((double) 0.0f, (double) 127.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test1380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1380"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); org.apache.commons.math.complex.Complex complex26 = complex23.multiply(3); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); }
public void test1381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1381"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder((double) (-19L), (double) 20.000002f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0000019073486328d + "'", double2 == 1.0000019073486328d); }
public void test1382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1382"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-11.894158187830156d), 0.0d); boolean boolean3 = complex2.isInfinite(); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1383"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test1384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1384"); double double1 = org.apache.commons.math.util.FastMath.cbrt((double) 57L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.848501131276805d + "'", double1 == 3.848501131276805d); }
public void test1385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1385"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); boolean boolean22 = complex20.isNaN(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex27.tanh(); org.apache.commons.math.complex.Complex complex31 = complex29.multiply((int) (short) 0); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex24.subtract(complex31); org.apache.commons.math.complex.Complex complex34 = complex31.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex34.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex37 = complex34.sin(); org.apache.commons.math.complex.Complex complex38 = complex34.sinh(); org.apache.commons.math.complex.Complex complex40 = complex34.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex41 = complex20.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double45 = complex44.abs(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex53 = complex44.divide(complex50); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex58.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double64 = complex63.abs(); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex68 = complex67.log(); org.apache.commons.math.complex.Complex complex69 = complex67.tanh(); org.apache.commons.math.complex.Complex complex71 = complex69.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex72 = complex63.divide(complex69); java.lang.String str73 = complex69.toString(); org.apache.commons.math.complex.Complex complex74 = complex58.divide(complex69); org.apache.commons.math.complex.Complex complex75 = complex50.subtract(complex58); org.apache.commons.math.complex.Complex complex76 = complex41.subtract(complex58); org.apache.commons.math.complex.Complex complex77 = complex15.subtract(complex58); org.apache.commons.math.complex.Complex complex78 = complex77.sqrt1z(); org.apache.commons.math.complex.Complex complex79 = complex78.sinh(); org.apache.commons.math.complex.Complex complex80 = complex79.sin(); org.apache.commons.math.complex.Complex complex81 = complex79.tan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(0.0, 1.557407724654902)" + "'", str73, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertNotNull(complex81); }
public void test1386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1386"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 100.00001f); org.junit.Assert.assertNotNull(complex1); }
public void test1387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1387"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 97L); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.cos(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); org.apache.commons.math.complex.Complex complex10 = complex8.tanh(); org.apache.commons.math.complex.Complex complex12 = complex10.multiply((int) (short) 0); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex5.subtract(complex12); org.apache.commons.math.complex.Complex complex15 = complex12.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex15.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex15.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex23 = complex22.sqrt(); org.apache.commons.math.complex.Complex complex24 = complex22.sin(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply(2.147483647E9d); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); org.apache.commons.math.complex.Complex complex31 = complex30.reciprocal(); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex35.reciprocal(); org.apache.commons.math.complex.Complex complex37 = complex31.multiply(complex36); org.apache.commons.math.complex.Complex complex38 = complex26.divide(complex31); org.apache.commons.math.complex.Complex complex39 = complex3.multiply(complex38); org.apache.commons.math.complex.Complex complex40 = complex3.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); }
public void test1388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1388"); int int1 = org.apache.commons.math.util.FastMath.abs((int) (byte) 100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 100 + "'", int1 == 100); }
public void test1389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1389"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(2.5108406941546723E58d); }
public void test1390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1390"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double39 = complex38.abs(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.apache.commons.math.complex.Complex complex54 = complex52.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double58 = complex57.abs(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex62 = complex61.log(); org.apache.commons.math.complex.Complex complex63 = complex61.tanh(); org.apache.commons.math.complex.Complex complex65 = complex63.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex66 = complex57.divide(complex63); java.lang.String str67 = complex63.toString(); org.apache.commons.math.complex.Complex complex68 = complex52.divide(complex63); org.apache.commons.math.complex.Complex complex69 = complex44.subtract(complex52); org.apache.commons.math.complex.Complex complex70 = complex44.log(); org.apache.commons.math.complex.Complex complex71 = complex44.acos(); org.apache.commons.math.complex.Complex complex72 = complex8.divide(complex71); org.apache.commons.math.complex.Complex complex73 = complex72.sqrt(); java.lang.Object obj74 = null; boolean boolean75 = complex72.equals(obj74); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(0.0, 1.557407724654902)" + "'", str67, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); }
public void test1391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1391"); double double1 = org.apache.commons.math.util.FastMath.cosh((-15.653559774527022d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3142133.5258013965d + "'", double1 == 3142133.5258013965d); }
public void test1392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1392"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.0787619161000124d, 2.3841857910155797E-7d); }
public void test1393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1393"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.5845633E31f); }
public void test1394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1394"); float float1 = org.apache.commons.math.util.FastMath.nextUp((-1023.0f)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1022.99994f) + "'", float1 == (-1022.99994f)); }
public void test1395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1395"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); double double11 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex12 = complex1.sin(); org.apache.commons.math.complex.Complex complex15 = complex12.createComplex(0.38535742648327137d, 1.8508157176809255d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); }
public void test1396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1396"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double39 = complex38.abs(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex46 = complex44.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex51 = complex50.log(); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.apache.commons.math.complex.Complex complex54 = complex52.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double58 = complex57.abs(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex62 = complex61.log(); org.apache.commons.math.complex.Complex complex63 = complex61.tanh(); org.apache.commons.math.complex.Complex complex65 = complex63.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex66 = complex57.divide(complex63); java.lang.String str67 = complex63.toString(); org.apache.commons.math.complex.Complex complex68 = complex52.divide(complex63); org.apache.commons.math.complex.Complex complex69 = complex44.subtract(complex52); org.apache.commons.math.complex.Complex complex70 = complex44.log(); org.apache.commons.math.complex.Complex complex71 = complex44.acos(); org.apache.commons.math.complex.Complex complex72 = complex8.divide(complex71); org.apache.commons.math.complex.Complex complex73 = complex72.sqrt(); org.apache.commons.math.complex.Complex complex74 = complex72.sqrt(); org.apache.commons.math.complex.Complex complex75 = complex72.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(0.0, 1.557407724654902)" + "'", str67, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); }
public void test1397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1397"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(1.557407724654902d, 3.5553480614894135d); double double3 = complex2.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.557407724654902d + "'", double3 == 1.557407724654902d); }
public void test1398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1398"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex22 = complex17.multiply((-1023)); double double23 = complex22.getReal(); org.apache.commons.math.complex.Complex complex24 = complex22.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue(Double.isNaN(double23)); org.junit.Assert.assertNotNull(complex24); }
public void test1399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1399"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex3 = complex1.pow((double) 20L); org.apache.commons.math.complex.Complex complex4 = complex1.tan(); org.apache.commons.math.complex.Complex complex6 = complex1.add(100.0d); double double7 = complex1.getReal(); org.apache.commons.math.complex.Complex complex8 = complex1.cos(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.141592653589793d + "'", double7 == 3.141592653589793d); org.junit.Assert.assertNotNull(complex8); }
public void test1400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1400"); double double2 = org.apache.commons.math.util.FastMath.max(2.6424312493468273E8d, 1.2462419869011496d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.6424312493468273E8d + "'", double2 == 2.6424312493468273E8d); }
public void test1401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1401"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex29); org.apache.commons.math.complex.Complex complex32 = complex29.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); }
public void test1402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1402"); double double2 = org.apache.commons.math.util.FastMath.min((double) 2147483647, 1.8508157176809255d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.8508157176809255d + "'", double2 == 1.8508157176809255d); }
public void test1403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1403"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex12 = complex3.sin(); double double13 = complex3.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.5707963267948966d + "'", double13 == 1.5707963267948966d); }
public void test1404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1404"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex4.multiply((double) 100.0f); org.apache.commons.math.complex.Complex complex8 = complex4.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.divide((double) (-1022.99994f)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); }
public void test1405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1405"); int int2 = org.apache.commons.math.util.FastMath.max(127, 5); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 127 + "'", int2 == 127); }
public void test1406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1406"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); boolean boolean8 = complex6.isNaN(); org.apache.commons.math.complex.Complex complex9 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex11 = complex6.divide(171.88733853924697d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); }
public void test1407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1407"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complex1.acos(); org.apache.commons.math.complex.Complex complex4 = complex3.log(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1408"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((float) 35L, 5.7089790540118303E18d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 35.000004f + "'", float2 == 35.000004f); }
public void test1409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1409"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); double double15 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex13.negate(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList18 = complex13.nthRoot(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.141592653589793d + "'", double15 == 3.141592653589793d); org.junit.Assert.assertNotNull(complex16); }
public void test1410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1410"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 18, (-0.8824419880804919d)); }
public void test1411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1411"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 97L); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.cos(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 6, (double) (short) -1); org.apache.commons.math.complex.Complex complex7 = complex6.conjugate(); org.apache.commons.math.complex.Complex complex8 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); double double18 = complex17.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex10.subtract(complex17); org.apache.commons.math.complex.Complex complex20 = complex17.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex20.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex23 = complex20.sin(); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex26 = complex25.sinh(); org.apache.commons.math.complex.Complex complex27 = complex8.add(complex26); org.apache.commons.math.complex.Complex complex28 = complex3.divide(complex8); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); }
public void test1412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1412"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex2 = complex1.sqrt1z(); double double3 = complex2.getArgument(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.5707963267948966d + "'", double3 == 1.5707963267948966d); }
public void test1413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1413"); double double2 = org.apache.commons.math.util.FastMath.min((-3.961408125713217E28d), (double) 32L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-3.961408125713217E28d) + "'", double2 == (-3.961408125713217E28d)); }
public void test1414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1414"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); double double17 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf(3.141592653589793d); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex19); org.apache.commons.math.complex.Complex complex22 = complex21.conjugate(); org.apache.commons.math.complex.Complex complex23 = complex22.sqrt(); org.apache.commons.math.complex.Complex complex24 = complex22.reciprocal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue(Double.isNaN(double17)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); }
public void test1415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1415"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex35 = complex34.atan(); boolean boolean36 = complex5.equals((java.lang.Object) complex34); org.apache.commons.math.complex.Complex complex37 = complex34.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complex37); }
public void test1416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1416"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-56.99999999999999d)); }
public void test1417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1417"); double double2 = org.apache.commons.math.util.FastMath.scalb(0.0d, (-4)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test1418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1418"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); boolean boolean8 = complex6.isNaN(); org.apache.commons.math.complex.Complex complex9 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply(0); org.apache.commons.math.complex.Complex complex12 = complex11.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1419"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) 18); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4); }
public void test1420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1420"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 6, (double) (short) -1); org.apache.commons.math.complex.Complex complex3 = complex2.conjugate(); org.apache.commons.math.complex.Complex complex4 = complex2.cosh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.negate(); boolean boolean10 = complex8.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); double double15 = complex14.getReal(); org.apache.commons.math.complex.Complex complex17 = complex14.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex18 = complex8.multiply(complex17); org.apache.commons.math.complex.Complex complex19 = complex18.cosh(); org.apache.commons.math.complex.Complex complex20 = complex18.atan(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex22.subtract(complex29); org.apache.commons.math.complex.Complex complex32 = complex29.reciprocal(); org.apache.commons.math.complex.Complex complex34 = complex32.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex35 = complex32.sin(); org.apache.commons.math.complex.Complex complex36 = complex18.pow(complex35); org.apache.commons.math.complex.Complex complex38 = complex36.multiply((double) 10); double double39 = complex38.abs(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex43.reciprocal(); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex48 = complex47.log(); org.apache.commons.math.complex.Complex complex49 = complex47.tanh(); org.apache.commons.math.complex.Complex complex50 = complex49.sqrt1z(); org.apache.commons.math.complex.Complex complex51 = complex43.divide(complex49); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex57 = complex56.log(); org.apache.commons.math.complex.Complex complex58 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex58.multiply((int) (short) 0); double double61 = complex60.getArgument(); org.apache.commons.math.complex.Complex complex62 = complex53.subtract(complex60); org.apache.commons.math.complex.Complex complex63 = complex60.reciprocal(); org.apache.commons.math.complex.Complex complex64 = complex51.add(complex60); org.apache.commons.math.complex.Complex complex65 = complex38.add(complex51); org.apache.commons.math.complex.Complex complex66 = complex4.divide(complex65); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex72 = complex71.log(); org.apache.commons.math.complex.Complex complex73 = complex71.tanh(); org.apache.commons.math.complex.Complex complex75 = complex73.multiply((int) (short) 0); double double76 = complex75.getArgument(); org.apache.commons.math.complex.Complex complex77 = complex68.subtract(complex75); org.apache.commons.math.complex.Complex complex78 = complex77.reciprocal(); org.apache.commons.math.complex.Complex complex79 = complex4.add(complex78); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue(Double.isNaN(double39)); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); }
public void test1421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1421"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex9 = complex4.tan(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex11 = complex9.add(complex10); double double12 = complex9.getReal(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(32); org.apache.commons.math.complex.Complex complex16 = complex14.multiply(97.0d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); }
public void test1422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1422"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = numberIsTooSmallException4.getContext(); java.lang.Throwable[] throwableArray8 = numberIsTooSmallException4.getSuppressed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext9 = numberIsTooSmallException4.getContext(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 1.0d + "'", number5, 1.0d); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(exceptionContext7); org.junit.Assert.assertNotNull(throwableArray8); org.junit.Assert.assertNotNull(exceptionContext9); }
public void test1423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1423"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double8 = complex7.abs(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex17 = complex2.divide(complex16); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1424"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); java.lang.Object obj15 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); org.apache.commons.math.complex.Complex complex17 = complex16.cos(); org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(obj15); org.junit.Assert.assertEquals(obj15.toString(), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "(2.5091784786580567, -0.0)"); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1425"); double double1 = org.apache.commons.math.util.FastMath.rint((double) (-33L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-33.0d) + "'", double1 == (-33.0d)); }
public void test1426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1426"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) -1); org.junit.Assert.assertNotNull(complex1); }
public void test1427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1427"); float float1 = org.apache.commons.math.util.FastMath.abs((float) 794L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 794.0f + "'", float1 == 794.0f); }
public void test1428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1428"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double27 = complex26.abs(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = complex26.divide(complex32); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.log(); org.apache.commons.math.complex.Complex complex40 = complex38.tanh(); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double46 = complex45.abs(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex54 = complex45.divide(complex51); java.lang.String str55 = complex51.toString(); org.apache.commons.math.complex.Complex complex56 = complex40.divide(complex51); org.apache.commons.math.complex.Complex complex57 = complex32.subtract(complex40); org.apache.commons.math.complex.Complex complex58 = complex23.subtract(complex40); java.lang.Object obj59 = complex58.readResolve(); org.apache.commons.math.complex.Complex complex60 = complex58.log(); org.apache.commons.math.complex.Complex complex61 = complex58.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(0.0, 1.557407724654902)" + "'", str55, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(obj59); org.junit.Assert.assertEquals(obj59.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); }
public void test1429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1429"); double double1 = org.apache.commons.math.util.FastMath.cos((double) 100L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.8623188722876839d + "'", double1 == 0.8623188722876839d); }
public void test1430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1430"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex36 = complex33.add((double) 97); org.apache.commons.math.complex.Complex complex37 = complex33.exp(); org.apache.commons.math.complex.Complex complex39 = complex33.multiply((-0.6795226183513794d)); org.apache.commons.math.complex.Complex complex41 = complex39.multiply(4.594700892207039d); double double42 = complex39.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertTrue(Double.isNaN(double42)); }
public void test1431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1431"); double double2 = org.apache.commons.math.util.FastMath.pow(0.999969499795229d, 1.9155113074400845E22d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test1432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1432"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex6.subtract((double) (-1L)); boolean boolean42 = complex40.equals((java.lang.Object) 6.849145423384438E29d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test1433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1433"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); java.lang.String str11 = complex10.toString(); org.apache.commons.math.complex.Complex complex12 = complex10.negate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(10.0, 0.0)" + "'", str11, "(10.0, 0.0)"); org.junit.Assert.assertNotNull(complex12); }
public void test1434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1434"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex13.add(complex16); org.apache.commons.math.complex.Complex complex18 = complex13.tanh(); org.apache.commons.math.complex.Complex complex19 = complex13.negate(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField20 = complex13.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complexField20); }
public void test1435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1435"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex13.add(complex16); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = complex18.add((double) 35); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex31 = complex30.sqrt1z(); org.apache.commons.math.complex.Complex complex32 = complex24.divide(complex30); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex35.tanh(); org.apache.commons.math.complex.Complex complex39 = complex37.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double43 = complex42.abs(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex51 = complex42.divide(complex48); java.lang.String str52 = complex48.toString(); org.apache.commons.math.complex.Complex complex53 = complex37.divide(complex48); org.apache.commons.math.complex.Complex complex54 = complex53.sqrt1z(); org.apache.commons.math.complex.Complex complex55 = complex24.subtract(complex54); org.apache.commons.math.complex.Complex complex56 = complex20.divide(complex24); org.apache.commons.math.complex.Complex complex58 = complex20.pow(1.0d); double double59 = complex58.getImaginary(); org.apache.commons.math.complex.Complex complex60 = complex58.negate(); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex64 = complex63.log(); org.apache.commons.math.complex.Complex complex65 = complex63.tanh(); org.apache.commons.math.complex.Complex complex67 = complex65.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex68 = complex67.acos(); org.apache.commons.math.complex.Complex complex69 = complex58.divide(complex68); org.apache.commons.math.complex.Complex complex70 = complex16.add(complex58); org.apache.commons.math.complex.Complex complex71 = complex70.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(0.0, 1.557407724654902)" + "'", str52, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); }
public void test1436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1436"); double double1 = org.apache.commons.math.util.FastMath.cosh((double) 63); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.146891579734805E27d + "'", double1 == 1.146891579734805E27d); }
public void test1437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1437"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) 10); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); org.apache.commons.math.complex.Complex complex39 = complex38.reciprocal(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex43 = complex42.log(); org.apache.commons.math.complex.Complex complex44 = complex42.tanh(); org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z(); org.apache.commons.math.complex.Complex complex46 = complex38.divide(complex44); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex55 = complex53.multiply((int) (short) 0); double double56 = complex55.getArgument(); org.apache.commons.math.complex.Complex complex57 = complex48.subtract(complex55); org.apache.commons.math.complex.Complex complex58 = complex55.reciprocal(); org.apache.commons.math.complex.Complex complex59 = complex46.add(complex55); org.apache.commons.math.complex.Complex complex60 = complex33.add(complex46); org.apache.commons.math.complex.ComplexField complexField61 = complex60.getField(); org.apache.commons.math.complex.Complex complex62 = complex60.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complexField61); org.junit.Assert.assertNotNull(complex62); }
public void test1438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1438"); double double1 = org.apache.commons.math.util.FastMath.signum((double) (-57L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test1439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1439"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex35 = complex34.atan(); boolean boolean36 = complex5.equals((java.lang.Object) complex34); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex44 = complex41.add(complex43); org.apache.commons.math.complex.Complex complex45 = complex41.conjugate(); org.apache.commons.math.complex.Complex complex46 = complex41.tan(); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex48 = complex46.add(complex47); org.apache.commons.math.complex.Complex complex49 = complex5.divide(complex47); org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.valueOf((double) 4.440892E-15f, (-1.5707963267948966d)); org.apache.commons.math.complex.Complex complex53 = complex49.divide(complex52); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); }
public void test1440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1440"); double double1 = org.apache.commons.math.util.FastMath.cosh((double) 320.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.7119884080817924E138d + "'", double1 == 4.7119884080817924E138d); }
public void test1441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1441"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex14 = complex6.multiply((int) (short) 0); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField15 = complex14.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass16 = complexField15.getRuntimeClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexField15); org.junit.Assert.assertNotNull(wildcardClass16); }
public void test1442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1442"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); java.lang.Throwable[] throwableArray6 = numberIsTooSmallException4.getSuppressed(); java.lang.Number number7 = numberIsTooSmallException4.getMin(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 3.831008000716577E22d + "'", number5, 3.831008000716577E22d); org.junit.Assert.assertNotNull(throwableArray6); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 1.0d + "'", number7, 1.0d); }
public void test1443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1443"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); java.lang.String str8 = complex5.toString(); org.apache.commons.math.complex.Complex complex9 = complex5.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.8508157176809255, 0.0)" + "'", str8, "(1.8508157176809255, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1444"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex23 = complex15.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex25.subtract(complex32); org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex34); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.negate(); boolean boolean41 = complex39.isNaN(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex47 = complex46.log(); org.apache.commons.math.complex.Complex complex48 = complex46.tanh(); org.apache.commons.math.complex.Complex complex50 = complex48.multiply((int) (short) 0); double double51 = complex50.getArgument(); org.apache.commons.math.complex.Complex complex52 = complex43.subtract(complex50); org.apache.commons.math.complex.Complex complex53 = complex50.reciprocal(); org.apache.commons.math.complex.Complex complex55 = complex53.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex56 = complex53.sin(); org.apache.commons.math.complex.Complex complex57 = complex53.sinh(); org.apache.commons.math.complex.Complex complex59 = complex53.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex60 = complex39.multiply(complex59); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex64 = complex63.negate(); boolean boolean66 = complex64.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex70 = complex69.log(); double double71 = complex70.getReal(); org.apache.commons.math.complex.Complex complex73 = complex70.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex74 = complex64.multiply(complex73); org.apache.commons.math.complex.Complex complex76 = complex74.multiply((int) (byte) 100); org.apache.commons.math.complex.Complex complex77 = complex59.subtract(complex76); org.apache.commons.math.complex.Complex complex78 = complex36.subtract(complex59); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); }
public void test1445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1445"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 0.44110195710915695d, (java.lang.Number) (-57L), false); }
public void test1446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1446"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(Double.POSITIVE_INFINITY); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.subtract((double) 96.99999f); org.apache.commons.math.complex.Complex complex7 = complex1.add(complex6); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); double double17 = complex16.getArgument(); org.apache.commons.math.complex.Complex complex18 = complex9.subtract(complex16); org.apache.commons.math.complex.Complex complex19 = complex16.reciprocal(); org.apache.commons.math.complex.Complex complex21 = complex19.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex22 = complex19.sin(); org.apache.commons.math.complex.Complex complex23 = complex19.sinh(); org.apache.commons.math.complex.Complex complex25 = complex19.pow((double) (short) 100); java.lang.String str26 = complex25.toString(); org.apache.commons.math.complex.Complex complex27 = complex25.log(); org.apache.commons.math.complex.Complex complex28 = complex25.negate(); boolean boolean29 = complex25.isInfinite(); org.apache.commons.math.complex.Complex complex30 = complex1.add(complex25); org.apache.commons.math.complex.ComplexField complexField31 = complex25.getField(); org.apache.commons.math.complex.Complex complex32 = complexField31.getOne(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(NaN, NaN)" + "'", str26, "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complexField31); org.junit.Assert.assertNotNull(complex32); }
public void test1447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1447"); long long1 = org.apache.commons.math.util.FastMath.abs((long) 32); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 32L + "'", long1 == 32L); }
public void test1448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1448"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex23 = complex15.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex25.subtract(complex32); org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex34); org.apache.commons.math.complex.ComplexField complexField36 = complex35.getField(); org.apache.commons.math.complex.Complex complex37 = complexField36.getOne(); org.apache.commons.math.complex.Complex complex38 = complexField36.getZero(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complexField36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test1449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1449"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex35 = complex34.atan(); boolean boolean36 = complex5.equals((java.lang.Object) complex34); org.apache.commons.math.complex.Complex complex37 = complex34.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complex37); }
public void test1450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1450"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 5.117509926296107d); }
public void test1451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1451"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex8.subtract(3.584289651861328d); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); java.lang.Object obj17 = complex16.readResolve(); org.apache.commons.math.complex.Complex complex19 = complex16.add(0.0d); java.lang.Object obj20 = complex19.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(obj20); org.junit.Assert.assertEquals(obj20.toString(), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "(-1.0015414668873568, 4.13178852214772E-5)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "(-1.0015414668873568, 4.13178852214772E-5)"); }
public void test1452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1452"); double double1 = org.apache.commons.math.util.FastMath.expm1(262144.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test1453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1453"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-5), (-0.7615941559557649d)); }
public void test1454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1454"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.asin(); org.apache.commons.math.complex.Complex complex15 = complex14.tan(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex16.add((double) 35); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex22.reciprocal(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); org.apache.commons.math.complex.Complex complex30 = complex22.divide(complex28); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex37 = complex35.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double41 = complex40.abs(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex45 = complex44.log(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex48 = complex46.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex49 = complex40.divide(complex46); java.lang.String str50 = complex46.toString(); org.apache.commons.math.complex.Complex complex51 = complex35.divide(complex46); org.apache.commons.math.complex.Complex complex52 = complex51.sqrt1z(); org.apache.commons.math.complex.Complex complex53 = complex22.subtract(complex52); org.apache.commons.math.complex.Complex complex54 = complex18.divide(complex22); org.apache.commons.math.complex.Complex complex56 = complex18.pow(1.0d); double double57 = complex56.getImaginary(); org.apache.commons.math.complex.Complex complex58 = complex56.sqrt1z(); org.apache.commons.math.complex.Complex complex59 = complex56.tanh(); org.apache.commons.math.complex.Complex complex60 = complex15.pow(complex56); org.apache.commons.math.complex.Complex complex62 = complex56.subtract(0.05460632039800817d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(0.0, 1.557407724654902)" + "'", str50, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); }
public void test1455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1455"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.reciprocal(); org.apache.commons.math.complex.Complex complex5 = complex3.pow((double) '4'); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); org.apache.commons.math.complex.Complex complex10 = complex8.tanh(); org.apache.commons.math.complex.Complex complex12 = complex10.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double16 = complex15.abs(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex15.divide(complex21); java.lang.String str25 = complex21.toString(); org.apache.commons.math.complex.Complex complex26 = complex10.divide(complex21); double double27 = complex26.getImaginary(); org.apache.commons.math.complex.Complex complex28 = complex3.divide(complex26); org.apache.commons.math.complex.Complex complex29 = complex28.cos(); boolean boolean30 = complex29.isInfinite(); org.apache.commons.math.complex.Complex complex32 = complex29.multiply(20); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(0.0, 1.557407724654902)" + "'", str25, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(complex32); }
public void test1456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1456"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex13 = complex8.multiply((int) (short) 100); org.apache.commons.math.complex.Complex complex14 = complex13.acos(); org.apache.commons.math.complex.Complex complex15 = complex13.asin(); org.apache.commons.math.complex.Complex complex17 = complex13.add(7276.563998161455d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); }
public void test1457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1457"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.acos(); org.apache.commons.math.complex.Complex complex17 = complex15.pow(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex18 = complex17.tan(); java.lang.Class<?> wildcardClass19 = complex17.getClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(wildcardClass19); }
public void test1458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1458"); double double1 = org.apache.commons.math.util.FastMath.expm1(1.5707894966057265d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.810444524607049d + "'", double1 == 3.810444524607049d); }
public void test1459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1459"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex10.sinh(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); double double23 = complex13.abs(); org.apache.commons.math.complex.Complex complex25 = complex13.multiply(32.0d); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); boolean boolean32 = complex30.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); double double37 = complex36.getReal(); org.apache.commons.math.complex.Complex complex39 = complex36.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex40 = complex30.multiply(complex39); org.apache.commons.math.complex.Complex complex42 = complex39.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex43 = complex26.pow(complex39); org.apache.commons.math.complex.Complex complex44 = complex11.multiply(complex43); org.apache.commons.math.complex.Complex complex45 = complex44.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); }
public void test1460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1460"); double double2 = org.apache.commons.math.util.FastMath.max(7.350109605470773E-7d, 1.570771867645528d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.570771867645528d + "'", double2 == 1.570771867645528d); }
public void test1461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1461"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.061153622438558E-9d, 0.0d); org.apache.commons.math.complex.Complex complex3 = complex2.asin(); org.apache.commons.math.complex.Complex complex4 = complex3.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1462"); long long2 = org.apache.commons.math.util.FastMath.max((long) '#', 20L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L); }
public void test1463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1463"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.negate(); boolean boolean57 = complex55.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); double double62 = complex61.getReal(); org.apache.commons.math.complex.Complex complex64 = complex61.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex65 = complex55.multiply(complex64); org.apache.commons.math.complex.Complex complex66 = complex65.cosh(); org.apache.commons.math.complex.Complex complex67 = complex65.atan(); double double68 = complex65.getReal(); org.apache.commons.math.complex.Complex complex69 = complex50.divide(complex65); double double70 = complex50.abs(); org.apache.commons.math.complex.Complex complex71 = complex50.acos(); org.apache.commons.math.complex.Complex complex72 = complex50.sin(); org.apache.commons.math.complex.Complex complex73 = complex72.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.5707963267948966d) + "'", double68 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.5707963267948966d + "'", double70 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); }
public void test1464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1464"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.atan(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex29 = complex26.add(complex28); org.apache.commons.math.complex.Complex complex30 = complex26.conjugate(); double double31 = complex30.getArgument(); org.apache.commons.math.complex.Complex complex32 = complex30.asin(); org.apache.commons.math.complex.Complex complex33 = complex21.subtract(complex32); org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.apache.commons.math.complex.Complex complex37 = complex33.subtract(complex35); org.apache.commons.math.complex.Complex complex40 = complex33.createComplex(0.0d, 1.5126529326323852d); org.apache.commons.math.complex.Complex complex41 = complex33.sinh(); java.lang.String str42 = complex33.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.5707963267948966d) + "'", double31 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(-1.5707963267948966, 1.987917392664854)" + "'", str42, "(-1.5707963267948966, 1.987917392664854)"); }
public void test1465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1465"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex31 = complex27.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex32 = complex31.sinh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex35 = complex34.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex15.divide(complex34); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.log(); org.apache.commons.math.complex.Complex complex43 = complex41.tanh(); org.apache.commons.math.complex.Complex complex45 = complex43.multiply((int) (short) 0); double double46 = complex45.getArgument(); org.apache.commons.math.complex.Complex complex47 = complex38.subtract(complex45); org.apache.commons.math.complex.Complex complex48 = complex45.reciprocal(); org.apache.commons.math.complex.Complex complex50 = complex48.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex51 = complex48.sin(); org.apache.commons.math.complex.Complex complex52 = complex48.sinh(); org.apache.commons.math.complex.Complex complex54 = complex48.pow((double) (short) 100); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField55 = complex48.getField(); org.apache.commons.math.complex.Complex complex56 = complexField55.getOne(); org.apache.commons.math.complex.Complex complex57 = complexField55.getOne(); boolean boolean58 = complex34.equals((java.lang.Object) complex57); org.apache.commons.math.complex.Complex complex59 = complex57.conjugate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complexField55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(complex59); }
public void test1466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1466"); int int2 = org.apache.commons.math.util.FastMath.max(0, 102); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 102 + "'", int2 == 102); }
public void test1467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1467"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); org.apache.commons.math.complex.Complex complex26 = complex25.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex32 = complex31.log(); org.apache.commons.math.complex.Complex complex33 = complex31.tanh(); org.apache.commons.math.complex.Complex complex35 = complex33.multiply((int) (short) 0); double double36 = complex35.getArgument(); org.apache.commons.math.complex.Complex complex37 = complex28.subtract(complex35); org.apache.commons.math.complex.Complex complex38 = complex35.reciprocal(); org.apache.commons.math.complex.Complex complex40 = complex38.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex41 = complex25.subtract(complex38); org.apache.commons.math.complex.Complex complex42 = complex25.atan(); org.apache.commons.math.complex.Complex complex44 = complex25.divide(2.7182482745272054d); org.apache.commons.math.complex.Complex complex45 = complex4.pow(complex25); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); }
public void test1468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1468"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = complex23.cosh(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.negate(); org.apache.commons.math.complex.Complex complex29 = complex23.divide(complex27); org.apache.commons.math.complex.Complex complex31 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex23); double double33 = complex16.getArgument(); org.apache.commons.math.complex.Complex complex35 = complex16.multiply((-19)); org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue(Double.isNaN(double33)); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test1469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1469"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); boolean boolean26 = complex24.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); double double31 = complex30.getReal(); org.apache.commons.math.complex.Complex complex33 = complex30.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex34 = complex24.multiply(complex33); org.apache.commons.math.complex.Complex complex35 = complex34.cosh(); boolean boolean36 = complex34.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField37 = complex34.getField(); org.apache.commons.math.complex.Complex complex38 = complex11.pow(complex34); org.apache.commons.math.complex.Complex complex39 = complex4.subtract(complex11); org.apache.commons.math.complex.ComplexField complexField40 = complex39.getField(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex43 = complex42.cos(); boolean boolean45 = complex42.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex46 = complex39.subtract(complex42); org.apache.commons.math.complex.Complex complex48 = complex42.multiply(0.0d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complexField37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complexField40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex48); }
public void test1470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1470"); double double1 = org.apache.commons.math.util.FastMath.cbrt(2.3326073681307428E-11d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.857243243221506E-4d + "'", double1 == 2.857243243221506E-4d); }
public void test1471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1471"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object obj28 = complex27.readResolve(); org.apache.commons.math.complex.Complex complex29 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex30 = complex27.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex27.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex33 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex35 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField36 = complex35.getField(); org.apache.commons.math.complex.Complex complex37 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex38 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex39 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex40 = complexField36.getZero(); org.apache.commons.math.complex.Complex complex41 = complex33.multiply(complex40); org.apache.commons.math.complex.Complex complex42 = complex33.sin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(obj28); org.junit.Assert.assertEquals(obj28.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complexField36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); }
public void test1472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1472"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex31 = complex27.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex32 = complex31.sinh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex35 = complex34.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex15.divide(complex34); org.apache.commons.math.complex.Complex complex37 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex38 = complex15.cosh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test1473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1473"); long long1 = org.apache.commons.math.util.FastMath.round(0.8941226291179728d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1474"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField18 = complex11.getField(); org.apache.commons.math.complex.Complex complex19 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex20 = complex19.acos(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex23.tanh(); double double26 = complex23.getImaginary(); org.apache.commons.math.complex.Complex complex27 = complex23.tan(); org.apache.commons.math.complex.Complex complex28 = complex23.cos(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex32 = complex31.negate(); boolean boolean34 = complex32.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); double double39 = complex38.getReal(); org.apache.commons.math.complex.Complex complex41 = complex38.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex42 = complex32.multiply(complex41); org.apache.commons.math.complex.Complex complex43 = complex42.cosh(); org.apache.commons.math.complex.Complex complex44 = complex42.atan(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); double double54 = complex53.getArgument(); org.apache.commons.math.complex.Complex complex55 = complex46.subtract(complex53); org.apache.commons.math.complex.Complex complex56 = complex53.reciprocal(); org.apache.commons.math.complex.Complex complex58 = complex56.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex59 = complex56.sin(); org.apache.commons.math.complex.Complex complex60 = complex42.pow(complex59); org.apache.commons.math.complex.Complex complex61 = complex23.add(complex42); org.apache.commons.math.complex.Complex complex62 = complex42.sqrt(); org.apache.commons.math.complex.Complex complex63 = complex20.multiply(complex42); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complexField18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); }
public void test1475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1475"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(0.22340113731134706d, 2.7755575615628914E-17d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.22340113731134703d + "'", double2 == 0.22340113731134703d); }
public void test1476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1476"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); java.lang.Object obj11 = complex1.readResolve(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.exp(); boolean boolean24 = complex1.equals((java.lang.Object) complex20); org.apache.commons.math.complex.Complex complex25 = complex20.cos(); org.apache.commons.math.complex.Complex complex27 = complex25.pow(71.84044670030278d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(10.0, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(10.0, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(10.0, 0.0)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); }
public void test1477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1477"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex10.sinh(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); double double23 = complex13.abs(); org.apache.commons.math.complex.Complex complex25 = complex13.multiply(32.0d); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); boolean boolean32 = complex30.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); double double37 = complex36.getReal(); org.apache.commons.math.complex.Complex complex39 = complex36.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex40 = complex30.multiply(complex39); org.apache.commons.math.complex.Complex complex42 = complex39.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex43 = complex26.pow(complex39); org.apache.commons.math.complex.Complex complex44 = complex11.multiply(complex43); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex48 = complex47.log(); org.apache.commons.math.complex.Complex complex49 = complex47.tanh(); org.apache.commons.math.complex.Complex complex50 = complex49.sqrt1z(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex52 = complex49.add(complex51); org.apache.commons.math.complex.Complex complex53 = complex49.conjugate(); org.apache.commons.math.complex.Complex complex54 = complex49.tan(); org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex56 = complex54.add(complex55); org.apache.commons.math.complex.Complex complex57 = complex11.pow(complex56); org.apache.commons.math.complex.Complex complex58 = complex56.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); }
public void test1478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1478"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (short) 100, (java.lang.Number) (-13.862943611198906d), false); org.apache.commons.math.exception.NullArgumentException nullArgumentException5 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable[] throwableArray6 = nullArgumentException5.getSuppressed(); org.apache.commons.math.exception.util.Localizable localizable7 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException11 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable7, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number12 = numberIsTooSmallException11.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext13 = numberIsTooSmallException11.getContext(); nullArgumentException5.addSuppressed((java.lang.Throwable) numberIsTooSmallException11); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) nullArgumentException5); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException19 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 1.6188704068605666d, (java.lang.Number) (-0.017453292519943295d), false); nullArgumentException5.addSuppressed((java.lang.Throwable) numberIsTooSmallException19); org.junit.Assert.assertNotNull(throwableArray6); org.junit.Assert.assertEquals("'" + number12 + "' != '" + 3.831008000716577E22d + "'", number12, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext13); }
public void test1479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1479"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.log(); java.lang.Object obj17 = complex14.readResolve(); org.apache.commons.math.complex.Complex complex18 = complex8.multiply(complex14); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex22.reciprocal(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); org.apache.commons.math.complex.Complex complex30 = complex22.divide(complex28); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex35.tanh(); org.apache.commons.math.complex.Complex complex39 = complex37.multiply((int) (short) 0); double double40 = complex39.getArgument(); org.apache.commons.math.complex.Complex complex41 = complex32.subtract(complex39); org.apache.commons.math.complex.Complex complex42 = complex39.reciprocal(); org.apache.commons.math.complex.Complex complex43 = complex30.add(complex39); org.apache.commons.math.complex.Complex complex45 = complex39.multiply(0.0d); org.apache.commons.math.complex.Complex complex46 = complex8.divide(complex39); org.apache.commons.math.complex.Complex complex47 = complex46.atan(); org.apache.commons.math.complex.Complex complex48 = complex46.sin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(obj17); org.junit.Assert.assertEquals(obj17.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); }
public void test1480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1480"); double double1 = org.apache.commons.math.util.FastMath.log(1.1701239378075259d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.15710967294952707d + "'", double1 == 0.15710967294952707d); }
public void test1481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1481"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.atan(); org.apache.commons.math.complex.Complex complex23 = complex4.divide(2.7182482745272054d); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.log(); org.apache.commons.math.complex.Complex complex28 = complex26.tanh(); org.apache.commons.math.complex.Complex complex30 = complex28.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double34 = complex33.abs(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex38 = complex37.log(); org.apache.commons.math.complex.Complex complex39 = complex37.tanh(); org.apache.commons.math.complex.Complex complex41 = complex39.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex42 = complex33.divide(complex39); java.lang.String str43 = complex39.toString(); org.apache.commons.math.complex.Complex complex44 = complex28.divide(complex39); org.apache.commons.math.complex.Complex complex47 = complex39.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex53 = complex52.log(); org.apache.commons.math.complex.Complex complex54 = complex52.tanh(); org.apache.commons.math.complex.Complex complex56 = complex54.multiply((int) (short) 0); double double57 = complex56.getArgument(); org.apache.commons.math.complex.Complex complex58 = complex49.subtract(complex56); org.apache.commons.math.complex.Complex complex59 = complex39.subtract(complex58); org.apache.commons.math.complex.ComplexField complexField60 = complex59.getField(); org.apache.commons.math.complex.Complex complex61 = complexField60.getOne(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField62 = complex61.getField(); boolean boolean63 = complex4.equals((java.lang.Object) complexField62); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(0.0, 1.557407724654902)" + "'", str43, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complexField60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complexField62); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); }
public void test1482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1482"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.exp(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z(); org.apache.commons.math.complex.Complex complex16 = complex14.negate(); org.apache.commons.math.complex.Complex complex17 = complex11.add(complex14); double double18 = complex14.abs(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6.830189170012752E-6d + "'", double18 == 6.830189170012752E-6d); }
public void test1483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1483"); double double1 = org.apache.commons.math.util.FastMath.log1p((-0.5440211108893683d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.7853087663494533d) + "'", double1 == (-0.7853087663494533d)); }
public void test1484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1484"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.Complex complex6 = complex2.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex8.subtract(complex15); double double18 = complex8.abs(); org.apache.commons.math.complex.Complex complex20 = complex8.multiply(32.0d); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex23 = complex6.add(complex22); org.apache.commons.math.complex.Complex complex25 = complex6.multiply(18); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double36 = complex35.abs(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex43 = complex41.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex44 = complex35.divide(complex41); java.lang.String str45 = complex41.toString(); org.apache.commons.math.complex.Complex complex46 = complex30.divide(complex41); org.apache.commons.math.complex.Complex complex49 = complex41.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.log(); org.apache.commons.math.complex.Complex complex56 = complex54.tanh(); org.apache.commons.math.complex.Complex complex58 = complex56.multiply((int) (short) 0); double double59 = complex58.getArgument(); org.apache.commons.math.complex.Complex complex60 = complex51.subtract(complex58); org.apache.commons.math.complex.Complex complex61 = complex41.subtract(complex60); org.apache.commons.math.complex.Complex complex62 = complex25.divide(complex61); org.apache.commons.math.complex.Complex complex63 = complex61.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(0.0, 1.557407724654902)" + "'", str45, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); }
public void test1485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1485"); double double2 = org.apache.commons.math.util.FastMath.copySign(1.5566711019112178d, (-0.013438099090886106d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.5566711019112178d) + "'", double2 == (-1.5566711019112178d)); }
public void test1486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1486"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(2.9870930417485533d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); double double3 = complex1.getReal(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 2.9870930417485533d + "'", double3 == 2.9870930417485533d); }
public void test1487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1487"); double double1 = org.apache.commons.math.util.FastMath.acosh((double) 2.9999998f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.7627470897453852d + "'", double1 == 1.7627470897453852d); }
public void test1488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1488"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.ComplexField complexField21 = complex20.getField(); double double22 = complex20.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complexField21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); }
public void test1489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1489"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.exp(); org.apache.commons.math.complex.Complex complex13 = complex8.pow(0.0d); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.negate(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply((int) (short) 0); double double27 = complex26.getArgument(); org.apache.commons.math.complex.Complex complex28 = complex19.subtract(complex26); org.apache.commons.math.complex.Complex complex29 = complex26.reciprocal(); org.apache.commons.math.complex.Complex complex31 = complex29.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex33 = complex29.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex34 = complex33.sinh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex37 = complex36.sqrt(); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex41 = complex40.log(); org.apache.commons.math.complex.Complex complex42 = complex41.reciprocal(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex46.reciprocal(); org.apache.commons.math.complex.Complex complex48 = complex42.multiply(complex47); org.apache.commons.math.complex.Complex complex49 = complex36.divide(complex48); double double50 = complex49.getReal(); org.apache.commons.math.complex.Complex complex51 = complex16.divide(complex49); org.apache.commons.math.complex.Complex complex52 = complex8.multiply(complex16); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertTrue(Double.isNaN(double50)); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); }
public void test1490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1490"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.tanh(); java.lang.Object obj8 = complex7.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(obj8); org.junit.Assert.assertEquals(obj8.toString(), "(0.0, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "(0.0, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "(0.0, 0.0)"); }
public void test1491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1491"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex11.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex6.multiply(complex11); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex18 = complex17.cos(); boolean boolean20 = complex17.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex21 = complex11.subtract(complex17); boolean boolean22 = complex17.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.557407724654902d + "'", double14 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); }
public void test1492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1492"); double double1 = org.apache.commons.math.util.FastMath.acos((-1.2414372125137612d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1493"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); java.lang.String str8 = complex5.toString(); org.apache.commons.math.complex.Complex complex9 = complex5.negate(); org.apache.commons.math.complex.Complex complex11 = complex5.multiply(8.454807612025483d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.8508157176809255, 0.0)" + "'", str8, "(1.8508157176809255, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); }
public void test1494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1494"); double double1 = org.apache.commons.math.util.FastMath.atanh(2.3352273239847907d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1495"); double double1 = org.apache.commons.math.util.FastMath.cbrt((-4.565564159565621E-4d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.0770013164421337d) + "'", double1 == (-0.0770013164421337d)); }
public void test1496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1496"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-3.1038593155224103d)); }
public void test1497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1497"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex23 = complex15.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex25.subtract(complex32); org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex34); org.apache.commons.math.complex.ComplexField complexField36 = complex35.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass37 = complexField36.getRuntimeClass(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass38 = complexField36.getRuntimeClass(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass39 = complexField36.getRuntimeClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complexField36); org.junit.Assert.assertNotNull(wildcardClass37); org.junit.Assert.assertNotNull(wildcardClass38); org.junit.Assert.assertNotNull(wildcardClass39); }
public void test1498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1498"); double double1 = org.apache.commons.math.util.FastMath.cbrt(2.7755575615628914E-17d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.0277272261966697E-6d + "'", double1 == 3.0277272261966697E-6d); }
public void test1499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1499"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object obj28 = complex27.readResolve(); org.apache.commons.math.complex.Complex complex29 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex30 = complex27.reciprocal(); org.apache.commons.math.complex.Complex complex32 = complex27.divide(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex33 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex34 = complex27.cos(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(obj28); org.junit.Assert.assertEquals(obj28.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test1500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1500"); double double1 = org.apache.commons.math.util.FastMath.tanh(1.3169578969248166d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.8660254037844386d + "'", double1 == 0.8660254037844386d); }
public void test0001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0001"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) (short) 10); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 9.536743E-7f + "'", float1 == 9.536743E-7f); }
public void test0002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0002"); double double1 = org.apache.commons.math.util.FastMath.atan((double) 100L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5607966601082315d + "'", double1 == 1.5607966601082315d); }
public void test0003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0003"); double double2 = org.apache.commons.math.util.FastMath.atan2((double) (short) 100, (double) 0L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5707963267948966d + "'", double2 == 1.5707963267948966d); }
public void test0004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0004"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList5 = complex2.nthRoot((-1)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -1"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0005"); double double0 = org.apache.commons.math.util.FastMath.E; org.junit.Assert.assertTrue("'" + double0 + "' != '" + 2.718281828459045d + "'", double0 == 2.718281828459045d); }
public void test0006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0006"); double double1 = org.apache.commons.math.util.FastMath.floor((double) (byte) 0); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0007"); double double1 = org.apache.commons.math.util.FastMath.sinh(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0008"); float float1 = org.apache.commons.math.util.FastMath.abs(9.536743E-7f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 9.536743E-7f + "'", float1 == 9.536743E-7f); }
public void test0009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0009"); double double1 = org.apache.commons.math.util.FastMath.exp((double) '4'); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.831008000716577E22d + "'", double1 == 3.831008000716577E22d); }
public void test0010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0010"); double double1 = org.apache.commons.math.util.FastMath.sinh(3.831008000716577E22d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test0011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0011"); double double1 = org.apache.commons.math.util.FastMath.sin(14.142135623730951d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9999876561221204d + "'", double1 == 0.9999876561221204d); }
public void test0012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0012"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 3.831008000716577E22d + "'", number5, 3.831008000716577E22d); }
public void test0013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0013"); float float1 = org.apache.commons.math.util.FastMath.abs((float) (byte) 0); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test0014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0014"); long long1 = org.apache.commons.math.util.FastMath.round(0.0d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test0015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0015"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0016"); int int2 = org.apache.commons.math.util.FastMath.min((int) (byte) 10, 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10); }
public void test0017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0017"); double double1 = org.apache.commons.math.util.FastMath.log10((double) (short) -1); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0018"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((float) 0L, (double) (short) 1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.4E-45f + "'", float2 == 1.4E-45f); }
public void test0019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0019"); double double1 = org.apache.commons.math.util.FastMath.tan((double) (short) -1); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.5574077246549023d) + "'", double1 == (-1.5574077246549023d)); }
public void test0020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0020"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); java.lang.Class<?> wildcardClass14 = complex13.getClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(wildcardClass14); }
public void test0021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0021"); int int2 = org.apache.commons.math.util.FastMath.max(10, (int) 'a'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97); }
public void test0022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0022"); int int1 = org.apache.commons.math.util.FastMath.round((float) (short) 0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0023"); double double1 = org.apache.commons.math.util.FastMath.cosh(1.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5430806348152437d + "'", double1 == 1.5430806348152437d); }
public void test0024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0024"); double double2 = org.apache.commons.math.util.FastMath.hypot(0.0d, 1.5707963267948966d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5707963267948966d + "'", double2 == 1.5707963267948966d); }
public void test0025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0025"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex5 = complex3.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.5707963267948966d + "'", double4 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex5); }
public void test0026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0026"); double double1 = org.apache.commons.math.util.FastMath.asinh((double) 1L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.8813735870195429d + "'", double1 == 0.8813735870195429d); }
public void test0027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0027"); double double1 = org.apache.commons.math.util.FastMath.floor(100.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 100.0d + "'", double1 == 100.0d); }
public void test0028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0028"); double double2 = org.apache.commons.math.util.FastMath.scalb((-0.9999999999999999d), 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.9999999999999999d) + "'", double2 == (-0.9999999999999999d)); }
public void test0029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0029"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0.0f, (double) (byte) 100); java.lang.String str3 = complex2.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(0.0, 100.0)" + "'", str3, "(0.0, 100.0)"); }
public void test0030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0030"); double double2 = org.apache.commons.math.util.FastMath.min(2.220446049250313E-16d, 14.142135623730951d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.220446049250313E-16d + "'", double2 == 2.220446049250313E-16d); }
public void test0031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0031"); double double1 = org.apache.commons.math.util.FastMath.log((double) '#'); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.5553480614894135d + "'", double1 == 3.5553480614894135d); }
public void test0032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0032"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex2 = complex0.divide(complex1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); }
public void test0033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0033"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) 97, (float) (short) 10); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 97.0f + "'", float2 == 97.0f); }
public void test0034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0034"); float float2 = org.apache.commons.math.util.FastMath.scalb(100.0f, (int) 'a'); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.5845633E31f + "'", float2 == 1.5845633E31f); }
public void test0035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0035"); int int2 = org.apache.commons.math.util.FastMath.max(0, 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100); }
public void test0036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0036"); float float1 = org.apache.commons.math.util.FastMath.signum((float) (byte) 100); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0037"); double double1 = org.apache.commons.math.util.FastMath.asin((double) 1.4E-45f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.401298464324817E-45d + "'", double1 == 1.401298464324817E-45d); }
public void test0038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0038"); int int2 = org.apache.commons.math.util.FastMath.max((-52), 10); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10); }
public void test0039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0039"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((double) 1.1920929E-7f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.830189170012751E-6d + "'", double1 == 6.830189170012751E-6d); }
public void test0040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0040"); double double1 = org.apache.commons.math.util.FastMath.signum(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0041"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(1.5430806348152437d); org.junit.Assert.assertNotNull(complex1); }
public void test0042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0042"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) (-52)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5); }
public void test0043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0043"); long long2 = org.apache.commons.math.util.FastMath.min((long) '#', (long) (byte) 100); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L); }
public void test0044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0044"); int int2 = org.apache.commons.math.util.FastMath.min((int) (short) 10, 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0045"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex2 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex3 = complex1.add(complex2); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } }
public void test0046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0046"); int int1 = org.apache.commons.math.util.FastMath.abs(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0047"); double double1 = org.apache.commons.math.util.FastMath.acos(1.5707963267948966d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0048"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 1, 3.5553480614894135d); org.junit.Assert.assertNotNull(complex2); }
public void test0049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0049"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((int) 'a'); boolean boolean8 = complex5.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test0050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0050"); double double1 = org.apache.commons.math.util.FastMath.sin(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0051"); long long2 = org.apache.commons.math.util.FastMath.max((long) (byte) 100, 35L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L); }
public void test0052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0052"); float float1 = org.apache.commons.math.util.FastMath.ulp((-1.0f)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.1920929E-7f + "'", float1 == 1.1920929E-7f); }
public void test0053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0053"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (byte) 10, (double) ' '); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList4 = complex2.nthRoot((-52)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -52"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); }
public void test0054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0054"); double double1 = org.apache.commons.math.util.FastMath.asin(6.830189170012752E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.830189170065858E-6d + "'", double1 == 6.830189170065858E-6d); }
public void test0055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0055"); double double1 = org.apache.commons.math.util.FastMath.expm1(4.9E-324d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.9E-324d + "'", double1 == 4.9E-324d); }
public void test0056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0056"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex11.add(complex20); double double25 = complex24.getImaginary(); java.lang.Class<?> wildcardClass26 = complex24.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(wildcardClass26); }
public void test0057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0057"); int int1 = org.apache.commons.math.util.FastMath.getExponent(0.0f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-127) + "'", int1 == (-127)); }
public void test0058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0058"); float float2 = org.apache.commons.math.util.FastMath.scalb(97.0f, 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 97.0f + "'", float2 == 97.0f); }
public void test0059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0059"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); double double14 = complex12.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.5707963267948966d + "'", double14 == 1.5707963267948966d); }
public void test0060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0060"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) (-18)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.9073486E-6f + "'", float1 == 1.9073486E-6f); }
public void test0061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0061"); double double2 = org.apache.commons.math.util.FastMath.min((-1.4987863014408054d), 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.4987863014408054d) + "'", double2 == (-1.4987863014408054d)); }
public void test0062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0062"); java.lang.Number number0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException(number0, (java.lang.Number) 1.5515679276951895d, false); java.lang.String str4 = numberIsTooSmallException3.toString(); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.math.exception.NumberIsTooSmallException: null is smaller than, or equal to, the minimum (1.552)" + "'", str4, "org.apache.commons.math.exception.NumberIsTooSmallException: null is smaller than, or equal to, the minimum (1.552)"); }
public void test0063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0063"); float float1 = org.apache.commons.math.util.FastMath.signum((float) 5); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0064"); double double1 = org.apache.commons.math.util.FastMath.signum(1.401298464324817E-45d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0065"); double double2 = org.apache.commons.math.util.FastMath.pow((-57.29577951308232d), (double) 9223372036854775807L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY); }
public void test0066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0066"); double double1 = org.apache.commons.math.util.FastMath.abs((double) 9.536743E-7f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 9.5367431640625E-7d + "'", double1 == 9.5367431640625E-7d); }
public void test0067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0067"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; java.lang.Class<?> wildcardClass1 = complex0.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(wildcardClass1); }
public void test0068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0068"); double double1 = org.apache.commons.math.util.FastMath.nextUp((double) 10L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 10.000000000000002d + "'", double1 == 10.000000000000002d); }
public void test0069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0069"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex10.divide(1.9073486328113436E-6d); java.lang.Class<?> wildcardClass16 = complex15.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(wildcardClass16); }
public void test0070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0070"); int int1 = org.apache.commons.math.util.FastMath.getExponent((double) 9.536743E-7f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-20) + "'", int1 == (-20)); }
public void test0071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0071"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z(); boolean boolean22 = complex21.isNaN(); org.apache.commons.math.complex.Complex complex23 = complex21.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex23); }
public void test0072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0072"); double double1 = org.apache.commons.math.util.FastMath.ceil((-1.5574077246549023d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test0073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0073"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext4 = numberIsTooSmallException3.getContext(); java.lang.Throwable[] throwableArray5 = numberIsTooSmallException3.getSuppressed(); java.lang.Number number6 = numberIsTooSmallException3.getArgument(); org.junit.Assert.assertNotNull(exceptionContext4); org.junit.Assert.assertNotNull(throwableArray5); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 0.0d + "'", number6, 0.0d); }
public void test0074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0074"); double double2 = org.apache.commons.math.util.FastMath.hypot((double) 0L, (-0.9999999999999999d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.9999999999999999d + "'", double2 == 0.9999999999999999d); }
public void test0075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0075"); double double1 = org.apache.commons.math.util.FastMath.tanh(6.830189170065858E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.830189169959645E-6d + "'", double1 == 6.830189169959645E-6d); }
public void test0076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0076"); long long1 = org.apache.commons.math.util.FastMath.round((-57.29577951308232d)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-57L) + "'", long1 == (-57L)); }
public void test0077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0077"); double double1 = org.apache.commons.math.util.FastMath.exp(0.9999876561221204d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.7182482745272054d + "'", double1 == 2.7182482745272054d); }
public void test0078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0078"); double double1 = org.apache.commons.math.util.FastMath.toRadians((double) 6); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.10471975511965978d + "'", double1 == 0.10471975511965978d); }
public void test0079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0079"); double double2 = org.apache.commons.math.util.FastMath.max((double) 1.4E-45f, 3.732511156817248d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 3.732511156817248d + "'", double2 == 3.732511156817248d); }
public void test0080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0080"); double double1 = org.apache.commons.math.util.FastMath.asinh(0.9999876561221204d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.8813648585528526d + "'", double1 == 0.8813648585528526d); }
public void test0081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0081"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); double double21 = complex20.getImaginary(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue(Double.isNaN(double21)); }
public void test0082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0082"); double double1 = org.apache.commons.math.util.FastMath.tanh(1.0232274785475506d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.7711778429329054d + "'", double1 == 0.7711778429329054d); }
public void test0083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0083"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex14 = complex6.multiply((int) (short) 0); double double15 = complex6.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); }
public void test0084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0084"); long long1 = org.apache.commons.math.util.FastMath.abs((long) (-18)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 18L + "'", long1 == 18L); }
public void test0085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0085"); float float2 = org.apache.commons.math.util.FastMath.scalb(5.5459714E30f, 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 5.5459714E30f + "'", float2 == 5.5459714E30f); }
public void test0086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0086"); float float2 = org.apache.commons.math.util.FastMath.min((float) 10, (float) (short) 100); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f); }
public void test0087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0087"); double double2 = org.apache.commons.math.util.FastMath.atan2((double) 1.5845633E31f, (double) (byte) 10); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5707963267948966d + "'", double2 == 1.5707963267948966d); }
public void test0088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0088"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex2.equals((java.lang.Object) (-0.807398602382685d)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test0089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0089"); float float1 = org.apache.commons.math.util.FastMath.ulp(10.000001f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 9.536743E-7f + "'", float1 == 9.536743E-7f); }
public void test0090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0090"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex12 = complex9.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0091"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) (byte) 0, (float) (byte) -1); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-0.0f) + "'", float2 == (-0.0f)); }
public void test0092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0092"); double double1 = org.apache.commons.math.util.FastMath.acosh((double) (-18)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0093"); long long2 = org.apache.commons.math.util.FastMath.max((long) 'a', (long) (-52)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 97L + "'", long2 == 97L); }
public void test0094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0094"); double double1 = org.apache.commons.math.util.FastMath.log10((double) (-127)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0095"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) 100L, (float) ' '); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f); }
public void test0096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0096"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex2 = complex0.multiply(35); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); }
public void test0097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0097"); int int2 = org.apache.commons.math.util.FastMath.max(0, 35); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35); }
public void test0098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0098"); double double1 = org.apache.commons.math.util.FastMath.signum((double) 0.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0099"); int int1 = org.apache.commons.math.util.FastMath.round((float) 10L); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10); }
public void test0100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0100"); double double2 = org.apache.commons.math.util.FastMath.min(1.5607966601082315d, 100.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5607966601082315d + "'", double2 == 1.5607966601082315d); }
public void test0101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0101"); double double2 = org.apache.commons.math.util.FastMath.atan2(10.0d, (-5.117509926296107d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.0438004761129083d + "'", double2 == 2.0438004761129083d); }
public void test0102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0102"); double double2 = org.apache.commons.math.util.FastMath.copySign((-5.117509926296107d), 1.7453292519943295d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 5.117509926296107d + "'", double2 == 5.117509926296107d); }
public void test0103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0103"); java.lang.Number number0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException(number0); }
public void test0104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0104"); double double1 = org.apache.commons.math.util.FastMath.tan(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0105"); long long1 = org.apache.commons.math.util.FastMath.abs((long) 5); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 5L + "'", long1 == 5L); }
public void test0106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0106"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(0.0d, (double) (-18)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-4.9E-324d) + "'", double2 == (-4.9E-324d)); }
public void test0107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0107"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.sqrt(); boolean boolean37 = complex8.equals((java.lang.Object) 1.5607966601082315d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); }
public void test0108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0108"); double double1 = org.apache.commons.math.util.FastMath.toDegrees(2.993222846126381d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 171.49903622517783d + "'", double1 == 171.49903622517783d); }
public void test0109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0109"); int int1 = org.apache.commons.math.util.FastMath.getExponent(5.5459714E30f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 102 + "'", int1 == 102); }
public void test0110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0110"); double double1 = org.apache.commons.math.util.FastMath.nextUp(7.62939453110197E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.629394531101971E-6d + "'", double1 == 7.629394531101971E-6d); }
public void test0111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0111"); double double1 = org.apache.commons.math.util.FastMath.tan((double) 102); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 9.79298026353578d + "'", double1 == 9.79298026353578d); }
public void test0112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0112"); float float1 = org.apache.commons.math.util.FastMath.abs((float) (-57L)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 57.0f + "'", float1 == 57.0f); }
public void test0113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0113"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, 1.0d); }
public void test0114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0114"); int int1 = org.apache.commons.math.util.FastMath.round(0.0f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0115"); double double2 = org.apache.commons.math.util.FastMath.scalb(Double.NEGATIVE_INFINITY, 10); org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.NEGATIVE_INFINITY + "'", double2 == Double.NEGATIVE_INFINITY); }
public void test0116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0116"); int int1 = org.apache.commons.math.util.FastMath.round((float) 35); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 35 + "'", int1 == 35); }
public void test0117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0117"); double double1 = org.apache.commons.math.util.FastMath.rint((double) (byte) 0); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0118"); double double1 = org.apache.commons.math.util.FastMath.cos(100.0002495400294d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.8624452039349472d + "'", double1 == 0.8624452039349472d); }
public void test0119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0119"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((-20)); java.lang.Class<?> wildcardClass6 = complex3.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test0120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0120"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 2.718281828459045d, (java.lang.Number) (-1.4987863014408054d), false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 2.718281828459045d + "'", number5, 2.718281828459045d); }
public void test0121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0121"); double double1 = org.apache.commons.math.util.FastMath.asin(35.00000000000001d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0122"); double double1 = org.apache.commons.math.util.FastMath.exp(9.536747711537455E-7d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.000000953675226d + "'", double1 == 1.000000953675226d); }
public void test0123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0123"); double double2 = org.apache.commons.math.util.FastMath.min(6.830189170118964E-6d, (double) (-18)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-18.0d) + "'", double2 == (-18.0d)); }
public void test0124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0124"); int int2 = org.apache.commons.math.util.FastMath.max((-127), 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0125"); double double1 = org.apache.commons.math.util.FastMath.log1p((double) 5.5459714E30f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 70.7906245758041d + "'", double1 == 70.7906245758041d); }
public void test0126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0126"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); org.apache.commons.math.complex.Complex complex41 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex42 = complex2.multiply(complex41); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); }
public void test0127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0127"); double double1 = org.apache.commons.math.util.FastMath.log1p((double) 10); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.3978952727983707d + "'", double1 == 2.3978952727983707d); }
public void test0128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0128"); double double2 = org.apache.commons.math.util.FastMath.scalb((double) (short) 1, (-127)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 5.8774717541114375E-39d + "'", double2 == 5.8774717541114375E-39d); }
public void test0129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0129"); double double1 = org.apache.commons.math.util.FastMath.cbrt(0.9999999999999999d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0130"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); boolean boolean5 = numberIsTooSmallException4.getBoundIsAllowed(); java.lang.Number number6 = numberIsTooSmallException4.getMin(); // The following exception was thrown during execution in test generation try { java.lang.String str7 = numberIsTooSmallException4.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 1.0d + "'", number6, 1.0d); }
public void test0131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0131"); double double1 = org.apache.commons.math.util.FastMath.floor(2.7182482745272054d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.0d + "'", double1 == 2.0d); }
public void test0132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0132"); double double1 = org.apache.commons.math.util.FastMath.sqrt(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0133"); float float1 = org.apache.commons.math.util.FastMath.signum(3.8146973E-6f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0134"); double double1 = org.apache.commons.math.util.FastMath.floor((-1.0d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test0135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0135"); double double1 = org.apache.commons.math.util.FastMath.log(6.830189170065858E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-11.894158187830156d) + "'", double1 == (-11.894158187830156d)); }
public void test0136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0136"); float float1 = org.apache.commons.math.util.FastMath.signum(5.5459714E30f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0137"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex4 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); }
public void test0138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0138"); double double1 = org.apache.commons.math.util.FastMath.toRadians((-1.4987863014408054d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.026158755743930288d) + "'", double1 == (-0.026158755743930288d)); }
public void test0139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0139"); int int1 = org.apache.commons.math.util.FastMath.getExponent((double) 6); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2); }
public void test0140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0140"); float float1 = org.apache.commons.math.util.FastMath.nextUp((float) 100L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 100.00001f + "'", float1 == 100.00001f); }
public void test0141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0141"); double double1 = org.apache.commons.math.util.FastMath.acos(4.9E-324d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5707963267948966d + "'", double1 == 1.5707963267948966d); }
public void test0142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0142"); float float2 = org.apache.commons.math.util.FastMath.min((float) (short) 10, 10.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f); }
public void test0143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0143"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.acos(); boolean boolean36 = complex8.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); }
public void test0144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0144"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.tanh(); org.apache.commons.math.complex.Complex complex12 = complex4.cos(); org.apache.commons.math.complex.Complex complex14 = complex4.pow((double) (byte) -1); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex22 = complex21.tanh(); org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex4.add(complex23); boolean boolean25 = complex4.isInfinite(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); }
public void test0145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0145"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); double double11 = complex1.abs(); boolean boolean12 = complex1.isNaN(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0146"); float float1 = org.apache.commons.math.util.FastMath.signum(1.4E-45f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0147"); double double1 = org.apache.commons.math.util.FastMath.atan(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0148"); float float2 = org.apache.commons.math.util.FastMath.min(96.99999f, (float) (-20)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-20.0f) + "'", float2 == (-20.0f)); }
public void test0149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0149"); double double1 = org.apache.commons.math.util.FastMath.exp(4.9E-324d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0150"); double double1 = org.apache.commons.math.util.FastMath.log(100.0002495400294d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.605172681385272d + "'", double1 == 4.605172681385272d); }
public void test0151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0151"); double double1 = org.apache.commons.math.util.FastMath.ceil(Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test0152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0152"); double double1 = org.apache.commons.math.util.FastMath.log10(1.9073486328113436E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-5.719569917615906d) + "'", double1 == (-5.719569917615906d)); }
public void test0153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0153"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.sqrt(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList37 = complex35.nthRoot((int) (short) -1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -1"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); }
public void test0154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0154"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 171.49903622517783d); java.lang.Number number3 = notPositiveException2.getArgument(); org.junit.Assert.assertEquals("'" + number3 + "' != '" + 171.49903622517783d + "'", number3, 171.49903622517783d); }
public void test0155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0155"); double double2 = org.apache.commons.math.util.FastMath.min(2.993222846126381d, (double) 35); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.993222846126381d + "'", double2 == 2.993222846126381d); }
public void test0156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0156"); int int1 = org.apache.commons.math.util.FastMath.round(1.4E-45f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0157"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); java.lang.Object obj6 = null; boolean boolean7 = complex2.equals(obj6); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test0158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0158"); double double1 = org.apache.commons.math.util.FastMath.tan(0.8813648585528526d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.213031721958534d + "'", double1 == 1.213031721958534d); }
public void test0159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0159"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); java.lang.Throwable[] throwableArray7 = numberIsTooSmallException4.getSuppressed(); java.lang.Class<?> wildcardClass8 = numberIsTooSmallException4.getClass(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 1.0d + "'", number5, 1.0d); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(throwableArray7); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test0160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0160"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable1, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number6 = numberIsTooSmallException5.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = numberIsTooSmallException5.getContext(); java.lang.Throwable[] throwableArray8 = numberIsTooSmallException5.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray8); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 1.0d + "'", number6, 1.0d); org.junit.Assert.assertNotNull(exceptionContext7); org.junit.Assert.assertNotNull(throwableArray8); }
public void test0161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0161"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.negate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); }
public void test0162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0162"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((double) (byte) 1); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 57.29577951308232d + "'", double1 == 57.29577951308232d); }
public void test0163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0163"); double double2 = org.apache.commons.math.util.FastMath.log(2.7182482745272054d, 1.0000000000233258d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.3326073681307428E-11d + "'", double2 == 2.3326073681307428E-11d); }
public void test0164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0164"); double double1 = org.apache.commons.math.util.FastMath.rint(1.0E114d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0E114d + "'", double1 == 1.0E114d); }
public void test0165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0165"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((double) 35L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2005.3522829578812d + "'", double1 == 2005.3522829578812d); }
public void test0166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0166"); double double1 = org.apache.commons.math.util.FastMath.cos(7.642595581083531E24d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.9650615547698913d) + "'", double1 == (-0.9650615547698913d)); }
public void test0167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0167"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex1 = complex0.log(); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex1.pow((double) (-20.0f)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); }
public void test0168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0168"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(32.0d, (-13.862943611198906d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.274112777602188d + "'", double2 == 4.274112777602188d); }
public void test0169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0169"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex10.cosh(); java.lang.String str12 = complex11.toString(); org.apache.commons.math.complex.Complex complex13 = complex1.add(complex11); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(1.0, 0.0)" + "'", str12, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex13); }
public void test0170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0170"); double double2 = org.apache.commons.math.util.FastMath.hypot(4.065529698164491d, 2.993222846126381d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 5.048555707648512d + "'", double2 == 5.048555707648512d); }
public void test0171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0171"); float float1 = org.apache.commons.math.util.FastMath.nextUp(52.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 52.000004f + "'", float1 == 52.000004f); }
public void test0172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0172"); double double1 = org.apache.commons.math.util.FastMath.asin(0.8813735870195429d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0787619161000124d + "'", double1 == 1.0787619161000124d); }
public void test0173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0173"); double double1 = org.apache.commons.math.util.FastMath.acos((double) 20.0f); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0174"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex6.getArgument(); boolean boolean8 = complex6.isInfinite(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); org.apache.commons.math.complex.Complex complex11 = complex9.add(0.0d); double double12 = complex11.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); }
public void test0175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0175"); long long2 = org.apache.commons.math.util.FastMath.max((long) 0, (long) (-1)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test0176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0176"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); double double3 = complex2.getReal(); double double4 = complex2.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 36.0d + "'", double3 == 36.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 36.0d + "'", double4 == 36.0d); }
public void test0177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0177"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.asin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); }
public void test0178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0178"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double7 = complex6.abs(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex19.reciprocal(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex26 = complex20.multiply(complex25); java.lang.Object[] objArray27 = new java.lang.Object[] { 0.0f, (short) 0, complex12, complex25 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException28 = new org.apache.commons.math.exception.NullArgumentException(localizable1, objArray27); org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray27); org.apache.commons.math.exception.util.ExceptionContext exceptionContext30 = nullArgumentException29.getContext(); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(exceptionContext30); }
public void test0179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0179"); double double1 = org.apache.commons.math.util.FastMath.sinh(10.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 11013.232874703393d + "'", double1 == 11013.232874703393d); }
public void test0180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0180"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); boolean boolean26 = complex24.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); double double31 = complex30.getReal(); org.apache.commons.math.complex.Complex complex33 = complex30.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex34 = complex24.multiply(complex33); org.apache.commons.math.complex.Complex complex35 = complex34.cosh(); boolean boolean36 = complex34.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField37 = complex34.getField(); org.apache.commons.math.complex.Complex complex38 = complex11.pow(complex34); org.apache.commons.math.complex.Complex complex39 = complex4.subtract(complex11); org.apache.commons.math.complex.ComplexField complexField40 = complex39.getField(); java.lang.String str41 = complex39.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complexField37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complexField40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(0.0, 0.5574077246549021)" + "'", str41, "(0.0, 0.5574077246549021)"); }
public void test0181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0181"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1L), (double) 52.0f); }
public void test0182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0182"); double double1 = org.apache.commons.math.util.FastMath.log(3.6882538673612966d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.3051531393776674d + "'", double1 == 1.3051531393776674d); }
public void test0183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0183"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); boolean boolean26 = complex24.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex30 = complex29.log(); double double31 = complex30.getReal(); org.apache.commons.math.complex.Complex complex33 = complex30.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex34 = complex24.multiply(complex33); org.apache.commons.math.complex.Complex complex35 = complex34.cosh(); boolean boolean36 = complex34.isInfinite(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField37 = complex34.getField(); org.apache.commons.math.complex.Complex complex38 = complex11.pow(complex34); org.apache.commons.math.complex.Complex complex39 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex40 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex41 = complex39.pow(complex40); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false); org.junit.Assert.assertNotNull(complexField37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); }
public void test0184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0184"); double double2 = org.apache.commons.math.util.FastMath.max(1.9073486328113436E-6d, (double) 100.00001f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 100.00000762939453d + "'", double2 == 100.00000762939453d); }
public void test0185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0185"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Object[] objArray1 = null; org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException2 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, objArray1); }
public void test0186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0186"); double double1 = org.apache.commons.math.util.FastMath.expm1((double) 1L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.7182818284590453d + "'", double1 == 1.7182818284590453d); }
public void test0187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0187"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); // The following exception was thrown during execution in test generation try { java.lang.String str7 = numberIsTooSmallException4.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + number5 + "' != '" + 3.831008000716577E22d + "'", number5, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext6); }
public void test0188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0188"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((double) 3.8146973E-6f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.1856605344040803E-4d + "'", double1 == 2.1856605344040803E-4d); }
public void test0189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0189"); double double1 = org.apache.commons.math.util.FastMath.exp(57.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.685719999335932E24d + "'", double1 == 5.685719999335932E24d); }
public void test0190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0190"); double double1 = org.apache.commons.math.util.FastMath.abs((double) (short) 0); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0191"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.5515679276951895d, 6.830189170065858E-6d); }
public void test0192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0192"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NullArgumentException nullArgumentException2 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable[] throwableArray3 = nullArgumentException2.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) throwableArray3); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException5 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray3); org.junit.Assert.assertNotNull(throwableArray3); }
public void test0193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0193"); double double1 = org.apache.commons.math.util.FastMath.ceil(2.220446049250313E-16d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0194"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); java.lang.String str19 = complex16.toString(); java.lang.Class<?> wildcardClass20 = complex16.getClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(NaN, NaN)" + "'", str19, "(NaN, NaN)"); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test0195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0195"); double double1 = org.apache.commons.math.util.FastMath.atan(70.7906245758041d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5566711019112176d + "'", double1 == 1.5566711019112176d); }
public void test0196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0196"); long long2 = org.apache.commons.math.util.FastMath.min(3L, (long) 2); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2L + "'", long2 == 2L); }
public void test0197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0197"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); org.apache.commons.math.complex.Complex complex17 = complex11.pow((double) (short) 100); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField18 = complex11.getField(); org.apache.commons.math.complex.Complex complex19 = complexField18.getZero(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass20 = complexField18.getRuntimeClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complexField18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test0198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0198"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); java.util.List<org.apache.commons.math.complex.Complex> complexList22 = complex17.nthRoot(102); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complexList22); }
public void test0199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0199"); int int2 = org.apache.commons.math.util.FastMath.min((int) (short) 10, (-1023)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1023) + "'", int2 == (-1023)); }
public void test0200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0200"); double double1 = org.apache.commons.math.util.FastMath.cbrt(6.830189170012752E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.018973359867228756d + "'", double1 == 0.018973359867228756d); }
public void test0201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0201"); double double1 = org.apache.commons.math.util.FastMath.asin(6.830189170065858E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.830189170118965E-6d + "'", double1 == 6.830189170118965E-6d); }
public void test0202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0202"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.5403023058681398d); org.junit.Assert.assertNotNull(complex1); }
public void test0203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0203"); float float2 = org.apache.commons.math.util.FastMath.min(1.9073486E-6f, (float) 1L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.9073486E-6f + "'", float2 == 1.9073486E-6f); }
public void test0204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0204"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-0.02001872128744539d), 5.048555707648512d); org.junit.Assert.assertNotNull(complex2); }
public void test0205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0205"); float float1 = org.apache.commons.math.util.FastMath.abs(0.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test0206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0206"); double double1 = org.apache.commons.math.util.FastMath.rint(7.629394531101971E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0207"); double double1 = org.apache.commons.math.util.FastMath.cos(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0208"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply(3.141592653589793d); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex27.sqrt(); org.apache.commons.math.complex.Complex complex33 = complex32.negate(); boolean boolean34 = complex18.equals((java.lang.Object) complex33); boolean boolean35 = complex18.isInfinite(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); }
public void test0209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0209"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.7182482745272054d, 9.536747711537455E-7d); org.apache.commons.math.complex.Complex complex3 = complex2.acos(); org.apache.commons.math.complex.Complex complex4 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex5 = complex3.multiply(complex4); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0210"); double double1 = org.apache.commons.math.util.FastMath.asin((double) (-1)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.5707963267948966d) + "'", double1 == (-1.5707963267948966d)); }
public void test0211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0211"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (short) 100, (java.lang.Number) 5.048555707648512d, true); }
public void test0212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0212"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) 35L); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5); }
public void test0213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0213"); double double1 = org.apache.commons.math.util.FastMath.nextUp(1.5430806348152437d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.543080634815244d + "'", double1 == 1.543080634815244d); }
public void test0214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0214"); double double1 = org.apache.commons.math.util.FastMath.sinh((double) 20.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.4258259770489514E8d + "'", double1 == 2.4258259770489514E8d); }
public void test0215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0215"); double double1 = org.apache.commons.math.util.FastMath.acos(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5707963267948966d + "'", double1 == 1.5707963267948966d); }
public void test0216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0216"); double double1 = org.apache.commons.math.util.FastMath.atan((-1.5574077246549023d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test0217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0217"); double double1 = org.apache.commons.math.util.FastMath.atanh((double) 20L); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0218"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex28 = complex23.negate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); }
public void test0219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0219"); double double2 = org.apache.commons.math.util.FastMath.pow((-2.2165681500327987d), (-11.894158187830156d)); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test0220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0220"); double double1 = org.apache.commons.math.util.FastMath.log(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.NEGATIVE_INFINITY + "'", double1 == Double.NEGATIVE_INFINITY); }
public void test0221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0221"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; java.lang.String str1 = complex0.toString(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex2.add((double) 35); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z(); org.apache.commons.math.complex.Complex complex16 = complex8.divide(complex14); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex19.tanh(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double27 = complex26.abs(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = complex26.divide(complex32); java.lang.String str36 = complex32.toString(); org.apache.commons.math.complex.Complex complex37 = complex21.divide(complex32); org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z(); org.apache.commons.math.complex.Complex complex39 = complex8.subtract(complex38); org.apache.commons.math.complex.Complex complex40 = complex4.divide(complex8); org.apache.commons.math.complex.Complex complex42 = complex4.pow(1.0d); double double43 = complex42.getImaginary(); org.apache.commons.math.complex.Complex complex44 = complex42.sqrt1z(); org.apache.commons.math.complex.Complex complex45 = complex0.divide(complex42); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(Infinity, Infinity)" + "'", str1, "(Infinity, Infinity)"); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(0.0, 1.557407724654902)" + "'", str36, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); }
public void test0222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0222"); double double1 = org.apache.commons.math.util.FastMath.tan(1.543080634815244d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 36.07140440247275d + "'", double1 == 36.07140440247275d); }
public void test0223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0223"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); java.lang.String str8 = complex7.toString(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((int) ' '); org.apache.commons.math.complex.Complex complex12 = complex9.conjugate(); org.apache.commons.math.complex.Complex complex13 = complex9.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0224"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (byte) 10, (double) ' '); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((int) (short) 0); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex14.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex18 = complex14.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex19 = complex18.sinh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex24.tanh(); org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex29 = complex26.add(complex28); org.apache.commons.math.complex.Complex complex30 = complex19.add(complex26); org.apache.commons.math.complex.Complex complex32 = complex30.pow(100.0d); boolean boolean33 = complex2.equals((java.lang.Object) complex32); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test0225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0225"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(10.0f, 1.0232274785475506d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 9.999999f + "'", float2 == 9.999999f); }
public void test0226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0226"); double double2 = org.apache.commons.math.util.FastMath.log((double) 35, (double) (short) -1); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test0227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0227"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); boolean boolean15 = complex13.isInfinite(); org.apache.commons.math.complex.Complex complex16 = complex13.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(complex16); }
public void test0228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0228"); double double2 = org.apache.commons.math.util.FastMath.copySign(2.972195942014659d, 117.10114144809786d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.972195942014659d + "'", double2 == 2.972195942014659d); }
public void test0229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0229"); double double1 = org.apache.commons.math.util.FastMath.sin((-57.29577951308232d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.6795226183513794d) + "'", double1 == (-0.6795226183513794d)); }
public void test0230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0230"); float float2 = org.apache.commons.math.util.FastMath.copySign(0.0f, 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test0231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0231"); long long2 = org.apache.commons.math.util.FastMath.max((long) 18, 2L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 18L + "'", long2 == 18L); }
public void test0232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0232"); double double1 = org.apache.commons.math.util.FastMath.cos(14.142135623730951d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.004968662132594296d) + "'", double1 == (-0.004968662132594296d)); }
public void test0233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0233"); double double1 = org.apache.commons.math.util.FastMath.rint(9.29117392892733d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 9.0d + "'", double1 == 9.0d); }
public void test0234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0234"); double double1 = org.apache.commons.math.util.FastMath.rint(1.3296138015683576d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0235"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0236"); double double2 = org.apache.commons.math.util.FastMath.atan2(2.1474836469999998E9d, 71.48377175636405d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5707962935076714d + "'", double2 == 1.5707962935076714d); }
public void test0237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0237"); long long1 = org.apache.commons.math.util.FastMath.round((-794.2881605495458d)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-794L) + "'", long1 == (-794L)); }
public void test0238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0238"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 6, (double) 7.6293945E-6f); org.apache.commons.math.complex.Complex complex11 = complex7.divide(complex10); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0239"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); }
public void test0240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0240"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) (-57L)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5); }
public void test0241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0241"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex23 = complex15.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex25.subtract(complex32); org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex34); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); double double37 = complex35.getArgument(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2.9870930417485533d + "'", double37 == 2.9870930417485533d); }
public void test0242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0242"); int int1 = org.apache.commons.math.util.FastMath.getExponent((double) 10.0f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3); }
public void test0243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0243"); int int1 = org.apache.commons.math.util.FastMath.abs((int) (short) 100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 100 + "'", int1 == 100); }
public void test0244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0244"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder((double) 'a', (double) (byte) 100); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-3.0d) + "'", double2 == (-3.0d)); }
public void test0245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0245"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.Class<?> wildcardClass12 = complex8.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test0246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0246"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex7.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test0247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0247"); float float1 = org.apache.commons.math.util.FastMath.abs(100.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 100.0f + "'", float1 == 100.0f); }
public void test0248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0248"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex8.asin(); org.apache.commons.math.complex.Complex complex11 = complex8.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.5707963267948966d) + "'", double9 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test0249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0249"); float float2 = org.apache.commons.math.util.FastMath.scalb(52.000004f, (-127)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 3.0562855E-37f + "'", float2 == 3.0562855E-37f); }
public void test0250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0250"); double double1 = org.apache.commons.math.util.FastMath.abs(35.00000000000001d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 35.00000000000001d + "'", double1 == 35.00000000000001d); }
public void test0251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0251"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); double double21 = complex4.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); }
public void test0252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0252"); double double2 = org.apache.commons.math.util.FastMath.max((-1.4987863014408054d), 7.105427357601002E-15d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 7.105427357601002E-15d + "'", double2 == 7.105427357601002E-15d); }
public void test0253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0253"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0f, (java.lang.Number) 2.0d, false); java.lang.Number number4 = numberIsTooSmallException3.getMin(); java.lang.Number number5 = numberIsTooSmallException3.getMin(); boolean boolean6 = numberIsTooSmallException3.getBoundIsAllowed(); boolean boolean7 = numberIsTooSmallException3.getBoundIsAllowed(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 2.0d + "'", number4, 2.0d); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 2.0d + "'", number5, 2.0d); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test0254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0254"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); org.apache.commons.math.complex.Complex complex9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex10 = complex8.add(complex9); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0255"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); org.apache.commons.math.complex.Complex complex32 = complex27.createComplex(11013.232874703393d, 0.0d); double double33 = complex32.getArgument(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); }
public void test0256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0256"); float float2 = org.apache.commons.math.util.FastMath.min((float) 100, 100.00001f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 100.0f + "'", float2 == 100.0f); }
public void test0257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0257"); long long2 = org.apache.commons.math.util.FastMath.min((long) (short) 1, (long) (-20)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-20L) + "'", long2 == (-20L)); }
public void test0258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0258"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex4 = complex1.pow((double) 0); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex4); }
public void test0259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0259"); double double1 = org.apache.commons.math.util.FastMath.nextUp(1.5566711019112176d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5566711019112178d + "'", double1 == 1.5566711019112178d); }
public void test0260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0260"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex15.exp(); double double18 = complex15.getArgument(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue(Double.isNaN(double18)); }
public void test0261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0261"); double double1 = org.apache.commons.math.util.FastMath.asin((double) 100); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0262"); double double1 = org.apache.commons.math.util.FastMath.asin(32.0d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0263"); long long1 = org.apache.commons.math.util.FastMath.round((double) 9223372036854775807L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 9223372036854775807L + "'", long1 == 9223372036854775807L); }
public void test0264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0264"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex17 = complex15.add(11013.232874703393d); java.util.List<org.apache.commons.math.complex.Complex> complexList19 = complex15.nthRoot(97); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complexList19); }
public void test0265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0265"); double double1 = org.apache.commons.math.util.FastMath.signum(1.3051531393776674d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0266"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex35 = complex34.log(); org.apache.commons.math.complex.Complex complex36 = complex35.reciprocal(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex41 = complex39.tanh(); org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = complex35.divide(complex41); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex49 = complex48.log(); org.apache.commons.math.complex.Complex complex50 = complex48.tanh(); org.apache.commons.math.complex.Complex complex52 = complex50.multiply((int) (short) 0); double double53 = complex52.getArgument(); org.apache.commons.math.complex.Complex complex54 = complex45.subtract(complex52); org.apache.commons.math.complex.Complex complex55 = complex52.reciprocal(); org.apache.commons.math.complex.Complex complex56 = complex43.add(complex52); org.apache.commons.math.complex.Complex complex57 = complex18.divide(complex43); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex60 = complex58.add((double) 35); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex64 = complex63.log(); org.apache.commons.math.complex.Complex complex65 = complex64.reciprocal(); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex69 = complex68.log(); org.apache.commons.math.complex.Complex complex70 = complex68.tanh(); org.apache.commons.math.complex.Complex complex71 = complex70.sqrt1z(); org.apache.commons.math.complex.Complex complex72 = complex64.divide(complex70); org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex76 = complex75.log(); org.apache.commons.math.complex.Complex complex77 = complex75.tanh(); org.apache.commons.math.complex.Complex complex79 = complex77.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double83 = complex82.abs(); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex91 = complex82.divide(complex88); java.lang.String str92 = complex88.toString(); org.apache.commons.math.complex.Complex complex93 = complex77.divide(complex88); org.apache.commons.math.complex.Complex complex94 = complex93.sqrt1z(); org.apache.commons.math.complex.Complex complex95 = complex64.subtract(complex94); org.apache.commons.math.complex.Complex complex96 = complex60.divide(complex64); org.apache.commons.math.complex.Complex complex98 = complex60.multiply(2.718281828459045d); org.apache.commons.math.complex.Complex complex99 = complex43.add(complex98); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0d + "'", double83 == 1.0d); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(0.0, 1.557407724654902)" + "'", str92, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertNotNull(complex96); org.junit.Assert.assertNotNull(complex98); org.junit.Assert.assertNotNull(complex99); }
public void test0267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0267"); double double1 = org.apache.commons.math.util.FastMath.atanh(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0268"); float float1 = org.apache.commons.math.util.FastMath.abs(3.8146973E-6f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 3.8146973E-6f + "'", float1 == 3.8146973E-6f); }
public void test0269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0269"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = numberIsTooSmallException6.getContext(); java.lang.Throwable[] throwableArray8 = numberIsTooSmallException6.getSuppressed(); org.apache.commons.math.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math.exception.NullArgumentException(localizable2, (java.lang.Object[]) throwableArray8); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) throwableArray8); org.apache.commons.math.exception.NullArgumentException nullArgumentException11 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) throwableArray8); org.junit.Assert.assertNotNull(exceptionContext7); org.junit.Assert.assertNotNull(throwableArray8); }
public void test0270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0270"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex21 = complex4.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test0271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0271"); double double1 = org.apache.commons.math.util.FastMath.toRadians((-0.026158755743930288d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-4.565564159565622E-4d) + "'", double1 == (-4.565564159565622E-4d)); }
public void test0272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0272"); double double1 = org.apache.commons.math.util.FastMath.rint(4.3713210687233457E-4d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0273"); int int1 = org.apache.commons.math.util.FastMath.abs((-127)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 127 + "'", int1 == 127); }
public void test0274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0274"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex13 = complex10.multiply(complex12); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test0275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0275"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-1023.0d)); java.lang.Number number2 = notPositiveException1.getArgument(); org.junit.Assert.assertEquals("'" + number2 + "' != '" + (-1023.0d) + "'", number2, (-1023.0d)); }
public void test0276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0276"); int int1 = org.apache.commons.math.util.FastMath.round((float) (-127)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-127) + "'", int1 == (-127)); }
public void test0277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0277"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double27 = complex26.abs(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex31 = complex30.log(); org.apache.commons.math.complex.Complex complex32 = complex30.tanh(); org.apache.commons.math.complex.Complex complex34 = complex32.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex35 = complex26.divide(complex32); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex39 = complex38.log(); org.apache.commons.math.complex.Complex complex40 = complex38.tanh(); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double46 = complex45.abs(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex50 = complex49.log(); org.apache.commons.math.complex.Complex complex51 = complex49.tanh(); org.apache.commons.math.complex.Complex complex53 = complex51.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex54 = complex45.divide(complex51); java.lang.String str55 = complex51.toString(); org.apache.commons.math.complex.Complex complex56 = complex40.divide(complex51); org.apache.commons.math.complex.Complex complex57 = complex32.subtract(complex40); org.apache.commons.math.complex.Complex complex58 = complex23.subtract(complex40); org.apache.commons.math.complex.Complex complex59 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex60 = complex23.subtract(complex59); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(0.0, 1.557407724654902)" + "'", str55, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); }
public void test0278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0278"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (-52), 1.3296138015683576d); org.junit.Assert.assertNotNull(complex2); }
public void test0279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0279"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(0.0f, 0.0d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test0280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0280"); int int1 = org.apache.commons.math.util.FastMath.round(1.9073486E-6f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0281"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.22340113731134706d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((int) (short) 0); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex4.subtract(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.reciprocal(); org.apache.commons.math.complex.Complex complex16 = complex14.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex17 = complex14.asin(); org.apache.commons.math.complex.Complex complex18 = complex2.multiply(complex14); org.apache.commons.math.complex.Complex complex21 = complex14.createComplex(0.8813735870195429d, 2.061153622438558E-9d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); }
public void test0282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0282"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex13 = complex10.add((double) 10L); org.apache.commons.math.complex.Complex complex14 = complex13.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); }
public void test0283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0283"); double double2 = org.apache.commons.math.util.FastMath.hypot(3.5553480614894135d, 97.00000000000023d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 97.06513534652069d + "'", double2 == 97.06513534652069d); }
public void test0284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0284"); double double2 = org.apache.commons.math.util.FastMath.max((double) 18, 2.4258259770489514E8d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.4258259770489514E8d + "'", double2 == 2.4258259770489514E8d); }
public void test0285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0285"); double double1 = org.apache.commons.math.util.FastMath.sinh((-4.9E-324d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-4.9E-324d) + "'", double1 == (-4.9E-324d)); }
public void test0286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0286"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); double double5 = complex2.getImaginary(); org.apache.commons.math.complex.Complex complex6 = complex2.tan(); org.apache.commons.math.complex.Complex complex7 = complex6.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0287"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex14 = complex6.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = complex14.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test0288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0288"); double double2 = org.apache.commons.math.util.FastMath.hypot(71.48377175636405d, 7.105427357601002E-15d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 71.48377175636405d + "'", double2 == 71.48377175636405d); }
public void test0289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0289"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double6 = complex5.abs(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex14 = complex5.divide(complex11); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex18.reciprocal(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex25 = complex19.multiply(complex24); java.lang.Object[] objArray26 = new java.lang.Object[] { 0.0f, (short) 0, complex11, complex24 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException27 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray26); org.apache.commons.math.exception.util.ExceptionContext exceptionContext28 = nullArgumentException27.getContext(); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(objArray26); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(exceptionContext28); }
public void test0290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0290"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(1.4E-45f, (double) 1.5845633E31f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.8E-45f + "'", float2 == 2.8E-45f); }
public void test0291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0291"); double double1 = org.apache.commons.math.util.FastMath.log1p(1.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.6931471805599453d + "'", double1 == 0.6931471805599453d); }
public void test0292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0292"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex16 = complex11.multiply((-4)); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); }
public void test0293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0293"); float float2 = org.apache.commons.math.util.FastMath.scalb(0.0f, (-1023)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test0294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0294"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex14 = complex6.multiply((int) (short) 0); java.lang.String str15 = complex6.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0.0, 0.0)" + "'", str15, "(0.0, 0.0)"); }
public void test0295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0295"); double double1 = org.apache.commons.math.util.FastMath.asinh((-2.3352273239847907d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.5842348303662568d) + "'", double1 == (-1.5842348303662568d)); }
public void test0296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0296"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(1.1752011936438014d, (double) 5.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.1752011936438014d + "'", double2 == 1.1752011936438014d); }
public void test0297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0297"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.acos(); org.apache.commons.math.complex.Complex complex17 = complex15.pow(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex20 = complex17.createComplex(1.000000953675226d, (double) 2147483647); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); }
public void test0298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0298"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((-0.004968662132594296d)); org.junit.Assert.assertNotNull(complex1); }
public void test0299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0299"); double double1 = org.apache.commons.math.util.FastMath.tanh(3.4999999999999997E-113d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.4999999999999997E-113d + "'", double1 == 3.4999999999999997E-113d); }
public void test0300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0300"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex16.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.pow((double) '4'); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex26 = complex24.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double30 = complex29.abs(); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex34 = complex33.log(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); org.apache.commons.math.complex.Complex complex37 = complex35.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex38 = complex29.divide(complex35); java.lang.String str39 = complex35.toString(); org.apache.commons.math.complex.Complex complex40 = complex24.divide(complex35); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex17.divide(complex40); org.apache.commons.math.complex.Complex complex43 = complex42.cos(); boolean boolean44 = complex13.equals((java.lang.Object) complex42); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(0.0, 1.557407724654902)" + "'", str39, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test0301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0301"); long long2 = org.apache.commons.math.util.FastMath.max((long) (short) 1, 100L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L); }
public void test0302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0302"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex36 = complex8.tanh(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex39 = complex36.multiply(complex38); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.5707963267948966d + "'", double37 == 1.5707963267948966d); }
public void test0303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0303"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); java.lang.String str12 = complex8.toString(); org.apache.commons.math.complex.Complex complex13 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex13.asin(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList17 = complex13.nthRoot((-1023)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -1,023"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(0.0, 1.557407724654902)" + "'", str12, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test0304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0304"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1.570796207585607d); }
public void test0305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0305"); long long1 = org.apache.commons.math.util.FastMath.abs((-794L)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 794L + "'", long1 == 794L); }
public void test0306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0306"); double double2 = org.apache.commons.math.util.FastMath.pow(57.29577951308232d, (double) (-18)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.2583571068820263E-32d + "'", double2 == 2.2583571068820263E-32d); }
public void test0307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0307"); double double1 = org.apache.commons.math.util.FastMath.ulp(0.018973359867228756d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.469446951953614E-18d + "'", double1 == 3.469446951953614E-18d); }
public void test0308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0308"); double double1 = org.apache.commons.math.util.FastMath.ceil((-1.0d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test0309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0309"); double double1 = org.apache.commons.math.util.FastMath.sqrt(0.5403023058681398d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.7350525871447157d + "'", double1 == 0.7350525871447157d); }
public void test0310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0310"); float float2 = org.apache.commons.math.util.FastMath.max(57.0f, 9.536743E-7f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 57.0f + "'", float2 == 57.0f); }
public void test0311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0311"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double7 = complex6.abs(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex15 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex19 = complex18.log(); org.apache.commons.math.complex.Complex complex20 = complex19.reciprocal(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex26 = complex20.multiply(complex25); java.lang.Object[] objArray27 = new java.lang.Object[] { 0.0f, (short) 0, complex12, complex25 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException28 = new org.apache.commons.math.exception.NullArgumentException(localizable1, objArray27); org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray27); java.lang.Throwable[] throwableArray30 = nullArgumentException29.getSuppressed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext31 = nullArgumentException29.getContext(); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(objArray27); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(throwableArray30); org.junit.Assert.assertNotNull(exceptionContext31); }
public void test0312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0312"); double double1 = org.apache.commons.math.util.FastMath.sin(3.6882538673612966d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.519837923761782d) + "'", double1 == (-0.519837923761782d)); }
public void test0313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0313"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 6, (double) (short) -1); org.apache.commons.math.complex.Complex complex3 = complex2.conjugate(); boolean boolean5 = complex2.equals((java.lang.Object) (short) -1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test0314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0314"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); double double4 = complex3.getArgument(); double double5 = complex3.abs(); java.util.List<org.apache.commons.math.complex.Complex> complexList7 = complex3.nthRoot((int) '#'); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.5707963267948966d + "'", double4 == 1.5707963267948966d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.5707963267948966d + "'", double5 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complexList7); }
public void test0315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0315"); double double1 = org.apache.commons.math.util.FastMath.floor(7.629394531101971E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0316"); double double2 = org.apache.commons.math.util.FastMath.pow(6.830189170118965E-6d, (double) 57.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 3.6531350888106995E-295d + "'", double2 == 3.6531350888106995E-295d); }
public void test0317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0317"); float float2 = org.apache.commons.math.util.FastMath.max((float) (byte) 10, (float) (-52)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f); }
public void test0318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0318"); double double1 = org.apache.commons.math.util.FastMath.log(0.8813735870195429d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.12627369409889855d) + "'", double1 == (-0.12627369409889855d)); }
public void test0319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0319"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(4.065529698164491d, 100.0002495400294d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.065529698164492d + "'", double2 == 4.065529698164492d); }
public void test0320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0320"); double double1 = org.apache.commons.math.util.FastMath.asin(2.9870930417485533d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0321"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex27.pow(100.0d); double double30 = complex29.abs(); org.apache.commons.math.complex.Complex complex32 = new org.apache.commons.math.complex.Complex((double) (-0.0f)); org.apache.commons.math.complex.Complex complex33 = complex29.add(complex32); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue(Double.isNaN(double30)); org.junit.Assert.assertNotNull(complex33); }
public void test0322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0322"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((double) 1.4E-45f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 8.028848784397557E-44d + "'", double1 == 8.028848784397557E-44d); }
public void test0323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0323"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0f, (java.lang.Number) 2.0d, false); java.lang.Number number4 = numberIsTooSmallException3.getMin(); java.lang.Number number5 = numberIsTooSmallException3.getMin(); boolean boolean6 = numberIsTooSmallException3.getBoundIsAllowed(); java.lang.Number number7 = numberIsTooSmallException3.getArgument(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 2.0d + "'", number4, 2.0d); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 2.0d + "'", number5, 2.0d); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 100.0f + "'", number7, 100.0f); }
public void test0324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0324"); double double1 = org.apache.commons.math.util.FastMath.rint((double) (-0.0f)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.0d) + "'", double1 == (-0.0d)); }
public void test0325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0325"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; double double1 = complex0.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test0326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0326"); int int2 = org.apache.commons.math.util.FastMath.min((-52), (-18)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-52) + "'", int2 == (-52)); }
public void test0327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0327"); double double2 = org.apache.commons.math.util.FastMath.pow(0.015050303523504572d, 8.028848784397557E-44d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test0328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0328"); double double1 = org.apache.commons.math.util.FastMath.nextUp(6.830189170065858E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.830189170065859E-6d + "'", double1 == 6.830189170065859E-6d); }
public void test0329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0329"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 10.000001f, number2, false); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double12 = complex11.abs(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex20 = complex11.divide(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); org.apache.commons.math.complex.Complex complex25 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex29.reciprocal(); org.apache.commons.math.complex.Complex complex31 = complex25.multiply(complex30); java.lang.Object[] objArray32 = new java.lang.Object[] { 0.0f, (short) 0, complex17, complex30 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException33 = new org.apache.commons.math.exception.NullArgumentException(localizable6, objArray32); org.apache.commons.math.exception.NullArgumentException nullArgumentException34 = new org.apache.commons.math.exception.NullArgumentException(localizable5, objArray32); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) nullArgumentException34); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException39 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext40 = numberIsTooSmallException39.getContext(); java.lang.Throwable[] throwableArray41 = numberIsTooSmallException39.getSuppressed(); java.lang.Number number42 = numberIsTooSmallException39.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext43 = numberIsTooSmallException39.getContext(); nullArgumentException34.addSuppressed((java.lang.Throwable) numberIsTooSmallException39); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(objArray32); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(exceptionContext40); org.junit.Assert.assertNotNull(throwableArray41); org.junit.Assert.assertEquals("'" + number42 + "' != '" + 0.0d + "'", number42, 0.0d); org.junit.Assert.assertNotNull(exceptionContext43); }
public void test0330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0330"); double double2 = org.apache.commons.math.util.FastMath.scalb((double) 6, (-1023)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.675221575521604E-308d + "'", double2 == 6.675221575521604E-308d); }
public void test0331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0331"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex35 = complex16.multiply(0.0d); double double36 = complex16.getArgument(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.5707963267948966d + "'", double36 == 1.5707963267948966d); }
public void test0332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0332"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NullArgumentException nullArgumentException1 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable[] throwableArray2 = nullArgumentException1.getSuppressed(); java.lang.Throwable[] throwableArray3 = nullArgumentException1.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray3); org.junit.Assert.assertNotNull(throwableArray2); org.junit.Assert.assertNotNull(throwableArray3); }
public void test0333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0333"); double double1 = org.apache.commons.math.util.FastMath.tan((-0.6795226183513794d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.807872122398715d) + "'", double1 == (-0.807872122398715d)); }
public void test0334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0334"); double double2 = org.apache.commons.math.util.FastMath.copySign(0.0d, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0335"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (byte) 0, (java.lang.Number) (-1), true); // The following exception was thrown during execution in test generation try { java.lang.String str5 = numberIsTooSmallException4.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0336"); float float2 = org.apache.commons.math.util.FastMath.copySign(9.536743E-7f, 100.00001f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 9.536743E-7f + "'", float2 == 9.536743E-7f); }
public void test0337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0337"); double double1 = org.apache.commons.math.util.FastMath.toRadians(6.830189170118964E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.19209289552635E-7d + "'", double1 == 1.19209289552635E-7d); }
public void test0338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0338"); double double1 = org.apache.commons.math.util.FastMath.ceil(2.2583571068820263E-32d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0339"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex((double) 6, (double) 7.6293945E-6f); org.apache.commons.math.complex.Complex complex11 = complex7.divide(complex10); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex15.reciprocal(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex22 = complex16.multiply(complex21); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex25.subtract(complex32); double double35 = complex25.abs(); org.apache.commons.math.complex.Complex complex37 = complex25.multiply(32.0d); org.apache.commons.math.complex.Complex complex38 = complex37.reciprocal(); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex42 = complex41.negate(); boolean boolean44 = complex42.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex48 = complex47.log(); double double49 = complex48.getReal(); org.apache.commons.math.complex.Complex complex51 = complex48.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex52 = complex42.multiply(complex51); org.apache.commons.math.complex.Complex complex54 = complex51.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex55 = complex38.pow(complex51); org.apache.commons.math.complex.Complex complex56 = complex23.multiply(complex55); org.apache.commons.math.complex.Complex complex57 = complex7.subtract(complex55); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); org.apache.commons.math.complex.Complex complex62 = complex60.tanh(); org.apache.commons.math.complex.Complex complex64 = complex62.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double68 = complex67.abs(); org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex72 = complex71.log(); org.apache.commons.math.complex.Complex complex73 = complex71.tanh(); org.apache.commons.math.complex.Complex complex75 = complex73.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex76 = complex67.divide(complex73); java.lang.String str77 = complex73.toString(); org.apache.commons.math.complex.Complex complex78 = complex62.divide(complex73); org.apache.commons.math.complex.Complex complex81 = complex73.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex87 = complex86.log(); org.apache.commons.math.complex.Complex complex88 = complex86.tanh(); org.apache.commons.math.complex.Complex complex90 = complex88.multiply((int) (short) 0); double double91 = complex90.getArgument(); org.apache.commons.math.complex.Complex complex92 = complex83.subtract(complex90); org.apache.commons.math.complex.Complex complex93 = complex73.subtract(complex92); org.apache.commons.math.complex.ComplexField complexField94 = complex93.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass95 = complexField94.getRuntimeClass(); boolean boolean96 = complex57.equals((java.lang.Object) wildcardClass95); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0d + "'", double68 == 1.0d); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(0.0, 1.557407724654902)" + "'", str77, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complexField94); org.junit.Assert.assertNotNull(wildcardClass95); org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false); }
public void test0340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0340"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) (-20)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4); }
public void test0341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0341"); float float1 = org.apache.commons.math.util.FastMath.signum((float) 35); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0342"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); boolean boolean6 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex7 = complex5.asin(); org.apache.commons.math.complex.Complex complex8 = complex7.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0343"); double double1 = org.apache.commons.math.util.FastMath.exp(6.830189170012751E-6d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0000068302124958d + "'", double1 == 1.0000068302124958d); }
public void test0344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0344"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); // The following exception was thrown during execution in test generation try { java.lang.String str7 = numberIsTooSmallException4.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + number5 + "' != '" + 1.0d + "'", number5, 1.0d); org.junit.Assert.assertNotNull(exceptionContext6); }
public void test0345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0345"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex10.tan(); org.apache.commons.math.complex.Complex complex12 = complex11.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0346"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double10 = complex9.abs(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex18 = complex9.divide(complex15); java.lang.String str19 = complex15.toString(); org.apache.commons.math.complex.Complex complex20 = complex4.divide(complex15); org.apache.commons.math.complex.Complex complex23 = complex15.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex25.subtract(complex32); org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex34); org.apache.commons.math.complex.ComplexField complexField36 = complex35.getField(); org.apache.commons.math.complex.Complex complex37 = complexField36.getOne(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass38 = complexField36.getRuntimeClass(); org.apache.commons.math.complex.Complex complex39 = complexField36.getZero(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, 1.557407724654902)" + "'", str19, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complexField36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(wildcardClass38); org.junit.Assert.assertNotNull(complex39); }
public void test0347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0347"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(6.830189170065859E-6d, (double) 20); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.830189170065859E-6d + "'", double2 == 6.830189170065859E-6d); }
public void test0348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0348"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex40.sqrt(); org.apache.commons.math.complex.Complex complex53 = complex52.conjugate(); org.apache.commons.math.complex.Complex complex54 = complex52.reciprocal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); }
public void test0349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0349"); double double1 = org.apache.commons.math.util.FastMath.ceil((double) 35L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 35.0d + "'", double1 == 35.0d); }
public void test0350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0350"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) 127, 1.5845633E31f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 127.0f + "'", float2 == 127.0f); }
public void test0351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0351"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); double double11 = complex1.abs(); org.apache.commons.math.complex.Complex complex13 = complex1.multiply(32.0d); org.apache.commons.math.complex.Complex complex14 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.negate(); boolean boolean20 = complex18.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex24 = complex23.log(); double double25 = complex24.getReal(); org.apache.commons.math.complex.Complex complex27 = complex24.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex28 = complex18.multiply(complex27); org.apache.commons.math.complex.Complex complex30 = complex27.pow(2.7182482745272054d); org.apache.commons.math.complex.Complex complex31 = complex14.pow(complex27); java.lang.Object obj32 = complex31.readResolve(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(obj32); org.junit.Assert.assertEquals(obj32.toString(), "(-0.9345085333245747, 0.35594072700879864)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "(-0.9345085333245747, 0.35594072700879864)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "(-0.9345085333245747, 0.35594072700879864)"); }
public void test0352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0352"); double double1 = org.apache.commons.math.util.FastMath.atanh((double) 57.0f); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0353"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); java.lang.String str8 = complex7.toString(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); boolean boolean10 = complex7.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); }
public void test0354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0354"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); org.apache.commons.math.complex.Complex complex31 = complex18.divide(complex30); java.lang.Class<?> wildcardClass32 = complex18.getClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(wildcardClass32); }
public void test0355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0355"); float float2 = org.apache.commons.math.util.FastMath.max((float) 2L, (float) 6); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 6.0f + "'", float2 == 6.0f); }
public void test0356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0356"); double double1 = org.apache.commons.math.util.FastMath.nextUp(71.84044670030279d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 71.8404467003028d + "'", double1 == 71.8404467003028d); }
public void test0357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0357"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0358"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); boolean boolean29 = complex27.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); double double34 = complex33.getReal(); org.apache.commons.math.complex.Complex complex36 = complex33.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex37 = complex27.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex37.multiply((int) (byte) 100); org.apache.commons.math.complex.Complex complex40 = complex22.subtract(complex39); double double41 = complex22.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue(Double.isNaN(double41)); }
public void test0359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0359"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex6.getArgument(); boolean boolean8 = complex6.isInfinite(); java.util.List<org.apache.commons.math.complex.Complex> complexList10 = complex6.nthRoot((int) (byte) 1); org.apache.commons.math.complex.Complex complex12 = complex6.multiply(1.3673460747797088d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complexList10); org.junit.Assert.assertNotNull(complex12); }
public void test0360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0360"); int int2 = org.apache.commons.math.util.FastMath.max((-127), (int) (byte) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100); }
public void test0361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0361"); double double1 = org.apache.commons.math.util.FastMath.expm1(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0362"); float float2 = org.apache.commons.math.util.FastMath.min((float) (-1L), 10.000001f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.0f) + "'", float2 == (-1.0f)); }
public void test0363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0363"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex40.sqrt(); org.apache.commons.math.complex.Complex complex53 = complex52.exp(); org.apache.commons.math.complex.Complex complex55 = complex52.multiply(9.999999999999998d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); }
public void test0364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0364"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException4.getContext(); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException10 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 0.0d, (java.lang.Number) (short) 1, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext11 = numberIsTooSmallException10.getContext(); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException10); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException16 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 100.0d, (java.lang.Number) 0.8623188722876839d, true); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) numberIsTooSmallException16); // The following exception was thrown during execution in test generation try { java.lang.String str18 = numberIsTooSmallException4.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertEquals("'" + number5 + "' != '" + 3.831008000716577E22d + "'", number5, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertNotNull(exceptionContext11); }
public void test0365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0365"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.multiply(2.718281828459045d); org.apache.commons.math.complex.Complex complex42 = complex40.multiply((int) '#'); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); }
public void test0366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0366"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass10 = complexField9.getRuntimeClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test0367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0367"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.tanh(); org.apache.commons.math.complex.Complex complex12 = complex4.cos(); org.apache.commons.math.complex.Complex complex14 = complex4.pow((double) (byte) -1); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex22 = complex21.tanh(); org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex4.add(complex23); org.apache.commons.math.complex.Complex complex25 = complex4.conjugate(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); }
public void test0368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0368"); double double2 = org.apache.commons.math.util.FastMath.log((double) 97L, (-57.29577951308232d)); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test0369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0369"); double double1 = org.apache.commons.math.util.FastMath.acosh((double) 2L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.3169578969248166d + "'", double1 == 1.3169578969248166d); }
public void test0370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0370"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.9073486E-6f); double double2 = complex1.getImaginary(); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0371"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); java.lang.Object obj8 = complex6.readResolve(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = complex9.subtract(complex14); boolean boolean18 = complex17.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(obj8); org.junit.Assert.assertEquals(obj8.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "(NaN, NaN)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); }
public void test0372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0372"); double double1 = org.apache.commons.math.util.FastMath.rint(32.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 32.0d + "'", double1 == 32.0d); }
public void test0373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0373"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.cos(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex30); org.apache.commons.math.complex.Complex complex33 = complex31.multiply(127); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); }
public void test0374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0374"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex4 = complex3.log(); org.apache.commons.math.complex.Complex complex5 = complex4.reciprocal(); org.apache.commons.math.complex.Complex complex6 = complex0.multiply(complex5); org.apache.commons.math.complex.Complex complex7 = complex0.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0375"); org.apache.commons.math.exception.NullArgumentException nullArgumentException0 = new org.apache.commons.math.exception.NullArgumentException(); org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) Double.NaN); nullArgumentException0.addSuppressed((java.lang.Throwable) notPositiveException2); }
public void test0376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0376"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex11.add(complex20); org.apache.commons.math.complex.Complex complex25 = complex20.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double29 = complex28.abs(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex33 = complex32.log(); org.apache.commons.math.complex.Complex complex34 = complex32.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex37 = complex28.divide(complex34); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex41 = complex40.log(); org.apache.commons.math.complex.Complex complex42 = complex40.tanh(); org.apache.commons.math.complex.Complex complex44 = complex42.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double48 = complex47.abs(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex52 = complex51.log(); org.apache.commons.math.complex.Complex complex53 = complex51.tanh(); org.apache.commons.math.complex.Complex complex55 = complex53.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex56 = complex47.divide(complex53); java.lang.String str57 = complex53.toString(); org.apache.commons.math.complex.Complex complex58 = complex42.divide(complex53); org.apache.commons.math.complex.Complex complex59 = complex34.subtract(complex42); org.apache.commons.math.complex.Complex complex60 = complex34.log(); org.apache.commons.math.complex.Complex complex61 = complex34.reciprocal(); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double65 = complex64.abs(); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex69 = complex68.log(); org.apache.commons.math.complex.Complex complex70 = complex68.tanh(); org.apache.commons.math.complex.Complex complex72 = complex70.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex73 = complex64.divide(complex70); org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex77 = complex76.log(); org.apache.commons.math.complex.Complex complex78 = complex76.tanh(); org.apache.commons.math.complex.Complex complex80 = complex78.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double84 = complex83.abs(); org.apache.commons.math.complex.Complex complex87 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex88 = complex87.log(); org.apache.commons.math.complex.Complex complex89 = complex87.tanh(); org.apache.commons.math.complex.Complex complex91 = complex89.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex92 = complex83.divide(complex89); java.lang.String str93 = complex89.toString(); org.apache.commons.math.complex.Complex complex94 = complex78.divide(complex89); org.apache.commons.math.complex.Complex complex95 = complex70.subtract(complex78); org.apache.commons.math.complex.Complex complex96 = complex70.log(); org.apache.commons.math.complex.Complex complex97 = complex70.acos(); org.apache.commons.math.complex.Complex complex98 = complex34.divide(complex97); org.apache.commons.math.complex.Complex complex99 = complex25.add(complex97); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(0.0, 1.557407724654902)" + "'", str57, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0d + "'", double84 == 1.0d); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(0.0, 1.557407724654902)" + "'", str93, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertNotNull(complex96); org.junit.Assert.assertNotNull(complex97); org.junit.Assert.assertNotNull(complex98); org.junit.Assert.assertNotNull(complex99); }
public void test0377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0377"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) (short) -1); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.1920929E-7f + "'", float1 == 1.1920929E-7f); }
public void test0378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0378"); double double1 = org.apache.commons.math.util.FastMath.signum(1.2599210498948732d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0379"); float float1 = org.apache.commons.math.util.FastMath.signum((float) 2L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0380"); double double2 = org.apache.commons.math.util.FastMath.pow(1.0941931165837544d, 1.7453292519943295d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.1701239378075259d + "'", double2 == 1.1701239378075259d); }
public void test0381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0381"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(0); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double18 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex23); java.lang.String str27 = complex23.toString(); org.apache.commons.math.complex.Complex complex28 = complex12.divide(complex23); org.apache.commons.math.complex.Complex complex31 = complex23.createComplex((-1.5574077246549023d), (double) 10.0f); org.apache.commons.math.complex.Complex complex32 = complex5.add(complex23); org.apache.commons.math.complex.Complex complex33 = complex5.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(0.0, 1.557407724654902)" + "'", str27, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); }
public void test0382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0382"); double double1 = org.apache.commons.math.util.FastMath.ceil(32.55764119219941d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 33.0d + "'", double1 == 33.0d); }
public void test0383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0383"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.ComplexField complexField6 = complex2.getField(); org.apache.commons.math.complex.Complex complex7 = complexField6.getOne(); org.apache.commons.math.complex.Complex complex8 = complexField6.getZero(); org.apache.commons.math.complex.Complex complex9 = complex8.tanh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test0384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0384"); double double1 = org.apache.commons.math.util.FastMath.tan((-5.117509926296107d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.33185731606167d + "'", double1 == 2.33185731606167d); }
public void test0385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0385"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1.0000000000233258d); }
public void test0386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0386"); int int1 = org.apache.commons.math.util.FastMath.round(6.1035156E-5f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0387"); double double1 = org.apache.commons.math.util.FastMath.log((double) 6.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.791759469228055d + "'", double1 == 1.791759469228055d); }
public void test0388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0388"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex9 = complex4.tan(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); double double17 = complex16.getArgument(); boolean boolean18 = complex16.isInfinite(); org.apache.commons.math.complex.Complex complex19 = complex9.add(complex16); org.apache.commons.math.complex.Complex complex20 = complex16.asin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test0389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0389"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (byte) -1); org.apache.commons.math.complex.Complex complex17 = complex14.sin(); double double18 = complex14.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 2.5091784786580567d + "'", double18 == 2.5091784786580567d); }
public void test0390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0390"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex4 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex5 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField2.getOne(); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0391"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(4.9E-324d); org.apache.commons.math.complex.Complex complex2 = complex1.exp(); org.junit.Assert.assertNotNull(complex2); }
public void test0392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0392"); double double1 = org.apache.commons.math.util.FastMath.sinh(0.9999999999999999d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.1752011936438014d + "'", double1 == 1.1752011936438014d); }
public void test0393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0393"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double8 = complex7.abs(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object[] objArray28 = new java.lang.Object[] { 0.0f, (short) 0, complex13, complex26 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable2, objArray28); org.apache.commons.math.exception.NullArgumentException nullArgumentException30 = new org.apache.commons.math.exception.NullArgumentException(localizable1, objArray28); java.lang.Throwable[] throwableArray31 = nullArgumentException30.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException32 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray31); org.apache.commons.math.exception.util.ExceptionContext exceptionContext33 = mathIllegalArgumentException32.getContext(); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(throwableArray31); org.junit.Assert.assertNotNull(exceptionContext33); }
public void test0394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0394"); double double1 = org.apache.commons.math.util.FastMath.rint((-1.4987863014408054d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test0395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0395"); double double1 = org.apache.commons.math.util.FastMath.atanh(100.0002495400294d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0396"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex6 = complex2.multiply(6); org.apache.commons.math.complex.Complex complex7 = complex6.sin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0397"); double double2 = org.apache.commons.math.util.FastMath.scalb((double) (short) 1, 18); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 262144.0d + "'", double2 == 262144.0d); }
public void test0398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0398"); double double1 = org.apache.commons.math.util.FastMath.ulp(3.555348061489414d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.440892098500626E-16d + "'", double1 == 4.440892098500626E-16d); }
public void test0399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0399"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.1038593155224103d), (-3.1038593155224103d)); org.junit.Assert.assertNotNull(complex2); }
public void test0400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0400"); double double1 = org.apache.commons.math.util.FastMath.signum((double) 6.1035156E-5f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0401"); double double1 = org.apache.commons.math.util.FastMath.sqrt(71.48377175636405d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 8.454807612025483d + "'", double1 == 8.454807612025483d); }
public void test0402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0402"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (byte) 10, (double) ' '); org.apache.commons.math.complex.Complex complex4 = complex2.multiply(0.0d); org.apache.commons.math.complex.Complex complex5 = complex2.asin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0403"); double double1 = org.apache.commons.math.util.FastMath.cosh((-0.807872122398715d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.3444677383523331d + "'", double1 == 1.3444677383523331d); }
public void test0404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0404"); float float2 = org.apache.commons.math.util.FastMath.copySign(57.0f, 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 57.0f + "'", float2 == 57.0f); }
public void test0405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0405"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex16.tanh(); double double18 = complex16.getReal(); org.apache.commons.math.complex.Complex complex19 = complex16.negate(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex23 = complex22.log(); org.apache.commons.math.complex.Complex complex24 = complex23.reciprocal(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex28 = complex27.log(); org.apache.commons.math.complex.Complex complex29 = complex28.reciprocal(); org.apache.commons.math.complex.Complex complex30 = complex24.multiply(complex29); java.lang.Object obj31 = complex30.readResolve(); org.apache.commons.math.complex.Complex complex33 = complex30.add((double) 10L); org.apache.commons.math.complex.Complex complex34 = complex16.add(complex30); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue(Double.isNaN(double18)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(obj31); org.junit.Assert.assertEquals(obj31.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test0406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0406"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sinh(); java.lang.Object obj16 = complex11.readResolve(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(obj16); org.junit.Assert.assertEquals(obj16.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "(NaN, NaN)"); }
public void test0407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0407"); double double1 = org.apache.commons.math.util.FastMath.acosh(6.830189169959645E-6d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0408"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex12 = complex8.sqrt1z(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0409"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1.0f); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex1.divide(14.142135623730951d); org.apache.commons.math.complex.Complex complex6 = complex1.pow((double) (short) 1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); }
public void test0410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0410"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (short) 100, (java.lang.Number) (-13.862943611198906d), false); org.apache.commons.math.exception.NullArgumentException nullArgumentException5 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable[] throwableArray6 = nullArgumentException5.getSuppressed(); org.apache.commons.math.exception.util.Localizable localizable7 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException11 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable7, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); java.lang.Number number12 = numberIsTooSmallException11.getArgument(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext13 = numberIsTooSmallException11.getContext(); nullArgumentException5.addSuppressed((java.lang.Throwable) numberIsTooSmallException11); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) nullArgumentException5); org.apache.commons.math.exception.util.ExceptionContext exceptionContext16 = nullArgumentException5.getContext(); org.junit.Assert.assertNotNull(throwableArray6); org.junit.Assert.assertEquals("'" + number12 + "' != '" + 3.831008000716577E22d + "'", number12, 3.831008000716577E22d); org.junit.Assert.assertNotNull(exceptionContext13); org.junit.Assert.assertNotNull(exceptionContext16); }
public void test0411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0411"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex55 = complex54.negate(); boolean boolean57 = complex55.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex61 = complex60.log(); double double62 = complex61.getReal(); org.apache.commons.math.complex.Complex complex64 = complex61.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex65 = complex55.multiply(complex64); org.apache.commons.math.complex.Complex complex66 = complex65.cosh(); org.apache.commons.math.complex.Complex complex67 = complex65.atan(); double double68 = complex65.getReal(); org.apache.commons.math.complex.Complex complex69 = complex50.divide(complex65); org.apache.commons.math.complex.Complex complex70 = complex50.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.5707963267948966d) + "'", double68 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); }
public void test0412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0412"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean4 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex11 = complex9.tanh(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((int) (short) 0); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex6.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.reciprocal(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = complex16.sinh(); org.apache.commons.math.complex.Complex complex22 = complex16.pow((double) (short) 100); org.apache.commons.math.complex.Complex complex23 = complex2.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex23.acos(); double double25 = complex24.getImaginary(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.cos(); org.apache.commons.math.complex.Complex complex31 = complex24.add(complex30); org.apache.commons.math.complex.Complex complex32 = complex24.sqrt1z(); java.lang.Object obj33 = complex24.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue(Double.isNaN(double25)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(obj33); org.junit.Assert.assertEquals(obj33.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "(NaN, NaN)"); }
public void test0413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0413"); double double1 = org.apache.commons.math.util.FastMath.cbrt((-0.02001872128744539d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.2715264309004421d) + "'", double1 == (-0.2715264309004421d)); }
public void test0414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0414"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.cosh(); java.lang.String str8 = complex7.toString(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex11.subtract(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.reciprocal(); org.apache.commons.math.complex.Complex complex23 = complex21.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex24 = complex21.sin(); org.apache.commons.math.complex.Complex complex25 = complex24.acos(); org.apache.commons.math.complex.Complex complex27 = complex25.pow(1.9073486328113436E-6d); org.apache.commons.math.complex.Complex complex28 = complex7.add(complex25); java.lang.String str29 = complex25.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(NaN, NaN)" + "'", str29, "(NaN, NaN)"); }
public void test0415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0415"); double double2 = org.apache.commons.math.util.FastMath.log((double) 2.8E-45f, 1.7453292519943295d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.005429048803495734d) + "'", double2 == (-0.005429048803495734d)); }
public void test0416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0416"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); java.lang.Object obj11 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex10.reciprocal(); org.apache.commons.math.complex.Complex complex15 = complex10.divide(1.9073486328113436E-6d); java.lang.Object obj16 = null; boolean boolean17 = complex15.equals(obj16); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(-0.40528473456935116, -0.0)"); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test0417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0417"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 36.0d); }
public void test0418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0418"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.log(); java.lang.Object obj5 = complex2.readResolve(); org.apache.commons.math.complex.ComplexField complexField6 = complex2.getField(); org.apache.commons.math.complex.Complex complex7 = complexField6.getOne(); org.apache.commons.math.complex.Complex complex8 = complexField6.getZero(); double double9 = complex8.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(obj5); org.junit.Assert.assertEquals(obj5.toString(), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "(0.0, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "(0.0, 1.0)"); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test0419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0419"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double8 = complex7.abs(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex11.tanh(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex20 = complex19.log(); org.apache.commons.math.complex.Complex complex21 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex25 = complex24.log(); org.apache.commons.math.complex.Complex complex26 = complex25.reciprocal(); org.apache.commons.math.complex.Complex complex27 = complex21.multiply(complex26); java.lang.Object[] objArray28 = new java.lang.Object[] { 0.0f, (short) 0, complex13, complex26 }; org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable2, objArray28); org.apache.commons.math.exception.NullArgumentException nullArgumentException30 = new org.apache.commons.math.exception.NullArgumentException(localizable1, objArray28); java.lang.Throwable[] throwableArray31 = nullArgumentException30.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException32 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray31); org.apache.commons.math.exception.util.ExceptionContext exceptionContext33 = mathIllegalArgumentException32.getContext(); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(objArray28); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[0.0, 0, (0.0, 1.557407724654902), (0.0, -0.6366197723675814)]"); org.junit.Assert.assertNotNull(throwableArray31); org.junit.Assert.assertNotNull(exceptionContext33); }
public void test0420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0420"); double double1 = org.apache.commons.math.util.FastMath.abs(11013.232874703393d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 11013.232874703393d + "'", double1 == 11013.232874703393d); }
public void test0421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0421"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 2.972195942014659d, (java.lang.Number) 10, true); }
public void test0422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0422"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex4.getImaginary(); java.lang.Class<?> wildcardClass8 = complex4.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.557407724654902d + "'", double7 == 1.557407724654902d); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test0423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0423"); double double1 = org.apache.commons.math.util.FastMath.atanh(1.1701239378075259d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0424"); double double1 = org.apache.commons.math.util.FastMath.log10((double) 1.4E-45f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-44.8534693539332d) + "'", double1 == (-44.8534693539332d)); }
public void test0425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0425"); double double1 = org.apache.commons.math.util.FastMath.toDegrees(1.213031721958534d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 69.50159808371075d + "'", double1 == 69.50159808371075d); }
public void test0426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0426"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); double double34 = complex8.getArgument(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.5707963267948966d + "'", double34 == 1.5707963267948966d); }
public void test0427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0427"); float float1 = org.apache.commons.math.util.FastMath.abs(4.7683716E-7f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 4.7683716E-7f + "'", float1 == 4.7683716E-7f); }
public void test0428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0428"); double double2 = org.apache.commons.math.util.FastMath.scalb(0.5403023058681398d, 100); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.849145423384438E29d + "'", double2 == 6.849145423384438E29d); }
public void test0429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0429"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 6.0f, (double) 1); org.junit.Assert.assertNotNull(complex2); }
public void test0430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0430"); float float2 = org.apache.commons.math.util.FastMath.scalb(52.0f, (-18)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.9836426E-4f + "'", float2 == 1.9836426E-4f); }
public void test0431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0431"); int int2 = org.apache.commons.math.util.FastMath.max((-4), 127); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 127 + "'", int2 == 127); }
public void test0432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0432"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); double double52 = complex40.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 36.0d + "'", double52 == 36.0d); }
public void test0433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0433"); double double1 = org.apache.commons.math.util.FastMath.cosh(20.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.4258259770489514E8d + "'", double1 == 2.4258259770489514E8d); }
public void test0434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0434"); double double2 = org.apache.commons.math.util.FastMath.copySign(0.9999876561221204d, (double) 10L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.9999876561221204d + "'", double2 == 0.9999876561221204d); }
public void test0435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0435"); double double1 = org.apache.commons.math.util.FastMath.rint(1.5707963267948966d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.0d + "'", double1 == 2.0d); }
public void test0436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0436"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(0.0d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex4 = complex2.subtract(3.732511156817248d); org.apache.commons.math.complex.Complex complex6 = complex4.multiply(97.00000000000023d); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); }
public void test0437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0437"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 20L); }
public void test0438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0438"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); boolean boolean5 = numberIsTooSmallException4.getBoundIsAllowed(); java.lang.Number number6 = numberIsTooSmallException4.getMin(); boolean boolean7 = numberIsTooSmallException4.getBoundIsAllowed(); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 1.0d + "'", number6, 1.0d); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); }
public void test0439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0439"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex7 = complex6.tanh(); org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.apache.commons.math.complex.Complex complex15 = complex13.tanh(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((int) (short) 0); double double18 = complex17.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex10.subtract(complex17); double double20 = complex10.getImaginary(); org.apache.commons.math.complex.Complex complex21 = complex10.sin(); org.apache.commons.math.complex.Complex complex22 = complex8.divide(complex10); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test0440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0440"); double double1 = org.apache.commons.math.util.FastMath.signum((-5.719569917615906d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test0441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0441"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 20.0d, (java.lang.Number) 0.8941226291179728d, false); java.lang.Class<?> wildcardClass5 = numberIsTooSmallException4.getClass(); org.junit.Assert.assertNotNull(wildcardClass5); }
public void test0442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0442"); double double1 = org.apache.commons.math.util.FastMath.rint(1.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0443"); double double1 = org.apache.commons.math.util.FastMath.log(0.7148110531506897d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.33573703253901344d) + "'", double1 == (-0.33573703253901344d)); }
public void test0444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0444"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.negate(); boolean boolean5 = complex3.equals((java.lang.Object) "(0.0, 1.557407724654902)"); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex13 = complex3.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex13.cosh(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex20.tanh(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((int) (short) 0); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex17.subtract(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.reciprocal(); org.apache.commons.math.complex.Complex complex29 = complex27.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex30 = complex27.sin(); org.apache.commons.math.complex.Complex complex31 = complex13.pow(complex30); double double32 = complex31.getImaginary(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex36 = complex35.log(); org.apache.commons.math.complex.Complex complex37 = complex35.tanh(); org.apache.commons.math.complex.Complex complex38 = complex37.sqrt1z(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex40 = complex37.add(complex39); org.apache.commons.math.complex.Complex complex41 = complex37.conjugate(); org.apache.commons.math.complex.Complex complex42 = complex37.tan(); org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex44 = complex42.add(complex43); org.apache.commons.math.complex.Complex complex45 = complex43.exp(); org.apache.commons.math.complex.Complex complex46 = complex31.subtract(complex45); double double47 = complex46.getArgument(); double double48 = complex46.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertTrue(Double.isNaN(double47)); org.junit.Assert.assertTrue(Double.isNaN(double48)); }
public void test0445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0445"); double double1 = org.apache.commons.math.util.FastMath.sqrt((double) (-0.0f)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.0d) + "'", double1 == (-0.0d)); }
public void test0446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0446"); double double1 = org.apache.commons.math.util.FastMath.asinh(18.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.584289651861328d + "'", double1 == 3.584289651861328d); }
public void test0447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0447"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex4.asin(); org.apache.commons.math.complex.ComplexField complexField12 = complex4.getField(); java.lang.Class<? extends org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex>> wildcardClass13 = complexField12.getRuntimeClass(); org.apache.commons.math.complex.Complex complex14 = complexField12.getZero(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(wildcardClass13); org.junit.Assert.assertNotNull(complex14); }
public void test0448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0448"); double double2 = org.apache.commons.math.util.FastMath.atan2((-0.9999999999999999d), (-0.2715264309004421d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.8359303289748807d) + "'", double2 == (-1.8359303289748807d)); }
public void test0449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0449"); double double1 = org.apache.commons.math.util.FastMath.asinh(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0450"); double double1 = org.apache.commons.math.util.FastMath.ulp(1.5912754690222415E-7d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.6469779601696886E-23d + "'", double1 == 2.6469779601696886E-23d); }
public void test0451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0451"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex17 = complex14.sin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0452"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 1.2599210498948732d, (java.lang.Number) (short) 1, false); }
public void test0453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0453"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.atan(); org.apache.commons.math.complex.Complex complex23 = complex4.divide(2.7182482745272054d); org.apache.commons.math.complex.Complex complex24 = complex23.cos(); org.apache.commons.math.complex.Complex complex25 = complex23.reciprocal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); }
public void test0454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0454"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 0.5403023058681398d, (java.lang.Number) 44.185235654058175d, true); }
public void test0455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0455"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 2.3326073681307428E-11d); }
public void test0456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0456"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex40.sqrt(); org.apache.commons.math.complex.Complex complex53 = complex52.conjugate(); boolean boolean54 = complex52.isNaN(); java.util.List<org.apache.commons.math.complex.Complex> complexList56 = complex52.nthRoot((int) (short) 100); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(complexList56); }
public void test0457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0457"); double double2 = org.apache.commons.math.util.FastMath.atan2(14.142135623730951d, 11013.232874703393d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.001284103224869146d + "'", double2 == 0.001284103224869146d); }
public void test0458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0458"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex46 = complex45.log(); org.apache.commons.math.complex.Complex complex47 = complex45.tanh(); org.apache.commons.math.complex.Complex complex49 = complex47.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex50 = complex49.acos(); org.apache.commons.math.complex.Complex complex51 = complex40.divide(complex50); org.apache.commons.math.complex.Complex complex52 = complex50.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); }
public void test0459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0459"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((int) (short) 0); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex13 = complex11.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex15 = complex11.multiply((int) (byte) 0); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 1); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex22 = complex21.log(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.sqrt1z(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex26 = complex23.add(complex25); org.apache.commons.math.complex.Complex complex27 = complex16.add(complex23); org.apache.commons.math.complex.Complex complex28 = complex27.cos(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); }
public void test0460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0460"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(1.5515679276951895d, (double) 9.536743E-7f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5515679276951893d + "'", double2 == 1.5515679276951893d); }
public void test0461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0461"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 1.1752011936438014d, (java.lang.Number) 2.7182482745272054d, true); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 2.7182482745272054d + "'", number5, 2.7182482745272054d); }
public void test0462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0462"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); org.apache.commons.math.complex.Complex complex9 = complex4.tan(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex12.tanh(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((int) (short) 0); double double17 = complex16.getArgument(); boolean boolean18 = complex16.isInfinite(); org.apache.commons.math.complex.Complex complex19 = complex9.add(complex16); java.lang.Object obj20 = complex19.readResolve(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(obj20); org.junit.Assert.assertEquals(obj20.toString(), "(0.0, 0.9149994957367077)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "(0.0, 0.9149994957367077)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "(0.0, 0.9149994957367077)"); }
public void test0463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0463"); float float2 = org.apache.commons.math.util.FastMath.copySign(1.5845633E31f, 3.0562855E-37f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.5845633E31f + "'", float2 == 1.5845633E31f); }
public void test0464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0464"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex10.sinh(); org.apache.commons.math.complex.Complex complex13 = complex11.pow((-44.8534693539332d)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); }
public void test0465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0465"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(6.830189170118965E-6d); org.junit.Assert.assertNotNull(complex1); }
public void test0466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0466"); double double1 = org.apache.commons.math.util.FastMath.toDegrees(5.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 286.4788975654116d + "'", double1 == 286.4788975654116d); }
public void test0467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0467"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d), 6.830189170012752E-6d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex3.subtract(70.7906245758041d); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex9.getReal(); org.apache.commons.math.complex.Complex complex12 = complex9.multiply((int) (short) -1); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex15.tanh(); org.apache.commons.math.complex.Complex complex19 = complex17.multiply((int) (short) 0); double double20 = complex17.getImaginary(); org.apache.commons.math.complex.Complex complex21 = complex12.multiply(complex17); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex24 = complex23.cos(); boolean boolean26 = complex23.equals((java.lang.Object) 4.065529698164491d); org.apache.commons.math.complex.Complex complex27 = complex17.subtract(complex23); org.apache.commons.math.complex.Complex complex28 = complex3.subtract(complex23); boolean boolean29 = complex3.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.557407724654902d + "'", double20 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); }
public void test0468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0468"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(3.0562855E-37f, 7.629394531101971E-6d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 3.0562858E-37f + "'", float2 == 3.0562858E-37f); }
public void test0469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0469"); double double1 = org.apache.commons.math.util.FastMath.sin(0.28366218546322625d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.2798733507685274d + "'", double1 == 0.2798733507685274d); }
public void test0470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0470"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; boolean boolean1 = complex0.isInfinite(); org.apache.commons.math.complex.Complex complex2 = complex0.reciprocal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false); org.junit.Assert.assertNotNull(complex2); }
public void test0471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0471"); double double1 = org.apache.commons.math.util.FastMath.cos((-1.5842348303662568d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.013438099090886106d) + "'", double1 == (-0.013438099090886106d)); }
public void test0472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0472"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex5 = complex3.subtract((double) 100.0f); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((int) (byte) -1); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); }
public void test0473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0473"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 7.6293945E-6f, 0.0d); }
public void test0474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0474"); double double1 = org.apache.commons.math.util.FastMath.nextUp((-0.4040823497388352d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.40408234973883517d) + "'", double1 == (-0.40408234973883517d)); }
public void test0475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0475"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex3.divide(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((int) (short) 0); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex13.subtract(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.reciprocal(); org.apache.commons.math.complex.Complex complex24 = complex11.add(complex20); org.apache.commons.math.complex.Complex complex25 = complex20.sqrt1z(); org.apache.commons.math.complex.Complex complex26 = complex20.cosh(); double double27 = complex20.abs(); double double28 = complex20.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); }
public void test0476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0476"); double double1 = org.apache.commons.math.util.FastMath.tanh(1.7182818284590453d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9376558078861459d + "'", double1 == 0.9376558078861459d); }
public void test0477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0477"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 100L); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); }
public void test0478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0478"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 10L); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((int) (short) 0); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex7.subtract(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.reciprocal(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex4.subtract(complex17); org.apache.commons.math.complex.Complex complex21 = complex4.asin(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test0479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0479"); double double1 = org.apache.commons.math.util.FastMath.log1p(32.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.4965075614664802d + "'", double1 == 3.4965075614664802d); }
public void test0480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0480"); float float2 = org.apache.commons.math.util.FastMath.scalb((float) ' ', (int) (byte) 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 32.0f + "'", float2 == 32.0f); }
public void test0481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0481"); double double1 = org.apache.commons.math.util.FastMath.signum(14.142135623730951d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0482"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.NaN; org.apache.commons.math.complex.Complex complex7 = complex4.add(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.conjugate(); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex8.asin(); java.util.List<org.apache.commons.math.complex.Complex> complexList12 = complex8.nthRoot((int) (short) 1); java.lang.Class<?> wildcardClass13 = complexList12.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.5707963267948966d) + "'", double9 == (-1.5707963267948966d)); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complexList12); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test0483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0483"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) 97L, 9.536743E-7f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 97.0f + "'", float2 == 97.0f); }
public void test0484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0484"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex6.getArgument(); boolean boolean8 = complex6.isInfinite(); org.apache.commons.math.complex.Complex complex9 = complex6.negate(); org.apache.commons.math.complex.Complex complex12 = complex6.createComplex((double) (short) 1, (-0.0d)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex17 = complex16.reciprocal(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.apache.commons.math.complex.Complex complex22 = complex21.reciprocal(); org.apache.commons.math.complex.Complex complex23 = complex17.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex17.asin(); org.apache.commons.math.complex.Complex complex25 = complex17.negate(); org.apache.commons.math.complex.Complex complex26 = complex6.multiply(complex25); org.apache.commons.math.complex.Complex complex27 = complex26.exp(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); }
public void test0485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0485"); double double1 = org.apache.commons.math.util.FastMath.acosh(3.469446951953614E-18d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0486"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex6 = complex4.multiply((int) (short) 0); double double7 = complex4.getImaginary(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf(1.557407724654902d, 3.5553480614894135d); boolean boolean11 = complex10.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex4.add(complex10); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.557407724654902d + "'", double7 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0487"); double double1 = org.apache.commons.math.util.FastMath.log10((double) 6.044629E23f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 23.781369657454515d + "'", double1 == 23.781369657454515d); }
public void test0488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0488"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.sqrt1z(); boolean boolean6 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex7 = complex5.asin(); org.apache.commons.math.exception.util.Localizable localizable8 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException12 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable8, (java.lang.Number) 3.831008000716577E22d, (java.lang.Number) 1.0d, false); boolean boolean13 = numberIsTooSmallException12.getBoundIsAllowed(); boolean boolean14 = complex5.equals((java.lang.Object) boolean13); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test0489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0489"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex0.add((double) 35); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex7 = complex6.reciprocal(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex10.tanh(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex18 = complex17.log(); org.apache.commons.math.complex.Complex complex19 = complex17.tanh(); org.apache.commons.math.complex.Complex complex21 = complex19.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double25 = complex24.abs(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex29 = complex28.log(); org.apache.commons.math.complex.Complex complex30 = complex28.tanh(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex33 = complex24.divide(complex30); java.lang.String str34 = complex30.toString(); org.apache.commons.math.complex.Complex complex35 = complex19.divide(complex30); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex6.subtract(complex36); org.apache.commons.math.complex.Complex complex38 = complex2.divide(complex6); org.apache.commons.math.complex.Complex complex40 = complex2.pow(1.0d); double double41 = complex40.getImaginary(); org.apache.commons.math.complex.Complex complex42 = complex40.sqrt1z(); org.apache.commons.math.complex.Complex complex43 = complex40.tanh(); org.apache.commons.math.complex.Complex complex46 = complex40.createComplex(1.7453292519943295d, 0.0d); org.apache.commons.math.complex.Complex complex47 = complex46.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(0.0, 1.557407724654902)" + "'", str34, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); }
public void test0490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0490"); double double1 = org.apache.commons.math.util.FastMath.log(1.543080634815244d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.4337808304830273d + "'", double1 == 0.4337808304830273d); }
public void test0491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0491"); float float2 = org.apache.commons.math.util.FastMath.scalb((float) (short) 10, 127); org.junit.Assert.assertTrue("'" + float2 + "' != '" + Float.POSITIVE_INFINITY + "'", float2 == Float.POSITIVE_INFINITY); }
public void test0492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0492"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 7.6293945E-6f, 2.205992763916979d); org.junit.Assert.assertNotNull(complex2); }
public void test0493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0493"); double double1 = org.apache.commons.math.util.FastMath.log10(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.NEGATIVE_INFINITY + "'", double1 == Double.NEGATIVE_INFINITY); }
public void test0494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0494"); double double1 = org.apache.commons.math.util.FastMath.abs(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0495"); double double1 = org.apache.commons.math.util.FastMath.cosh(3.5553480614894135d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 17.514285714285712d + "'", double1 == 17.514285714285712d); }
public void test0496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0496"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double3 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex8 = complex6.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex18 = complex16.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); double double22 = complex21.abs(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex26 = complex25.log(); org.apache.commons.math.complex.Complex complex27 = complex25.tanh(); org.apache.commons.math.complex.Complex complex29 = complex27.multiply((int) (short) 0); org.apache.commons.math.complex.Complex complex30 = complex21.divide(complex27); java.lang.String str31 = complex27.toString(); org.apache.commons.math.complex.Complex complex32 = complex16.divide(complex27); org.apache.commons.math.complex.Complex complex33 = complex8.subtract(complex16); org.apache.commons.math.complex.Complex complex34 = complex8.log(); org.apache.commons.math.complex.Complex complex35 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex36 = complex8.cos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(0.0, 1.557407724654902)" + "'", str31, "(0.0, 1.557407724654902)"); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test0497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0497"); double double2 = org.apache.commons.math.util.FastMath.pow((-0.02001872128744539d), (double) 794L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0498"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.reciprocal(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 0L, (double) 1L); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex9 = complex8.reciprocal(); org.apache.commons.math.complex.Complex complex10 = complex4.multiply(complex9); double double11 = complex9.getReal(); org.apache.commons.math.complex.Complex complex14 = complex9.createComplex(0.9999876561221204d, (double) 1.4E-45f); org.apache.commons.math.complex.Complex complex15 = complex9.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test0499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0499"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 20.903917562335625d); }
public void test0500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0500"); long long1 = org.apache.commons.math.util.FastMath.round((-1.4987863014408054d)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L)); }
public void testConstructor() { Complex z = new Complex(3.0, 4.0); Assert.assertEquals(3.0, z.getReal(), 1.0e-5); Assert.assertEquals(4.0, z.getImaginary(), 1.0e-5); }
public void testConstructorNaN() { Complex z = new Complex(3.0, Double.NaN); Assert.assertTrue(z.isNaN()); z = new Complex(nan, 4.0); Assert.assertTrue(z.isNaN()); z = new Complex(3.0, 4.0); Assert.assertFalse(z.isNaN()); }
public void testAbs() { Complex z = new Complex(3.0, 4.0); Assert.assertEquals(5.0, z.abs(), 1.0e-5); }
public void testAbsNaN() { Assert.assertTrue(Double.isNaN(Complex.NaN.abs())); Complex z = new Complex(inf, nan); Assert.assertTrue(Double.isNaN(z.abs())); }
public void testAbsInfinite() { Complex z = new Complex(inf, 0); Assert.assertEquals(inf, z.abs(), 0); z = new Complex(0, neginf); Assert.assertEquals(inf, z.abs(), 0); z = new Complex(inf, neginf); Assert.assertEquals(inf, z.abs(), 0); }
public void testAdd() { Complex x = new Complex(3.0, 4.0); Complex y = new Complex(5.0, 6.0); Complex z = x.add(y); Assert.assertEquals(8.0, z.getReal(), 1.0e-5); Assert.assertEquals(10.0, z.getImaginary(), 1.0e-5); }
public void testAddNaN() { Complex x = new Complex(3.0, 4.0); Complex z = x.add(Complex.NaN); Assert.assertSame(Complex.NaN, z); z = new Complex(1, nan); Complex w = x.add(z); Assert.assertSame(Complex.NaN, w); }
public void testAddInf() { Complex x = new Complex(1, 1); Complex z = new Complex(inf, 0); Complex w = x.add(z); Assert.assertEquals(w.getImaginary(), 1, 0); Assert.assertEquals(inf, w.getReal(), 0); x = new Complex(neginf, 0); Assert.assertTrue(Double.isNaN(x.add(z).getReal())); }
public void testScalarAdd() { Complex x = new Complex(3.0, 4.0); double yDouble = 2.0; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.add(yComplex), x.add(yDouble)); }
public void testScalarAddNaN() { Complex x = new Complex(3.0, 4.0); double yDouble = Double.NaN; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.add(yComplex), x.add(yDouble)); }
public void testScalarAddInf() { Complex x = new Complex(1, 1); double yDouble = Double.POSITIVE_INFINITY; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.add(yComplex), x.add(yDouble)); x = new Complex(neginf, 0); Assert.assertEquals(x.add(yComplex), x.add(yDouble)); }
public void testConjugate() { Complex x = new Complex(3.0, 4.0); Complex z = x.conjugate(); Assert.assertEquals(3.0, z.getReal(), 1.0e-5); Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5); }
public void testConjugateNaN() { Complex z = Complex.NaN.conjugate(); Assert.assertTrue(z.isNaN()); }
public void testConjugateInfiinite() { Complex z = new Complex(0, inf); Assert.assertEquals(neginf, z.conjugate().getImaginary(), 0); z = new Complex(0, neginf); Assert.assertEquals(inf, z.conjugate().getImaginary(), 0); }
public void testDivide() { Complex x = new Complex(3.0, 4.0); Complex y = new Complex(5.0, 6.0); Complex z = x.divide(y); Assert.assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5); Assert.assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5); }
public void testDivideReal() { Complex x = new Complex(2d, 3d); Complex y = new Complex(2d, 0d); Assert.assertEquals(new Complex(1d, 1.5), x.divide(y)); }
public void testDivideImaginary() { Complex x = new Complex(2d, 3d); Complex y = new Complex(0d, 2d); Assert.assertEquals(new Complex(1.5d, -1d), x.divide(y)); }
public void testDivideInf() { Complex x = new Complex(3, 4); Complex w = new Complex(neginf, inf); Assert.assertTrue(x.divide(w).equals(Complex.ZERO)); Complex z = w.divide(x); Assert.assertTrue(Double.isNaN(z.getReal())); Assert.assertEquals(inf, z.getImaginary(), 0); w = new Complex(inf, inf); z = w.divide(x); Assert.assertTrue(Double.isNaN(z.getImaginary())); Assert.assertEquals(inf, z.getReal(), 0); w = new Complex(1, inf); z = w.divide(w); Assert.assertTrue(Double.isNaN(z.getReal())); Assert.assertTrue(Double.isNaN(z.getImaginary())); }
public void testDivideZero() { Complex x = new Complex(3.0, 4.0); Complex z = x.divide(Complex.ZERO); // Assert.assertEquals(z, Complex.INF); // See MATH-657 Assert.assertEquals(z, Complex.NaN); }
public void testDivideZeroZero() { Complex x = new Complex(0.0, 0.0); Complex z = x.divide(Complex.ZERO); Assert.assertEquals(z, Complex.NaN); }
public void testDivideNaN() { Complex x = new Complex(3.0, 4.0); Complex z = x.divide(Complex.NaN); Assert.assertTrue(z.isNaN()); }
public void testDivideNaNInf() { Complex z = oneInf.divide(Complex.ONE); Assert.assertTrue(Double.isNaN(z.getReal())); Assert.assertEquals(inf, z.getImaginary(), 0); z = negInfNegInf.divide(oneNaN); Assert.assertTrue(Double.isNaN(z.getReal())); Assert.assertTrue(Double.isNaN(z.getImaginary())); z = negInfInf.divide(Complex.ONE); Assert.assertTrue(Double.isNaN(z.getReal())); Assert.assertTrue(Double.isNaN(z.getImaginary())); }
public void testScalarDivide() { Complex x = new Complex(3.0, 4.0); double yDouble = 2.0; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.divide(yComplex), x.divide(yDouble)); }
public void testScalarDivideNaN() { Complex x = new Complex(3.0, 4.0); double yDouble = Double.NaN; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.divide(yComplex), x.divide(yDouble)); }
public void testScalarDivideInf() { Complex x = new Complex(1,1); double yDouble = Double.POSITIVE_INFINITY; Complex yComplex = new Complex(yDouble); TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0); yDouble = Double.NEGATIVE_INFINITY; yComplex = new Complex(yDouble); TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0); x = new Complex(1, Double.NEGATIVE_INFINITY); TestUtils.assertEquals(x.divide(yComplex), x.divide(yDouble), 0); }
public void testScalarDivideZero() { Complex x = new Complex(1,1); TestUtils.assertEquals(x.divide(Complex.ZERO), x.divide(0), 0); }
public void testReciprocal() { Complex z = new Complex(5.0, 6.0); Complex act = z.reciprocal(); double expRe = 5.0 / 61.0; double expIm = -6.0 / 61.0; Assert.assertEquals(expRe, act.getReal(), FastMath.ulp(expRe)); Assert.assertEquals(expIm, act.getImaginary(), FastMath.ulp(expIm)); }
public void testReciprocalReal() { Complex z = new Complex(-2.0, 0.0); Assert.assertEquals(new Complex(-0.5, 0.0), z.reciprocal()); }
public void testReciprocalImaginary() { Complex z = new Complex(0.0, -2.0); Assert.assertEquals(new Complex(0.0, 0.5), z.reciprocal()); }
public void testReciprocalInf() { Complex z = new Complex(neginf, inf); Assert.assertTrue(z.reciprocal().equals(Complex.ZERO)); z = new Complex(1, inf).reciprocal(); Assert.assertEquals(z, Complex.ZERO); }
public void testReciprocalZero() { Assert.assertEquals(Complex.ZERO.reciprocal(), Complex.NaN); }
public void testReciprocalNaN() { Assert.assertTrue(Complex.NaN.reciprocal().isNaN()); }
public void testMultiply() { Complex x = new Complex(3.0, 4.0); Complex y = new Complex(5.0, 6.0); Complex z = x.multiply(y); Assert.assertEquals(-9.0, z.getReal(), 1.0e-5); Assert.assertEquals(38.0, z.getImaginary(), 1.0e-5); }
public void testMultiplyNaN() { Complex x = new Complex(3.0, 4.0); Complex z = x.multiply(Complex.NaN); Assert.assertSame(Complex.NaN, z); z = Complex.NaN.multiply(5); Assert.assertSame(Complex.NaN, z); }
public void testMultiplyInfInf() { // Assert.assertTrue(infInf.multiply(infInf).isNaN()); // MATH-620 Assert.assertTrue(infInf.multiply(infInf).isInfinite()); }
public void testMultiplyNaNInf() { Complex z = new Complex(1,1); Complex w = z.multiply(infOne); Assert.assertEquals(w.getReal(), inf, 0); Assert.assertEquals(w.getImaginary(), inf, 0); // [MATH-164] Assert.assertTrue(new Complex( 1,0).multiply(infInf).equals(Complex.INF)); Assert.assertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF)); Assert.assertTrue(new Complex( 1,0).multiply(negInfZero).equals(Complex.INF)); w = oneInf.multiply(oneNegInf); Assert.assertEquals(w.getReal(), inf, 0); Assert.assertEquals(w.getImaginary(), inf, 0); w = negInfNegInf.multiply(oneNaN); Assert.assertTrue(Double.isNaN(w.getReal())); Assert.assertTrue(Double.isNaN(w.getImaginary())); z = new Complex(1, neginf); Assert.assertSame(Complex.INF, z.multiply(z)); }
public void testScalarMultiply() { Complex x = new Complex(3.0, 4.0); double yDouble = 2.0; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble)); int zInt = -5; Complex zComplex = new Complex(zInt); Assert.assertEquals(x.multiply(zComplex), x.multiply(zInt)); }
public void testScalarMultiplyNaN() { Complex x = new Complex(3.0, 4.0); double yDouble = Double.NaN; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble)); }
public void testScalarMultiplyInf() { Complex x = new Complex(1, 1); double yDouble = Double.POSITIVE_INFINITY; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble)); yDouble = Double.NEGATIVE_INFINITY; yComplex = new Complex(yDouble); Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble)); }
public void testNegate() { Complex x = new Complex(3.0, 4.0); Complex z = x.negate(); Assert.assertEquals(-3.0, z.getReal(), 1.0e-5); Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5); }
public void testNegateNaN() { Complex z = Complex.NaN.negate(); Assert.assertTrue(z.isNaN()); }
public void testSubtract() { Complex x = new Complex(3.0, 4.0); Complex y = new Complex(5.0, 6.0); Complex z = x.subtract(y); Assert.assertEquals(-2.0, z.getReal(), 1.0e-5); Assert.assertEquals(-2.0, z.getImaginary(), 1.0e-5); }
public void testSubtractNaN() { Complex x = new Complex(3.0, 4.0); Complex z = x.subtract(Complex.NaN); Assert.assertSame(Complex.NaN, z); z = new Complex(1, nan); Complex w = x.subtract(z); Assert.assertSame(Complex.NaN, w); }
public void testSubtractInf() { Complex x = new Complex(1, 1); Complex z = new Complex(neginf, 0); Complex w = x.subtract(z); Assert.assertEquals(w.getImaginary(), 1, 0); Assert.assertEquals(inf, w.getReal(), 0); x = new Complex(neginf, 0); Assert.assertTrue(Double.isNaN(x.subtract(z).getReal())); }
public void testScalarSubtract() { Complex x = new Complex(3.0, 4.0); double yDouble = 2.0; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble)); }
public void testScalarSubtractNaN() { Complex x = new Complex(3.0, 4.0); double yDouble = Double.NaN; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble)); }
public void testScalarSubtractInf() { Complex x = new Complex(1, 1); double yDouble = Double.POSITIVE_INFINITY; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble)); x = new Complex(neginf, 0); Assert.assertEquals(x.subtract(yComplex), x.subtract(yDouble)); }
public void testEqualsNull() { Complex x = new Complex(3.0, 4.0); Assert.assertFalse(x.equals(null)); }
public void testEqualsClass() { Complex x = new Complex(3.0, 4.0); Assert.assertFalse(x.equals(this)); }
public void testEqualsSame() { Complex x = new Complex(3.0, 4.0); Assert.assertTrue(x.equals(x)); }
public void testEqualsTrue() { Complex x = new Complex(3.0, 4.0); Complex y = new Complex(3.0, 4.0); Assert.assertTrue(x.equals(y)); }
public void testEqualsRealDifference() { Complex x = new Complex(0.0, 0.0); Complex y = new Complex(0.0 + Double.MIN_VALUE, 0.0); Assert.assertFalse(x.equals(y)); }
public void testEqualsImaginaryDifference() { Complex x = new Complex(0.0, 0.0); Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE); Assert.assertFalse(x.equals(y)); }
public void testEqualsNaN() { Complex realNaN = new Complex(Double.NaN, 0.0); Complex imaginaryNaN = new Complex(0.0, Double.NaN); Complex complexNaN = Complex.NaN; Assert.assertTrue(realNaN.equals(imaginaryNaN)); Assert.assertTrue(imaginaryNaN.equals(complexNaN)); Assert.assertTrue(realNaN.equals(complexNaN)); }
public void testHashCode() { Complex x = new Complex(0.0, 0.0); Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE); Assert.assertFalse(x.hashCode()==y.hashCode()); y = new Complex(0.0 + Double.MIN_VALUE, 0.0); Assert.assertFalse(x.hashCode()==y.hashCode()); Complex realNaN = new Complex(Double.NaN, 0.0); Complex imaginaryNaN = new Complex(0.0, Double.NaN); Assert.assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode()); Assert.assertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode()); }
public void testAcos() { Complex z = new Complex(3, 4); Complex expected = new Complex(0.936812, -2.30551); TestUtils.assertEquals(expected, z.acos(), 1.0e-5); TestUtils.assertEquals(new Complex(FastMath.acos(0), 0), Complex.ZERO.acos(), 1.0e-12); }
public void testAcosInf() { TestUtils.assertSame(Complex.NaN, oneInf.acos()); TestUtils.assertSame(Complex.NaN, oneNegInf.acos()); TestUtils.assertSame(Complex.NaN, infOne.acos()); TestUtils.assertSame(Complex.NaN, negInfOne.acos()); TestUtils.assertSame(Complex.NaN, infInf.acos()); TestUtils.assertSame(Complex.NaN, infNegInf.acos()); TestUtils.assertSame(Complex.NaN, negInfInf.acos()); TestUtils.assertSame(Complex.NaN, negInfNegInf.acos()); }
public void testAcosNaN() { Assert.assertTrue(Complex.NaN.acos().isNaN()); }
public void testAsin() { Complex z = new Complex(3, 4); Complex expected = new Complex(0.633984, 2.30551); TestUtils.assertEquals(expected, z.asin(), 1.0e-5); }
public void testAsinNaN() { Assert.assertTrue(Complex.NaN.asin().isNaN()); }
public void testAsinInf() { TestUtils.assertSame(Complex.NaN, oneInf.asin()); TestUtils.assertSame(Complex.NaN, oneNegInf.asin()); TestUtils.assertSame(Complex.NaN, infOne.asin()); TestUtils.assertSame(Complex.NaN, negInfOne.asin()); TestUtils.assertSame(Complex.NaN, infInf.asin()); TestUtils.assertSame(Complex.NaN, infNegInf.asin()); TestUtils.assertSame(Complex.NaN, negInfInf.asin()); TestUtils.assertSame(Complex.NaN, negInfNegInf.asin()); }
public void testAtan() { Complex z = new Complex(3, 4); Complex expected = new Complex(1.44831, 0.158997); TestUtils.assertEquals(expected, z.atan(), 1.0e-5); }
public void testAtanInf() { TestUtils.assertSame(Complex.NaN, oneInf.atan()); TestUtils.assertSame(Complex.NaN, oneNegInf.atan()); TestUtils.assertSame(Complex.NaN, infOne.atan()); TestUtils.assertSame(Complex.NaN, negInfOne.atan()); TestUtils.assertSame(Complex.NaN, infInf.atan()); TestUtils.assertSame(Complex.NaN, infNegInf.atan()); TestUtils.assertSame(Complex.NaN, negInfInf.atan()); TestUtils.assertSame(Complex.NaN, negInfNegInf.atan()); }
public void testAtanI() { Assert.assertTrue(Complex.I.atan().isNaN()); }
public void testAtanNaN() { Assert.assertTrue(Complex.NaN.atan().isNaN()); }
public void testCos() { Complex z = new Complex(3, 4); Complex expected = new Complex(-27.03495, -3.851153); TestUtils.assertEquals(expected, z.cos(), 1.0e-5); }
public void testCosNaN() { Assert.assertTrue(Complex.NaN.cos().isNaN()); }
public void testCosInf() { TestUtils.assertSame(infNegInf, oneInf.cos()); TestUtils.assertSame(infInf, oneNegInf.cos()); TestUtils.assertSame(Complex.NaN, infOne.cos()); TestUtils.assertSame(Complex.NaN, negInfOne.cos()); TestUtils.assertSame(Complex.NaN, infInf.cos()); TestUtils.assertSame(Complex.NaN, infNegInf.cos()); TestUtils.assertSame(Complex.NaN, negInfInf.cos()); TestUtils.assertSame(Complex.NaN, negInfNegInf.cos()); }
public void testCosh() { Complex z = new Complex(3, 4); Complex expected = new Complex(-6.58066, -7.58155); TestUtils.assertEquals(expected, z.cosh(), 1.0e-5); }
public void testCoshNaN() { Assert.assertTrue(Complex.NaN.cosh().isNaN()); }
public void testCoshInf() { TestUtils.assertSame(Complex.NaN, oneInf.cosh()); TestUtils.assertSame(Complex.NaN, oneNegInf.cosh()); TestUtils.assertSame(infInf, infOne.cosh()); TestUtils.assertSame(infNegInf, negInfOne.cosh()); TestUtils.assertSame(Complex.NaN, infInf.cosh()); TestUtils.assertSame(Complex.NaN, infNegInf.cosh()); TestUtils.assertSame(Complex.NaN, negInfInf.cosh()); TestUtils.assertSame(Complex.NaN, negInfNegInf.cosh()); }
public void testExp() { Complex z = new Complex(3, 4); Complex expected = new Complex(-13.12878, -15.20078); TestUtils.assertEquals(expected, z.exp(), 1.0e-5); TestUtils.assertEquals(Complex.ONE, Complex.ZERO.exp(), 10e-12); Complex iPi = Complex.I.multiply(new Complex(pi,0)); TestUtils.assertEquals(Complex.ONE.negate(), iPi.exp(), 10e-12); }
public void testExpNaN() { Assert.assertTrue(Complex.NaN.exp().isNaN()); }
public void testExpInf() { TestUtils.assertSame(Complex.NaN, oneInf.exp()); TestUtils.assertSame(Complex.NaN, oneNegInf.exp()); TestUtils.assertSame(infInf, infOne.exp()); TestUtils.assertSame(Complex.ZERO, negInfOne.exp()); TestUtils.assertSame(Complex.NaN, infInf.exp()); TestUtils.assertSame(Complex.NaN, infNegInf.exp()); TestUtils.assertSame(Complex.NaN, negInfInf.exp()); TestUtils.assertSame(Complex.NaN, negInfNegInf.exp()); }
public void testLog() { Complex z = new Complex(3, 4); Complex expected = new Complex(1.60944, 0.927295); TestUtils.assertEquals(expected, z.log(), 1.0e-5); }
public void testLogNaN() { Assert.assertTrue(Complex.NaN.log().isNaN()); }
public void testLogInf() { TestUtils.assertEquals(new Complex(inf, pi / 2), oneInf.log(), 10e-12); TestUtils.assertEquals(new Complex(inf, -pi / 2), oneNegInf.log(), 10e-12); TestUtils.assertEquals(infZero, infOne.log(), 10e-12); TestUtils.assertEquals(new Complex(inf, pi), negInfOne.log(), 10e-12); TestUtils.assertEquals(new Complex(inf, pi / 4), infInf.log(), 10e-12); TestUtils.assertEquals(new Complex(inf, -pi / 4), infNegInf.log(), 10e-12); TestUtils.assertEquals(new Complex(inf, 3d * pi / 4), negInfInf.log(), 10e-12); TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4), negInfNegInf.log(), 10e-12); }
public void testLogZero() { TestUtils.assertSame(negInfZero, Complex.ZERO.log()); }
public void testPow() { Complex x = new Complex(3, 4); Complex y = new Complex(5, 6); Complex expected = new Complex(-1.860893, 11.83677); TestUtils.assertEquals(expected, x.pow(y), 1.0e-5); }
public void testPowNaNBase() { Complex x = new Complex(3, 4); Assert.assertTrue(Complex.NaN.pow(x).isNaN()); }
public void testPowNaNExponent() { Complex x = new Complex(3, 4); Assert.assertTrue(x.pow(Complex.NaN).isNaN()); }
public void testPowInf() { TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneInf)); TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneNegInf)); TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infOne)); TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infInf)); TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infNegInf)); TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfInf)); TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfNegInf)); TestUtils.assertSame(Complex.NaN,infOne.pow(Complex.ONE)); TestUtils.assertSame(Complex.NaN,negInfOne.pow(Complex.ONE)); TestUtils.assertSame(Complex.NaN,infInf.pow(Complex.ONE)); TestUtils.assertSame(Complex.NaN,infNegInf.pow(Complex.ONE)); TestUtils.assertSame(Complex.NaN,negInfInf.pow(Complex.ONE)); TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Complex.ONE)); TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infNegInf)); TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(negInfNegInf)); TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infInf)); TestUtils.assertSame(Complex.NaN,infInf.pow(infNegInf)); TestUtils.assertSame(Complex.NaN,infInf.pow(negInfNegInf)); TestUtils.assertSame(Complex.NaN,infInf.pow(infInf)); TestUtils.assertSame(Complex.NaN,infNegInf.pow(infNegInf)); TestUtils.assertSame(Complex.NaN,infNegInf.pow(negInfNegInf)); TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf)); }
public void testPowZero() { TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(Complex.ONE)); TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(Complex.ZERO)); TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(Complex.I)); TestUtils.assertEquals(Complex.ONE, Complex.ONE.pow(Complex.ZERO), 10e-12); TestUtils.assertEquals(Complex.ONE, Complex.I.pow(Complex.ZERO), 10e-12); TestUtils.assertEquals(Complex.ONE, new Complex(-1, 3).pow(Complex.ZERO), 10e-12); }
public void testScalarPow() { Complex x = new Complex(3, 4); double yDouble = 5.0; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.pow(yComplex), x.pow(yDouble)); }
public void testScalarPowNaNBase() { Complex x = Complex.NaN; double yDouble = 5.0; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.pow(yComplex), x.pow(yDouble)); }
public void testScalarPowNaNExponent() { Complex x = new Complex(3, 4); double yDouble = Double.NaN; Complex yComplex = new Complex(yDouble); Assert.assertEquals(x.pow(yComplex), x.pow(yDouble)); }
public void testScalarPowInf() { TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.POSITIVE_INFINITY)); TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.NEGATIVE_INFINITY)); TestUtils.assertSame(Complex.NaN,infOne.pow(1.0)); TestUtils.assertSame(Complex.NaN,negInfOne.pow(1.0)); TestUtils.assertSame(Complex.NaN,infInf.pow(1.0)); TestUtils.assertSame(Complex.NaN,infNegInf.pow(1.0)); TestUtils.assertSame(Complex.NaN,negInfInf.pow(10)); TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(1.0)); TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY)); TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY)); TestUtils.assertSame(Complex.NaN,infInf.pow(Double.POSITIVE_INFINITY)); TestUtils.assertSame(Complex.NaN,infInf.pow(Double.NEGATIVE_INFINITY)); TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.NEGATIVE_INFINITY)); TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.POSITIVE_INFINITY)); }
public void testScalarPowZero() { TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(1.0)); TestUtils.assertSame(Complex.NaN, Complex.ZERO.pow(0.0)); TestUtils.assertEquals(Complex.ONE, Complex.ONE.pow(0.0), 10e-12); TestUtils.assertEquals(Complex.ONE, Complex.I.pow(0.0), 10e-12); TestUtils.assertEquals(Complex.ONE, new Complex(-1, 3).pow(0.0), 10e-12); }
public void testpowNull() { Complex.ONE.pow(null); }
public void testSin() { Complex z = new Complex(3, 4); Complex expected = new Complex(3.853738, -27.01681); TestUtils.assertEquals(expected, z.sin(), 1.0e-5); }
public void testSinInf() { TestUtils.assertSame(infInf, oneInf.sin()); TestUtils.assertSame(infNegInf, oneNegInf.sin()); TestUtils.assertSame(Complex.NaN, infOne.sin()); TestUtils.assertSame(Complex.NaN, negInfOne.sin()); TestUtils.assertSame(Complex.NaN, infInf.sin()); TestUtils.assertSame(Complex.NaN, infNegInf.sin()); TestUtils.assertSame(Complex.NaN, negInfInf.sin()); TestUtils.assertSame(Complex.NaN, negInfNegInf.sin()); }
public void testSinNaN() { Assert.assertTrue(Complex.NaN.sin().isNaN()); }
public void testSinh() { Complex z = new Complex(3, 4); Complex expected = new Complex(-6.54812, -7.61923); TestUtils.assertEquals(expected, z.sinh(), 1.0e-5); }
public void testSinhNaN() { Assert.assertTrue(Complex.NaN.sinh().isNaN()); }
public void testSinhInf() { TestUtils.assertSame(Complex.NaN, oneInf.sinh()); TestUtils.assertSame(Complex.NaN, oneNegInf.sinh()); TestUtils.assertSame(infInf, infOne.sinh()); TestUtils.assertSame(negInfInf, negInfOne.sinh()); TestUtils.assertSame(Complex.NaN, infInf.sinh()); TestUtils.assertSame(Complex.NaN, infNegInf.sinh()); TestUtils.assertSame(Complex.NaN, negInfInf.sinh()); TestUtils.assertSame(Complex.NaN, negInfNegInf.sinh()); }
public void testSqrtRealPositive() { Complex z = new Complex(3, 4); Complex expected = new Complex(2, 1); TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); }
public void testSqrtRealZero() { Complex z = new Complex(0.0, 4); Complex expected = new Complex(1.41421, 1.41421); TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); }
public void testSqrtRealNegative() { Complex z = new Complex(-3.0, 4); Complex expected = new Complex(1, 2); TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); }
public void testSqrtImaginaryZero() { Complex z = new Complex(-3.0, 0.0); Complex expected = new Complex(0.0, 1.73205); TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); }
public void testSqrtImaginaryNegative() { Complex z = new Complex(-3.0, -4.0); Complex expected = new Complex(1.0, -2.0); TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5); }
public void testSqrtPolar() { double r = 1; for (int i = 0; i < 5; i++) { r += i; double theta = 0; for (int j =0; j < 11; j++) { theta += pi /12; Complex z = ComplexUtils.polar2Complex(r, theta); Complex sqrtz = ComplexUtils.polar2Complex(FastMath.sqrt(r), theta / 2); TestUtils.assertEquals(sqrtz, z.sqrt(), 10e-12); } } }
public void testSqrtNaN() { Assert.assertTrue(Complex.NaN.sqrt().isNaN()); }
public void testSqrtInf() { TestUtils.assertSame(infNaN, oneInf.sqrt()); TestUtils.assertSame(infNaN, oneNegInf.sqrt()); TestUtils.assertSame(infZero, infOne.sqrt()); TestUtils.assertSame(zeroInf, negInfOne.sqrt()); TestUtils.assertSame(infNaN, infInf.sqrt()); TestUtils.assertSame(infNaN, infNegInf.sqrt()); TestUtils.assertSame(nanInf, negInfInf.sqrt()); TestUtils.assertSame(nanNegInf, negInfNegInf.sqrt()); }
public void testSqrt1z() { Complex z = new Complex(3, 4); Complex expected = new Complex(4.08033, -2.94094); TestUtils.assertEquals(expected, z.sqrt1z(), 1.0e-5); }
public void testSqrt1zNaN() { Assert.assertTrue(Complex.NaN.sqrt1z().isNaN()); }
public void testTan() { Complex z = new Complex(3, 4); Complex expected = new Complex(-0.000187346, 0.999356); TestUtils.assertEquals(expected, z.tan(), 1.0e-5); /* Check that no overflow occurs (MATH-722) */ Complex actual = new Complex(3.0, 1E10).tan(); expected = new Complex(0, 1); TestUtils.assertEquals(expected, actual, 1.0e-5); actual = new Complex(3.0, -1E10).tan(); expected = new Complex(0, -1); TestUtils.assertEquals(expected, actual, 1.0e-5); }
public void testTanNaN() { Assert.assertTrue(Complex.NaN.tan().isNaN()); }
public void testTanInf() { TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan()); TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan()); TestUtils.assertSame(Complex.NaN, infOne.tan()); TestUtils.assertSame(Complex.NaN, negInfOne.tan()); TestUtils.assertSame(Complex.NaN, infInf.tan()); TestUtils.assertSame(Complex.NaN, infNegInf.tan()); TestUtils.assertSame(Complex.NaN, negInfInf.tan()); TestUtils.assertSame(Complex.NaN, negInfNegInf.tan()); }
public void testTanCritical() { TestUtils.assertSame(infNaN, new Complex(pi/2, 0).tan()); TestUtils.assertSame(negInfNaN, new Complex(-pi/2, 0).tan()); }
public void testTanh() { Complex z = new Complex(3, 4); Complex expected = new Complex(1.00071, 0.00490826); TestUtils.assertEquals(expected, z.tanh(), 1.0e-5); /* Check that no overflow occurs (MATH-722) */ Complex actual = new Complex(1E10, 3.0).tanh(); expected = new Complex(1, 0); TestUtils.assertEquals(expected, actual, 1.0e-5); actual = new Complex(-1E10, 3.0).tanh(); expected = new Complex(-1, 0); TestUtils.assertEquals(expected, actual, 1.0e-5); }
public void testTanhNaN() { Assert.assertTrue(Complex.NaN.tanh().isNaN()); }
public void testTanhInf() { TestUtils.assertSame(Complex.NaN, oneInf.tanh()); TestUtils.assertSame(Complex.NaN, oneNegInf.tanh()); TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh()); TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh()); TestUtils.assertSame(Complex.NaN, infInf.tanh()); TestUtils.assertSame(Complex.NaN, infNegInf.tanh()); TestUtils.assertSame(Complex.NaN, negInfInf.tanh()); TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh()); }
public void testTanhCritical() { TestUtils.assertSame(nanInf, new Complex(0, pi/2).tanh()); }
public void testMath221() { Assert.assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0))); }
public void testNthRoot_normal_thirdRoot() { // The complex number we want to compute all third-roots for. Complex z = new Complex(-2,2); // The List holding all third roots Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]); // Returned Collection must not be empty! Assert.assertEquals(3, thirdRootsOfZ.length); // test z_0 Assert.assertEquals(1.0,         thirdRootsOfZ[0].getReal(),   1.0e-5); Assert.assertEquals(1.0,         thirdRootsOfZ[0].getImaginary(), 1.0e-5); // test z_1 Assert.assertEquals(-1.3660254037844386, thirdRootsOfZ[1].getReal(),   1.0e-5); Assert.assertEquals(0.36602540378443843, thirdRootsOfZ[1].getImaginary(), 1.0e-5); // test z_2 Assert.assertEquals(0.366025403784439,  thirdRootsOfZ[2].getReal(),   1.0e-5); Assert.assertEquals(-1.3660254037844384, thirdRootsOfZ[2].getImaginary(), 1.0e-5); }
public void testNthRoot_normal_fourthRoot() { // The complex number we want to compute all third-roots for. Complex z = new Complex(5,-2); // The List holding all fourth roots Complex[] fourthRootsOfZ = z.nthRoot(4).toArray(new Complex[0]); // Returned Collection must not be empty! Assert.assertEquals(4, fourthRootsOfZ.length); // test z_0 Assert.assertEquals(1.5164629308487783,   fourthRootsOfZ[0].getReal(),   1.0e-5); Assert.assertEquals(-0.14469266210702247,  fourthRootsOfZ[0].getImaginary(), 1.0e-5); // test z_1 Assert.assertEquals(0.14469266210702256,  fourthRootsOfZ[1].getReal(),   1.0e-5); Assert.assertEquals(1.5164629308487783,   fourthRootsOfZ[1].getImaginary(), 1.0e-5); // test z_2 Assert.assertEquals(-1.5164629308487783,  fourthRootsOfZ[2].getReal(),   1.0e-5); Assert.assertEquals(0.14469266210702267,  fourthRootsOfZ[2].getImaginary(), 1.0e-5); // test z_3 Assert.assertEquals(-0.14469266210702275,  fourthRootsOfZ[3].getReal(),   1.0e-5); Assert.assertEquals(-1.5164629308487783,  fourthRootsOfZ[3].getImaginary(), 1.0e-5); }
public void testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty() { // The number 8 has three third roots. One we all already know is the number 2. // But there are two more complex roots. Complex z = new Complex(8,0); // The List holding all third roots Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]); // Returned Collection must not be empty! Assert.assertEquals(3, thirdRootsOfZ.length); // test z_0 Assert.assertEquals(2.0,        thirdRootsOfZ[0].getReal(),   1.0e-5); Assert.assertEquals(0.0,        thirdRootsOfZ[0].getImaginary(), 1.0e-5); // test z_1 Assert.assertEquals(-1.0,        thirdRootsOfZ[1].getReal(),   1.0e-5); Assert.assertEquals(1.7320508075688774, thirdRootsOfZ[1].getImaginary(), 1.0e-5); // test z_2 Assert.assertEquals(-1.0,        thirdRootsOfZ[2].getReal(),   1.0e-5); Assert.assertEquals(-1.732050807568877, thirdRootsOfZ[2].getImaginary(), 1.0e-5); }
public void testNthRoot_cornercase_thirdRoot_realPartZero() { // complex number with only imaginary part Complex z = new Complex(0,2); // The List holding all third roots Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]); // Returned Collection must not be empty! Assert.assertEquals(3, thirdRootsOfZ.length); // test z_0 Assert.assertEquals(1.0911236359717216,   thirdRootsOfZ[0].getReal(),   1.0e-5); Assert.assertEquals(0.6299605249474365,   thirdRootsOfZ[0].getImaginary(), 1.0e-5); // test z_1 Assert.assertEquals(-1.0911236359717216,   thirdRootsOfZ[1].getReal(),   1.0e-5); Assert.assertEquals(0.6299605249474365,   thirdRootsOfZ[1].getImaginary(), 1.0e-5); // test z_2 Assert.assertEquals(-2.3144374213981936E-16, thirdRootsOfZ[2].getReal(),   1.0e-5); Assert.assertEquals(-1.2599210498948732,   thirdRootsOfZ[2].getImaginary(), 1.0e-5); }
public void testNthRoot_cornercase_NAN_Inf() { // NaN + finite -> NaN List<Complex> roots = oneNaN.nthRoot(3); Assert.assertEquals(1,roots.size()); Assert.assertEquals(Complex.NaN, roots.get(0)); roots = nanZero.nthRoot(3); Assert.assertEquals(1,roots.size()); Assert.assertEquals(Complex.NaN, roots.get(0)); // NaN + infinite -> NaN roots = nanInf.nthRoot(3); Assert.assertEquals(1,roots.size()); Assert.assertEquals(Complex.NaN, roots.get(0)); // finite + infinite -> Inf roots = oneInf.nthRoot(3); Assert.assertEquals(1,roots.size()); Assert.assertEquals(Complex.INF, roots.get(0)); // infinite + infinite -> Inf roots = negInfInf.nthRoot(3); Assert.assertEquals(1,roots.size()); Assert.assertEquals(Complex.INF, roots.get(0)); }
public void testGetArgument() { Complex z = new Complex(1, 0); Assert.assertEquals(0.0, z.getArgument(), 1.0e-12); z = new Complex(1, 1); Assert.assertEquals(FastMath.PI/4, z.getArgument(), 1.0e-12); z = new Complex(0, 1); Assert.assertEquals(FastMath.PI/2, z.getArgument(), 1.0e-12); z = new Complex(-1, 1); Assert.assertEquals(3 * FastMath.PI/4, z.getArgument(), 1.0e-12); z = new Complex(-1, 0); Assert.assertEquals(FastMath.PI, z.getArgument(), 1.0e-12); z = new Complex(-1, -1); Assert.assertEquals(-3 * FastMath.PI/4, z.getArgument(), 1.0e-12); z = new Complex(0, -1); Assert.assertEquals(-FastMath.PI/2, z.getArgument(), 1.0e-12); z = new Complex(1, -1); Assert.assertEquals(-FastMath.PI/4, z.getArgument(), 1.0e-12); }
public void testGetArgumentInf() { Assert.assertEquals(FastMath.PI/4, infInf.getArgument(), 1.0e-12); Assert.assertEquals(FastMath.PI/2, oneInf.getArgument(), 1.0e-12); Assert.assertEquals(0.0, infOne.getArgument(), 1.0e-12); Assert.assertEquals(FastMath.PI/2, zeroInf.getArgument(), 1.0e-12); Assert.assertEquals(0.0, infZero.getArgument(), 1.0e-12); Assert.assertEquals(FastMath.PI, negInfOne.getArgument(), 1.0e-12); Assert.assertEquals(-3.0*FastMath.PI/4, negInfNegInf.getArgument(), 1.0e-12); Assert.assertEquals(-FastMath.PI/2, oneNegInf.getArgument(), 1.0e-12); }
public void testGetArgumentNaN() { Assert.assertTrue(Double.isNaN(nanZero.getArgument())); Assert.assertTrue(Double.isNaN(zeroNaN.getArgument())); Assert.assertTrue(Double.isNaN(Complex.NaN.getArgument())); }
public void testSerial() { Complex z = new Complex(3.0, 4.0); Assert.assertEquals(z, TestUtils.serializeAndRecover(z)); Complex ncmplx = (Complex)TestUtils.serializeAndRecover(oneNaN); Assert.assertEquals(nanZero, ncmplx); Assert.assertTrue(ncmplx.isNaN()); Complex infcmplx = (Complex)TestUtils.serializeAndRecover(infInf); Assert.assertEquals(infInf, infcmplx); Assert.assertTrue(infcmplx.isInfinite()); TestComplex tz = new TestComplex(3.0, 4.0); Assert.assertEquals(tz, TestUtils.serializeAndRecover(tz)); TestComplex ntcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(oneNaN)); Assert.assertEquals(nanZero, ntcmplx); Assert.assertTrue(ntcmplx.isNaN()); TestComplex inftcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(infInf)); Assert.assertEquals(infInf, inftcmplx); Assert.assertTrue(inftcmplx.isInfinite()); }
public void testSimpleNoDecimals() { Complex c = new Complex(1, 2); String expected = "1 + 2i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testTrimOneImaginary() { final ComplexFormat fmt = ComplexFormat.getInstance(getLocale()); fmt.getImaginaryFormat().setMaximumFractionDigits(1); Complex c = new Complex(1, 1.04); String expected = "1 + i"; String actual = fmt.format(c); Assert.assertEquals(expected, actual); c = new Complex(1, 1.09); expected = "1 + 1" + getDecimalCharacter() + "1i"; actual = fmt.format(c); Assert.assertEquals(expected, actual); c = new Complex(1, -1.09); expected = "1 - 1" + getDecimalCharacter() + "1i"; actual = fmt.format(c); Assert.assertEquals(expected, actual); c = new Complex(1, -1.04); expected = "1 - i"; actual = fmt.format(c); Assert.assertEquals(expected, actual); }
public void testSimpleWithDecimals() { Complex c = new Complex(1.23, 1.43); String expected = "1" + getDecimalCharacter() + "23 + 1" + getDecimalCharacter() + "43i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testSimpleWithDecimalsTrunc() { Complex c = new Complex(1.2323, 1.4343); String expected = "1" + getDecimalCharacter() + "23 + 1" + getDecimalCharacter() + "43i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testNegativeReal() { Complex c = new Complex(-1.2323, 1.4343); String expected = "-1" + getDecimalCharacter() + "23 + 1" + getDecimalCharacter() + "43i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testNegativeImaginary() { Complex c = new Complex(1.2323, -1.4343); String expected = "1" + getDecimalCharacter() + "23 - 1" + getDecimalCharacter() + "43i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testNegativeBoth() { Complex c = new Complex(-1.2323, -1.4343); String expected = "-1" + getDecimalCharacter() + "23 - 1" + getDecimalCharacter() + "43i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testZeroReal() { Complex c = new Complex(0.0, -1.4343); String expected = "0 - 1" + getDecimalCharacter() + "43i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testZeroImaginary() { Complex c = new Complex(30.233, 0); String expected = "30" + getDecimalCharacter() + "23"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testDifferentImaginaryChar() { Complex c = new Complex(1, 1); String expected = "1 + j"; String actual = complexFormatJ.format(c); Assert.assertEquals(expected, actual); }
public void testDefaultFormatComplex() { Locale defaultLocal = Locale.getDefault(); Locale.setDefault(getLocale()); Complex c = new Complex(232.222, -342.33); String expected = "232" + getDecimalCharacter() + "22 - 342" + getDecimalCharacter() + "33i"; String actual = (new ComplexFormat()).format(c); Assert.assertEquals(expected, actual); Locale.setDefault(defaultLocal); }
public void testNan() { Complex c = new Complex(Double.NaN, Double.NaN); String expected = "(NaN) + (NaN)i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testPositiveInfinity() { Complex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY); String expected = "(Infinity) + (Infinity)i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testNegativeInfinity() { Complex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY); String expected = "(-Infinity) - (Infinity)i"; String actual = complexFormat.format(c); Assert.assertEquals(expected, actual); }
public void testParseSimpleNoDecimals() { String source = "1 + 1i"; Complex expected = new Complex(1, 1); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testParseSimpleWithDecimals() { String source = "1" + getDecimalCharacter() + "23 + 1" + getDecimalCharacter() + "43i"; Complex expected = new Complex(1.23, 1.43); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testParseSimpleWithDecimalsTrunc() { String source = "1" + getDecimalCharacter() + "2323 + 1" + getDecimalCharacter() + "4343i"; Complex expected = new Complex(1.2323, 1.4343); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testParseNegativeReal() { String source = "-1" + getDecimalCharacter() + "2323 + 1" + getDecimalCharacter() + "4343i"; Complex expected = new Complex(-1.2323, 1.4343); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testParseNegativeImaginary() { String source = "1" + getDecimalCharacter() + "2323 - 1" + getDecimalCharacter() + "4343i"; Complex expected = new Complex(1.2323, -1.4343); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testParseNegativeBoth() { String source = "-1" + getDecimalCharacter() + "2323 - 1" + getDecimalCharacter() + "4343i"; Complex expected = new Complex(-1.2323, -1.4343); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testParseZeroReal() { String source = "0" + getDecimalCharacter() + "0 - 1" + getDecimalCharacter() + "4343i"; Complex expected = new Complex(0.0, -1.4343); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testParseZeroImaginary() { String source = "-1" + getDecimalCharacter() + "2323"; Complex expected = new Complex(-1.2323, 0); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testParseDifferentImaginaryChar() { String source = "-1" + getDecimalCharacter() + "2323 - 1" + getDecimalCharacter() + "4343j"; Complex expected = new Complex(-1.2323, -1.4343); Complex actual = complexFormatJ.parse(source); Assert.assertEquals(expected, actual); }
public void testParseNan() { String source = "(NaN) + (NaN)i"; Complex expected = new Complex(Double.NaN, Double.NaN); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testParsePositiveInfinity() { String source = "(Infinity) + (Infinity)i"; Complex expected = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testPaseNegativeInfinity() { String source = "(-Infinity) - (Infinity)i"; Complex expected = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY); Complex actual = complexFormat.parse(source); Assert.assertEquals(expected, actual); }
public void testConstructorSingleFormat() { NumberFormat nf = NumberFormat.getInstance(); ComplexFormat cf = new ComplexFormat(nf); Assert.assertNotNull(cf); Assert.assertEquals(nf, cf.getRealFormat()); }
public void testGetImaginaryFormat() { NumberFormat nf = NumberFormat.getInstance(); ComplexFormat cf = new ComplexFormat(nf); Assert.assertSame(nf, cf.getImaginaryFormat()); }
public void testGetRealFormat() { NumberFormat nf = NumberFormat.getInstance(); ComplexFormat cf = new ComplexFormat(nf); Assert.assertSame(nf, cf.getRealFormat()); }
public void testFormatNumber() { ComplexFormat cf = ComplexFormat.getInstance(getLocale()); Double pi = Double.valueOf(FastMath.PI); String text = cf.format(pi); Assert.assertEquals("3" + getDecimalCharacter() + "14", text); }
public void testForgottenImaginaryCharacter() { ParsePosition pos = new ParsePosition(0); Assert.assertNull(new ComplexFormat().parse("1 + 1", pos)); Assert.assertEquals(5, pos.getErrorIndex()); }
public void test00() throws Throwable { Complex complex0 = new Complex((-758.0434770868716), Double.POSITIVE_INFINITY); Complex complex1 = complex0.acos(); double double0 = complex1.abs(); assertEquals(Double.NaN, double0, 0.01); assertEquals((-758.0434770868716), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); }
public void test01() throws Throwable { Complex complex0 = new Complex(0.0, (-5.309047216809048E-47)); String string0 = complex0.NaN.toString(); assertEquals("(NaN, NaN)", string0); assertEquals((-5.309047216809048E-47), complex0.getImaginary(), 0.01); assertFalse(complex0.isNaN()); assertFalse(complex0.isInfinite()); assertEquals(0.0, complex0.getReal(), 0.01); }
public void test02() throws Throwable { Complex complex0 = new Complex((-758.0434770868716), Double.POSITIVE_INFINITY); Complex complex1 = complex0.pow(complex0); assertFalse(complex1.isInfinite()); assertEquals((-758.0434770868716), complex0.getReal(), 0.01); assertTrue(complex1.isNaN()); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test03() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); complex0.NaN.getField(); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); }
public void test04() throws Throwable { Complex complex0 = Complex.NaN; boolean boolean0 = complex0.isNaN(); assertTrue(boolean0); }
public void test05() throws Throwable { Complex complex0 = new Complex(894.5); Complex complex1 = complex0.tanh(); assertFalse(complex1.isInfinite()); assertEquals(0.0, complex1.getImaginary(), 0.01); assertEquals(1.0, complex1.getReal(), 0.01); assertEquals(894.5, complex0.getReal(), 0.01); }
public void test06() throws Throwable { Complex complex0 = new Complex((-596.114854983), (-596.114854983)); Complex complex1 = complex0.I.pow(Double.NaN); assertFalse(complex0.isInfinite()); assertEquals((-596.114854983), complex0.getReal(), 0.01); assertTrue(complex1.isNaN()); assertFalse(complex0.isNaN()); assertEquals((-596.114854983), complex0.getImaginary(), 0.01); }
public void test07() throws Throwable { Complex complex0 = Complex.ONE; List<Complex> list0 = complex0.I.nthRoot(17); assertEquals(0.0, complex0.getImaginary(), 0.01); assertEquals(17, list0.size()); }
public void test08() throws Throwable { Complex complex0 = Complex.ZERO; double double0 = complex0.abs(); assertEquals(0.0, double0, 0.01); }
public void test09() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.I.asin(); complex1.multiply(complex0); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals(0.8813735870195428, complex1.getImaginary(), 0.01); }
public void test10() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.add(Double.POSITIVE_INFINITY); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertSame(complex2, complex1); assertTrue(complex0.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); }
public void test11() throws Throwable { Complex complex0 = new Complex(0.0, (-5.309047216809048E-47)); Complex complex1 = complex0.ONE.add(Double.NaN); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertEquals((-5.309047216809048E-47), complex0.getImaginary(), 0.01); assertFalse(complex0.isNaN()); assertEquals(0.0, complex0.getReal(), 0.01); }
public void test12() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.add((double) 239); assertTrue(complex1.equals((Object)complex0)); assertTrue(complex1.isInfinite()); }
public void test13() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.I.conjugate(); assertFalse(complex1.isInfinite()); assertEquals((-1.0), complex1.getImaginary(), 0.01); assertEquals(0.0, complex1.getReal(), 0.01); assertFalse(complex1.isNaN()); }
public void test14() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.NaN.conjugate(); assertTrue(complex1.isNaN()); }
public void test15() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.divide(complex0); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test16() throws Throwable { Complex complex0 = new Complex(2.242630017261011E-174, 2.242630017261011E-174); Complex complex1 = Complex.NaN; Complex complex2 = complex0.INF.divide(complex1); assertEquals(2.242630017261011E-174, complex0.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertEquals(2.242630017261011E-174, complex0.getReal(), 0.01); assertFalse(complex0.isNaN()); assertSame(complex2, complex1); }
public void test17() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.atan(); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test18() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.ZERO.atan(); assertEquals(0.0, complex1.getImaginary(), 0.01); assertEquals(0.0, complex1.getReal(), 0.01); }
public void test19() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.I.divide(complex0); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test20() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.INF.atan(); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertTrue(complex1.isNaN()); }
public void test21() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.divide(1632.00134); assertSame(complex1, complex0); }
public void test22() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.ONE.divide((-1444.5520054)); assertTrue(complex0.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertEquals(-0.0, complex1.getImaginary(), 0.01); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertEquals((-6.922561432622825E-4), complex1.getReal(), 0.01); }
public void test23() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.divide(Double.NaN); assertTrue(complex1.isNaN()); }
public void test24() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.ZERO.divide(0.0); assertEquals(Double.NaN, complex1.getReal(), 0.01); }
public void test25() throws Throwable { Complex complex0 = new Complex(2.8206464984160795E-267, 2.8206464984160795E-267); Complex complex1 = complex0.ZERO.divide(Double.POSITIVE_INFINITY); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals(2.8206464984160795E-267, complex0.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertEquals(2.8206464984160795E-267, complex0.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); assertFalse(complex0.isNaN()); }
public void test26() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test27() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.INF.reciprocal(); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test28() throws Throwable { Complex complex0 = Complex.valueOf((-758.0)); Complex complex1 = complex0.NaN.reciprocal(); assertEquals((-758.0), complex0.getReal(), 0.01); assertEquals(0.0, complex0.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertFalse(complex1.equals((Object)complex0)); assertTrue(complex1.isNaN()); }
public void test29() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.reciprocal(); assertTrue(complex1.isNaN()); }
public void test30() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.reciprocal(); assertTrue(complex1.equals((Object)complex0)); assertEquals(-0.0, complex1.getImaginary(), 0.01); assertFalse(complex1.isNaN()); assertFalse(complex1.isInfinite()); }
public void test31() throws Throwable { Complex complex0 = new Complex(435.95150189); Complex complex1 = Complex.valueOf(435.95150189, (-150.324983)); boolean boolean0 = complex1.equals(complex0); assertEquals(435.95150189, complex1.getReal(), 0.01); assertFalse(boolean0); assertEquals((-150.324983), complex1.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertFalse(complex0.equals((Object)complex1)); }
public void test32() throws Throwable { Complex complex0 = Complex.INF; boolean boolean0 = complex0.equals(complex0); assertTrue(boolean0); }
public void test33() throws Throwable { Complex complex0 = Complex.ONE; boolean boolean0 = complex0.equals((Object) null); assertFalse(boolean0); }
public void test34() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.tan(); boolean boolean0 = complex0.equals(complex1); assertFalse(complex1.equals((Object)complex0)); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertFalse(boolean0); }
public void test35() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = Complex.I; boolean boolean0 = complex0.equals(complex1); assertFalse(boolean0); }
public void test36() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = (Complex)complex0.readResolve(); boolean boolean0 = complex0.equals(complex1); assertFalse(complex1.isInfinite()); assertEquals(0.0, complex1.getImaginary(), 0.01); assertTrue(boolean0); }
public void test37() throws Throwable { Complex complex0 = Complex.valueOf(0.0, 0.0); complex0.hashCode(); assertEquals(0.0, complex0.getReal(), 0.01); assertFalse(complex0.isNaN()); assertFalse(complex0.isInfinite()); assertEquals(0.0, complex0.getImaginary(), 0.01); }
public void test38() throws Throwable { Complex complex0 = Complex.INF; complex0.NaN.hashCode(); }
public void test39() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.INF.pow(complex1); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertSame(complex2, complex1); assertTrue(complex0.isInfinite()); }
public void test40() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.multiply(7); assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test41() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.NaN.multiply(4674); assertTrue(complex1.isNaN()); }
public void test42() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.multiply((-1857)); assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01); }
public void test43() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.ONE.tanh(); Complex complex2 = complex1.multiply(7); assertEquals(0.7615941559557649, complex1.getReal(), 0.01); assertEquals(0.0, complex2.getImaginary(), 0.01); assertEquals(5.331159091690354, complex2.getReal(), 0.01); assertFalse(complex1.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test44() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.multiply(1134.1323099235742); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertSame(complex2, complex1); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); assertEquals(Double.NaN, complex2.getReal(), 0.01); }
public void test45() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.multiply(137.2137468); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test46() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.multiply((-958.3273906468336)); assertTrue(complex1.isInfinite()); }
public void test47() throws Throwable { Complex complex0 = new Complex(435.95150189); Complex complex1 = complex0.pow(435.95150189); assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01); assertEquals(0.0, complex0.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); }
public void test48() throws Throwable { Complex complex0 = new Complex(2828.0003393131005); Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY); assertFalse(complex0.isInfinite()); assertEquals(0.0, complex0.getImaginary(), 0.01); assertEquals(2828.0003393131005, complex0.getReal(), 0.01); assertTrue(complex1.isInfinite()); }
public void test49() throws Throwable { Complex complex0 = new Complex(2.242630017261011E-174, 2.242630017261011E-174); Complex complex1 = complex0.NaN.negate(); assertFalse(complex0.isNaN()); assertEquals(2.242630017261011E-174, complex0.getReal(), 0.01); assertFalse(complex0.isInfinite()); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertEquals(2.242630017261011E-174, complex0.getImaginary(), 0.01); }
public void test50() throws Throwable { Complex complex0 = Complex.valueOf((-758.0), (-758.0)); Complex complex1 = complex0.NaN.subtract(complex0); assertEquals((-758.0), complex0.getReal(), 0.01); assertEquals((-758.0), complex0.getImaginary(), 0.01); assertFalse(complex0.isNaN()); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); }
public void test51() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = Complex.NaN; Complex complex2 = complex0.ZERO.subtract(complex1); assertSame(complex2, complex1); }
public void test52() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.subtract(Double.POSITIVE_INFINITY); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertSame(complex2, complex1); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); }
public void test53() throws Throwable { Complex complex0 = Complex.valueOf((-758.0), (-758.0)); Complex complex1 = complex0.ONE.subtract(Double.NaN); assertEquals((-758.0), complex0.getImaginary(), 0.01); assertFalse(complex0.isNaN()); assertEquals((-758.0), complex0.getReal(), 0.01); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); }
public void test54() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.subtract((-2581.41951)); assertEquals(1.0, complex1.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertEquals(2581.41951, complex1.getReal(), 0.01); assertFalse(complex1.isNaN()); }
public void test55() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.acos(); assertTrue(complex1.isNaN()); }
public void test56() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.asin(); assertTrue(complex1.isNaN()); }
public void test57() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.atan(); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test58() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.INF.cos(); assertFalse(complex1.isInfinite()); assertTrue(complex1.isNaN()); }
public void test59() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.cos(); assertTrue(complex1.isNaN()); }
public void test60() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.ZERO.cosh(); assertFalse(complex1.isInfinite()); assertFalse(complex1.isNaN()); assertEquals(1.0, complex1.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test61() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.NaN.cosh(); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test62() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.ZERO.sin(); assertEquals(0.0, complex1.getImaginary(), 0.01); assertFalse(complex1.isNaN()); assertEquals(0.0, complex1.getReal(), 0.01); assertFalse(complex1.isInfinite()); }
public void test63() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.NaN.sin(); assertTrue(complex1.isNaN()); }
public void test64() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.I.sinh(); assertTrue(complex0.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01); assertEquals(0.0, complex1.getReal(), 0.01); assertFalse(complex1.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test65() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.sinh(); assertSame(complex1, complex0); }
public void test66() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.sqrt(); assertTrue(complex1.isNaN()); }
public void test67() throws Throwable { Complex complex0 = new Complex(435.95150189); Complex complex1 = complex0.ONE.asin(); assertEquals(0.0, complex0.getImaginary(), 0.01); assertEquals(1.5707963267948966, complex1.getReal(), 0.01); assertEquals(-0.0, complex1.getImaginary(), 0.01); }
public void test68() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.tan(); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertSame(complex2, complex1); assertTrue(complex0.isInfinite()); assertTrue(complex1.isNaN()); assertEquals((-2581.41951), complex0.getReal(), 0.01); }
public void test69() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.ONE.tanh(); Complex complex2 = complex1.tan(); assertFalse(complex2.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertEquals(0.9534903170187385, complex2.getReal(), 0.01); assertEquals(0.0, complex2.getImaginary(), 0.01); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertTrue(complex0.isInfinite()); assertEquals(0.7615941559557649, complex1.getReal(), 0.01); }
public void test70() throws Throwable { Complex complex0 = Complex.valueOf((-758.0), (-758.0)); Complex complex1 = complex0.tan(); assertEquals((-758.0), complex0.getReal(), 0.01); assertFalse(complex1.isInfinite()); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals((-758.0), complex0.getImaginary(), 0.01); assertEquals((-1.0), complex1.getImaginary(), 0.01); }
public void test71() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.tanh(); assertTrue(complex1.isNaN()); }
public void test72() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.tanh(); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test73() throws Throwable { Complex complex0 = Complex.valueOf((-758.0), (-758.0)); Complex complex1 = complex0.tanh(); assertEquals((-758.0), complex0.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertEquals((-1.0), complex1.getReal(), 0.01); assertEquals((-758.0), complex0.getImaginary(), 0.01); }
public void test74() throws Throwable { Complex complex0 = Complex.ZERO; // Undeclared exception! try { complex0.nthRoot((-1)); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // cannot compute nth root for null or negative n: -1 // verifyException("org.apache.commons.math.complex.Complex", e); } }
public void test75() throws Throwable { Complex complex0 = Complex.I; List<Complex> list0 = complex0.NaN.nthRoot(17); assertEquals(1, list0.size()); assertFalse(list0.contains(complex0)); }
public void test76() throws Throwable { Complex complex0 = Complex.I; List<Complex> list0 = complex0.INF.nthRoot(1321); assertFalse(list0.contains(complex0)); assertEquals(1, list0.size()); }
public void test77() throws Throwable { Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN); assertEquals(Double.NaN, complex0.getReal(), 0.01); }
public void test78() throws Throwable { Complex complex0 = Complex.valueOf(2.8206464984160795E-267, Double.NaN); assertEquals(Double.NaN, complex0.getReal(), 0.01); }
public void test79() throws Throwable { Complex complex0 = Complex.valueOf(Double.NaN); assertEquals(Double.NaN, complex0.getImaginary(), 0.01); }
public void testPolar2Complex() { TestUtils.assertEquals(Complex.ONE, ComplexUtils.polar2Complex(1, 0), 10e-12); TestUtils.assertEquals(Complex.ZERO, ComplexUtils.polar2Complex(0, 1), 10e-12); TestUtils.assertEquals(Complex.ZERO, ComplexUtils.polar2Complex(0, -1), 10e-12); TestUtils.assertEquals(Complex.I, ComplexUtils.polar2Complex(1, pi/2), 10e-12); TestUtils.assertEquals(Complex.I.negate(), ComplexUtils.polar2Complex(1, -pi/2), 10e-12); double r = 0; for (int i = 0; i < 5; i++) { r += i; double theta = 0; for (int j =0; j < 20; j++) { theta += pi / 6; TestUtils.assertEquals(altPolar(r, theta), ComplexUtils.polar2Complex(r, theta), 10e-12); } theta = -2 * pi; for (int j =0; j < 20; j++) { theta -= pi / 6; TestUtils.assertEquals(altPolar(r, theta), ComplexUtils.polar2Complex(r, theta), 10e-12); } } }
public void testPolar2ComplexIllegalModulus() { ComplexUtils.polar2Complex(-1, 0); }
public void testPolar2ComplexNaN() { TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(nan, 1)); TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(1, nan)); TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(nan, nan)); }
public void testPolar2ComplexInf() { TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(1, inf)); TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(1, negInf)); TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(inf, inf)); TestUtils.assertSame(Complex.NaN, ComplexUtils.polar2Complex(inf, negInf)); TestUtils.assertSame(infInf, ComplexUtils.polar2Complex(inf, pi/4)); TestUtils.assertSame(infNaN, ComplexUtils.polar2Complex(inf, 0)); TestUtils.assertSame(infNegInf, ComplexUtils.polar2Complex(inf, -pi/4)); TestUtils.assertSame(negInfInf, ComplexUtils.polar2Complex(inf, 3*pi/4)); TestUtils.assertSame(negInfNegInf, ComplexUtils.polar2Complex(inf, 5*pi/4)); }
public void testZero() { Assert.assertEquals(Complex.ZERO, ComplexField.getInstance().getZero()); }
public void testOne() { Assert.assertEquals(Complex.ONE, ComplexField.getInstance().getOne()); }
public void testSerial() { // deserializing the singleton should give the singleton itself back ComplexField field = ComplexField.getInstance(); Assert.assertTrue(field == TestUtils.serializeAndRecover(field)); }
