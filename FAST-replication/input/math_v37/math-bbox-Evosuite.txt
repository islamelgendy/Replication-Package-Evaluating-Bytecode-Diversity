public void test00() throws Throwable { Complex complex0 = new Complex((-758.0434770868716), Double.POSITIVE_INFINITY); Complex complex1 = complex0.acos(); double double0 = complex1.abs(); assertEquals(Double.NaN, double0, 0.01); assertEquals((-758.0434770868716), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); }
public void test01() throws Throwable { Complex complex0 = new Complex(0.0, (-5.309047216809048E-47)); String string0 = complex0.NaN.toString(); assertEquals("(NaN, NaN)", string0); assertEquals((-5.309047216809048E-47), complex0.getImaginary(), 0.01); assertFalse(complex0.isNaN()); assertFalse(complex0.isInfinite()); assertEquals(0.0, complex0.getReal(), 0.01); }
public void test02() throws Throwable { Complex complex0 = new Complex((-758.0434770868716), Double.POSITIVE_INFINITY); Complex complex1 = complex0.pow(complex0); assertFalse(complex1.isInfinite()); assertEquals((-758.0434770868716), complex0.getReal(), 0.01); assertTrue(complex1.isNaN()); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test03() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); complex0.NaN.getField(); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); }
public void test04() throws Throwable { Complex complex0 = Complex.NaN; boolean boolean0 = complex0.isNaN(); assertTrue(boolean0); }
public void test05() throws Throwable { Complex complex0 = new Complex(894.5); Complex complex1 = complex0.tanh(); assertFalse(complex1.isInfinite()); assertEquals(0.0, complex1.getImaginary(), 0.01); assertEquals(1.0, complex1.getReal(), 0.01); assertEquals(894.5, complex0.getReal(), 0.01); }
public void test06() throws Throwable { Complex complex0 = new Complex((-596.114854983), (-596.114854983)); Complex complex1 = complex0.I.pow(Double.NaN); assertFalse(complex0.isInfinite()); assertEquals((-596.114854983), complex0.getReal(), 0.01); assertTrue(complex1.isNaN()); assertFalse(complex0.isNaN()); assertEquals((-596.114854983), complex0.getImaginary(), 0.01); }
public void test07() throws Throwable { Complex complex0 = Complex.ONE; List<Complex> list0 = complex0.I.nthRoot(17); assertEquals(0.0, complex0.getImaginary(), 0.01); assertEquals(17, list0.size()); }
public void test08() throws Throwable { Complex complex0 = Complex.ZERO; double double0 = complex0.abs(); assertEquals(0.0, double0, 0.01); }
public void test09() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.I.asin(); complex1.multiply(complex0); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals(0.8813735870195428, complex1.getImaginary(), 0.01); }
public void test10() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.add(Double.POSITIVE_INFINITY); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertSame(complex2, complex1); assertTrue(complex0.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); }
public void test11() throws Throwable { Complex complex0 = new Complex(0.0, (-5.309047216809048E-47)); Complex complex1 = complex0.ONE.add(Double.NaN); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertEquals((-5.309047216809048E-47), complex0.getImaginary(), 0.01); assertFalse(complex0.isNaN()); assertEquals(0.0, complex0.getReal(), 0.01); }
public void test12() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.add((double) 239); assertTrue(complex1.equals((Object)complex0)); assertTrue(complex1.isInfinite()); }
public void test13() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.I.conjugate(); assertFalse(complex1.isInfinite()); assertEquals((-1.0), complex1.getImaginary(), 0.01); assertEquals(0.0, complex1.getReal(), 0.01); assertFalse(complex1.isNaN()); }
public void test14() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.NaN.conjugate(); assertTrue(complex1.isNaN()); }
public void test15() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.divide(complex0); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test16() throws Throwable { Complex complex0 = new Complex(2.242630017261011E-174, 2.242630017261011E-174); Complex complex1 = Complex.NaN; Complex complex2 = complex0.INF.divide(complex1); assertEquals(2.242630017261011E-174, complex0.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertEquals(2.242630017261011E-174, complex0.getReal(), 0.01); assertFalse(complex0.isNaN()); assertSame(complex2, complex1); }
public void test17() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.atan(); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test18() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.ZERO.atan(); assertEquals(0.0, complex1.getImaginary(), 0.01); assertEquals(0.0, complex1.getReal(), 0.01); }
public void test19() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.I.divide(complex0); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test20() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.INF.atan(); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertTrue(complex1.isNaN()); }
public void test21() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.divide(1632.00134); assertSame(complex1, complex0); }
public void test22() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.ONE.divide((-1444.5520054)); assertTrue(complex0.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertEquals(-0.0, complex1.getImaginary(), 0.01); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertEquals((-6.922561432622825E-4), complex1.getReal(), 0.01); }
public void test23() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.divide(Double.NaN); assertTrue(complex1.isNaN()); }
public void test24() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.ZERO.divide(0.0); assertEquals(Double.NaN, complex1.getReal(), 0.01); }
public void test25() throws Throwable { Complex complex0 = new Complex(2.8206464984160795E-267, 2.8206464984160795E-267); Complex complex1 = complex0.ZERO.divide(Double.POSITIVE_INFINITY); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals(2.8206464984160795E-267, complex0.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertEquals(2.8206464984160795E-267, complex0.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); assertFalse(complex0.isNaN()); }
public void test26() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test27() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.INF.reciprocal(); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test28() throws Throwable { Complex complex0 = Complex.valueOf((-758.0)); Complex complex1 = complex0.NaN.reciprocal(); assertEquals((-758.0), complex0.getReal(), 0.01); assertEquals(0.0, complex0.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertFalse(complex1.equals((Object)complex0)); assertTrue(complex1.isNaN()); }
public void test29() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.reciprocal(); assertTrue(complex1.isNaN()); }
public void test30() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.reciprocal(); assertTrue(complex1.equals((Object)complex0)); assertEquals(-0.0, complex1.getImaginary(), 0.01); assertFalse(complex1.isNaN()); assertFalse(complex1.isInfinite()); }
public void test31() throws Throwable { Complex complex0 = new Complex(435.95150189); Complex complex1 = Complex.valueOf(435.95150189, (-150.324983)); boolean boolean0 = complex1.equals(complex0); assertEquals(435.95150189, complex1.getReal(), 0.01); assertFalse(boolean0); assertEquals((-150.324983), complex1.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertFalse(complex0.equals((Object)complex1)); }
public void test32() throws Throwable { Complex complex0 = Complex.INF; boolean boolean0 = complex0.equals(complex0); assertTrue(boolean0); }
public void test33() throws Throwable { Complex complex0 = Complex.ONE; boolean boolean0 = complex0.equals((Object) null); assertFalse(boolean0); }
public void test34() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.tan(); boolean boolean0 = complex0.equals(complex1); assertFalse(complex1.equals((Object)complex0)); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertFalse(boolean0); }
public void test35() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = Complex.I; boolean boolean0 = complex0.equals(complex1); assertFalse(boolean0); }
public void test36() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = (Complex)complex0.readResolve(); boolean boolean0 = complex0.equals(complex1); assertFalse(complex1.isInfinite()); assertEquals(0.0, complex1.getImaginary(), 0.01); assertTrue(boolean0); }
public void test37() throws Throwable { Complex complex0 = Complex.valueOf(0.0, 0.0); complex0.hashCode(); assertEquals(0.0, complex0.getReal(), 0.01); assertFalse(complex0.isNaN()); assertFalse(complex0.isInfinite()); assertEquals(0.0, complex0.getImaginary(), 0.01); }
public void test38() throws Throwable { Complex complex0 = Complex.INF; complex0.NaN.hashCode(); }
public void test39() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.INF.pow(complex1); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertSame(complex2, complex1); assertTrue(complex0.isInfinite()); }
public void test40() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.multiply(7); assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test41() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.NaN.multiply(4674); assertTrue(complex1.isNaN()); }
public void test42() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.multiply((-1857)); assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01); }
public void test43() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.ONE.tanh(); Complex complex2 = complex1.multiply(7); assertEquals(0.7615941559557649, complex1.getReal(), 0.01); assertEquals(0.0, complex2.getImaginary(), 0.01); assertEquals(5.331159091690354, complex2.getReal(), 0.01); assertFalse(complex1.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test44() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.multiply(1134.1323099235742); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertSame(complex2, complex1); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); assertEquals(Double.NaN, complex2.getReal(), 0.01); }
public void test45() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.multiply(137.2137468); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test46() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.multiply((-958.3273906468336)); assertTrue(complex1.isInfinite()); }
public void test47() throws Throwable { Complex complex0 = new Complex(435.95150189); Complex complex1 = complex0.pow(435.95150189); assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01); assertEquals(0.0, complex0.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); }
public void test48() throws Throwable { Complex complex0 = new Complex(2828.0003393131005); Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY); assertFalse(complex0.isInfinite()); assertEquals(0.0, complex0.getImaginary(), 0.01); assertEquals(2828.0003393131005, complex0.getReal(), 0.01); assertTrue(complex1.isInfinite()); }
public void test49() throws Throwable { Complex complex0 = new Complex(2.242630017261011E-174, 2.242630017261011E-174); Complex complex1 = complex0.NaN.negate(); assertFalse(complex0.isNaN()); assertEquals(2.242630017261011E-174, complex0.getReal(), 0.01); assertFalse(complex0.isInfinite()); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertEquals(2.242630017261011E-174, complex0.getImaginary(), 0.01); }
public void test50() throws Throwable { Complex complex0 = Complex.valueOf((-758.0), (-758.0)); Complex complex1 = complex0.NaN.subtract(complex0); assertEquals((-758.0), complex0.getReal(), 0.01); assertEquals((-758.0), complex0.getImaginary(), 0.01); assertFalse(complex0.isNaN()); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); }
public void test51() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = Complex.NaN; Complex complex2 = complex0.ZERO.subtract(complex1); assertSame(complex2, complex1); }
public void test52() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.subtract(Double.POSITIVE_INFINITY); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertSame(complex2, complex1); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); }
public void test53() throws Throwable { Complex complex0 = Complex.valueOf((-758.0), (-758.0)); Complex complex1 = complex0.ONE.subtract(Double.NaN); assertEquals((-758.0), complex0.getImaginary(), 0.01); assertFalse(complex0.isNaN()); assertEquals((-758.0), complex0.getReal(), 0.01); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); }
public void test54() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.subtract((-2581.41951)); assertEquals(1.0, complex1.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertEquals(2581.41951, complex1.getReal(), 0.01); assertFalse(complex1.isNaN()); }
public void test55() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.acos(); assertTrue(complex1.isNaN()); }
public void test56() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.asin(); assertTrue(complex1.isNaN()); }
public void test57() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.atan(); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test58() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.INF.cos(); assertFalse(complex1.isInfinite()); assertTrue(complex1.isNaN()); }
public void test59() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.cos(); assertTrue(complex1.isNaN()); }
public void test60() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.ZERO.cosh(); assertFalse(complex1.isInfinite()); assertFalse(complex1.isNaN()); assertEquals(1.0, complex1.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test61() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.NaN.cosh(); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test62() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.ZERO.sin(); assertEquals(0.0, complex1.getImaginary(), 0.01); assertFalse(complex1.isNaN()); assertEquals(0.0, complex1.getReal(), 0.01); assertFalse(complex1.isInfinite()); }
public void test63() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.NaN.sin(); assertTrue(complex1.isNaN()); }
public void test64() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.I.sinh(); assertTrue(complex0.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01); assertEquals(0.0, complex1.getReal(), 0.01); assertFalse(complex1.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test65() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.sinh(); assertSame(complex1, complex0); }
public void test66() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.sqrt(); assertTrue(complex1.isNaN()); }
public void test67() throws Throwable { Complex complex0 = new Complex(435.95150189); Complex complex1 = complex0.ONE.asin(); assertEquals(0.0, complex0.getImaginary(), 0.01); assertEquals(1.5707963267948966, complex1.getReal(), 0.01); assertEquals(-0.0, complex1.getImaginary(), 0.01); }
public void test68() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.INF.tan(); Complex complex2 = complex1.tan(); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertSame(complex2, complex1); assertTrue(complex0.isInfinite()); assertTrue(complex1.isNaN()); assertEquals((-2581.41951), complex0.getReal(), 0.01); }
public void test69() throws Throwable { Complex complex0 = Complex.valueOf((-2581.41951), Double.POSITIVE_INFINITY); Complex complex1 = complex0.ONE.tanh(); Complex complex2 = complex1.tan(); assertFalse(complex2.isInfinite()); assertEquals((-2581.41951), complex0.getReal(), 0.01); assertEquals(0.9534903170187385, complex2.getReal(), 0.01); assertEquals(0.0, complex2.getImaginary(), 0.01); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); assertTrue(complex0.isInfinite()); assertEquals(0.7615941559557649, complex1.getReal(), 0.01); }
public void test70() throws Throwable { Complex complex0 = Complex.valueOf((-758.0), (-758.0)); Complex complex1 = complex0.tan(); assertEquals((-758.0), complex0.getReal(), 0.01); assertFalse(complex1.isInfinite()); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals((-758.0), complex0.getImaginary(), 0.01); assertEquals((-1.0), complex1.getImaginary(), 0.01); }
public void test71() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.tanh(); assertTrue(complex1.isNaN()); }
public void test72() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.tanh(); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test73() throws Throwable { Complex complex0 = Complex.valueOf((-758.0), (-758.0)); Complex complex1 = complex0.tanh(); assertEquals((-758.0), complex0.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertEquals((-1.0), complex1.getReal(), 0.01); assertEquals((-758.0), complex0.getImaginary(), 0.01); }
public void test74() throws Throwable { Complex complex0 = Complex.ZERO; // Undeclared exception! try { complex0.nthRoot((-1)); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // cannot compute nth root for null or negative n: -1 // verifyException("org.apache.commons.math.complex.Complex", e); } }
public void test75() throws Throwable { Complex complex0 = Complex.I; List<Complex> list0 = complex0.NaN.nthRoot(17); assertEquals(1, list0.size()); assertFalse(list0.contains(complex0)); }
public void test76() throws Throwable { Complex complex0 = Complex.I; List<Complex> list0 = complex0.INF.nthRoot(1321); assertFalse(list0.contains(complex0)); assertEquals(1, list0.size()); }
public void test77() throws Throwable { Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN); assertEquals(Double.NaN, complex0.getReal(), 0.01); }
public void test78() throws Throwable { Complex complex0 = Complex.valueOf(2.8206464984160795E-267, Double.NaN); assertEquals(Double.NaN, complex0.getReal(), 0.01); }
public void test79() throws Throwable { Complex complex0 = Complex.valueOf(Double.NaN); assertEquals(Double.NaN, complex0.getImaginary(), 0.01); }
