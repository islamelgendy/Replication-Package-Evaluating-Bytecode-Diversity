public void testFindWrapPos() throws Exception { HelpFormatter hf = new HelpFormatter(); String text = "This is a test."; assertEquals("wrap position", 7, hf.findWrapPos(text, 8, 0)); assertEquals("wrap position 2", -1, hf.findWrapPos(text, 8, 8)); text = "aaaa aa"; assertEquals("wrap position 3", 3, hf.findWrapPos(text, 3, 0)); text = "aaaaaa aaaaaa"; assertEquals("wrap position 4", 6, hf.findWrapPos(text, 6, 0)); assertEquals("wrap position 4", -1, hf.findWrapPos(text, 6, 7)); }
public void testRenderWrappedTextWordCut() { int width = 7; int padding = 0; String text = "Thisisatest."; String expected = "Thisisa" + EOL + "test."; StringBuffer sb = new StringBuffer(); new HelpFormatter().renderWrappedText(sb, width, padding, text); assertEquals("cut and wrap", expected, sb.toString()); }
public void testRenderWrappedTextSingleLine() { int width = 12; int padding = 0; String text = "This is a test."; String expected = "This is a" + EOL + "test."; StringBuffer sb = new StringBuffer(); new HelpFormatter().renderWrappedText(sb, width, padding, text); assertEquals("single line text", expected, sb.toString()); }
public void testRenderWrappedTextSingleLinePadded() { int width = 12; int padding = 4; String text = "This is a test."; String expected = "This is a" + EOL + "  test."; StringBuffer sb = new StringBuffer(); new HelpFormatter().renderWrappedText(sb, width, padding, text); assertEquals("single line padded text", expected, sb.toString()); }
public void testRenderWrappedTextSingleLinePadded2() { int width = 53; int padding = 24; String text = " -p,--period <PERIOD> PERIOD is time duration of form " + "DATE[-DATE] where DATE has form YYYY[MM[DD]]"; String expected = " -p,--period <PERIOD> PERIOD is time duration of" + EOL + "            form DATE[-DATE] where DATE" + EOL + "            has form YYYY[MM[DD]]"; StringBuffer sb = new StringBuffer(); new HelpFormatter().renderWrappedText(sb, width, padding, text); assertEquals("single line padded text 2", expected, sb.toString()); }
public void testRenderWrappedTextMultiLine() { int width = 16; int padding = 0; String text = "aaaa aaaa aaaa" + EOL + "aaaaaa" + EOL + "aaaaa"; String expected = text; StringBuffer sb = new StringBuffer(); new HelpFormatter().renderWrappedText(sb, width, padding, text); assertEquals("multi line text", expected, sb.toString()); }
public void testRenderWrappedTextMultiLinePadded() { int width = 16; int padding = 4; String text = "aaaa aaaa aaaa" + EOL + "aaaaaa" + EOL + "aaaaa"; String expected = "aaaa aaaa aaaa" + EOL + "  aaaaaa" + EOL + "  aaaaa"; StringBuffer sb = new StringBuffer(); new HelpFormatter().renderWrappedText(sb, width, padding, text); assertEquals("multi-line padded text", expected, sb.toString()); }
public void testPrintOptions() throws Exception { StringBuffer sb = new StringBuffer(); HelpFormatter hf = new HelpFormatter(); final int leftPad = 1; final int descPad = 3; final String lpad = hf.createPadding(leftPad); final String dpad = hf.createPadding(descPad); Options options = null; String expected = null; options = new Options().addOption("a", false, "aaaa aaaa aaaa aaaa aaaa"); expected = lpad + "-a" + dpad + "aaaa aaaa aaaa aaaa aaaa"; hf.renderOptions(sb, 60, options, leftPad, descPad); assertEquals("simple non-wrapped option", expected, sb.toString()); int nextLineTabStop = leftPad + descPad + "-a".length(); expected = lpad + "-a" + dpad + "aaaa aaaa aaaa" + EOL + hf.createPadding(nextLineTabStop) + "aaaa aaaa"; sb.setLength(0); hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad); assertEquals("simple wrapped option", expected, sb.toString());  options = new Options().addOption("a", "aaa", false, "dddd dddd dddd dddd"); expected = lpad + "-a,--aaa" + dpad + "dddd dddd dddd dddd"; sb.setLength(0); hf.renderOptions(sb, 60, options, leftPad, descPad); assertEquals("long non-wrapped option", expected, sb.toString()); nextLineTabStop = leftPad + descPad + "-a,--aaa".length(); expected = lpad + "-a,--aaa" + dpad + "dddd dddd" + EOL + hf.createPadding(nextLineTabStop) + "dddd dddd"; sb.setLength(0); hf.renderOptions(sb, 25, options, leftPad, descPad); assertEquals("long wrapped option", expected, sb.toString()); options = new Options(). addOption("a", "aaa", false, "dddd dddd dddd dddd"). addOption("b", false, "feeee eeee eeee eeee"); expected = lpad + "-a,--aaa" + dpad + "dddd dddd" + EOL + hf.createPadding(nextLineTabStop) + "dddd dddd" + EOL + lpad + "-b   " + dpad + "feeee eeee" + EOL + hf.createPadding(nextLineTabStop) + "eeee eeee"; sb.setLength(0); hf.renderOptions(sb, 25, options, leftPad, descPad); assertEquals("multiple wrapped options", expected, sb.toString()); }
public void testPrintHelpWithEmptySyntax() { HelpFormatter formatter = new HelpFormatter(); try { formatter.printHelp(null, new Options()); fail("null command line syntax should be rejected"); } catch (IllegalArgumentException e) { } try { formatter.printHelp("", new Options()); fail("empty command line syntax should be rejected"); } catch (IllegalArgumentException e) { } }
public void testAutomaticUsage() throws Exception { HelpFormatter hf = new HelpFormatter(); Options options = null; String expected = "usage: app [-a]"; ByteArrayOutputStream out = new ByteArrayOutputStream(); PrintWriter pw = new PrintWriter(out); options = new Options().addOption("a", false, "aaaa aaaa aaaa aaaa aaaa"); hf.printUsage(pw, 60, "app", options); pw.flush(); assertEquals("simple auto usage", expected, out.toString().trim()); out.reset(); expected = "usage: app [-a] [-b]"; options = new Options().addOption("a", false, "aaaa aaaa aaaa aaaa aaaa") .addOption("b", false, "bbb"); hf.printUsage(pw, 60, "app", options); pw.flush(); assertEquals("simple auto usage", expected, out.toString().trim()); out.reset(); }
public void testPrintUsage() { Option optionA = new Option("a", "first"); Option optionB = new Option("b", "second"); Option optionC = new Option("c", "third"); Options opts = new Options(); opts.addOption(optionA); opts.addOption(optionB); opts.addOption(optionC); HelpFormatter helpFormatter = new HelpFormatter(); ByteArrayOutputStream bytesOut = new ByteArrayOutputStream(); PrintWriter printWriter = new PrintWriter(bytesOut); helpFormatter.printUsage(printWriter, 80, "app", opts); printWriter.close(); assertEquals("usage: app [-a] [-b] [-c]" + EOL, bytesOut.toString()); }
public void testPrintSortedUsage() { Options opts = new Options(); opts.addOption(new Option("a", "first")); opts.addOption(new Option("b", "second")); opts.addOption(new Option("c", "third")); HelpFormatter helpFormatter = new HelpFormatter(); helpFormatter.setOptionComparator(new Comparator() { public int compare(Object o1, Object o2) { Option opt1 = (Option) o1; Option opt2 = (Option) o2; return opt2.getKey().compareToIgnoreCase(opt1.getKey()); } }); StringWriter out = new StringWriter(); helpFormatter.printUsage(new PrintWriter(out), 80, "app", opts); assertEquals("usage: app [-c] [-b] [-a]" + EOL, out.toString()); }
public void testPrintSortedUsageWithNullComparator() { Options opts = new Options(); opts.addOption(new Option("a", "first")); opts.addOption(new Option("b", "second")); opts.addOption(new Option("c", "third")); HelpFormatter helpFormatter = new HelpFormatter(); helpFormatter.setOptionComparator(null); StringWriter out = new StringWriter(); helpFormatter.printUsage(new PrintWriter(out), 80, "app", opts); assertEquals("usage: app [-a] [-b] [-c]" + EOL, out.toString()); }
public void testPrintOptionGroupUsage() { OptionGroup group = new OptionGroup(); group.addOption(OptionBuilder.create("a")); group.addOption(OptionBuilder.create("b")); group.addOption(OptionBuilder.create("c")); Options options = new Options(); options.addOptionGroup(group); StringWriter out = new StringWriter(); HelpFormatter formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(out), 80, "app", options); assertEquals("usage: app [-a | -b | -c]" + EOL, out.toString()); }
public void testPrintRequiredOptionGroupUsage() { OptionGroup group = new OptionGroup(); group.addOption(OptionBuilder.create("a")); group.addOption(OptionBuilder.create("b")); group.addOption(OptionBuilder.create("c")); group.setRequired(true); Options options = new Options(); options.addOptionGroup(group); StringWriter out = new StringWriter(); HelpFormatter formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(out), 80, "app", options); assertEquals("usage: app -a | -b | -c" + EOL, out.toString()); }
public void testPrintOptionWithEmptyArgNameUsage() { Option option = new Option("f", true, null); option.setArgName(""); option.setRequired(true); Options options = new Options(); options.addOption(option); StringWriter out = new StringWriter(); HelpFormatter formatter = new HelpFormatter(); formatter.printUsage(new PrintWriter(out), 80, "app", options); assertEquals("usage: app -f" + EOL, out.toString()); }
public void testDefaultArgName() { Option option = OptionBuilder.hasArg().isRequired().create("f"); Options options = new Options(); options.addOption(option); StringWriter out = new StringWriter(); HelpFormatter formatter = new HelpFormatter(); formatter.setArgName("argument"); formatter.printUsage(new PrintWriter(out), 80, "app", options); assertEquals("usage: app -f <argument>" + EOL, out.toString()); }
public void testRtrim() { HelpFormatter formatter = new HelpFormatter(); assertEquals(null, formatter.rtrim(null)); assertEquals("", formatter.rtrim("")); assertEquals(" foo", formatter.rtrim(" foo ")); }
public void testAccessors() { HelpFormatter formatter = new HelpFormatter(); formatter.setArgName("argname"); assertEquals("arg name", "argname", formatter.getArgName()); formatter.setDescPadding(3); assertEquals("desc padding", 3, formatter.getDescPadding()); formatter.setLeftPadding(7); assertEquals("left padding", 7, formatter.getLeftPadding()); formatter.setLongOptPrefix("~~"); assertEquals("long opt prefix", "~~", formatter.getLongOptPrefix()); formatter.setNewLine("\n"); assertEquals("new line", "\n", formatter.getNewLine()); formatter.setOptPrefix("~"); assertEquals("opt prefix", "~", formatter.getOptPrefix()); formatter.setSyntaxPrefix("-> "); assertEquals("syntax prefix", "-> ", formatter.getSyntaxPrefix()); formatter.setWidth(80); assertEquals("width", 80, formatter.getWidth()); }
public void testHeaderStartingWithLineSeparator() { Options options = new Options(); HelpFormatter formatter = new HelpFormatter(); String header = EOL + "Header"; String footer = "Footer"; StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out), 80, "foobar", header, options, 2, 2, footer, true); assertEquals( "usage: foobar" + EOL + "" + EOL + "Header" + EOL + "" + EOL + "Footer" + EOL , out.toString()); }
public void testOptionWithoutShortFormat() { Options options = new Options(); options.addOption(new Option("a", "aaa", false, "aaaaaaa")); options.addOption(new Option(null, "bbb", false, "bbbbbbb")); options.addOption(new Option("c", null, false, "ccccccc")); HelpFormatter formatter = new HelpFormatter(); StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out), 80, "foobar", "", options, 2, 2, "", true); assertEquals( "usage: foobar [-a] [--bbb] [-c]" + EOL + " -a,--aaa aaaaaaa" + EOL + "   --bbb bbbbbbb" + EOL + " -c    ccccccc" + EOL , out.toString()); }
public void testOptionWithoutShortFormat2() { Option help = new Option("h", "help", false, "print this message"); Option version = new Option("v", "version", false, "print version information"); Option newRun = new Option("n", "new", false, "Create NLT cache entries only for new items"); Option trackerRun = new Option("t", "tracker", false, "Create NLT cache entries only for tracker items"); Option timeLimit = OptionBuilder.withLongOpt("limit") .hasArg() .withValueSeparator() .withDescription("Set time limit for execution, in mintues") .create("l"); Option age = OptionBuilder.withLongOpt("age") .hasArg() .withValueSeparator() .withDescription("Age (in days) of cache item before being recomputed") .create("a"); Option server = OptionBuilder.withLongOpt("server") .hasArg() .withValueSeparator() .withDescription("The NLT server address") .create("s"); Option numResults = OptionBuilder.withLongOpt("results") .hasArg() .withValueSeparator() .withDescription("Number of results per item") .create("r"); Option configFile = OptionBuilder.withLongOpt("config") .hasArg() .withValueSeparator() .withDescription("Use the specified configuration file") .create(); Options mOptions = new Options(); mOptions.addOption(help); mOptions.addOption(version); mOptions.addOption(newRun); mOptions.addOption(trackerRun); mOptions.addOption(timeLimit); mOptions.addOption(age); mOptions.addOption(server); mOptions.addOption(numResults); mOptions.addOption(configFile); HelpFormatter formatter = new HelpFormatter(); final String EOL = System.getProperty("line.separator"); StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out),80,"commandline","header",mOptions,2,2,"footer",true); assertEquals( "usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]" + EOL + "    [-s <arg>] [-t] [-v]" + EOL + "header"+EOL+ " -a,--age <arg>   Age (in days) of cache item before being recomputed"+EOL+ "   --config <arg>  Use the specified configuration file"+EOL+ " -h,--help      print this message"+EOL+ " -l,--limit <arg>  Set time limit for execution, in mintues"+EOL+ " -n,--new      Create NLT cache entries only for new items"+EOL+ " -r,--results <arg> Number of results per item"+EOL+ " -s,--server <arg>  The NLT server address"+EOL+ " -t,--tracker    Create NLT cache entries only for tracker items"+EOL+ " -v,--version    print version information"+EOL+ "footer"+EOL ,out.toString()); }
public void testHelpWithLongOptSeparator() throws Exception { Options options = new Options(); options.addOption( "f", true, "the file" ); options.addOption(OptionBuilder.withLongOpt("size").withDescription("the size").hasArg().withArgName("SIZE").create('s')); options.addOption(OptionBuilder.withLongOpt("age").withDescription("the age").hasArg().create()); HelpFormatter formatter = new HelpFormatter(); assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR, formatter.getLongOptSeparator()); formatter.setLongOptSeparator("="); assertEquals("=", formatter.getLongOptSeparator()); StringWriter out = new StringWriter(); formatter.printHelp(new PrintWriter(out), 80, "create", "header", options, 2, 2, "footer"); assertEquals( "usage: create" + EOL + "header" + EOL + "   --age=<arg>  the age" + EOL + " -f <arg>     the file" + EOL + " -s,--size=<SIZE> the size" + EOL + "footer" + EOL, out.toString()); }
public void testUsageWithLongOptSeparator() throws Exception { Options options = new Options(); options.addOption( "f", true, "the file" ); options.addOption(OptionBuilder.withLongOpt("size").withDescription("the size").hasArg().withArgName("SIZE").create('s')); options.addOption(OptionBuilder.withLongOpt("age").withDescription("the age").hasArg().create()); HelpFormatter formatter = new HelpFormatter(); formatter.setLongOptSeparator("="); StringWriter out = new StringWriter(); formatter.printUsage(new PrintWriter(out), 80, "create", options); assertEquals("usage: create [--age=<arg>] [-f <arg>] [-s <SIZE>]", out.toString().trim()); }
public void test0501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0501"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); helpFormatter0.defaultArgName = "                                                 "; java.lang.String str7 = helpFormatter0.getNewLine(); java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printOptions(printWriter8, 10, options10, 0, (int) (short) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test0502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0502"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setDescPadding((int) (short) 100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0503"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; helpFormatter0.defaultArgName = "usage: "; int int16 = helpFormatter0.defaultDescPad; java.lang.StringBuffer stringBuffer17 = null; org.apache.commons.cli.Options options19 = null; try { java.lang.StringBuffer stringBuffer22 = helpFormatter0.renderOptions(stringBuffer17, (int) 'a', options19, 1, (int) '#'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10); }
public void test0504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0504"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.getLongOptPrefix(); java.util.Comparator comparator6 = helpFormatter0.optionComparator; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(comparator6); }
public void test0505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0505"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLongOptPrefix("                                                 "); helpFormatter0.setSyntaxPrefix("                                                 "); java.lang.StringBuffer stringBuffer11 = null; org.apache.commons.cli.Options options13 = null; try { java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderOptions(stringBuffer11, (int) ' ', options13, 0, 32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0506"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("\n"); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); org.junit.Assert.assertNotNull(comparator8); }
public void test0507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0507"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int10 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) (short) 10); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); int int12 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); }
public void test0508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0508"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); int int6 = helpFormatter0.defaultLeftPad; java.io.PrintWriter printWriter7 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp(printWriter7, (int) 'a', "", "", options11, (-2), 0, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0509"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultDescPad = 0; java.lang.String str6 = helpFormatter0.getOptPrefix(); helpFormatter0.setLongOptSeparator("--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0510"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); int int7 = helpFormatter0.defaultLeftPad; java.lang.String str8 = helpFormatter0.defaultArgName; helpFormatter0.setLongOptSeparator("                          "); helpFormatter0.setSyntaxPrefix("arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); }
public void test0511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0511"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str8 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setLongOptSeparator("     "); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printUsage(printWriter11, (int) (byte) 10, "                          ", options14); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); }
public void test0512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0512"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setLongOptPrefix("                                                 "); helpFormatter0.defaultWidth = (short) 100; java.io.PrintWriter printWriter7 = null; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printOptions(printWriter7, (int) (byte) 1, options9, (int) (short) -1, (-1)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); }
public void test0513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0513"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printOptions(printWriter11, (int) (short) 1, options13, (int) (short) 100, (int) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertNotNull(comparator10); }
public void test0514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0514"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); helpFormatter0.defaultOptPrefix = "usage: "; java.lang.String str15 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); }
public void test0515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0515"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; int int10 = helpFormatter0.getLeftPadding(); java.lang.String str11 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test0516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0516"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultDescPad; helpFormatter0.setWidth((int) '#'); helpFormatter0.setArgName(""); java.lang.String str10 = helpFormatter0.createPadding((int) ' '); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "                " + "'", str10, "                "); }
public void test0517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0517"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); java.lang.String str11 = helpFormatter0.rtrim("hi!"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!"); }
public void test0518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0518"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator8 = helpFormatter7.optionComparator; java.lang.String str10 = helpFormatter7.rtrim(""); helpFormatter7.setLongOptSeparator(" "); org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter13.getLeftPadding(); helpFormatter13.defaultNewLine = ""; helpFormatter13.defaultDescPad = '4'; helpFormatter13.setNewLine(""); int int24 = helpFormatter13.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator25 = helpFormatter13.optionComparator; helpFormatter7.setOptionComparator(comparator25); helpFormatter0.setOptionComparator(comparator25); helpFormatter0.defaultSyntaxPrefix = "                          "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1)); org.junit.Assert.assertNotNull(comparator25); }
public void test0519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0519"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; java.lang.String str10 = helpFormatter0.defaultOptPrefix; java.lang.String str11 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printOptions(printWriter12, 0, options14, (-2), 32); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n"); }
public void test0520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0520"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; java.lang.String str5 = helpFormatter0.defaultOptPrefix; int int6 = helpFormatter0.getLeftPadding(); int int7 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); }
public void test0521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0521"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptPrefix("--"); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); java.lang.String str12 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp(" ", options14, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test0522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0522"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultLeftPad = (byte) -1; java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printOptions(printWriter12, 100, options14, (int) (short) 1, (int) (short) 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test0523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0523"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultWidth = (short) -1; int int11 = helpFormatter0.defaultWidth; helpFormatter0.setWidth(3); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); }
public void test0524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0524"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); helpFormatter0.setArgName("arg"); helpFormatter0.setDescPadding((int) '#'); java.lang.String str9 = helpFormatter0.getSyntaxPrefix(); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp("hi!", "", options13, "usage:", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "usage: " + "'", str9, "usage: "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); }
public void test0525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0525"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setLongOptSeparator("     "); java.lang.String str9 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultDescPad = (byte) 100; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); }
public void test0526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0526"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str11 = helpFormatter10.defaultSyntaxPrefix; java.util.Comparator comparator12 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator12; java.lang.String str14 = helpFormatter0.defaultNewLine; int int15 = helpFormatter0.defaultLeftPad; java.lang.String str16 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertNotNull(comparator12); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + " " + "'", str16, " "); }
public void test0527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0527"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; helpFormatter0.defaultSyntaxPrefix = "  "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); }
public void test0528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0528"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("                                                 "); java.lang.String str11 = helpFormatter0.defaultLongOptPrefix; int int12 = helpFormatter0.getLeftPadding(); int int16 = helpFormatter0.findWrapPos(" ", 0, (int) (short) 100); java.lang.String str18 = helpFormatter0.rtrim(" "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); }
public void test0529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0529"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.defaultOptPrefix = "--"; java.lang.String str14 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); }
public void test0530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0530"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str3 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultWidth = (byte) 1; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); }
public void test0531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0531"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); helpFormatter0.defaultLongOptPrefix = "                                                  "; helpFormatter0.setArgName("     "); helpFormatter0.setWidth(97); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); }
public void test0532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0532"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultSyntaxPrefix = ""; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0533"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); helpFormatter0.defaultOptPrefix = "arg"; int int12 = helpFormatter0.defaultLeftPad; java.lang.String str14 = helpFormatter0.rtrim("\n"); helpFormatter0.setLongOptPrefix("                          "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0534"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getArgName(); helpFormatter0.setDescPadding(0); helpFormatter0.defaultDescPad = (short) 100; java.util.Comparator comparator14 = helpFormatter0.optionComparator; java.lang.String str15 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter16.getLeftPadding(); java.lang.String str18 = helpFormatter16.getArgName(); helpFormatter16.defaultNewLine = "\n"; helpFormatter16.defaultLeftPad = (byte) -1; helpFormatter16.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); int int26 = helpFormatter25.getLeftPadding(); helpFormatter25.defaultNewLine = ""; helpFormatter25.setDescPadding(10); helpFormatter25.setSyntaxPrefix(" "); java.util.Comparator comparator33 = helpFormatter25.getOptionComparator(); helpFormatter16.setOptionComparator(comparator33); helpFormatter0.optionComparator = comparator33; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "arg" + "'", str18, "arg"); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1); org.junit.Assert.assertNotNull(comparator33); }
public void test0535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0535"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultDescPad; java.lang.String str6 = helpFormatter0.defaultNewLine; java.lang.StringBuffer stringBuffer7 = null; try { java.lang.StringBuffer stringBuffer11 = helpFormatter0.renderWrappedText(stringBuffer7, (int) (byte) 0, 1, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0536"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = 0; java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp(printWriter10, (int) (byte) -1, "", "                                                  ", options14, (int) '4', (int) '4', "-"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0537"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); helpFormatter0.setLeftPadding(52); java.lang.String str13 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "usage: "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test0538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0538"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = (short) 1; helpFormatter0.defaultNewLine = "arg"; helpFormatter0.defaultNewLine = "--"; helpFormatter0.setSyntaxPrefix("usage:"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0539"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str7 = helpFormatter0.getOptPrefix(); java.lang.String str8 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("--", "hi!", options11, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); }
public void test0540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0540"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); int int12 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test0541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0541"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); java.lang.String str14 = helpFormatter0.rtrim("--"); helpFormatter0.setArgName("usage:"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); }
public void test0542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0542"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); helpFormatter0.defaultOptPrefix = "usage: "; helpFormatter0.defaultLeftPad = (byte) 100; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0543"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.defaultLongOptPrefix = "arg"; helpFormatter0.setLongOptPrefix("                          "); }
public void test0544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0544"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLongOptPrefix("                                                 "); int int9 = helpFormatter0.getDescPadding(); java.lang.String str10 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); }
public void test0545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0545"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLongOptPrefix = "usage:"; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "     " + "'", str6, "     "); }
public void test0546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0546"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.setSyntaxPrefix(""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); }
public void test0547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0547"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.lang.String str4 = helpFormatter0.getOptPrefix(); helpFormatter0.setDescPadding((-2)); java.io.PrintWriter printWriter7 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp(printWriter7, (int) ' ', "  ", "-", options11, (-2), 0, "", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0548"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); int int10 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.setOptPrefix(""); helpFormatter11.defaultLongOptPrefix = ""; java.lang.String str16 = helpFormatter11.defaultOptPrefix; java.lang.String str17 = helpFormatter11.getLongOptPrefix(); java.lang.String str18 = helpFormatter11.defaultOptPrefix; java.util.Comparator comparator19 = helpFormatter11.getOptionComparator(); helpFormatter0.setOptionComparator(comparator19); java.io.PrintWriter printWriter21 = null; org.apache.commons.cli.Options options25 = null; try { helpFormatter0.printHelp(printWriter21, (int) '4', "                ", "usage:", options25, (int) '4', (int) (byte) 1, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertNotNull(comparator19); }
public void test0549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0549"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test0550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0550"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); helpFormatter0.defaultArgName = "\n"; helpFormatter0.setArgName(""); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter20.getLeftPadding(); helpFormatter20.defaultNewLine = ""; java.lang.String str24 = helpFormatter20.defaultOptPrefix; helpFormatter20.setLongOptPrefix(" "); helpFormatter20.defaultDescPad = (short) 10; java.lang.String str29 = helpFormatter20.defaultArgName; java.util.Comparator comparator30 = helpFormatter20.optionComparator; helpFormatter0.setOptionComparator(comparator30); java.lang.String str32 = helpFormatter0.getOptPrefix(); helpFormatter0.setNewLine("                "); java.lang.String str35 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-" + "'", str24, "-"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg"); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                                                 " + "'", str32, "                                                 "); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "     " + "'", str35, "     "); }
public void test0551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0551"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.defaultNewLine = "     "; java.lang.String str9 = helpFormatter0.createPadding(0); helpFormatter0.setDescPadding(74); helpFormatter0.setDescPadding(1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test0552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0552"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 1); java.lang.String str10 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator11 = helpFormatter0.optionComparator; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; int int13 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 74 + "'", int13 == 74); }
public void test0553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0553"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("                ", "-", options8, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0554"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; java.util.Comparator comparator7 = null; helpFormatter0.optionComparator = comparator7; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0555"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.lang.String str10 = helpFormatter0.getLongOptSeparator(); java.lang.String str11 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test0556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0556"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setArgName("hi!"); int int9 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test0557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0557"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options18 = null; try { helpFormatter0.printHelp((-1), "usage:", "--", options18, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test0558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0558"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator9); }
public void test0559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0559"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setArgName("                          "); helpFormatter0.setLongOptSeparator("arg"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); }
public void test0560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0560"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); helpFormatter0.defaultOptPrefix = "arg"; java.lang.Class<?> wildcardClass12 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test0561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0561"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setOptPrefix(" "); int int4 = helpFormatter0.defaultDescPad; int int8 = helpFormatter0.findWrapPos("arg", (int) (byte) -1, 1); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0); }
public void test0562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0562"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp((-2), "     ", "  ", options14, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0563"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setSyntaxPrefix("\n"); int int5 = helpFormatter0.defaultWidth; java.lang.String str6 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test0564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0564"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.createPadding(52); int int6 = helpFormatter0.getLeftPadding(); java.lang.String str7 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                          " + "'", str5, "                          "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "usage: " + "'", str7, "usage: "); }
public void test0565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0565"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptPrefix("--"); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); java.lang.String str12 = helpFormatter0.defaultArgName; java.lang.StringBuffer stringBuffer13 = null; org.apache.commons.cli.Options options15 = null; try { java.lang.StringBuffer stringBuffer18 = helpFormatter0.renderOptions(stringBuffer13, (int) (short) 0, options15, (int) (short) 10, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); }
public void test0566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0566"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str3 = helpFormatter0.defaultNewLine; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); }
public void test0567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0567"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.getArgName(); helpFormatter10.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); helpFormatter15.setOptPrefix(""); helpFormatter15.defaultLongOptPrefix = ""; java.lang.String str20 = helpFormatter15.defaultLongOptPrefix; java.lang.String str21 = helpFormatter15.getNewLine(); java.lang.String str22 = helpFormatter15.defaultOptPrefix; helpFormatter15.setDescPadding(74); java.util.Comparator comparator25 = helpFormatter15.getOptionComparator(); helpFormatter10.optionComparator = comparator25; helpFormatter0.optionComparator = comparator25; int int28 = helpFormatter0.defaultLeftPad; java.util.Comparator comparator29 = helpFormatter0.getOptionComparator(); int int30 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(comparator25); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); org.junit.Assert.assertNotNull(comparator29); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1); }
public void test0568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0568"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); int int2 = helpFormatter0.getWidth(); helpFormatter0.defaultOptPrefix = "  "; java.io.PrintWriter printWriter5 = null; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printOptions(printWriter5, 1, options7, (-2), (int) '4'); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0569"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setOptPrefix("\n"); helpFormatter0.setOptPrefix("                          "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); }
public void test0570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0570"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; helpFormatter0.setArgName("arg"); int int8 = helpFormatter0.defaultWidth; java.lang.String str10 = helpFormatter0.createPadding((int) (byte) 0); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0571"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); int int9 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultSyntaxPrefix = "                          "; java.lang.String str14 = helpFormatter0.createPadding((int) (short) 0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0572"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.getArgName(); helpFormatter10.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); helpFormatter15.setOptPrefix(""); helpFormatter15.defaultLongOptPrefix = ""; java.lang.String str20 = helpFormatter15.defaultLongOptPrefix; java.lang.String str21 = helpFormatter15.getNewLine(); java.lang.String str22 = helpFormatter15.defaultOptPrefix; helpFormatter15.setDescPadding(74); java.util.Comparator comparator25 = helpFormatter15.getOptionComparator(); helpFormatter10.optionComparator = comparator25; helpFormatter0.optionComparator = comparator25; int int28 = helpFormatter0.defaultLeftPad; java.lang.String str29 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(comparator25); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "usage: " + "'", str29, "usage: "); }
public void test0573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0573"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); int int5 = helpFormatter0.defaultLeftPad; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLeftPad = 32; java.lang.String str9 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "usage: " + "'", str9, "usage: "); }
public void test0574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0574"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 1); helpFormatter0.setDescPadding(100); helpFormatter0.setLeftPadding(10); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test0575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0575"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); int int6 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); int int9 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); }
public void test0576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0576"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; java.lang.String str9 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding((int) (short) 10); int int12 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10); }
public void test0577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0577"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptPrefix(); java.lang.String str4 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator5 = helpFormatter0.optionComparator; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--" + "'", str3, "--"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertNotNull(comparator5); }
public void test0578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0578"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLongOptPrefix("                                                 "); java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp(printWriter9, 0, "", "                          ", options13, (int) (short) -1, (int) (short) 10, "usage: ", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0579"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter14.getLeftPadding(); helpFormatter14.defaultNewLine = ""; helpFormatter14.defaultDescPad = '4'; helpFormatter14.setNewLine(""); helpFormatter14.setSyntaxPrefix(""); java.util.Comparator comparator24 = helpFormatter14.optionComparator; helpFormatter0.setOptionComparator(comparator24); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--" + "'", str13, "--"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertNotNull(comparator24); }
public void test0580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0580"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.defaultNewLine = "     "; helpFormatter0.setLongOptSeparator("                                                 "); helpFormatter0.setNewLine(""); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); }
public void test0581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0581"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); int int8 = helpFormatter7.getLeftPadding(); helpFormatter7.defaultNewLine = ""; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); helpFormatter11.setOptPrefix(""); helpFormatter11.defaultLongOptPrefix = ""; java.lang.String str16 = helpFormatter11.defaultLongOptPrefix; helpFormatter11.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter19 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator20 = helpFormatter19.optionComparator; int int21 = helpFormatter19.getLeftPadding(); int int22 = helpFormatter19.defaultLeftPad; java.lang.String str24 = helpFormatter19.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter25 = new org.apache.commons.cli.HelpFormatter(); int int26 = helpFormatter25.getLeftPadding(); helpFormatter25.defaultNewLine = ""; helpFormatter25.defaultDescPad = '4'; helpFormatter25.setNewLine(""); int int36 = helpFormatter25.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator37 = helpFormatter25.optionComparator; helpFormatter19.setOptionComparator(comparator37); helpFormatter11.setOptionComparator(comparator37); helpFormatter7.optionComparator = comparator37; int int41 = helpFormatter7.defaultWidth; org.apache.commons.cli.HelpFormatter helpFormatter42 = new org.apache.commons.cli.HelpFormatter(); int int43 = helpFormatter42.getLeftPadding(); helpFormatter42.defaultNewLine = ""; helpFormatter42.setDescPadding(10); java.lang.String str48 = helpFormatter42.getOptPrefix(); java.lang.String str49 = helpFormatter42.getNewLine(); helpFormatter42.defaultOptPrefix = ""; helpFormatter42.setNewLine(""); helpFormatter42.defaultSyntaxPrefix = "usage: "; java.lang.String str56 = helpFormatter42.getArgName(); java.util.Comparator comparator57 = helpFormatter42.optionComparator; helpFormatter7.setOptionComparator(comparator57); helpFormatter0.optionComparator = comparator57; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertNotNull(comparator20); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "                                                 " + "'", str24, "                                                 "); org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1); org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1)); org.junit.Assert.assertNotNull(comparator37); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 74 + "'", int41 == 74); org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1); org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-" + "'", str48, "-"); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, ""); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "arg" + "'", str56, "arg"); org.junit.Assert.assertNotNull(comparator57); }
public void test0582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0582"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setOptPrefix("usage: "); java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printWrapped(printWriter12, 32, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0583"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0584"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; helpFormatter8.setDescPadding(10); java.lang.String str14 = helpFormatter8.getLongOptSeparator(); java.lang.String str15 = helpFormatter8.getLongOptSeparator(); java.lang.String str17 = helpFormatter8.createPadding((int) (byte) 1); java.lang.String str18 = helpFormatter8.defaultOptPrefix; java.util.Comparator comparator19 = helpFormatter8.optionComparator; helpFormatter0.optionComparator = comparator19; helpFormatter0.setOptPrefix(""); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str14 + "' != '" + " " + "'", str14, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); org.junit.Assert.assertEquals("'" + str17 + "' != '" + " " + "'", str17, " "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-" + "'", str18, "-"); org.junit.Assert.assertNotNull(comparator19); }
public void test0585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0585"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultDescPad; helpFormatter0.defaultWidth = '4'; int int8 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52); }
public void test0586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0586"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultDescPad = 'a'; java.lang.String str10 = helpFormatter0.defaultNewLine; java.util.Comparator comparator11 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertNotNull(comparator11); }
public void test0587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0587"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.StringBuffer stringBuffer3 = null; try { java.lang.StringBuffer stringBuffer7 = helpFormatter0.renderWrappedText(stringBuffer3, 0, 0, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0588"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); helpFormatter0.setLongOptSeparator(" "); helpFormatter0.setArgName("--"); helpFormatter0.defaultNewLine = "                                                  "; helpFormatter0.setLongOptSeparator("                          "); java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printWrapped(printWriter12, (int) (short) -1, 0, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test0589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0589"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultDescPad = 0; java.lang.String str6 = helpFormatter0.getOptPrefix(); int int7 = helpFormatter0.getDescPadding(); java.lang.String str8 = helpFormatter0.defaultArgName; java.util.Comparator comparator9 = helpFormatter0.optionComparator; org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); org.junit.Assert.assertNotNull(comparator9); }
public void test0590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0590"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultLeftPad; helpFormatter0.setDescPadding((int) (byte) 100); int int5 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultWidth = (byte) 10; int int8 = helpFormatter0.defaultWidth; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10); }
public void test0591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0591"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.defaultLongOptPrefix; java.lang.String str13 = helpFormatter10.getOptPrefix(); java.util.Comparator comparator14 = helpFormatter10.optionComparator; java.util.Comparator comparator15 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator15; helpFormatter0.defaultDescPad = (short) 0; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertNotNull(comparator15); }
public void test0592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0592"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); helpFormatter0.setWidth((int) '4'); int int11 = helpFormatter0.defaultWidth; helpFormatter0.defaultLongOptPrefix = "usage: "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52); }
public void test0593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0593"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); int int10 = helpFormatter0.defaultLeftPad; int int11 = helpFormatter0.getWidth(); java.lang.String str13 = helpFormatter0.createPadding(0); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test0594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0594"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str7 = helpFormatter0.getOptPrefix(); java.lang.String str8 = helpFormatter0.getSyntaxPrefix(); java.lang.String str9 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); }
public void test0595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0595"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.Options options17 = null; try { helpFormatter0.printHelp("arg", "                                                  ", options17, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0596"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.setDescPadding((int) (short) 0); java.lang.String str5 = helpFormatter0.getOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); helpFormatter6.setOptPrefix(""); helpFormatter6.defaultLongOptPrefix = ""; java.lang.String str11 = helpFormatter6.defaultLongOptPrefix; java.lang.String str12 = helpFormatter6.getNewLine(); java.lang.String str13 = helpFormatter6.defaultOptPrefix; helpFormatter6.setDescPadding(74); java.util.Comparator comparator16 = helpFormatter6.getOptionComparator(); helpFormatter0.optionComparator = comparator16; helpFormatter0.setWidth((int) (short) 0); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(comparator16); }
public void test0597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0597"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); int int9 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("                                                  "); java.lang.String str13 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str14 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); }
public void test0598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0598"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.defaultNewLine; helpFormatter0.defaultArgName = "                                                  "; java.lang.String str11 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); }
public void test0599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0599"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.defaultNewLine = "     "; java.lang.String str9 = helpFormatter0.createPadding(0); java.lang.String str10 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp(3, "arg", " ", options14, "                "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); }
public void test0600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0600"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); int int2 = helpFormatter0.getWidth(); helpFormatter0.defaultWidth = (byte) 100; helpFormatter0.setOptPrefix("hi!"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0601"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultLeftPad = (short) 10; int int12 = helpFormatter0.getWidth(); java.lang.String str13 = helpFormatter0.defaultSyntaxPrefix; java.lang.Class<?> wildcardClass14 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertNotNull(wildcardClass14); }
public void test0602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0602"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); java.lang.String str11 = helpFormatter0.getNewLine(); java.lang.String str12 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); }
public void test0603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0603"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); java.lang.StringBuffer stringBuffer3 = null; try { java.lang.StringBuffer stringBuffer7 = helpFormatter0.renderWrappedText(stringBuffer3, (int) (short) 0, 97, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); }
public void test0604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0604"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; java.lang.String str7 = helpFormatter0.defaultLongOptPrefix; int int11 = helpFormatter0.findWrapPos("                                                 ", 1, (int) 'a'); java.lang.String str12 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); }
public void test0605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0605"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultWidth = 1; int int13 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52); }
public void test0606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0606"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); int int22 = helpFormatter0.findWrapPos("\n", (int) (byte) 100, 97); org.apache.commons.cli.Options options24 = null; try { helpFormatter0.printHelp("                                                  ", options24, false); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1)); }
public void test0607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0607"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; java.lang.String str9 = helpFormatter0.getNewLine(); helpFormatter0.setLeftPadding((int) (short) 10); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp(printWriter12, 10, "                                                 ", "", options16, (int) (byte) 100, (int) ' ', "     "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test0608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0608"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.setOptPrefix(""); helpFormatter22.defaultLongOptPrefix = ""; java.lang.String str27 = helpFormatter22.defaultLongOptPrefix; helpFormatter22.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator31 = helpFormatter30.optionComparator; int int32 = helpFormatter30.getLeftPadding(); int int33 = helpFormatter30.defaultLeftPad; java.lang.String str35 = helpFormatter30.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter36 = new org.apache.commons.cli.HelpFormatter(); int int37 = helpFormatter36.getLeftPadding(); helpFormatter36.defaultNewLine = ""; helpFormatter36.defaultDescPad = '4'; helpFormatter36.setNewLine(""); int int47 = helpFormatter36.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator48 = helpFormatter36.optionComparator; helpFormatter30.setOptionComparator(comparator48); helpFormatter22.setOptionComparator(comparator48); helpFormatter0.setOptionComparator(comparator48); java.lang.String str52 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultDescPad = (short) -1; java.util.Comparator comparator55 = helpFormatter0.optionComparator; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                 " + "'", str35, "                                                 "); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1); org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1)); org.junit.Assert.assertNotNull(comparator48); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                 " + "'", str52, "                                                 "); org.junit.Assert.assertNotNull(comparator55); }
public void test0609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0609"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options4 = null; try { helpFormatter0.printHelp(3, "hi!", "-", options4, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0610"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str3 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setNewLine("-"); java.lang.String str6 = helpFormatter0.getLongOptPrefix(); int int7 = helpFormatter0.getDescPadding(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!"); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); }
public void test0611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0611"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); helpFormatter0.defaultArgName = "\n"; helpFormatter0.setArgName(""); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter20.getLeftPadding(); helpFormatter20.defaultNewLine = ""; java.lang.String str24 = helpFormatter20.defaultOptPrefix; java.lang.String str26 = helpFormatter20.rtrim(""); java.lang.String str28 = helpFormatter20.rtrim("-"); helpFormatter20.defaultOptPrefix = "--"; helpFormatter20.defaultDescPad = (short) 1; helpFormatter20.defaultNewLine = "arg"; org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); helpFormatter35.setOptPrefix(""); helpFormatter35.defaultLongOptPrefix = ""; java.lang.String str40 = helpFormatter35.defaultLongOptPrefix; java.lang.String str41 = helpFormatter35.getNewLine(); helpFormatter35.setSyntaxPrefix(" "); java.util.Comparator comparator44 = helpFormatter35.getOptionComparator(); helpFormatter20.optionComparator = comparator44; helpFormatter0.setOptionComparator(comparator44); java.lang.String str47 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-" + "'", str24, "-"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-" + "'", str28, "-"); org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, ""); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\n" + "'", str41, "\n"); org.junit.Assert.assertNotNull(comparator44); org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, ""); }
public void test0612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0612"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); helpFormatter0.defaultLongOptPrefix = "                                                  "; helpFormatter0.setArgName("     "); helpFormatter0.setOptPrefix("-"); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); }
public void test0613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0613"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp(printWriter11, 3, "", "", options15, 32, (int) 'a', "usage:", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); }
public void test0614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0614"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); int int6 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultLeftPad = (short) 0; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0615"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; java.lang.String str8 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); }
public void test0616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0616"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("arg"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); }
public void test0617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0617"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; helpFormatter0.setLongOptPrefix(""); int int15 = helpFormatter0.getWidth(); helpFormatter0.defaultLongOptPrefix = "                          "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74); }
public void test0618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0618"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printOptions(printWriter11, (int) (short) 0, options13, (int) (byte) -1, 100); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); }
public void test0619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0619"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("\n"); helpFormatter0.setLongOptSeparator("  "); java.lang.String str10 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0620"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setWidth(0); int int8 = helpFormatter0.defaultDescPad; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); }
public void test0621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0621"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.setSyntaxPrefix("     "); helpFormatter0.setWidth((int) (byte) 10); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test0622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0622"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); java.lang.String str12 = helpFormatter0.createPadding(100); java.lang.String str13 = helpFormatter0.getLongOptPrefix(); java.util.Comparator comparator14 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("-"); helpFormatter0.defaultDescPad = 52; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                  " + "'", str12, "                                                  "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertNotNull(comparator14); }
public void test0623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0623"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int10 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) (short) 10); java.lang.String str11 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); }
public void test0624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0624"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultOptPrefix = "usage: "; java.lang.String str9 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0625"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "                                                 "; int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.setLongOptSeparator(" "); org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int13 = helpFormatter12.getLeftPadding(); helpFormatter12.defaultNewLine = ""; helpFormatter12.setDescPadding(10); java.lang.String str18 = helpFormatter12.getLongOptSeparator(); java.lang.String str19 = helpFormatter12.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter20.getLeftPadding(); helpFormatter20.defaultNewLine = ""; helpFormatter20.setDescPadding(10); java.lang.String str26 = helpFormatter20.getLongOptSeparator(); java.lang.String str27 = helpFormatter20.getLongOptSeparator(); java.lang.String str29 = helpFormatter20.createPadding((int) (byte) 1); java.lang.String str30 = helpFormatter20.defaultOptPrefix; java.util.Comparator comparator31 = helpFormatter20.optionComparator; helpFormatter12.optionComparator = comparator31; helpFormatter0.optionComparator = comparator31; helpFormatter0.defaultLongOptPrefix = " "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertEquals("'" + str18 + "' != '" + " " + "'", str18, " "); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertEquals("'" + str26 + "' != '" + " " + "'", str26, " "); org.junit.Assert.assertEquals("'" + str27 + "' != '" + " " + "'", str27, " "); org.junit.Assert.assertEquals("'" + str29 + "' != '" + " " + "'", str29, " "); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-" + "'", str30, "-"); org.junit.Assert.assertNotNull(comparator31); }
public void test0626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0626"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultNewLine; java.lang.String str8 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); }
public void test0627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0627"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); java.lang.String str19 = helpFormatter0.defaultOptPrefix; java.lang.String str20 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-" + "'", str19, "-"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "arg" + "'", str20, "arg"); }
public void test0628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0628"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.getOptPrefix(); helpFormatter0.setLongOptSeparator("                                                  "); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; java.lang.String str14 = helpFormatter8.rtrim(""); int int15 = helpFormatter8.getDescPadding(); helpFormatter8.defaultWidth = 0; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.optionComparator = comparator18; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3); org.junit.Assert.assertNotNull(comparator18); }
public void test0629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0629"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter3 = null; org.apache.commons.cli.Options options5 = null; try { helpFormatter0.printOptions(printWriter3, 32, options5, (int) (byte) -1, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n"); }
public void test0630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0630"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultWidth = (short) -1; helpFormatter0.setWidth((int) (short) 10); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0631"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; int int2 = helpFormatter0.getWidth(); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); }
public void test0632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0632"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultDescPad = 'a'; java.lang.String str10 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, (int) ' ', 52, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0633"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getLongOptPrefix(); java.lang.String str15 = helpFormatter0.getArgName(); helpFormatter0.defaultWidth = (byte) 1; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); }
public void test0634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0634"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str13 = helpFormatter0.rtrim("                          "); helpFormatter0.setLongOptPrefix(""); helpFormatter0.defaultArgName = "                                                  "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test0635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0635"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setOptPrefix(" "); helpFormatter0.setOptPrefix("\n"); java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printUsage(printWriter6, (-2), " ", options9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); }
public void test0636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0636"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 1); java.lang.String str10 = helpFormatter0.defaultOptPrefix; java.lang.StringBuffer stringBuffer11 = null; try { java.lang.StringBuffer stringBuffer15 = helpFormatter0.renderWrappedText(stringBuffer11, (int) (short) -1, (int) (short) 1, "                "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); }
public void test0637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0637"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.setOptPrefix(""); helpFormatter22.defaultLongOptPrefix = ""; java.lang.String str27 = helpFormatter22.defaultLongOptPrefix; helpFormatter22.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator31 = helpFormatter30.optionComparator; int int32 = helpFormatter30.getLeftPadding(); int int33 = helpFormatter30.defaultLeftPad; java.lang.String str35 = helpFormatter30.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter36 = new org.apache.commons.cli.HelpFormatter(); int int37 = helpFormatter36.getLeftPadding(); helpFormatter36.defaultNewLine = ""; helpFormatter36.defaultDescPad = '4'; helpFormatter36.setNewLine(""); int int47 = helpFormatter36.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator48 = helpFormatter36.optionComparator; helpFormatter30.setOptionComparator(comparator48); helpFormatter22.setOptionComparator(comparator48); helpFormatter0.setOptionComparator(comparator48); helpFormatter0.defaultLeftPad = '#'; helpFormatter0.setDescPadding(100); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                 " + "'", str35, "                                                 "); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1); org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1)); org.junit.Assert.assertNotNull(comparator48); }
public void test0638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0638"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.findWrapPos("", 100, (int) (byte) 0); helpFormatter0.defaultNewLine = "     "; java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp(printWriter9, 3, "     ", " ", options13, (int) 'a', 10, "-", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test0639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0639"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp(" ", options8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0640"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.io.PrintWriter printWriter9 = null; try { helpFormatter0.printWrapped(printWriter9, (int) 'a', ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator8); }
public void test0641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0641"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 1); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.Class<?> wildcardClass11 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test0642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0642"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp("", "--", options16, "arg", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test0643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0643"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.lang.String str4 = helpFormatter0.getOptPrefix(); int int5 = helpFormatter0.getLeftPadding(); java.lang.String str6 = helpFormatter0.getArgName(); helpFormatter0.setLongOptSeparator("                                                 "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg"); }
public void test0644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0644"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptPrefix(""); org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); int int6 = helpFormatter5.getLeftPadding(); helpFormatter5.defaultNewLine = ""; helpFormatter5.defaultDescPad = '4'; helpFormatter5.setNewLine(""); helpFormatter5.setSyntaxPrefix(""); java.lang.String str15 = helpFormatter5.getSyntaxPrefix(); helpFormatter5.setWidth((-2)); java.lang.String str18 = helpFormatter5.defaultNewLine; java.lang.String str19 = helpFormatter5.getArgName(); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); helpFormatter20.setOptPrefix(""); helpFormatter20.defaultLongOptPrefix = ""; java.lang.String str25 = helpFormatter20.defaultLongOptPrefix; java.lang.String str26 = helpFormatter20.getNewLine(); helpFormatter20.setSyntaxPrefix(" "); java.lang.String str29 = helpFormatter20.defaultOptPrefix; java.util.Comparator comparator30 = helpFormatter20.getOptionComparator(); helpFormatter5.optionComparator = comparator30; helpFormatter0.optionComparator = comparator30; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "arg" + "'", str19, "arg"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, ""); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\n" + "'", str26, "\n"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, ""); org.junit.Assert.assertNotNull(comparator30); }
public void test0645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0645"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); helpFormatter0.defaultOptPrefix = "arg"; int int12 = helpFormatter0.defaultLeftPad; java.lang.String str14 = helpFormatter0.rtrim("\n"); helpFormatter0.defaultSyntaxPrefix = "                "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0646"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultWidth; helpFormatter0.defaultOptPrefix = "--"; java.io.PrintWriter printWriter5 = null; try { helpFormatter0.printUsage(printWriter5, 74, "                "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0647"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding((int) ' '); java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.defaultLeftPad = '4'; helpFormatter0.defaultOptPrefix = "usage: "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test0648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0648"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); java.lang.String str19 = helpFormatter0.getLongOptPrefix(); java.lang.String str20 = helpFormatter0.getOptPrefix(); org.apache.commons.cli.Options options23 = null; try { helpFormatter0.printHelp("  ", "usage: ", options23, "hi!", false); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--" + "'", str19, "--"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-" + "'", str20, "-"); }
public void test0649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0649"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getArgName(); int int5 = helpFormatter0.findWrapPos("arg", 0, (int) (byte) 10); helpFormatter0.defaultArgName = "usage:"; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1)); }
public void test0650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0650"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; java.lang.String str10 = helpFormatter0.getNewLine(); helpFormatter0.defaultDescPad = 0; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n"); }
public void test0651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0651"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultOptPrefix = "arg"; java.util.Comparator comparator9 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertNotNull(comparator9); }
public void test0652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0652"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp((int) (byte) -1, "-", "--", options15, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test0653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0653"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.defaultWidth = (short) 100; java.lang.String str9 = helpFormatter0.getNewLine(); helpFormatter0.defaultDescPad = 10; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp("                          ", "--", options14, "     ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); }
public void test0654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0654"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); java.io.PrintWriter printWriter9 = null; try { helpFormatter0.printWrapped(printWriter9, (int) (byte) 1, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); }
public void test0655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0655"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultDescPad = 'a'; int int10 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74); }
public void test0656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0656"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.lang.String str13 = helpFormatter0.createPadding(100); helpFormatter0.defaultSyntaxPrefix = "     "; org.apache.commons.cli.Options options19 = null; try { helpFormatter0.printHelp((int) (byte) 1, "\n", "\n", options19, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                  " + "'", str13, "                                                  "); }
public void test0657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0657"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptPrefix("--"); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setDescPadding((-2)); java.util.Comparator comparator14 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertNotNull(comparator14); }
public void test0658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0658"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); }
public void test0659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0659"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; java.lang.String str11 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int13 = helpFormatter12.getLeftPadding(); helpFormatter12.defaultNewLine = ""; java.lang.String str16 = helpFormatter12.defaultOptPrefix; helpFormatter12.setLongOptPrefix(" "); helpFormatter12.defaultDescPad = (short) 10; helpFormatter12.setLongOptSeparator(""); helpFormatter12.defaultOptPrefix = "                                                 "; java.util.Comparator comparator25 = helpFormatter12.getOptionComparator(); helpFormatter0.optionComparator = comparator25; helpFormatter0.defaultLeftPad = 52; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-" + "'", str16, "-"); org.junit.Assert.assertNotNull(comparator25); }
public void test0660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0660"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; helpFormatter0.defaultArgName = "usage: "; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str17 = helpFormatter16.defaultSyntaxPrefix; java.util.Comparator comparator18 = helpFormatter16.optionComparator; helpFormatter0.setOptionComparator(comparator18); java.io.PrintWriter printWriter20 = null; org.apache.commons.cli.Options options24 = null; try { helpFormatter0.printHelp(printWriter20, 52, "--", "usage:", options24, 32, (int) (byte) 10, "usage:", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "usage: " + "'", str17, "usage: "); org.junit.Assert.assertNotNull(comparator18); }
public void test0661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0661"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); helpFormatter0.defaultDescPad = 10; java.lang.String str12 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.Options options17 = null; try { helpFormatter0.printHelp(printWriter13, (-2), "--", "", options17, (int) (short) 10, 52, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); }
public void test0662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0662"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); helpFormatter0.defaultSyntaxPrefix = "arg"; java.lang.String str13 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); }
public void test0663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0663"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); int int6 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); helpFormatter0.setLongOptPrefix(""); helpFormatter0.setLongOptPrefix("                "); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0664"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.setLongOptSeparator("     "); helpFormatter0.setWidth(100); helpFormatter0.setDescPadding((int) (short) 10); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); }
public void test0665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0665"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); int int6 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3); }
public void test0666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0666"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; java.lang.String str10 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultSyntaxPrefix = "                "; java.io.PrintWriter printWriter13 = null; try { helpFormatter0.printWrapped(printWriter13, (-1), (int) (short) 0, "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0667"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setOptPrefix(" "); java.lang.String str4 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp("hi!", options6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "--" + "'", str4, "--"); }
public void test0668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0668"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); helpFormatter0.defaultArgName = "\n"; helpFormatter0.setArgName(""); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter20.getLeftPadding(); helpFormatter20.defaultNewLine = ""; java.lang.String str24 = helpFormatter20.defaultOptPrefix; helpFormatter20.setLongOptPrefix(" "); helpFormatter20.defaultDescPad = (short) 10; java.lang.String str29 = helpFormatter20.defaultArgName; java.util.Comparator comparator30 = helpFormatter20.optionComparator; helpFormatter0.setOptionComparator(comparator30); java.lang.String str32 = helpFormatter0.getOptPrefix(); org.apache.commons.cli.Options options36 = null; try { helpFormatter0.printHelp((int) (byte) 1, "--", "-", options36, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-" + "'", str24, "-"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg"); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                                                 " + "'", str32, "                                                 "); }
public void test0669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0669"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str3 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setNewLine("-"); java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = " "; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!"); }
public void test0670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0670"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp("usage: ", options7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); }
public void test0671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0671"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setLeftPadding((int) '#'); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp(32, "                          ", "usage:", options12, "hi!", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); }
public void test0672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0672"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); int int13 = helpFormatter0.getDescPadding(); java.lang.String str14 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0673"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; int int16 = helpFormatter0.findWrapPos("", (-1), (int) (short) 0); java.lang.String str17 = helpFormatter0.defaultOptPrefix; int int18 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "--" + "'", str17, "--"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0); }
public void test0674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0674"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); int int7 = helpFormatter0.defaultLeftPad; java.lang.String str8 = helpFormatter0.defaultArgName; helpFormatter0.setLongOptSeparator("                          "); helpFormatter0.setWidth((int) (byte) 100); java.lang.String str14 = helpFormatter0.rtrim("\n"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0675"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); java.lang.String str13 = helpFormatter0.defaultLongOptPrefix; int int14 = helpFormatter0.defaultWidth; int int15 = helpFormatter0.defaultWidth; helpFormatter0.setArgName("--"); int int18 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74 + "'", int14 == 74); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); }
public void test0676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0676"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); java.lang.String str8 = helpFormatter0.rtrim(""); java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp(printWriter9, (int) (short) 1, "usage: ", "     ", options13, (int) (short) 10, 0, "                          ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); }
public void test0677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0677"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); helpFormatter0.setLongOptSeparator(" "); helpFormatter0.setArgName("--"); helpFormatter0.defaultNewLine = "                                                  "; helpFormatter0.setLongOptSeparator("                          "); java.lang.String str12 = helpFormatter0.getNewLine(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                  " + "'", str12, "                                                  "); }
public void test0678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0678"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator("                          "); java.lang.String str16 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultSyntaxPrefix = "                "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "usage: " + "'", str16, "usage: "); }
public void test0679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0679"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultLeftPad; helpFormatter0.setDescPadding((int) (byte) 100); int int5 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultWidth = (byte) 10; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp((int) (short) -1, "", "--", options11, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); }
public void test0680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0680"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "                                                 "; java.util.Comparator comparator9 = helpFormatter0.optionComparator; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(comparator9); }
public void test0681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0681"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; helpFormatter0.setLongOptSeparator("  "); org.junit.Assert.assertNotNull(comparator1); }
public void test0682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0682"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; java.lang.String str11 = helpFormatter0.defaultLongOptPrefix; java.lang.String str12 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); }
public void test0683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0683"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; java.lang.String str5 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultOptPrefix = "\n"; java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp(printWriter8, 97, "hi!", "", options12, (int) (byte) 1, 0, "                          ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0684"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.setDescPadding((int) (short) 0); java.lang.String str5 = helpFormatter0.getOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); helpFormatter6.setOptPrefix(""); helpFormatter6.defaultLongOptPrefix = ""; java.lang.String str11 = helpFormatter6.defaultLongOptPrefix; java.lang.String str12 = helpFormatter6.getNewLine(); java.lang.String str13 = helpFormatter6.defaultOptPrefix; helpFormatter6.setDescPadding(74); java.util.Comparator comparator16 = helpFormatter6.getOptionComparator(); helpFormatter0.optionComparator = comparator16; java.util.Comparator comparator18 = helpFormatter0.optionComparator; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertNotNull(comparator18); }
public void test0685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0685"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.defaultNewLine = "     "; helpFormatter0.setLongOptSeparator("                                                 "); java.lang.String str10 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "                                                 " + "'", str10, "                                                 "); }
public void test0686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0686"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.setSyntaxPrefix("     "); java.lang.String str9 = helpFormatter0.defaultNewLine; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); }
public void test0687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0687"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.defaultNewLine = "     "; helpFormatter0.setOptPrefix("hi!"); java.io.PrintWriter printWriter10 = null; try { helpFormatter0.printWrapped(printWriter10, (int) (byte) 1, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); }
public void test0688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0688"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "--"; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str7 = helpFormatter0.createPadding(97); helpFormatter0.setArgName(""); helpFormatter0.setLeftPadding(10); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                 " + "'", str7, "                                                 "); }
public void test0689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0689"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); helpFormatter9.setOptPrefix(""); helpFormatter9.defaultLongOptPrefix = ""; java.lang.String str14 = helpFormatter9.defaultLongOptPrefix; java.lang.String str15 = helpFormatter9.getNewLine(); java.util.Comparator comparator16 = helpFormatter9.getOptionComparator(); helpFormatter0.optionComparator = comparator16; java.lang.String str19 = helpFormatter0.rtrim(""); java.lang.StringBuffer stringBuffer20 = null; org.apache.commons.cli.Options options22 = null; try { java.lang.StringBuffer stringBuffer25 = helpFormatter0.renderOptions(stringBuffer20, 0, options22, 100, 3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); }
public void test0690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0690"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setNewLine("-"); org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp("-", "usage:", options6, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); }
public void test0691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0691"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; java.lang.String str10 = helpFormatter0.getLongOptSeparator(); int int11 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52); }
public void test0692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0692"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "                                                 "; int int9 = helpFormatter0.defaultLeftPad; java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str12 = helpFormatter0.createPadding(32); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                " + "'", str12, "                "); }
public void test0693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0693"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getNewLine(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); java.lang.String str9 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0694"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.defaultWidth = (short) 100; helpFormatter0.defaultArgName = "\n"; java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, 10, (int) (short) -1, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test0695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0695"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.defaultLongOptPrefix; java.lang.String str13 = helpFormatter10.getOptPrefix(); java.util.Comparator comparator14 = helpFormatter10.optionComparator; java.util.Comparator comparator15 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator15; helpFormatter0.defaultNewLine = "                                                 "; helpFormatter0.setLongOptPrefix(" "); int int21 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertNotNull(comparator15); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52); }
public void test0696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0696"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printWrapped(printWriter6, (int) (short) 10, 0, "     "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); }
public void test0697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0697"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptPrefix(""); int int8 = helpFormatter0.findWrapPos("--", (-2), (int) '4'); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test0698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0698"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix(""); helpFormatter0.setOptPrefix("arg"); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.defaultDescPad = '4'; helpFormatter9.setNewLine(""); int int20 = helpFormatter9.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator21 = helpFormatter9.optionComparator; helpFormatter0.setOptionComparator(comparator21); helpFormatter0.setSyntaxPrefix("-"); java.lang.StringBuffer stringBuffer25 = null; org.apache.commons.cli.Options options27 = null; try { java.lang.StringBuffer stringBuffer30 = helpFormatter0.renderOptions(stringBuffer25, (int) 'a', options27, 52, 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertNotNull(comparator21); }
public void test0699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0699"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); int int6 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); helpFormatter0.setWidth((int) (short) -1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0700"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("\n"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--" + "'", str3, "--"); }
public void test0701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0701"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix(""); helpFormatter0.setOptPrefix("arg"); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.defaultDescPad = '4'; helpFormatter9.setNewLine(""); int int20 = helpFormatter9.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator21 = helpFormatter9.optionComparator; helpFormatter0.setOptionComparator(comparator21); helpFormatter0.setSyntaxPrefix("-"); java.lang.String str25 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertNotNull(comparator21); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-" + "'", str25, "-"); }
public void test0702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0702"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); helpFormatter0.defaultArgName = "\n"; helpFormatter0.setArgName(""); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter20.getLeftPadding(); helpFormatter20.defaultNewLine = ""; java.lang.String str24 = helpFormatter20.defaultOptPrefix; helpFormatter20.setLongOptPrefix(" "); helpFormatter20.defaultDescPad = (short) 10; java.lang.String str29 = helpFormatter20.defaultArgName; java.util.Comparator comparator30 = helpFormatter20.optionComparator; helpFormatter0.setOptionComparator(comparator30); java.lang.String str32 = helpFormatter0.getOptPrefix(); helpFormatter0.setNewLine("                "); org.apache.commons.cli.Options options37 = null; try { helpFormatter0.printHelp("arg", "-", options37, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-" + "'", str24, "-"); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg"); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                                                 " + "'", str32, "                                                 "); }
public void test0703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0703"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.StringBuffer stringBuffer8 = null; try { java.lang.StringBuffer stringBuffer12 = helpFormatter0.renderWrappedText(stringBuffer8, (int) (short) 0, 52, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); }
public void test0704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0704"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; helpFormatter0.defaultArgName = "usage: "; java.lang.String str16 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); }
public void test0705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0705"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); int int11 = helpFormatter0.getWidth(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.defaultNewLine = "     "; java.lang.String str16 = helpFormatter0.defaultArgName; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); }
public void test0706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0706"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setLongOptPrefix(""); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0707"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.setOptPrefix(""); helpFormatter22.defaultLongOptPrefix = ""; java.lang.String str27 = helpFormatter22.defaultLongOptPrefix; helpFormatter22.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator31 = helpFormatter30.optionComparator; int int32 = helpFormatter30.getLeftPadding(); int int33 = helpFormatter30.defaultLeftPad; java.lang.String str35 = helpFormatter30.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter36 = new org.apache.commons.cli.HelpFormatter(); int int37 = helpFormatter36.getLeftPadding(); helpFormatter36.defaultNewLine = ""; helpFormatter36.defaultDescPad = '4'; helpFormatter36.setNewLine(""); int int47 = helpFormatter36.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator48 = helpFormatter36.optionComparator; helpFormatter30.setOptionComparator(comparator48); helpFormatter22.setOptionComparator(comparator48); helpFormatter0.setOptionComparator(comparator48); helpFormatter0.defaultDescPad = (byte) 10; int int54 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                 " + "'", str35, "                                                 "); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1); org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1)); org.junit.Assert.assertNotNull(comparator48); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1); }
public void test0708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0708"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); int int11 = helpFormatter0.getWidth(); helpFormatter0.defaultNewLine = "  "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); }
public void test0709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0709"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.Class<?> wildcardClass3 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertNotNull(wildcardClass3); }
public void test0710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0710"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setLeftPadding((int) '#'); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); java.lang.String str9 = helpFormatter0.defaultArgName; int int13 = helpFormatter0.findWrapPos("hi!", (int) 'a', (int) ' '); helpFormatter0.setSyntaxPrefix(""); java.lang.String str16 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertEquals("'" + str16 + "' != '" + " " + "'", str16, " "); }
public void test0711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0711"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); helpFormatter0.setWidth((int) '4'); int int11 = helpFormatter0.defaultWidth; int int12 = helpFormatter0.defaultDescPad; java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.Options options17 = null; try { helpFormatter0.printHelp(printWriter13, (int) (short) 10, "usage: ", "--", options17, 32, 1, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); }
public void test0712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0712"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str3 = helpFormatter0.defaultLongOptPrefix; java.lang.String str4 = helpFormatter0.defaultNewLine; helpFormatter0.defaultWidth = (short) 100; java.lang.String str7 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("     "); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test0713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0713"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str13 = helpFormatter0.rtrim("                          "); helpFormatter0.setLongOptPrefix(""); java.lang.String str16 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "usage: " + "'", str16, "usage: "); }
public void test0714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0714"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); helpFormatter0.defaultWidth = 0; java.util.Comparator comparator10 = helpFormatter0.optionComparator; java.lang.String str12 = helpFormatter0.rtrim(""); java.lang.String str13 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test0715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0715"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); int int11 = helpFormatter0.getWidth(); org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int13 = helpFormatter12.getLeftPadding(); helpFormatter12.defaultNewLine = ""; helpFormatter12.defaultDescPad = '4'; helpFormatter12.setNewLine(""); helpFormatter12.defaultWidth = '4'; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); int int23 = helpFormatter22.getLeftPadding(); java.lang.String str24 = helpFormatter22.defaultLongOptPrefix; java.lang.String str25 = helpFormatter22.getOptPrefix(); java.util.Comparator comparator26 = helpFormatter22.optionComparator; java.util.Comparator comparator27 = helpFormatter22.optionComparator; helpFormatter12.optionComparator = comparator27; helpFormatter0.optionComparator = comparator27; int int30 = helpFormatter0.getWidth(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "--" + "'", str24, "--"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-" + "'", str25, "-"); org.junit.Assert.assertNotNull(comparator26); org.junit.Assert.assertNotNull(comparator27); org.junit.Assert.assertTrue("'" + int30 + "' != '" + 74 + "'", int30 == 74); }
public void test0716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0716"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; org.apache.commons.cli.HelpFormatter helpFormatter4 = new org.apache.commons.cli.HelpFormatter(); helpFormatter4.setOptPrefix(""); helpFormatter4.defaultLongOptPrefix = ""; java.lang.String str9 = helpFormatter4.defaultLongOptPrefix; helpFormatter4.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator13 = helpFormatter12.optionComparator; int int14 = helpFormatter12.getLeftPadding(); int int15 = helpFormatter12.defaultLeftPad; java.lang.String str17 = helpFormatter12.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter18.getLeftPadding(); helpFormatter18.defaultNewLine = ""; helpFormatter18.defaultDescPad = '4'; helpFormatter18.setNewLine(""); int int29 = helpFormatter18.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator30 = helpFormatter18.optionComparator; helpFormatter12.setOptionComparator(comparator30); helpFormatter4.setOptionComparator(comparator30); helpFormatter0.optionComparator = comparator30; int int34 = helpFormatter0.defaultWidth; org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); int int36 = helpFormatter35.getLeftPadding(); helpFormatter35.defaultNewLine = ""; helpFormatter35.setDescPadding(10); java.lang.String str41 = helpFormatter35.getOptPrefix(); java.lang.String str42 = helpFormatter35.getNewLine(); helpFormatter35.defaultOptPrefix = ""; helpFormatter35.setNewLine(""); helpFormatter35.defaultSyntaxPrefix = "usage: "; java.lang.String str49 = helpFormatter35.getArgName(); java.util.Comparator comparator50 = helpFormatter35.optionComparator; helpFormatter0.setOptionComparator(comparator50); helpFormatter0.setSyntaxPrefix("-"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(comparator13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "                                                 " + "'", str17, "                                                 "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 74 + "'", int34 == 74); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-" + "'", str41, "-"); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg"); org.junit.Assert.assertNotNull(comparator50); }
public void test0717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0717"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.defaultNewLine = "     "; helpFormatter0.setOptPrefix("hi!"); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); helpFormatter10.defaultNewLine = ""; helpFormatter10.setDescPadding(10); java.lang.String str16 = helpFormatter10.defaultNewLine; helpFormatter10.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter19 = new org.apache.commons.cli.HelpFormatter(); helpFormatter19.setOptPrefix(""); helpFormatter19.defaultLongOptPrefix = ""; java.lang.String str24 = helpFormatter19.defaultLongOptPrefix; java.lang.String str25 = helpFormatter19.getNewLine(); java.util.Comparator comparator26 = helpFormatter19.getOptionComparator(); helpFormatter10.optionComparator = comparator26; helpFormatter0.optionComparator = comparator26; org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, ""); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n"); org.junit.Assert.assertNotNull(comparator26); }
public void test0718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0718"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str4 = helpFormatter0.createPadding(10); java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setNewLine(""); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "     " + "'", str4, "     "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test0719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0719"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.setLeftPadding((int) (byte) 100); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); }
public void test0720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0720"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); int int10 = helpFormatter0.defaultLeftPad; int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultNewLine; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); }
public void test0721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0721"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.getOptPrefix(); helpFormatter0.setSyntaxPrefix("-"); java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printWrapped(printWriter8, (int) (short) 100, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0722"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.getArgName(); int int6 = helpFormatter0.getWidth(); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); try { int int11 = helpFormatter0.findWrapPos("-", (int) (byte) 1, (-1)); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); }
public void test0723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0723"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getArgName(); helpFormatter0.setDescPadding(0); helpFormatter0.defaultDescPad = (short) 100; java.util.Comparator comparator14 = helpFormatter0.optionComparator; java.lang.String str16 = helpFormatter0.createPadding(52); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "                          " + "'", str16, "                          "); }
public void test0724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0724"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; int int8 = helpFormatter0.getWidth(); helpFormatter0.defaultOptPrefix = " "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); }
public void test0725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0725"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setNewLine(" "); java.lang.StringBuffer stringBuffer14 = null; try { java.lang.StringBuffer stringBuffer18 = helpFormatter0.renderWrappedText(stringBuffer14, (int) (short) 1, 3, "                "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test0726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0726"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); int int9 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10); }
public void test0727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0727"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getArgName(); helpFormatter0.setDescPadding(0); helpFormatter0.defaultDescPad = (short) 100; java.util.Comparator comparator14 = helpFormatter0.optionComparator; java.lang.String str15 = helpFormatter0.getNewLine(); java.io.PrintWriter printWriter16 = null; org.apache.commons.cli.Options options18 = null; try { helpFormatter0.printOptions(printWriter16, 52, options18, 0, (int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); }
public void test0728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0728"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptPrefix("                "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0729"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); helpFormatter6.setOptPrefix(""); helpFormatter6.defaultLongOptPrefix = ""; java.lang.String str11 = helpFormatter6.defaultLongOptPrefix; java.lang.String str12 = helpFormatter6.getNewLine(); java.lang.String str13 = helpFormatter6.defaultOptPrefix; helpFormatter6.setDescPadding(74); java.util.Comparator comparator16 = helpFormatter6.getOptionComparator(); helpFormatter0.optionComparator = comparator16; int int21 = helpFormatter0.findWrapPos("                                                 ", 0, (int) '4'); java.util.Comparator comparator22 = helpFormatter0.optionComparator; java.lang.String str23 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "arg" + "'", str23, "arg"); }
public void test0730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0730"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultArgName = "\n"; helpFormatter0.defaultLeftPad = 0; }
public void test0731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0731"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.String str8 = helpFormatter0.getOptPrefix(); helpFormatter0.setNewLine("hi!"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0732"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); int int9 = helpFormatter0.getWidth(); java.lang.String str10 = helpFormatter0.defaultOptPrefix; helpFormatter0.setArgName("                "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); }
public void test0733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0733"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); java.lang.String str3 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter4 = null; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printUsage(printWriter4, 100, "arg", options7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); }
public void test0734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0734"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = (short) 1; java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.Options options17 = null; try { helpFormatter0.printHelp(printWriter13, 10, "usage:", "usage:", options17, (int) (byte) 100, 10, "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0735"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.lang.String str5 = helpFormatter0.createPadding((int) 'a'); int int6 = helpFormatter0.defaultWidth; java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultSyntaxPrefix = "usage: "; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                                 " + "'", str5, "                                                 "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertNotNull(comparator7); }
public void test0736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0736"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.defaultWidth = (short) 100; java.lang.String str9 = helpFormatter0.getNewLine(); int int10 = helpFormatter0.getWidth(); int int11 = helpFormatter0.getWidth(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100); }
public void test0737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0737"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); helpFormatter0.defaultDescPad = 10; java.lang.StringBuffer stringBuffer12 = null; try { java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderWrappedText(stringBuffer12, (int) (byte) 100, 100, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); }
public void test0738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0738"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultWidth; helpFormatter0.defaultLongOptPrefix = "--"; int int8 = helpFormatter0.defaultWidth; java.lang.Class<?> wildcardClass9 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test0739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0739"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.String str11 = helpFormatter0.getArgName(); java.lang.String str12 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator("                                                  "); java.lang.StringBuffer stringBuffer15 = null; try { java.lang.StringBuffer stringBuffer19 = helpFormatter0.renderWrappedText(stringBuffer15, 1, (int) 'a', "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test0740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0740"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setOptPrefix(" "); int int4 = helpFormatter0.defaultDescPad; helpFormatter0.defaultLongOptPrefix = "--"; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0741"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator("                          "); org.apache.commons.cli.Options options17 = null; try { helpFormatter0.printHelp("     ", options17, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test0742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0742"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setDescPadding(1); helpFormatter0.setLongOptSeparator("-"); org.apache.commons.cli.Options options20 = null; try { helpFormatter0.printHelp((int) ' ', " ", "\n", options20, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); }
public void test0743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0743"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); int int12 = helpFormatter0.getDescPadding(); java.lang.String str13 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test0744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0744"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); int int5 = helpFormatter0.getDescPadding(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); }
public void test0745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0745"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setLongOptSeparator("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); helpFormatter10.setOptPrefix(""); helpFormatter10.defaultLongOptPrefix = ""; java.lang.String str15 = helpFormatter10.defaultLongOptPrefix; java.lang.String str16 = helpFormatter10.getNewLine(); java.util.Comparator comparator17 = helpFormatter10.getOptionComparator(); helpFormatter0.optionComparator = comparator17; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\n" + "'", str16, "\n"); org.junit.Assert.assertNotNull(comparator17); }
public void test0746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0746"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.getOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter6.getLeftPadding(); java.lang.String str8 = helpFormatter6.getArgName(); helpFormatter6.defaultNewLine = "\n"; helpFormatter6.defaultLeftPad = (byte) -1; helpFormatter6.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter15.getLeftPadding(); helpFormatter15.defaultNewLine = ""; helpFormatter15.setDescPadding(10); helpFormatter15.setSyntaxPrefix(" "); java.util.Comparator comparator23 = helpFormatter15.getOptionComparator(); helpFormatter6.setOptionComparator(comparator23); helpFormatter0.optionComparator = comparator23; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertNotNull(comparator23); }
public void test0747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0747"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getArgName(); int int15 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-2) + "'", int15 == (-2)); }
public void test0748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0748"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; int int13 = helpFormatter0.getWidth(); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp("", options15); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 74 + "'", int13 == 74); }
public void test0749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0749"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp(32, " ", "                                                  ", options9, "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0750"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp("                                                  ", "-", options15, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); }
public void test0751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0751"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; int int2 = helpFormatter0.getWidth(); java.lang.String str3 = helpFormatter0.defaultOptPrefix; int int4 = helpFormatter0.getLeftPadding(); java.lang.String str5 = helpFormatter0.getNewLine(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n"); }
public void test0752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0752"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str11 = helpFormatter10.defaultSyntaxPrefix; java.util.Comparator comparator12 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator12; int int14 = helpFormatter0.getWidth(); helpFormatter0.setLeftPadding((int) (byte) 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertNotNull(comparator12); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74 + "'", int14 == 74); }
public void test0753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0753"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptPrefix("--"); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); java.lang.String str12 = helpFormatter0.defaultArgName; java.lang.String str13 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); }
public void test0754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0754"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix(""); helpFormatter0.setOptPrefix("arg"); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp((int) 'a', "usage: ", "", options12, "arg", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); }
public void test0755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0755"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.getArgName(); helpFormatter10.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); helpFormatter15.setOptPrefix(""); helpFormatter15.defaultLongOptPrefix = ""; java.lang.String str20 = helpFormatter15.defaultLongOptPrefix; java.lang.String str21 = helpFormatter15.getNewLine(); java.lang.String str22 = helpFormatter15.defaultOptPrefix; helpFormatter15.setDescPadding(74); java.util.Comparator comparator25 = helpFormatter15.getOptionComparator(); helpFormatter10.optionComparator = comparator25; helpFormatter0.optionComparator = comparator25; helpFormatter0.setDescPadding((int) ' '); helpFormatter0.setDescPadding(0); java.io.PrintWriter printWriter32 = null; org.apache.commons.cli.Options options34 = null; try { helpFormatter0.printOptions(printWriter32, 1, options34, (int) (byte) 0, 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(comparator25); }
public void test0756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0756"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = 0; helpFormatter0.defaultLeftPad = (byte) 100; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0757"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); helpFormatter0.setWidth((int) '4'); int int11 = helpFormatter0.defaultWidth; java.lang.String str12 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test0758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0758"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("                                                 ", (int) (byte) 100, (-2)); int int14 = helpFormatter0.findWrapPos("", 100, 74); helpFormatter0.setLeftPadding((int) (byte) 10); java.lang.String str18 = helpFormatter0.rtrim(" "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); }
public void test0759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0759"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultDescPad; helpFormatter0.defaultNewLine = " "; java.lang.String str7 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultWidth = 1; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "usage: " + "'", str7, "usage: "); }
public void test0760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0760"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.defaultNewLine; int int14 = helpFormatter0.defaultDescPad; java.lang.String str15 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--" + "'", str15, "--"); }
public void test0761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0761"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.defaultNewLine; java.lang.String str8 = helpFormatter0.getNewLine(); java.io.PrintWriter printWriter9 = null; try { helpFormatter0.printUsage(printWriter9, 32, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); }
public void test0762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0762"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); int int11 = helpFormatter0.findWrapPos("\n", (int) ' ', 3); int int12 = helpFormatter0.getLeftPadding(); helpFormatter0.setWidth(100); java.lang.StringBuffer stringBuffer15 = null; org.apache.commons.cli.Options options17 = null; try { java.lang.StringBuffer stringBuffer20 = helpFormatter0.renderOptions(stringBuffer15, (int) (short) 1, options17, 74, 74); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test0763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0763"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName(""); java.lang.String str13 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test0764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0764"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; int int8 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0765"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("                                                 "); java.lang.String str11 = helpFormatter0.defaultLongOptPrefix; int int12 = helpFormatter0.getLeftPadding(); java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printOptions(printWriter13, (int) (byte) 10, options15, (int) (byte) 100, (int) ' '); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test0766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0766"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.getOptPrefix(); helpFormatter0.setSyntaxPrefix("-"); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp(" ", options9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0767"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); int int9 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("                                                  "); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test0768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0768"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); helpFormatter0.defaultOptPrefix = "usage: "; int int15 = helpFormatter0.getDescPadding(); java.lang.String str17 = helpFormatter0.rtrim(" "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); }
public void test0769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0769"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); java.lang.String str14 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultNewLine = "arg"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); }
public void test0770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0770"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; int int10 = helpFormatter0.findWrapPos("", 97, 0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test0771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0771"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); int int14 = helpFormatter0.findWrapPos("usage: ", (int) 'a', (int) (byte) 0); helpFormatter0.setWidth((int) (byte) 0); int int17 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); }
public void test0772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0772"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("                                                 ", (int) (byte) 100, (-2)); int int14 = helpFormatter0.findWrapPos("", 100, 74); helpFormatter0.setLeftPadding((int) (byte) 10); java.lang.String str18 = helpFormatter0.rtrim("hi!"); helpFormatter0.setDescPadding(3); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!"); }
public void test0773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0773"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); int int5 = helpFormatter0.defaultLeftPad; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.getArgName(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test0774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0774"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.String str11 = helpFormatter0.getArgName(); java.lang.String str12 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator("                                                 "); int int15 = helpFormatter0.defaultWidth; helpFormatter0.setWidth((int) '#'); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74); }
public void test0775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0775"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.defaultWidth = (short) 100; helpFormatter0.defaultArgName = "\n"; helpFormatter0.setLongOptSeparator("     "); java.lang.String str13 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test0776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0776"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("\n"); helpFormatter0.defaultDescPad = 0; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); }
public void test0777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0777"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setLongOptPrefix("                                                 "); int int6 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0778"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getSyntaxPrefix(); int int2 = helpFormatter0.getWidth(); int int3 = helpFormatter0.defaultDescPad; helpFormatter0.defaultArgName = "usage: "; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3); }
public void test0779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0779"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); helpFormatter0.setArgName("-"); helpFormatter0.setLongOptSeparator("                                                 "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); }
public void test0780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0780"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("\n"); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("", "-", options10, " ", true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); }
public void test0781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0781"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str8 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setLongOptSeparator("     "); helpFormatter0.defaultOptPrefix = "     "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); }
public void test0782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0782"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.defaultLeftPad = (short) 1; java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printOptions(printWriter9, (int) (short) 100, options11, (int) 'a', 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); }
public void test0783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0783"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setSyntaxPrefix("\n"); int int5 = helpFormatter0.getWidth(); helpFormatter0.setArgName("arg"); java.lang.StringBuffer stringBuffer8 = null; try { java.lang.StringBuffer stringBuffer12 = helpFormatter0.renderWrappedText(stringBuffer8, (int) '#', 3, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74); }
public void test0784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0784"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator("                          "); java.lang.String str16 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.Options options20 = null; try { helpFormatter0.printHelp((int) (short) 10, "                                                  ", "                                                  ", options20, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "usage: " + "'", str16, "usage: "); }
public void test0785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0785"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); helpFormatter0.defaultLeftPad = '4'; java.lang.String str13 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test0786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0786"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); helpFormatter0.setArgName("arg"); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultNewLine = "                "; helpFormatter0.defaultSyntaxPrefix = "arg"; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp((int) 'a', "\n", "                          ", options16, "usage: ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); }
public void test0787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0787"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.setOptPrefix(""); helpFormatter22.defaultLongOptPrefix = ""; java.lang.String str27 = helpFormatter22.defaultLongOptPrefix; helpFormatter22.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator31 = helpFormatter30.optionComparator; int int32 = helpFormatter30.getLeftPadding(); int int33 = helpFormatter30.defaultLeftPad; java.lang.String str35 = helpFormatter30.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter36 = new org.apache.commons.cli.HelpFormatter(); int int37 = helpFormatter36.getLeftPadding(); helpFormatter36.defaultNewLine = ""; helpFormatter36.defaultDescPad = '4'; helpFormatter36.setNewLine(""); int int47 = helpFormatter36.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator48 = helpFormatter36.optionComparator; helpFormatter30.setOptionComparator(comparator48); helpFormatter22.setOptionComparator(comparator48); helpFormatter0.setOptionComparator(comparator48); java.lang.String str53 = helpFormatter0.createPadding(52); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                 " + "'", str35, "                                                 "); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1); org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1)); org.junit.Assert.assertNotNull(comparator48); org.junit.Assert.assertEquals("'" + str53 + "' != '" + "                          " + "'", str53, "                          "); }
public void test0788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0788"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator11 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertNotNull(comparator11); }
public void test0789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0789"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); int int16 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptPrefix("                                                 "); java.lang.String str19 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); }
public void test0790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0790"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); java.lang.String str11 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultLeftPad = 97; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); }
public void test0791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0791"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.setArgName("--"); helpFormatter0.setWidth((int) (byte) 0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); }
public void test0792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0792"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.defaultWidth; helpFormatter0.setLongOptPrefix("                                                 "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); }
public void test0793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0793"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; java.lang.String str7 = helpFormatter0.defaultLongOptPrefix; int int11 = helpFormatter0.findWrapPos("                                                 ", 1, (int) 'a'); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp(printWriter12, (int) ' ', "                                                  ", "hi!", options16, (int) '#', (int) (byte) 10, "hi!", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); }
public void test0794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0794"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setNewLine(" "); helpFormatter0.setOptPrefix("usage: "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; int int10 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "usage: " + "'", str9, "usage: "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test0795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0795"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); helpFormatter0.setArgName("-"); java.lang.String str6 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printWrapped(printWriter7, 74, 97, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test0796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0796"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); int int11 = helpFormatter0.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator12 = helpFormatter0.optionComparator; helpFormatter0.setWidth((int) (short) 100); helpFormatter0.defaultOptPrefix = "                                                 "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertNotNull(comparator12); }
public void test0797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0797"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setLongOptSeparator("usage: "); helpFormatter0.defaultDescPad = (short) 10; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); }
public void test0798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0798"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); }
public void test0799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0799"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test0800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0800"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setWidth(1); java.lang.String str5 = helpFormatter0.getNewLine(); java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp(printWriter6, 32, "", "     ", options10, (int) '4', (int) (short) 100, "usage: ", true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n"); }
public void test0801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0801"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); java.lang.String str13 = helpFormatter0.defaultLongOptPrefix; int int14 = helpFormatter0.defaultWidth; int int15 = helpFormatter0.defaultWidth; java.lang.String str17 = helpFormatter0.createPadding((int) (short) 10); int int21 = helpFormatter0.findWrapPos("     ", (int) (short) 0, 32); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74 + "'", int14 == 74); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "     " + "'", str17, "     "); org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1)); }
public void test0802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0802"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "                                                 "; int int9 = helpFormatter0.defaultLeftPad; java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str11 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test0803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0803"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.StringBuffer stringBuffer5 = null; try { java.lang.StringBuffer stringBuffer9 = helpFormatter0.renderWrappedText(stringBuffer5, 52, (int) (short) 100, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0804"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 1); java.lang.String str10 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator11 = helpFormatter0.optionComparator; java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultNewLine = "                "; java.lang.String str15 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-" + "'", str15, "-"); }
public void test0805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0805"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); helpFormatter0.defaultOptPrefix = "arg"; int int12 = helpFormatter0.defaultLeftPad; java.lang.String str14 = helpFormatter0.rtrim("\n"); java.io.PrintWriter printWriter15 = null; try { helpFormatter0.printWrapped(printWriter15, (int) '4', "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0806"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = helpFormatter8.optionComparator; int int10 = helpFormatter8.getLeftPadding(); int int11 = helpFormatter8.defaultLeftPad; java.lang.String str13 = helpFormatter8.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter14.getLeftPadding(); helpFormatter14.defaultNewLine = ""; helpFormatter14.defaultDescPad = '4'; helpFormatter14.setNewLine(""); int int25 = helpFormatter14.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator26 = helpFormatter14.optionComparator; helpFormatter8.setOptionComparator(comparator26); helpFormatter0.setOptionComparator(comparator26); helpFormatter0.defaultDescPad = (byte) 10; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                 " + "'", str13, "                                                 "); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); org.junit.Assert.assertNotNull(comparator26); }
public void test0807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0807"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); helpFormatter0.setLeftPadding(52); java.util.Comparator comparator12 = helpFormatter0.optionComparator; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator12); }
public void test0808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0808"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); java.lang.String str11 = helpFormatter0.getNewLine(); java.util.Comparator comparator12 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertNotNull(comparator12); }
public void test0809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0809"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); java.lang.Class<?> wildcardClass10 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test0810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0810"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); helpFormatter0.defaultOptPrefix = "                                                 "; java.lang.Class<?> wildcardClass13 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test0811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0811"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str7 = helpFormatter0.getSyntaxPrefix(); java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printUsage(printWriter8, 3, "usage:", options11); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "usage: " + "'", str7, "usage: "); }
public void test0812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0812"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getArgName(); helpFormatter0.setDescPadding(0); helpFormatter0.defaultDescPad = (short) 100; int int14 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); }
public void test0813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0813"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str7 = helpFormatter0.getNewLine(); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp(printWriter9, (int) (short) 1, "", "arg", options13, (int) (short) -1, (int) (short) 0, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); }
public void test0814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0814"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("                          "); helpFormatter0.defaultWidth = 0; helpFormatter0.defaultLongOptPrefix = ""; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); }
public void test0815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0815"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.setWidth(74); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test0816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0816"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultNewLine = "-"; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); }
public void test0817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0817"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); helpFormatter0.defaultArgName = "\n"; helpFormatter0.defaultOptPrefix = " "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0818"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setWidth(1); java.io.PrintWriter printWriter5 = null; try { helpFormatter0.printUsage(printWriter5, 52, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0819"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); int int10 = helpFormatter0.defaultLeftPad; java.lang.StringBuffer stringBuffer11 = null; org.apache.commons.cli.Options options13 = null; try { java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderOptions(stringBuffer11, (int) (short) 0, options13, (int) '4', (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test0820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0820"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultWidth = 52; helpFormatter0.defaultNewLine = "arg"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); }
public void test0821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0821"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.defaultNewLine; java.lang.String str10 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); }
public void test0822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0822"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setNewLine(" "); helpFormatter0.defaultSyntaxPrefix = "usage:"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test0823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0823"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "--"; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getArgName(); int int7 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg"); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74 + "'", int7 == 74); }
public void test0824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0824"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.String str11 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printOptions(printWriter12, (int) (short) 0, options14, (int) (byte) -1, 0); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test0825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0825"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setLeftPadding((int) '#'); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); java.lang.String str9 = helpFormatter0.defaultArgName; int int13 = helpFormatter0.findWrapPos("hi!", (int) 'a', (int) ' '); helpFormatter0.setSyntaxPrefix(""); java.lang.String str16 = helpFormatter0.defaultNewLine; int int17 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1)); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\n" + "'", str16, "\n"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74 + "'", int17 == 74); }
public void test0826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0826"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); helpFormatter9.setOptPrefix(""); helpFormatter9.defaultLongOptPrefix = ""; java.lang.String str14 = helpFormatter9.defaultLongOptPrefix; java.lang.String str15 = helpFormatter9.getNewLine(); java.util.Comparator comparator16 = helpFormatter9.getOptionComparator(); helpFormatter0.optionComparator = comparator16; int int18 = helpFormatter0.getDescPadding(); org.apache.commons.cli.Options options21 = null; try { helpFormatter0.printHelp("-", "  ", options21, "     ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10); }
public void test0827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0827"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); int int10 = helpFormatter0.getWidth(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74); }
public void test0828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0828"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultLeftPad; java.lang.String str7 = helpFormatter0.getNewLine(); java.lang.String str8 = helpFormatter0.getNewLine(); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp((int) (byte) 10, "usage: ", "                                                 ", options12, "--", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n"); }
public void test0829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0829"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultWidth = 1; java.util.Comparator comparator13 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertNotNull(comparator13); }
public void test0830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0830"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = "hi!"; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("hi!", options10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); }
public void test0831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0831"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.defaultNewLine; java.lang.String str8 = helpFormatter0.defaultNewLine; helpFormatter0.defaultArgName = "usage: "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); }
public void test0832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0832"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultLeftPad; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.setNewLine("usage: "); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); }
public void test0833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0833"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setOptPrefix(" "); helpFormatter0.setLeftPadding((int) '#'); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); }
public void test0834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0834"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.lang.String str13 = helpFormatter0.createPadding(100); helpFormatter0.defaultDescPad = (short) 10; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                  " + "'", str13, "                                                  "); }
public void test0835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0835"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; helpFormatter0.setOptPrefix(""); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0836"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str8 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setLongOptSeparator("     "); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertNotNull(comparator11); }
public void test0837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0837"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultDescPad = 0; java.lang.String str6 = helpFormatter0.getOptPrefix(); int int7 = helpFormatter0.getDescPadding(); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("-", options9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); }
public void test0838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0838"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); java.lang.String str19 = helpFormatter0.getLongOptPrefix(); java.lang.String str20 = helpFormatter0.getOptPrefix(); helpFormatter0.setLongOptPrefix("-"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--" + "'", str19, "--"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-" + "'", str20, "-"); }
public void test0839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0839"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setLongOptPrefix("                                                 "); int int8 = helpFormatter0.findWrapPos("--", (int) (short) -1, (int) (byte) 100); helpFormatter0.defaultOptPrefix = "usage: "; java.lang.String str11 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test0840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0840"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); java.lang.StringBuffer stringBuffer8 = null; try { java.lang.StringBuffer stringBuffer12 = helpFormatter0.renderWrappedText(stringBuffer8, 3, (int) (byte) 10, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(comparator7); }
public void test0841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0841"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str14 = helpFormatter0.getArgName(); java.util.Comparator comparator15 = helpFormatter0.optionComparator; helpFormatter0.defaultLeftPad = 97; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertNotNull(comparator15); }
public void test0842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0842"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.getArgName(); helpFormatter10.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); helpFormatter15.setOptPrefix(""); helpFormatter15.defaultLongOptPrefix = ""; java.lang.String str20 = helpFormatter15.defaultLongOptPrefix; java.lang.String str21 = helpFormatter15.getNewLine(); java.lang.String str22 = helpFormatter15.defaultOptPrefix; helpFormatter15.setDescPadding(74); java.util.Comparator comparator25 = helpFormatter15.getOptionComparator(); helpFormatter10.optionComparator = comparator25; helpFormatter0.optionComparator = comparator25; helpFormatter0.setDescPadding((int) ' '); helpFormatter0.setLongOptPrefix("usage:"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(comparator25); }
public void test0843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0843"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultLeftPad = 0; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); }
public void test0844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0844"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.defaultNewLine = "     "; java.lang.String str9 = helpFormatter0.createPadding(0); java.lang.String str10 = helpFormatter0.defaultArgName; org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int12 = helpFormatter11.getLeftPadding(); helpFormatter11.defaultNewLine = ""; helpFormatter11.setDescPadding(10); helpFormatter11.setSyntaxPrefix(" "); int int19 = helpFormatter11.defaultLeftPad; helpFormatter11.setLeftPadding(1); java.util.Comparator comparator22 = helpFormatter11.optionComparator; helpFormatter0.optionComparator = comparator22; helpFormatter0.defaultLongOptPrefix = "usage: "; org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertNotNull(comparator22); }
public void test0845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0845"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; helpFormatter0.defaultArgName = "usage: "; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str17 = helpFormatter16.defaultSyntaxPrefix; java.util.Comparator comparator18 = helpFormatter16.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.setLongOptSeparator(""); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "usage: " + "'", str17, "usage: "); org.junit.Assert.assertNotNull(comparator18); }
public void test0846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0846"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultLeftPad = (byte) -1; int int12 = helpFormatter0.getWidth(); java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printOptions(printWriter13, (-1), options15, 0, 32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); }
public void test0847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0847"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); int int9 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultSyntaxPrefix = "                          "; org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); helpFormatter13.setOptPrefix(""); helpFormatter13.defaultLongOptPrefix = ""; java.lang.String str18 = helpFormatter13.defaultLongOptPrefix; helpFormatter13.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter21 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator22 = helpFormatter21.optionComparator; int int23 = helpFormatter21.getLeftPadding(); int int24 = helpFormatter21.defaultLeftPad; java.lang.String str26 = helpFormatter21.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter27 = new org.apache.commons.cli.HelpFormatter(); int int28 = helpFormatter27.getLeftPadding(); helpFormatter27.defaultNewLine = ""; helpFormatter27.defaultDescPad = '4'; helpFormatter27.setNewLine(""); int int38 = helpFormatter27.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator39 = helpFormatter27.optionComparator; helpFormatter21.setOptionComparator(comparator39); helpFormatter13.setOptionComparator(comparator39); helpFormatter0.optionComparator = comparator39; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, ""); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1); org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                 " + "'", str26, "                                                 "); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1)); org.junit.Assert.assertNotNull(comparator39); }
public void test0848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0848"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; int int16 = helpFormatter0.findWrapPos("", (-1), (int) (short) 0); java.lang.String str17 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); }
public void test0849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0849"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); java.lang.String str8 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter9 = null; try { helpFormatter0.printWrapped(printWriter9, 74, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); }
public void test0850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0850"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLeftPadding(0); helpFormatter0.defaultLeftPad = (byte) 0; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0851"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); helpFormatter0.defaultWidth = 0; java.util.Comparator comparator10 = helpFormatter0.optionComparator; java.lang.Class<?> wildcardClass11 = comparator10.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test0852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0852"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); int int3 = helpFormatter0.defaultDescPad; int int4 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp("\n", options6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); }
public void test0853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0853"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; java.lang.String str7 = helpFormatter0.defaultNewLine; helpFormatter0.defaultWidth = 0; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0854"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.defaultLongOptPrefix; java.lang.String str13 = helpFormatter10.getOptPrefix(); java.util.Comparator comparator14 = helpFormatter10.optionComparator; java.util.Comparator comparator15 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator15; helpFormatter0.defaultNewLine = "                                                 "; helpFormatter0.setLongOptPrefix(" "); org.apache.commons.cli.Options options23 = null; try { helpFormatter0.printHelp("", "usage:", options23, "  "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertNotNull(comparator15); }
public void test0855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0855"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; helpFormatter0.setLeftPadding(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); }
public void test0856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0856"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultOptPrefix = "                                                 "; java.lang.String str11 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test0857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0857"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; java.lang.String str10 = helpFormatter0.getLongOptSeparator(); java.lang.String str11 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); }
public void test0858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0858"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "                                                 "; int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.setDescPadding(10); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test0859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0859"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int10 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) (short) 10); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printUsage(printWriter11, 100, "  ", options14); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test0860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0860"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = helpFormatter8.optionComparator; int int10 = helpFormatter8.getLeftPadding(); int int11 = helpFormatter8.defaultLeftPad; java.lang.String str13 = helpFormatter8.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter14.getLeftPadding(); helpFormatter14.defaultNewLine = ""; helpFormatter14.defaultDescPad = '4'; helpFormatter14.setNewLine(""); int int25 = helpFormatter14.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator26 = helpFormatter14.optionComparator; helpFormatter8.setOptionComparator(comparator26); helpFormatter0.setOptionComparator(comparator26); java.util.Comparator comparator29 = helpFormatter0.optionComparator; helpFormatter0.setNewLine("usage:"); helpFormatter0.defaultWidth = 52; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                 " + "'", str13, "                                                 "); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); org.junit.Assert.assertNotNull(comparator26); org.junit.Assert.assertNotNull(comparator29); }
public void test0861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0861"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options3 = null; try { helpFormatter0.printHelp("", options3); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); }
public void test0862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0862"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; int int5 = helpFormatter0.getWidth(); java.lang.StringBuffer stringBuffer6 = null; try { java.lang.StringBuffer stringBuffer10 = helpFormatter0.renderWrappedText(stringBuffer6, 74, (int) (short) 0, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74); }
public void test0863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0863"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.lang.String str5 = helpFormatter0.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter6.getLeftPadding(); helpFormatter6.defaultNewLine = ""; helpFormatter6.defaultDescPad = '4'; helpFormatter6.setNewLine(""); int int17 = helpFormatter6.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator18 = helpFormatter6.optionComparator; helpFormatter0.setOptionComparator(comparator18); java.lang.String str20 = helpFormatter0.defaultNewLine; java.lang.String str21 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                                 " + "'", str5, "                                                 "); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n"); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "usage: " + "'", str21, "usage: "); }
public void test0864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0864"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); int int6 = helpFormatter5.getLeftPadding(); helpFormatter5.defaultNewLine = ""; java.lang.String str9 = helpFormatter5.defaultOptPrefix; java.lang.String str11 = helpFormatter5.rtrim(""); int int12 = helpFormatter5.getDescPadding(); helpFormatter5.defaultWidth = 0; java.util.Comparator comparator15 = helpFormatter5.optionComparator; helpFormatter0.setOptionComparator(comparator15); int int17 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptPrefix("                                                 "); java.lang.String str20 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultSyntaxPrefix = " "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3); org.junit.Assert.assertNotNull(comparator15); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-" + "'", str20, "-"); }
public void test0865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0865"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName(""); java.lang.String str13 = helpFormatter0.defaultOptPrefix; helpFormatter0.setNewLine("usage:"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test0866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0866"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = 0; java.lang.String str10 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, 1, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0867"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptPrefix("--"); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setNewLine("usage: "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); }
public void test0868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0868"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLeftPad = 3; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0869"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); java.lang.String str19 = helpFormatter0.getLongOptPrefix(); java.lang.String str20 = helpFormatter0.getOptPrefix(); java.lang.Class<?> wildcardClass21 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--" + "'", str19, "--"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-" + "'", str20, "-"); org.junit.Assert.assertNotNull(wildcardClass21); }
public void test0870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0870"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); java.lang.String str9 = helpFormatter0.defaultLongOptPrefix; java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printOptions(printWriter10, 0, options12, (int) '4', 3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); }
public void test0871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0871"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultWidth = (short) -1; java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.lang.String str12 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); }
public void test0872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0872"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setNewLine("usage: "); helpFormatter0.setOptPrefix(" "); helpFormatter0.defaultArgName = "                "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test0873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0873"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); helpFormatter0.setArgName("arg"); helpFormatter0.setDescPadding((int) '#'); helpFormatter0.defaultNewLine = "                "; helpFormatter0.defaultSyntaxPrefix = "arg"; java.lang.String str13 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); }
public void test0874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0874"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.setArgName("  "); helpFormatter0.setLeftPadding((int) (byte) 1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); }
public void test0875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0875"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); helpFormatter0.setArgName("arg"); helpFormatter0.setDescPadding((int) '#'); java.lang.String str9 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "usage: " + "'", str9, "usage: "); org.junit.Assert.assertNotNull(comparator10); }
public void test0876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0876"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName(""); helpFormatter0.setLongOptSeparator("--"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); }
public void test0877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0877"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultLongOptPrefix = ""; int int4 = helpFormatter0.defaultLeftPad; helpFormatter0.setNewLine("arg"); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); }
public void test0878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0878"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultOptPrefix = ""; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setLongOptPrefix("                                                  "); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); }
public void test0879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0879"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.defaultNewLine; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test0880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0880"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultWidth; helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.setLongOptSeparator(" "); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0881"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.lang.String str5 = helpFormatter0.getNewLine(); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); }
public void test0882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0882"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printOptions(printWriter12, 0, options14, (int) 'a', (int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test0883() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0883"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setLongOptPrefix("                                                 "); int int8 = helpFormatter0.findWrapPos("--", (int) (short) -1, (int) (byte) 100); int int9 = helpFormatter0.getDescPadding(); java.lang.StringBuffer stringBuffer10 = null; org.apache.commons.cli.Options options12 = null; try { java.lang.StringBuffer stringBuffer15 = helpFormatter0.renderOptions(stringBuffer10, (int) (short) 0, options12, 32, (int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); }
public void test0884() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0884"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLongOptPrefix("                                                 "); helpFormatter0.setSyntaxPrefix("                                                 "); int int11 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); }
public void test0885() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0885"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str14 = helpFormatter0.getArgName(); java.util.Comparator comparator15 = helpFormatter0.optionComparator; helpFormatter0.setLongOptSeparator("                                                 "); java.lang.String str18 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertNotNull(comparator15); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "--" + "'", str18, "--"); }
public void test0886() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0886"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; helpFormatter0.setArgName("arg"); int int8 = helpFormatter0.defaultWidth; helpFormatter0.defaultDescPad = (short) 0; int int11 = helpFormatter0.defaultWidth; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); }
public void test0887() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0887"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str7 = helpFormatter0.getOptPrefix(); java.lang.String str8 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultDescPad = (byte) -1; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); }
public void test0888() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0888"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.setLongOptSeparator("     "); helpFormatter0.setWidth((int) (byte) 1); helpFormatter0.setWidth((int) (short) 100); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); }
public void test0889() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0889"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(0); java.lang.String str11 = helpFormatter0.getArgName(); int int12 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); }
public void test0890() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0890"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultSyntaxPrefix = "                "; java.lang.StringBuffer stringBuffer5 = null; try { java.lang.StringBuffer stringBuffer9 = helpFormatter0.renderWrappedText(stringBuffer5, (int) 'a', 32, "  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); }
public void test0891() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0891"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); int int5 = helpFormatter0.defaultLeftPad; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp((int) (byte) 100, "usage: ", "usage: ", options10, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); }
public void test0892() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0892"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter13.getLeftPadding(); helpFormatter13.defaultNewLine = ""; helpFormatter13.setDescPadding(10); java.lang.String str19 = helpFormatter13.defaultNewLine; helpFormatter13.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.setOptPrefix(""); helpFormatter22.defaultLongOptPrefix = ""; java.lang.String str27 = helpFormatter22.defaultLongOptPrefix; java.lang.String str28 = helpFormatter22.getNewLine(); java.util.Comparator comparator29 = helpFormatter22.getOptionComparator(); helpFormatter13.optionComparator = comparator29; helpFormatter0.optionComparator = comparator29; helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\n" + "'", str28, "\n"); org.junit.Assert.assertNotNull(comparator29); }
public void test0893() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0893"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = " "; java.lang.String str11 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test0894() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0894"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.defaultLeftPad; java.lang.String str10 = helpFormatter0.createPadding(100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "                                                  " + "'", str10, "                                                  "); }
public void test0895() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0895"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = 0; java.lang.String str9 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultOptPrefix = "hi!"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "usage: " + "'", str9, "usage: "); }
public void test0896() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0896"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptSeparator("-"); helpFormatter0.defaultWidth = 97; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0897() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0897"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; helpFormatter8.setDescPadding(10); java.lang.String str14 = helpFormatter8.getLongOptSeparator(); java.lang.String str15 = helpFormatter8.getLongOptSeparator(); java.lang.String str17 = helpFormatter8.createPadding((int) (byte) 1); java.lang.String str18 = helpFormatter8.defaultOptPrefix; java.util.Comparator comparator19 = helpFormatter8.optionComparator; helpFormatter0.optionComparator = comparator19; helpFormatter0.setArgName("     "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str14 + "' != '" + " " + "'", str14, " "); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); org.junit.Assert.assertEquals("'" + str17 + "' != '" + " " + "'", str17, " "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-" + "'", str18, "-"); org.junit.Assert.assertNotNull(comparator19); }
public void test0898() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0898"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.findWrapPos("--", (int) (byte) -1, 0); java.lang.String str7 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test0899() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0899"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); java.lang.String str12 = helpFormatter0.createPadding(100); java.lang.String str13 = helpFormatter0.getLongOptPrefix(); java.util.Comparator comparator14 = helpFormatter0.optionComparator; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp("arg", options16); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                  " + "'", str12, "                                                  "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertNotNull(comparator14); }
public void test0900() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0900"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); int int11 = helpFormatter0.findWrapPos("\n", (int) ' ', 3); int int12 = helpFormatter0.getLeftPadding(); helpFormatter0.setWidth(100); java.lang.StringBuffer stringBuffer15 = null; org.apache.commons.cli.Options options17 = null; try { java.lang.StringBuffer stringBuffer20 = helpFormatter0.renderOptions(stringBuffer15, 97, options17, (int) (byte) -1, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test0901() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0901"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.String str11 = helpFormatter0.getArgName(); java.lang.String str12 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptPrefix(""); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test0902() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0902"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); java.lang.String str14 = helpFormatter0.getSyntaxPrefix(); java.lang.String str16 = helpFormatter0.createPadding((int) (short) 10); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "     " + "'", str16, "     "); }
public void test0903() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0903"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultLeftPad = (short) 10; int int12 = helpFormatter0.getWidth(); helpFormatter0.setNewLine("arg"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); }
public void test0904() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0904"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str11 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test0905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0905"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.util.Comparator comparator7 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(comparator7); }
public void test0906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0906"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); int int2 = helpFormatter0.getWidth(); helpFormatter0.defaultOptPrefix = "  "; helpFormatter0.defaultSyntaxPrefix = "usage: "; java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printWrapped(printWriter7, 52, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0907"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.defaultWidth = (short) 100; java.lang.StringBuffer stringBuffer9 = null; org.apache.commons.cli.Options options11 = null; try { java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderOptions(stringBuffer9, (int) (byte) 10, options11, (int) (byte) 0, 3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test0908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0908"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; org.apache.commons.cli.HelpFormatter helpFormatter4 = new org.apache.commons.cli.HelpFormatter(); helpFormatter4.setOptPrefix(""); helpFormatter4.defaultLongOptPrefix = ""; java.lang.String str9 = helpFormatter4.defaultLongOptPrefix; helpFormatter4.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator13 = helpFormatter12.optionComparator; int int14 = helpFormatter12.getLeftPadding(); int int15 = helpFormatter12.defaultLeftPad; java.lang.String str17 = helpFormatter12.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter18.getLeftPadding(); helpFormatter18.defaultNewLine = ""; helpFormatter18.defaultDescPad = '4'; helpFormatter18.setNewLine(""); int int29 = helpFormatter18.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator30 = helpFormatter18.optionComparator; helpFormatter12.setOptionComparator(comparator30); helpFormatter4.setOptionComparator(comparator30); helpFormatter0.optionComparator = comparator30; int int37 = helpFormatter0.findWrapPos("-", 0, (int) (byte) 1); java.lang.Class<?> wildcardClass38 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(comparator13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "                                                 " + "'", str17, "                                                 "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1)); org.junit.Assert.assertNotNull(wildcardClass38); }
public void test0909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0909"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.defaultNewLine; helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.defaultNewLine = "                                                 "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); }
public void test0910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0910"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.lang.String str5 = helpFormatter0.getNewLine(); java.lang.String str6 = helpFormatter0.defaultNewLine; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("usage: ", options8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0911"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.defaultNewLine; org.apache.commons.cli.Options options5 = null; try { helpFormatter0.printHelp("arg", "                          ", options5, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n"); }
public void test0912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0912"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str3 = helpFormatter0.defaultLongOptPrefix; java.lang.String str4 = helpFormatter0.defaultNewLine; helpFormatter0.defaultWidth = (short) 100; helpFormatter0.setLongOptPrefix("                                                  "); org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("arg", "                ", options11, "     "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n"); }
public void test0913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0913"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); helpFormatter0.defaultWidth = ' '; java.util.Comparator comparator12 = null; helpFormatter0.optionComparator = comparator12; helpFormatter0.defaultDescPad = (-2); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); }
public void test0914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0914"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str7 = helpFormatter0.getNewLine(); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("                                                 ", options9, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0915"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str13 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setNewLine("                                                 "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test0916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0916"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.lang.String str10 = helpFormatter0.getLongOptSeparator(); java.lang.String str11 = helpFormatter0.defaultNewLine; java.lang.StringBuffer stringBuffer12 = null; org.apache.commons.cli.Options options14 = null; try { java.lang.StringBuffer stringBuffer17 = helpFormatter0.renderOptions(stringBuffer12, (-2), options14, (int) '4', 32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n"); }
public void test0917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0917"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); helpFormatter0.defaultWidth = (byte) 1; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); }
public void test0918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0918"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); java.lang.Class<?> wildcardClass20 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test0919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0919"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("                                                 "); java.lang.String str11 = helpFormatter0.defaultLongOptPrefix; java.lang.String str12 = helpFormatter0.defaultArgName; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                 " + "'", str12, "                                                 "); }
public void test0920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0920"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); int int6 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); helpFormatter0.setWidth(10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0921() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0921"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); helpFormatter0.setNewLine(""); java.lang.String str6 = helpFormatter0.defaultArgName; helpFormatter0.defaultLeftPad = 74; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg"); }
public void test0922() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0922"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.getOptionComparator(); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; int int6 = helpFormatter0.getWidth(); java.lang.String str8 = helpFormatter0.rtrim("                                                 "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); }
public void test0923() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0923"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); helpFormatter0.defaultSyntaxPrefix = "arg"; java.lang.String str13 = helpFormatter0.defaultNewLine; int int14 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); }
public void test0924() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0924"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str11 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test0925() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0925"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); helpFormatter6.setOptPrefix(""); helpFormatter6.defaultLongOptPrefix = ""; java.lang.String str11 = helpFormatter6.defaultLongOptPrefix; java.lang.String str12 = helpFormatter6.getNewLine(); java.lang.String str13 = helpFormatter6.defaultOptPrefix; helpFormatter6.setDescPadding(74); java.util.Comparator comparator16 = helpFormatter6.getOptionComparator(); helpFormatter0.optionComparator = comparator16; int int21 = helpFormatter0.findWrapPos("                                                 ", 0, (int) '4'); helpFormatter0.setLongOptSeparator("\n"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52); }
public void test0926() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0926"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.defaultNewLine; int int14 = helpFormatter0.defaultDescPad; java.lang.String str15 = helpFormatter0.defaultOptPrefix; int int16 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-" + "'", str15, "-"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); }
public void test0927() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0927"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator14 = helpFormatter0.optionComparator; java.lang.String str15 = helpFormatter0.getArgName(); helpFormatter0.defaultOptPrefix = "                          "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); }
public void test0928() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0928"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; java.lang.String str5 = helpFormatter0.defaultOptPrefix; int int6 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("                                                  ", "", options9, "", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0929() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0929"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.lang.String str10 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultLeftPad = (short) -1; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); }
public void test0930() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0930"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setSyntaxPrefix("                                                  "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0931() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0931"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("                          "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); }
public void test0932() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0932"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; java.lang.String str11 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int13 = helpFormatter12.getLeftPadding(); helpFormatter12.defaultNewLine = ""; java.lang.String str16 = helpFormatter12.defaultOptPrefix; helpFormatter12.setLongOptPrefix(" "); helpFormatter12.defaultDescPad = (short) 10; java.lang.String str21 = helpFormatter12.defaultArgName; java.util.Comparator comparator22 = helpFormatter12.optionComparator; helpFormatter0.optionComparator = comparator22; helpFormatter0.setDescPadding((int) (byte) -1); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-" + "'", str16, "-"); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg"); org.junit.Assert.assertNotNull(comparator22); }
public void test0933() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0933"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultDescPad; helpFormatter0.defaultNewLine = " "; helpFormatter0.setArgName("     "); helpFormatter0.setLeftPadding(52); org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp((int) '#', "                                                  ", "usage:", options14, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0934() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0934"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.lang.String str10 = helpFormatter0.getLongOptSeparator(); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.lang.StringBuffer stringBuffer12 = null; org.apache.commons.cli.Options options14 = null; try { java.lang.StringBuffer stringBuffer17 = helpFormatter0.renderOptions(stringBuffer12, (int) (byte) 100, options14, (int) (short) 0, (int) 'a'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test0935() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0935"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); helpFormatter0.defaultWidth = 0; java.util.Comparator comparator10 = helpFormatter0.optionComparator; java.lang.String str11 = helpFormatter0.getLongOptSeparator(); java.util.Comparator comparator12 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertNotNull(comparator12); }
public void test0936() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0936"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.defaultLeftPad = (short) 1; java.lang.String str9 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp((int) '#', "  ", "usage:", options13, "                          ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "usage: " + "'", str9, "usage: "); }
public void test0937() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0937"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.lang.String str4 = helpFormatter0.getOptPrefix(); int int5 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultLeftPad = 100; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); }
public void test0938() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0938"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setArgName("hi!"); helpFormatter0.setLongOptPrefix("                          "); java.lang.String str12 = helpFormatter0.createPadding((int) '#'); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                  " + "'", str12, "                  "); }
public void test0939() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0939"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "                                                 "; int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.setArgName(""); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test0940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0940"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.lang.String str10 = helpFormatter0.getLongOptSeparator(); java.lang.String str11 = helpFormatter0.defaultNewLine; helpFormatter0.setLeftPadding((int) (short) 10); int int14 = helpFormatter0.getDescPadding(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74 + "'", int14 == 74); }
public void test0941() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0941"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.lang.String str13 = helpFormatter0.createPadding(100); int int17 = helpFormatter0.findWrapPos("     ", (int) (byte) 0, (int) '#'); org.apache.commons.cli.Options options19 = null; try { helpFormatter0.printHelp("usage: ", options19, false); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                  " + "'", str13, "                                                  "); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); }
public void test0942() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0942"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.setLongOptSeparator("     "); helpFormatter0.setWidth(100); helpFormatter0.defaultWidth = (short) 100; java.io.PrintWriter printWriter26 = null; org.apache.commons.cli.Options options29 = null; try { helpFormatter0.printUsage(printWriter26, 10, "                                                  ", options29); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); }
public void test0943() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0943"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultOptPrefix = "usage: "; helpFormatter0.setArgName("                                                 "); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printOptions(printWriter11, 100, options13, 97, 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0944() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0944"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; org.apache.commons.cli.HelpFormatter helpFormatter4 = new org.apache.commons.cli.HelpFormatter(); helpFormatter4.setOptPrefix(""); helpFormatter4.defaultLongOptPrefix = ""; java.lang.String str9 = helpFormatter4.defaultLongOptPrefix; helpFormatter4.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator13 = helpFormatter12.optionComparator; int int14 = helpFormatter12.getLeftPadding(); int int15 = helpFormatter12.defaultLeftPad; java.lang.String str17 = helpFormatter12.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter18.getLeftPadding(); helpFormatter18.defaultNewLine = ""; helpFormatter18.defaultDescPad = '4'; helpFormatter18.setNewLine(""); int int29 = helpFormatter18.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator30 = helpFormatter18.optionComparator; helpFormatter12.setOptionComparator(comparator30); helpFormatter4.setOptionComparator(comparator30); helpFormatter0.optionComparator = comparator30; int int34 = helpFormatter0.defaultWidth; org.apache.commons.cli.HelpFormatter helpFormatter35 = new org.apache.commons.cli.HelpFormatter(); int int36 = helpFormatter35.getLeftPadding(); helpFormatter35.defaultNewLine = ""; helpFormatter35.setDescPadding(10); java.lang.String str41 = helpFormatter35.getOptPrefix(); java.lang.String str42 = helpFormatter35.getNewLine(); helpFormatter35.defaultOptPrefix = ""; helpFormatter35.setNewLine(""); helpFormatter35.defaultSyntaxPrefix = "usage: "; java.lang.String str49 = helpFormatter35.getArgName(); java.util.Comparator comparator50 = helpFormatter35.optionComparator; helpFormatter0.setOptionComparator(comparator50); java.io.PrintWriter printWriter52 = null; try { helpFormatter0.printWrapped(printWriter52, (int) ' ', ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(comparator13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "                                                 " + "'", str17, "                                                 "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 74 + "'", int34 == 74); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-" + "'", str41, "-"); org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, ""); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg"); org.junit.Assert.assertNotNull(comparator50); }
public void test0945() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0945"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultOptPrefix = "hi!"; int int8 = helpFormatter0.defaultWidth; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); }
public void test0946() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0946"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); int int9 = helpFormatter0.defaultWidth; java.lang.String str11 = helpFormatter0.createPadding(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test0947() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0947"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str3 = helpFormatter0.defaultLongOptPrefix; java.lang.String str4 = helpFormatter0.defaultNewLine; helpFormatter0.defaultWidth = (short) 100; java.lang.String str7 = helpFormatter0.getArgName(); java.lang.String str8 = helpFormatter0.defaultNewLine; org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n"); }
public void test0948() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0948"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); int int6 = helpFormatter0.findWrapPos("\n", 0, (-2)); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertNotNull(comparator7); }
public void test0949() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0949"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("", "", options10, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); }
public void test0950() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0950"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 3; java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printOptions(printWriter13, 74, options15, (int) (short) 100, 3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0951() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0951"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName("-"); java.lang.String str4 = helpFormatter0.getNewLine(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n"); }
public void test0952() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0952"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int10 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) (short) 10); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int13 = helpFormatter12.getLeftPadding(); helpFormatter12.defaultNewLine = ""; int int16 = helpFormatter12.defaultWidth; java.util.Comparator comparator17 = helpFormatter12.getOptionComparator(); java.lang.String str18 = helpFormatter12.defaultOptPrefix; org.apache.commons.cli.HelpFormatter helpFormatter19 = new org.apache.commons.cli.HelpFormatter(); int int20 = helpFormatter19.getLeftPadding(); helpFormatter19.defaultNewLine = ""; helpFormatter19.setDescPadding(10); helpFormatter19.setSyntaxPrefix(" "); int int27 = helpFormatter19.defaultLeftPad; helpFormatter19.setLeftPadding(1); java.util.Comparator comparator30 = helpFormatter19.optionComparator; helpFormatter12.setOptionComparator(comparator30); helpFormatter0.setOptionComparator(comparator30); helpFormatter0.defaultNewLine = "hi!"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74 + "'", int16 == 74); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-" + "'", str18, "-"); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1); org.junit.Assert.assertNotNull(comparator30); }
public void test0953() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0953"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); java.lang.String str19 = helpFormatter0.defaultOptPrefix; helpFormatter0.setWidth((int) (short) 100); java.lang.String str22 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-" + "'", str19, "-"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "--" + "'", str22, "--"); }
public void test0954() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0954"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.createPadding(1); java.util.Comparator comparator11 = helpFormatter0.getOptionComparator(); java.util.Comparator comparator12 = helpFormatter0.optionComparator; java.lang.String str14 = helpFormatter0.createPadding(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertNotNull(comparator11); org.junit.Assert.assertNotNull(comparator12); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0955() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0955"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; java.lang.String str7 = helpFormatter0.rtrim("hi!"); java.lang.String str9 = helpFormatter0.rtrim(" "); helpFormatter0.setLongOptSeparator("usage:"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test0956() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0956"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setLongOptPrefix("                                                 "); int int8 = helpFormatter0.findWrapPos("--", (int) (short) -1, (int) (byte) 100); helpFormatter0.defaultOptPrefix = "usage: "; helpFormatter0.setLongOptSeparator("--"); helpFormatter0.defaultNewLine = "                                                  "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test0957() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0957"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; java.lang.String str8 = helpFormatter0.defaultArgName; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); }
public void test0958() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0958"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.lang.String str13 = helpFormatter0.createPadding(100); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter14.getLeftPadding(); helpFormatter14.defaultNewLine = ""; helpFormatter14.setDescPadding(10); helpFormatter14.defaultArgName = "hi!"; java.util.Comparator comparator22 = helpFormatter14.getOptionComparator(); helpFormatter0.optionComparator = comparator22; int int24 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                  " + "'", str13, "                                                  "); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1)); }
public void test0959() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0959"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); helpFormatter9.setOptPrefix(""); helpFormatter9.defaultLongOptPrefix = ""; java.lang.String str14 = helpFormatter9.defaultLongOptPrefix; java.lang.String str15 = helpFormatter9.getNewLine(); java.util.Comparator comparator16 = helpFormatter9.getOptionComparator(); helpFormatter0.optionComparator = comparator16; java.lang.String str19 = helpFormatter0.rtrim(""); java.lang.String str20 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); }
public void test0960() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0960"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultArgName; int int6 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0961() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0961"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); java.lang.String str16 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options18 = null; try { helpFormatter0.printHelp("\n", options18, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); }
public void test0962() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0962"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; java.lang.String str5 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setDescPadding(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test0963() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0963"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); helpFormatter0.setLeftPadding(0); java.lang.String str8 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); }
public void test0964() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0964"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.String str11 = helpFormatter0.getArgName(); helpFormatter0.defaultDescPad = (byte) 1; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp("                                                  ", options15); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test0965() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0965"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.lang.String str5 = helpFormatter0.createPadding((int) 'a'); int int6 = helpFormatter0.defaultWidth; java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("     ", "  ", options10, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                                 " + "'", str5, "                                                 "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertNotNull(comparator7); }
public void test0966() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0966"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); java.lang.String str5 = helpFormatter0.rtrim("\n"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0967() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0967"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter9 = null; try { helpFormatter0.printWrapped(printWriter9, 32, (int) (short) 10, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); }
public void test0968() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0968"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; java.lang.String str7 = helpFormatter0.getArgName(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str9 = helpFormatter8.defaultSyntaxPrefix; java.util.Comparator comparator10 = helpFormatter8.optionComparator; java.lang.String str11 = helpFormatter8.defaultArgName; java.util.Comparator comparator12 = helpFormatter8.optionComparator; helpFormatter0.optionComparator = comparator12; int int14 = helpFormatter0.getWidth(); java.lang.String str15 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "usage: " + "'", str9, "usage: "); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertNotNull(comparator12); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74 + "'", int14 == 74); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); }
public void test0969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0969"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultDescPad = 'a'; java.lang.String str10 = helpFormatter0.defaultNewLine; int int11 = helpFormatter0.getDescPadding(); helpFormatter0.setDescPadding((int) (byte) 100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97); }
public void test0970() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0970"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); org.apache.commons.cli.Options options2 = null; try { helpFormatter0.printHelp("usage: ", options2, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0971() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0971"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.setLongOptPrefix("hi!"); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test0972() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0972"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); helpFormatter0.defaultWidth = ' '; java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp(printWriter12, (int) '4', "     ", "arg", options16, (int) (byte) 100, 0, "\n", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); }
public void test0973() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0973"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); int int9 = helpFormatter0.defaultWidth; java.lang.String str10 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0974() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0974"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setLongOptSeparator("usage: "); helpFormatter0.defaultLeftPad = '4'; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); }
public void test0975() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0975"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int10 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) (short) 10); helpFormatter0.defaultDescPad = 52; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test0976() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0976"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); helpFormatter0.setArgName("arg"); int int7 = helpFormatter0.defaultDescPad; helpFormatter0.defaultNewLine = "--"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); }
public void test0977() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0977"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); int int2 = helpFormatter0.getWidth(); int int3 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test0978() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0978"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); helpFormatter0.setLeftPadding(0); java.lang.String str8 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); }
public void test0979() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0979"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str6 = helpFormatter0.rtrim("\n"); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultNewLine = " "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test0980() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0980"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultDescPad = (byte) 1; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp("                                                  ", "-", options16, "                "); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test0981() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0981"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptPrefix(); java.lang.String str4 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultArgName = "     "; java.lang.String str7 = helpFormatter0.getNewLine(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "--" + "'", str3, "--"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test0982() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0982"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); int int9 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultOptPrefix = "                "; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp("\n", "                ", options15, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test0983() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0983"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultDescPad = ' '; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); }
public void test0984() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0984"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); helpFormatter0.defaultOptPrefix = "usage: "; helpFormatter0.defaultArgName = "\n"; int int17 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2) + "'", int17 == (-2)); }
public void test0985() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0985"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "--"; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator6 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertNotNull(comparator6); }
public void test0986() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0986"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setWidth((int) (byte) 0); java.lang.String str17 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-" + "'", str17, "-"); }
public void test0987() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0987"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); int int16 = helpFormatter0.getLeftPadding(); java.util.Comparator comparator17 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertNotNull(comparator17); }
public void test0988() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0988"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str10 = helpFormatter0.rtrim("-"); java.lang.String str11 = helpFormatter0.defaultLongOptPrefix; java.lang.String str13 = helpFormatter0.rtrim("     "); int int14 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test0989() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0989"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.getOptPrefix(); helpFormatter0.setArgName("  "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test0990() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0990"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = (short) 1; int int13 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 74 + "'", int13 == 74); }
public void test0991() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0991"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; helpFormatter0.setOptPrefix(""); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("                  ", options9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test0992() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0992"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); int int5 = helpFormatter0.defaultLeftPad; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLeftPad = 32; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp((int) '#', "                                                 ", "                ", options12, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); }
public void test0993() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0993"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = 0; helpFormatter0.setDescPadding((int) 'a'); helpFormatter0.setLongOptSeparator("arg"); int int14 = helpFormatter0.getDescPadding(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter15.getLeftPadding(); helpFormatter15.defaultNewLine = ""; helpFormatter15.setDescPadding(10); helpFormatter15.setSyntaxPrefix(" "); java.util.Comparator comparator23 = helpFormatter15.getOptionComparator(); helpFormatter0.optionComparator = comparator23; java.lang.String str25 = helpFormatter0.defaultArgName; java.lang.String str26 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "arg" + "'", str25, "arg"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "usage: " + "'", str26, "usage: "); }
public void test0994() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0994"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultWidth = 1; java.lang.String str13 = helpFormatter0.getArgName(); java.lang.String str14 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test0995() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0995"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; org.apache.commons.cli.HelpFormatter helpFormatter4 = new org.apache.commons.cli.HelpFormatter(); helpFormatter4.setOptPrefix(""); helpFormatter4.defaultLongOptPrefix = ""; java.lang.String str9 = helpFormatter4.defaultLongOptPrefix; helpFormatter4.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator13 = helpFormatter12.optionComparator; int int14 = helpFormatter12.getLeftPadding(); int int15 = helpFormatter12.defaultLeftPad; java.lang.String str17 = helpFormatter12.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter18.getLeftPadding(); helpFormatter18.defaultNewLine = ""; helpFormatter18.defaultDescPad = '4'; helpFormatter18.setNewLine(""); int int29 = helpFormatter18.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator30 = helpFormatter18.optionComparator; helpFormatter12.setOptionComparator(comparator30); helpFormatter4.setOptionComparator(comparator30); helpFormatter0.optionComparator = comparator30; int int37 = helpFormatter0.findWrapPos("-", 0, (int) (byte) 1); helpFormatter0.defaultNewLine = ""; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(comparator13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "                                                 " + "'", str17, "                                                 "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1)); }
public void test0996() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0996"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.defaultLeftPad = ' '; java.lang.String str6 = helpFormatter0.defaultNewLine; java.lang.String str7 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test0997() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0997"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setArgName(""); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0998() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0998"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.getLongOptPrefix(); int int14 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--" + "'", str13, "--"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-2) + "'", int14 == (-2)); }
public void test0999() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0999"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); helpFormatter0.defaultWidth = (short) 0; java.lang.String str14 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); }
public void test1000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test1000"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); int int7 = helpFormatter0.getDescPadding(); helpFormatter0.setArgName("-"); helpFormatter0.defaultLongOptPrefix = ""; helpFormatter0.defaultSyntaxPrefix = "  "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); }
public void test1001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1001"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; helpFormatter0.setOptPrefix("hi!"); int int10 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test1002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1002"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.setLongOptSeparator("     "); helpFormatter0.setWidth(100); helpFormatter0.defaultWidth = (short) 100; java.lang.Class<?> wildcardClass26 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertNotNull(wildcardClass26); }
public void test1003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1003"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setDescPadding((int) (short) 10); int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultOptPrefix = ""; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test1004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1004"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); java.lang.String str19 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setDescPadding((int) (short) 10); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--" + "'", str19, "--"); }
public void test1005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1005"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.lang.String str5 = helpFormatter0.createPadding((int) 'a'); int int6 = helpFormatter0.defaultWidth; java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                                 " + "'", str5, "                                                 "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertNotNull(comparator7); }
public void test1006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1006"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix(""); helpFormatter0.setOptPrefix("arg"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); int int10 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test1007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1007"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; int int6 = helpFormatter0.getDescPadding(); java.lang.String str7 = helpFormatter0.defaultArgName; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); org.junit.Assert.assertNotNull(comparator8); }
public void test1008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1008"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultLeftPad = (byte) -1; java.lang.String str7 = helpFormatter0.getOptPrefix(); java.lang.String str8 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); }
public void test1009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1009"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("--"); int int4 = helpFormatter0.getDescPadding(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test1010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1010"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getArgName(); java.lang.String str15 = helpFormatter0.getSyntaxPrefix(); java.lang.String str16 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); }
public void test1011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1011"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "--"; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.defaultLongOptPrefix; int int10 = helpFormatter0.findWrapPos("\n", 1, 0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test1012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1012"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getArgName(); helpFormatter0.setDescPadding(0); int int12 = helpFormatter0.defaultDescPad; java.lang.String str13 = helpFormatter0.getNewLine(); java.lang.Class<?> wildcardClass14 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(wildcardClass14); }
public void test1013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1013"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.defaultLeftPad; java.lang.String str9 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test1014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1014"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.defaultNewLine = "     "; java.lang.String str9 = helpFormatter0.createPadding(0); helpFormatter0.setDescPadding(74); org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator13 = helpFormatter12.optionComparator; java.lang.String str14 = helpFormatter12.getLongOptPrefix(); java.lang.String str15 = helpFormatter12.defaultArgName; helpFormatter12.setSyntaxPrefix("-"); java.util.Comparator comparator18 = helpFormatter12.getOptionComparator(); helpFormatter0.optionComparator = comparator18; org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(comparator13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertNotNull(comparator18); }
public void test1015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1015"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); helpFormatter0.defaultOptPrefix = "usage: "; int int15 = helpFormatter0.getDescPadding(); java.lang.String str16 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); }
public void test1016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1016"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); helpFormatter0.defaultNewLine = "-"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test1017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1017"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); helpFormatter0.setLeftPadding(52); int int12 = helpFormatter0.defaultWidth; helpFormatter0.setDescPadding((int) (short) 0); java.util.Comparator comparator15 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding((int) (byte) 1); helpFormatter0.defaultLongOptPrefix = ""; org.apache.commons.cli.Options options22 = null; try { helpFormatter0.printHelp("", "", options22, "-"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); org.junit.Assert.assertNotNull(comparator15); }
public void test1018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1018"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; helpFormatter0.setNewLine("\n"); helpFormatter0.setLongOptSeparator("--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test1019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1019"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultOptPrefix = "arg"; helpFormatter0.defaultNewLine = "  "; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("                                                  ", "arg", options11, "                          ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); }
public void test1020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1020"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setDescPadding((int) (short) 10); java.lang.String str9 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); }
public void test1021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1021"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultDescPad; helpFormatter0.defaultNewLine = " "; java.lang.String str7 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "usage: " + "'", str7, "usage: "); org.junit.Assert.assertNotNull(comparator8); }
public void test1022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1022"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.createPadding(1); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator12 = helpFormatter0.optionComparator; helpFormatter0.setOptPrefix("                          "); int int15 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertNotNull(comparator12); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74 + "'", int15 == 74); }
public void test1023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1023"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.getArgName(); helpFormatter10.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); helpFormatter15.setOptPrefix(""); helpFormatter15.defaultLongOptPrefix = ""; java.lang.String str20 = helpFormatter15.defaultLongOptPrefix; java.lang.String str21 = helpFormatter15.getNewLine(); java.lang.String str22 = helpFormatter15.defaultOptPrefix; helpFormatter15.setDescPadding(74); java.util.Comparator comparator25 = helpFormatter15.getOptionComparator(); helpFormatter10.optionComparator = comparator25; helpFormatter0.optionComparator = comparator25; helpFormatter0.setDescPadding((int) ' '); java.lang.String str31 = helpFormatter0.createPadding((int) (short) 10); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(comparator25); org.junit.Assert.assertEquals("'" + str31 + "' != '" + "     " + "'", str31, "     "); }
public void test1024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1024"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.String str11 = helpFormatter0.getArgName(); helpFormatter0.defaultArgName = ""; helpFormatter0.defaultNewLine = ""; java.io.PrintWriter printWriter16 = null; org.apache.commons.cli.Options options18 = null; try { helpFormatter0.printOptions(printWriter16, 0, options18, (-1), 0); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test1025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1025"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultNewLine = "arg"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); }
public void test1026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1026"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); int int6 = helpFormatter5.getLeftPadding(); helpFormatter5.defaultNewLine = ""; java.lang.String str9 = helpFormatter5.defaultOptPrefix; java.lang.String str11 = helpFormatter5.rtrim(""); int int15 = helpFormatter5.findWrapPos(" ", (int) (byte) 10, (int) (short) 10); java.lang.String str16 = helpFormatter5.getLongOptPrefix(); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); int int18 = helpFormatter17.getLeftPadding(); helpFormatter17.defaultNewLine = ""; int int21 = helpFormatter17.defaultWidth; java.util.Comparator comparator22 = helpFormatter17.getOptionComparator(); java.lang.String str23 = helpFormatter17.defaultOptPrefix; org.apache.commons.cli.HelpFormatter helpFormatter24 = new org.apache.commons.cli.HelpFormatter(); int int25 = helpFormatter24.getLeftPadding(); helpFormatter24.defaultNewLine = ""; helpFormatter24.setDescPadding(10); helpFormatter24.setSyntaxPrefix(" "); int int32 = helpFormatter24.defaultLeftPad; helpFormatter24.setLeftPadding(1); java.util.Comparator comparator35 = helpFormatter24.optionComparator; helpFormatter17.setOptionComparator(comparator35); helpFormatter5.setOptionComparator(comparator35); helpFormatter0.optionComparator = comparator35; helpFormatter0.defaultArgName = " "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "--" + "'", str16, "--"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 74 + "'", int21 == 74); org.junit.Assert.assertNotNull(comparator22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-" + "'", str23, "-"); org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); org.junit.Assert.assertNotNull(comparator35); }
public void test1027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1027"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printUsage(printWriter8, (int) '4', "                                                  ", options11); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test1028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1028"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; helpFormatter0.setArgName("     "); helpFormatter0.setArgName("     "); helpFormatter0.setDescPadding((int) (byte) 100); java.lang.Class<?> wildcardClass16 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(wildcardClass16); }
public void test1029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1029"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultOptPrefix = "arg"; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("\n", options8, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); }
public void test1030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1030"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int10 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) (short) 10); org.apache.commons.cli.HelpFormatter helpFormatter11 = new org.apache.commons.cli.HelpFormatter(); int int12 = helpFormatter11.getLeftPadding(); helpFormatter11.defaultNewLine = ""; helpFormatter11.setDescPadding(10); helpFormatter11.setSyntaxPrefix(" "); java.util.Comparator comparator19 = helpFormatter11.getOptionComparator(); java.lang.String str21 = helpFormatter11.createPadding(1); java.lang.String str22 = helpFormatter11.getSyntaxPrefix(); java.util.Comparator comparator23 = helpFormatter11.optionComparator; helpFormatter0.setOptionComparator(comparator23); java.lang.String str26 = helpFormatter0.rtrim("                          "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertNotNull(comparator19); org.junit.Assert.assertEquals("'" + str21 + "' != '" + " " + "'", str21, " "); org.junit.Assert.assertEquals("'" + str22 + "' != '" + " " + "'", str22, " "); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); }
public void test1031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1031"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); int int5 = helpFormatter0.defaultLeftPad; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLeftPad = ' '; java.lang.String str10 = helpFormatter0.rtrim("usage:"); java.lang.String str11 = helpFormatter0.getArgName(); org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int13 = helpFormatter12.getLeftPadding(); java.lang.String str14 = helpFormatter12.getArgName(); helpFormatter12.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.setOptPrefix(""); helpFormatter17.defaultLongOptPrefix = ""; java.lang.String str22 = helpFormatter17.defaultLongOptPrefix; java.lang.String str23 = helpFormatter17.getNewLine(); java.lang.String str24 = helpFormatter17.defaultOptPrefix; helpFormatter17.setDescPadding(74); java.util.Comparator comparator27 = helpFormatter17.getOptionComparator(); helpFormatter12.optionComparator = comparator27; helpFormatter0.optionComparator = comparator27; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage:" + "'", str10, "usage:"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n"); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertNotNull(comparator27); }
public void test1032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1032"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter10 = null; try { helpFormatter0.printWrapped(printWriter10, (int) (short) 100, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test1033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1033"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); helpFormatter0.defaultOptPrefix = "arg"; int int12 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp("                                                 ", options14); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test1034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1034"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); java.lang.String str14 = helpFormatter0.getSyntaxPrefix(); int int15 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test1035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1035"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "                                                 "; int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.setLongOptSeparator(" "); org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); int int13 = helpFormatter12.getLeftPadding(); helpFormatter12.defaultNewLine = ""; helpFormatter12.setDescPadding(10); java.lang.String str18 = helpFormatter12.getLongOptSeparator(); java.lang.String str19 = helpFormatter12.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter20.getLeftPadding(); helpFormatter20.defaultNewLine = ""; helpFormatter20.setDescPadding(10); java.lang.String str26 = helpFormatter20.getLongOptSeparator(); java.lang.String str27 = helpFormatter20.getLongOptSeparator(); java.lang.String str29 = helpFormatter20.createPadding((int) (byte) 1); java.lang.String str30 = helpFormatter20.defaultOptPrefix; java.util.Comparator comparator31 = helpFormatter20.optionComparator; helpFormatter12.optionComparator = comparator31; helpFormatter0.optionComparator = comparator31; java.lang.String str34 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1); org.junit.Assert.assertEquals("'" + str18 + "' != '" + " " + "'", str18, " "); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertEquals("'" + str26 + "' != '" + " " + "'", str26, " "); org.junit.Assert.assertEquals("'" + str27 + "' != '" + " " + "'", str27, " "); org.junit.Assert.assertEquals("'" + str29 + "' != '" + " " + "'", str29, " "); org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-" + "'", str30, "-"); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, ""); }
public void test1036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1036"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultDescPad = (byte) 1; helpFormatter0.defaultNewLine = "     "; int int16 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74 + "'", int16 == 74); }
public void test1037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1037"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); java.lang.StringBuffer stringBuffer12 = null; org.apache.commons.cli.Options options14 = null; try { java.lang.StringBuffer stringBuffer17 = helpFormatter0.renderOptions(stringBuffer12, (int) (short) -1, options14, (int) ' ', (int) 'a'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); }
public void test1038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1038"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix(""); helpFormatter0.setOptPrefix("arg"); helpFormatter0.setWidth(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); }
public void test1039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1039"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; helpFormatter0.defaultArgName = ""; helpFormatter0.defaultNewLine = "\n"; helpFormatter0.setLeftPadding((int) (short) 0); org.junit.Assert.assertNotNull(comparator1); }
public void test1040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1040"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultDescPad; helpFormatter0.setWidth((int) '#'); helpFormatter0.setArgName(""); int int9 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35); }
public void test1041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1041"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.getArgName(); helpFormatter10.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); helpFormatter15.setOptPrefix(""); helpFormatter15.defaultLongOptPrefix = ""; java.lang.String str20 = helpFormatter15.defaultLongOptPrefix; java.lang.String str21 = helpFormatter15.getNewLine(); java.lang.String str22 = helpFormatter15.defaultOptPrefix; helpFormatter15.setDescPadding(74); java.util.Comparator comparator25 = helpFormatter15.getOptionComparator(); helpFormatter10.optionComparator = comparator25; helpFormatter0.optionComparator = comparator25; helpFormatter0.setDescPadding((int) ' '); helpFormatter0.setDescPadding(0); helpFormatter0.defaultNewLine = "--"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(comparator25); }
public void test1042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1042"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultDescPad = 0; java.lang.String str6 = helpFormatter0.getOptPrefix(); int int7 = helpFormatter0.getDescPadding(); helpFormatter0.setLeftPadding((int) '#'); java.lang.String str10 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); }
public void test1043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1043"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str8 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setLongOptSeparator("     "); java.lang.String str12 = helpFormatter0.createPadding(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); }
public void test1044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1044"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.defaultLongOptPrefix; java.lang.String str13 = helpFormatter10.getOptPrefix(); java.util.Comparator comparator14 = helpFormatter10.optionComparator; java.util.Comparator comparator15 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator15; helpFormatter0.defaultNewLine = "                                                 "; java.lang.StringBuffer stringBuffer19 = null; try { java.lang.StringBuffer stringBuffer23 = helpFormatter0.renderWrappedText(stringBuffer19, 0, (int) (byte) 100, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertNotNull(comparator15); }
public void test1045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1045"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setWidth(1); java.lang.String str5 = helpFormatter0.getNewLine(); java.lang.String str6 = helpFormatter0.defaultArgName; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg"); }
public void test1046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1046"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptPrefix("--"); java.lang.String str11 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setDescPadding((-2)); java.io.PrintWriter printWriter14 = null; try { helpFormatter0.printWrapped(printWriter14, (int) ' ', 0, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); }
public void test1047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1047"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("                                                 ", (int) (byte) 100, (-2)); int int14 = helpFormatter0.findWrapPos("", 100, 74); java.lang.String str15 = helpFormatter0.defaultSyntaxPrefix; java.lang.StringBuffer stringBuffer16 = null; try { java.lang.StringBuffer stringBuffer20 = helpFormatter0.renderWrappedText(stringBuffer16, 3, (int) (short) 10, "     "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "usage: " + "'", str15, "usage: "); }
public void test1048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1048"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); java.lang.String str12 = helpFormatter0.createPadding(100); java.lang.String str13 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptPrefix("-"); java.lang.String str16 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLeftPadding((int) (byte) 1); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                  " + "'", str12, "                                                  "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "usage: " + "'", str16, "usage: "); }
public void test1049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1049"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptPrefix("--"); int int11 = helpFormatter0.getDescPadding(); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp(printWriter12, 3, "                          ", "                ", options16, (int) (byte) 1, (-2), "--", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10); }
public void test1050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1050"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str7 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.setOptPrefix(""); helpFormatter8.defaultLongOptPrefix = ""; java.lang.String str13 = helpFormatter8.defaultLongOptPrefix; java.lang.String str14 = helpFormatter8.getNewLine(); helpFormatter8.setSyntaxPrefix(" "); java.lang.String str17 = helpFormatter8.defaultOptPrefix; helpFormatter8.setNewLine("\n"); org.apache.commons.cli.HelpFormatter helpFormatter20 = new org.apache.commons.cli.HelpFormatter(); int int21 = helpFormatter20.getLeftPadding(); helpFormatter20.defaultNewLine = ""; java.lang.String str24 = helpFormatter20.defaultOptPrefix; java.lang.String str26 = helpFormatter20.rtrim(""); int int27 = helpFormatter20.getDescPadding(); int int28 = helpFormatter20.getDescPadding(); java.lang.String str29 = helpFormatter20.getArgName(); helpFormatter20.setDescPadding(0); helpFormatter20.defaultDescPad = (short) 100; java.util.Comparator comparator34 = helpFormatter20.optionComparator; helpFormatter8.setOptionComparator(comparator34); helpFormatter0.optionComparator = comparator34; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, ""); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-" + "'", str24, "-"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, ""); org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3); org.junit.Assert.assertEquals("'" + str29 + "' != '" + "arg" + "'", str29, "arg"); org.junit.Assert.assertNotNull(comparator34); }
public void test1051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1051"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str7 = helpFormatter0.getNewLine(); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test1052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1052"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); java.lang.String str14 = helpFormatter0.getSyntaxPrefix(); int int18 = helpFormatter0.findWrapPos("", (int) (short) 10, (int) (byte) 1); java.io.PrintWriter printWriter19 = null; try { helpFormatter0.printWrapped(printWriter19, 1, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); }
public void test1053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1053"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); helpFormatter0.setLeftPadding(52); int int12 = helpFormatter0.defaultWidth; helpFormatter0.setDescPadding((int) (short) 0); java.util.Comparator comparator15 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultLeftPad = 0; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); org.junit.Assert.assertNotNull(comparator15); }
public void test1054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1054"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; java.lang.StringBuffer stringBuffer6 = null; try { java.lang.StringBuffer stringBuffer10 = helpFormatter0.renderWrappedText(stringBuffer6, (int) '#', (int) (byte) 1, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test1055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1055"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.defaultArgName; java.lang.String str7 = helpFormatter0.getNewLine(); int int8 = helpFormatter0.defaultWidth; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); }
public void test1056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1056"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultDescPad = 'a'; java.lang.String str10 = helpFormatter0.defaultNewLine; int int11 = helpFormatter0.getDescPadding(); java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printWrapped(printWriter12, 97, (int) (short) 100, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97); }
public void test1057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1057"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; int int9 = helpFormatter0.findWrapPos("                                                 ", (int) (short) 0, (int) (short) 10); java.lang.String str10 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp(52, "\n", "                ", options14, "                "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); }
public void test1058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1058"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultOptPrefix = ""; java.lang.String str6 = helpFormatter0.defaultArgName; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg"); }
public void test1059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1059"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); java.lang.String str3 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix("-"); java.util.Comparator comparator6 = helpFormatter0.getOptionComparator(); helpFormatter0.defaultNewLine = "usage:"; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator6); }
public void test1060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1060"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.util.Comparator comparator13 = helpFormatter0.getOptionComparator(); int int14 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertNotNull(comparator13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3); }
public void test1061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1061"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setNewLine("usage: "); helpFormatter0.setOptPrefix(" "); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp(74, "                                                 ", "                ", options15, "arg", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test1062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1062"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.setOptPrefix(""); helpFormatter22.defaultLongOptPrefix = ""; java.lang.String str27 = helpFormatter22.defaultLongOptPrefix; helpFormatter22.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator31 = helpFormatter30.optionComparator; int int32 = helpFormatter30.getLeftPadding(); int int33 = helpFormatter30.defaultLeftPad; java.lang.String str35 = helpFormatter30.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter36 = new org.apache.commons.cli.HelpFormatter(); int int37 = helpFormatter36.getLeftPadding(); helpFormatter36.defaultNewLine = ""; helpFormatter36.defaultDescPad = '4'; helpFormatter36.setNewLine(""); int int47 = helpFormatter36.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator48 = helpFormatter36.optionComparator; helpFormatter30.setOptionComparator(comparator48); helpFormatter22.setOptionComparator(comparator48); helpFormatter0.setOptionComparator(comparator48); helpFormatter0.defaultDescPad = (byte) 10; helpFormatter0.setSyntaxPrefix("\n"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                 " + "'", str35, "                                                 "); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1); org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1)); org.junit.Assert.assertNotNull(comparator48); }
public void test1063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1063"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); int int11 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = "--"; java.lang.Class<?> wildcardClass14 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertNotNull(wildcardClass14); }
public void test1064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1064"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str3 = helpFormatter0.defaultLongOptPrefix; java.lang.String str4 = helpFormatter0.getLongOptPrefix(); java.lang.String str5 = helpFormatter0.getNewLine(); helpFormatter0.defaultWidth = 100; int int8 = helpFormatter0.getDescPadding(); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); }
public void test0001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0001"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); org.apache.commons.cli.Options options5 = null; try { helpFormatter0.printHelp("usage: ", "", options5, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0002"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.io.PrintWriter printWriter1 = null; org.apache.commons.cli.Options options3 = null; try { helpFormatter0.printOptions(printWriter1, 3, options3, (int) (short) -1, (int) (short) 1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } }
public void test0003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0003"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp((int) '4', "", " ", options7, "hi!", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0004"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp(printWriter8, (int) (byte) 1, "usage: ", "hi!", options12, (int) (short) 1, (int) ' ', "", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0005"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.io.PrintWriter printWriter2 = null; org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp(printWriter2, (int) '4', "", " ", options6, (int) ' ', (int) (short) 1, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0006"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp((int) (byte) 10, "--", "--", options9, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0007"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptPrefix(""); org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp(" ", options6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); }
public void test0008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0008"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.Class<?> wildcardClass5 = helpFormatter0.getClass(); org.junit.Assert.assertNotNull(wildcardClass5); }
public void test0009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0009"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.io.PrintWriter printWriter2 = null; org.apache.commons.cli.Options options4 = null; try { helpFormatter0.printOptions(printWriter2, (int) (byte) 10, options4, (int) (byte) 100, 3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0010"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptPrefix(""); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp(0, "", "", options8, " ", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); }
public void test0011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0011"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.io.PrintWriter printWriter4 = null; try { helpFormatter0.printWrapped(printWriter4, (int) ' ', 3, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test0012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0012"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp((int) (short) -1, "\n", "", options10, "hi!", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0013"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.StringBuffer stringBuffer3 = null; try { java.lang.StringBuffer stringBuffer7 = helpFormatter0.renderWrappedText(stringBuffer3, 3, (int) (short) 10, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0014"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("usage: ", "\n", options9, "", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test0015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0015"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("hi!", options11); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0016"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.io.PrintWriter printWriter2 = null; try { helpFormatter0.printWrapped(printWriter2, (int) (byte) 0, (int) (byte) -1, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertNotNull(comparator1); }
public void test0017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0017"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printWrapped(printWriter6, (int) ' ', "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0018"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printWrapped(printWriter7, (int) (short) -1, (int) (short) -1, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test0019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0019"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp(printWriter6, (int) ' ', "-", "arg", options10, 0, (int) (byte) -1, "\n", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0020"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printUsage(printWriter7, (int) (short) 100, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); }
public void test0021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0021"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.io.PrintWriter printWriter3 = null; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp(printWriter3, (int) (byte) 100, "\n", "\n", options7, (int) (byte) 0, (int) (byte) 100, "usage: ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0022"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp("\n", "", options13, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0023"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; try { int int11 = helpFormatter0.findWrapPos("", (int) (short) 0, (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0024"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.lang.StringBuffer stringBuffer2 = null; org.apache.commons.cli.Options options4 = null; try { java.lang.StringBuffer stringBuffer7 = helpFormatter0.renderOptions(stringBuffer2, 1, options4, (int) (short) -1, (int) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); }
public void test0025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0025"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.String str8 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "arg" + "'", str8, "arg"); }
public void test0026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0026"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.Options options5 = null; try { helpFormatter0.printHelp((int) 'a', "usage: ", "", options5, "\n", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); }
public void test0027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0027"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; java.lang.StringBuffer stringBuffer5 = null; org.apache.commons.cli.Options options7 = null; try { java.lang.StringBuffer stringBuffer10 = helpFormatter0.renderOptions(stringBuffer5, 74, options7, 3, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); }
public void test0028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0028"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); java.lang.Class<?> wildcardClass8 = comparator7.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test0029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0029"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.createPadding(1); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp("", options12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); }
public void test0030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0030"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.lang.StringBuffer stringBuffer5 = null; org.apache.commons.cli.Options options7 = null; try { java.lang.StringBuffer stringBuffer10 = helpFormatter0.renderOptions(stringBuffer5, 0, options7, (int) '#', (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); }
public void test0031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0031"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); java.lang.Class<?> wildcardClass12 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test0032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0032"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp("", options7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); }
public void test0033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0033"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp((int) (short) 10, "     ", "     ", options13, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0034"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int10 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) (short) 10); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printOptions(printWriter11, (-1), options13, 3, (int) '4'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test0035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0035"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); helpFormatter0.defaultLongOptPrefix = "--"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0036"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("arg", "--", options10, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); }
public void test0037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0037"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp("--", "-", options12, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0038"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("-", "-", options9, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0039"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("-", "", options9, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); }
public void test0040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0040"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter7 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp(printWriter7, 10, "", "arg", options11, (int) (byte) -1, (int) '4', "hi!", true); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); }
public void test0041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0041"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("     ", "hi!", options10, "usage: ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0042"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printOptions(printWriter6, 0, options8, (int) (byte) 100, (int) 'a'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0043"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.createPadding(1); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printUsage(printWriter12, (int) '#', "", options15); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); }
public void test0044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0044"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; int int13 = helpFormatter0.getWidth(); java.lang.String str14 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 74 + "'", int13 == 74); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test0045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0045"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setNewLine(" "); java.lang.StringBuffer stringBuffer7 = null; try { java.lang.StringBuffer stringBuffer11 = helpFormatter0.renderWrappedText(stringBuffer7, (int) (short) 10, (int) (short) -1, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0046"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printWrapped(printWriter7, (int) '4', 0, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test0047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0047"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter5 = null; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printUsage(printWriter5, 3, "     ", options8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); }
public void test0048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0048"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("-", options11, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0049"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; int int13 = helpFormatter0.getWidth(); org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp("\n", "arg", options16, "arg", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 74 + "'", int13 == 74); }
public void test0050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0050"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptPrefix("--"); java.lang.String str11 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); }
public void test0051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0051"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("     ", options8, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0052"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("", options8, false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); }
public void test0053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0053"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; helpFormatter0.setOptPrefix("                                                 "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0054"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp(100, "     ", "-", options11, "--", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); }
public void test0055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0055"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp((int) '#', "-", "     ", options8, "hi!", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0056"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.StringBuffer stringBuffer8 = null; org.apache.commons.cli.Options options10 = null; try { java.lang.StringBuffer stringBuffer13 = helpFormatter0.renderOptions(stringBuffer8, 10, options10, 0, (int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test0057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0057"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); helpFormatter0.setLongOptSeparator(" "); helpFormatter0.setArgName("--"); java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printWrapped(printWriter8, (int) (short) 1, "     "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test0058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0058"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setArgName("--"); java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printWrapped(printWriter8, (int) (byte) 10, (int) (byte) 1, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0059"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.StringBuffer stringBuffer9 = null; try { java.lang.StringBuffer stringBuffer13 = helpFormatter0.renderWrappedText(stringBuffer9, 74, 3, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0060"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptPrefix(""); java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0061"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.Options options4 = null; try { helpFormatter0.printHelp("                                                 ", "", options4, "-", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0062"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter3 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator4 = helpFormatter3.optionComparator; java.lang.String str6 = helpFormatter3.rtrim(""); helpFormatter3.setLongOptSeparator(" "); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.defaultDescPad = '4'; helpFormatter9.setNewLine(""); int int20 = helpFormatter9.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator21 = helpFormatter9.optionComparator; helpFormatter3.setOptionComparator(comparator21); helpFormatter0.optionComparator = comparator21; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1)); org.junit.Assert.assertNotNull(comparator21); }
public void test0063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0063"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptPrefix(""); org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp("usage: ", "", options7, "     ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); }
public void test0064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0064"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.StringBuffer stringBuffer11 = null; try { java.lang.StringBuffer stringBuffer15 = helpFormatter0.renderWrappedText(stringBuffer11, (int) '4', (-2), " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); }
public void test0065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0065"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setWidth(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test0066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0066"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); helpFormatter0.defaultDescPad = (byte) 1; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0067"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.StringBuffer stringBuffer1 = null; org.apache.commons.cli.Options options3 = null; try { java.lang.StringBuffer stringBuffer6 = helpFormatter0.renderOptions(stringBuffer1, (-2), options3, (int) (short) 0, (-2)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } }
public void test0068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0068"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.io.PrintWriter printWriter9 = null; try { helpFormatter0.printWrapped(printWriter9, (int) '#', ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test0069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0069"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp(" ", "", options7, "                                                 ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0070"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("     ", options8); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); }
public void test0071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0071"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.io.PrintWriter printWriter5 = null; try { helpFormatter0.printWrapped(printWriter5, (int) 'a', "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); }
public void test0072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0072"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("", options10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0073"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); java.io.PrintWriter printWriter4 = null; try { helpFormatter0.printWrapped(printWriter4, (int) (short) 100, (int) (short) 10, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test0074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0074"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; helpFormatter0.setLongOptPrefix(""); org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp(" ", options16, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0075"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("                                                 ", (int) (byte) 100, (-2)); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp(printWriter11, (int) (byte) 10, "     ", "", options15, (-1), (int) (short) 100, "usage: ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test0076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0076"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setWidth(1); java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printOptions(printWriter8, 0, options10, (int) '4', (-2)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0077"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.Class<?> wildcardClass9 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test0078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0078"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; helpFormatter0.defaultWidth = 1; try { int int13 = helpFormatter0.findWrapPos("hi!", (int) (byte) 1, (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0079"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("     ", "arg", options10, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0080"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); org.apache.commons.cli.Options options19 = null; try { helpFormatter0.printHelp(3, "--", "hi!", options19, "     "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0081"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("                                                 ", (int) (byte) 100, (-2)); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printUsage(printWriter11, (int) '#', "hi!", options14); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test0082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0082"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; int int13 = helpFormatter0.getWidth(); java.io.PrintWriter printWriter14 = null; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printOptions(printWriter14, (int) (short) 1, options16, (int) (byte) 100, (int) '#'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 74 + "'", int13 == 74); }
public void test0083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0083"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter4 = null; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp(printWriter4, (int) (byte) -1, "--", "\n", options8, 3, 0, "                                                 ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); }
public void test0084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0084"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("--", options9, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0085"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, (int) 'a', "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0086"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp("                                                 ", " ", options15, "usage: ", false); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0087"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("--"); org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp("", "                                                 ", options6, ""); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); }
public void test0088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0088"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultSyntaxPrefix = "                                                 "; java.io.PrintWriter printWriter22 = null; org.apache.commons.cli.Options options26 = null; try { helpFormatter0.printHelp(printWriter22, 10, "usage: ", "usage: ", options26, 3, 10, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); }
public void test0089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0089"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter3 = null; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp(printWriter3, 74, "-", "--", options7, (int) (short) -1, (int) (byte) -1, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); }
public void test0090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0090"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.findWrapPos("--", (int) (byte) -1, 0); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp(10, "                                                 ", "arg", options10, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test0091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0091"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; java.lang.StringBuffer stringBuffer10 = null; org.apache.commons.cli.Options options12 = null; try { java.lang.StringBuffer stringBuffer15 = helpFormatter0.renderOptions(stringBuffer10, (int) 'a', options12, (int) (byte) -1, (int) (short) 10); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0092"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.lang.String str5 = helpFormatter0.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter6.getLeftPadding(); helpFormatter6.defaultNewLine = ""; helpFormatter6.defaultDescPad = '4'; helpFormatter6.setNewLine(""); int int17 = helpFormatter6.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator18 = helpFormatter6.optionComparator; helpFormatter0.setOptionComparator(comparator18); int int20 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                                 " + "'", str5, "                                                 "); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1); }
public void test0093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0093"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.defaultWidth = (short) 100; java.lang.StringBuffer stringBuffer9 = null; org.apache.commons.cli.Options options11 = null; try { java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderOptions(stringBuffer9, (int) ' ', options11, (int) (short) 0, 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test0094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0094"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); helpFormatter0.defaultSyntaxPrefix = "usage: "; int int14 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10); }
public void test0095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0095"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.lang.String str5 = helpFormatter0.getNewLine(); java.lang.String str6 = helpFormatter0.defaultNewLine; java.lang.StringBuffer stringBuffer7 = null; try { java.lang.StringBuffer stringBuffer11 = helpFormatter0.renderWrappedText(stringBuffer7, 0, 10, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0096"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp((int) (byte) 10, "arg", "", options6, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0097"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp(1, "\n", "hi!", options6, "-", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0098"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.StringBuffer stringBuffer4 = null; org.apache.commons.cli.Options options6 = null; try { java.lang.StringBuffer stringBuffer9 = helpFormatter0.renderOptions(stringBuffer4, (-2), options6, (int) (short) 100, 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0099"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLeftPadding((int) ' '); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp("                                                 ", "usage: ", options12, "--", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test0100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0100"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setNewLine(""); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test0101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0101"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printUsage(printWriter6, (int) 'a', "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); }
public void test0102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0102"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.Class<?> wildcardClass3 = comparator2.getClass(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertNotNull(wildcardClass3); }
public void test0103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0103"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); java.lang.StringBuffer stringBuffer9 = null; org.apache.commons.cli.Options options11 = null; try { java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderOptions(stringBuffer9, 74, options11, (int) (short) 10, (int) (short) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); }
public void test0104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0104"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); int int14 = helpFormatter0.findWrapPos("usage: ", (int) 'a', (int) (byte) 0); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter15.getLeftPadding(); helpFormatter15.defaultNewLine = ""; helpFormatter15.setDescPadding(10); helpFormatter15.defaultArgName = "hi!"; java.util.Comparator comparator23 = helpFormatter15.getOptionComparator(); helpFormatter0.setOptionComparator(comparator23); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertNotNull(comparator23); }
public void test0105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0105"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); helpFormatter9.setOptPrefix(""); helpFormatter9.defaultLongOptPrefix = ""; java.lang.String str14 = helpFormatter9.defaultLongOptPrefix; java.lang.String str15 = helpFormatter9.getNewLine(); java.util.Comparator comparator16 = helpFormatter9.getOptionComparator(); helpFormatter0.optionComparator = comparator16; java.io.PrintWriter printWriter18 = null; try { helpFormatter0.printWrapped(printWriter18, 100, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n"); org.junit.Assert.assertNotNull(comparator16); }
public void test0106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0106"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); org.apache.commons.cli.Options options4 = null; try { helpFormatter0.printHelp("arg", options4); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0107"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; helpFormatter0.defaultWidth = 1; helpFormatter0.setLeftPadding(3); int int15 = helpFormatter0.findWrapPos("usage: ", 74, 10); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1)); }
public void test0108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0108"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); java.lang.StringBuffer stringBuffer16 = null; org.apache.commons.cli.Options options18 = null; try { java.lang.StringBuffer stringBuffer21 = helpFormatter0.renderOptions(stringBuffer16, (int) ' ', options18, (int) (byte) -1, 74); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0109"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); helpFormatter0.defaultWidth = ' '; java.lang.String str13 = helpFormatter0.rtrim("-"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test0110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0110"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printWrapped(printWriter6, (int) (byte) 100, (int) (byte) 1, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); }
public void test0111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0111"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("                                                 ", (int) (byte) 100, (-2)); org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp("", "-", options13, "", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); }
public void test0112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0112"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp("usage: ", "", options6, "arg", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); }
public void test0113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0113"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultNewLine; int int8 = helpFormatter0.getWidth(); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp((int) (byte) -1, "", "--", options12, " "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); }
public void test0114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0114"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); int int11 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); }
public void test0115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0115"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter2 = null; org.apache.commons.cli.Options options4 = null; try { helpFormatter0.printOptions(printWriter2, 100, options4, 0, (int) (short) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); }
public void test0116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0116"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); helpFormatter0.setSyntaxPrefix(" "); helpFormatter0.setArgName(""); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); }
public void test0117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0117"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp("", options7); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0118"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.lang.String str5 = helpFormatter0.getNewLine(); java.lang.String str6 = helpFormatter0.defaultNewLine; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp(" ", options8, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0119"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); int int11 = helpFormatter0.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator12 = helpFormatter0.optionComparator; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp(" ", "arg", options15, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertNotNull(comparator12); }
public void test0120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0120"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("hi!", " ", options10, "\n", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0121"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); try { java.lang.String str12 = helpFormatter0.createPadding((-2)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); }
public void test0122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0122"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultDescPad; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("hi!", "     ", options8, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); }
public void test0123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0123"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setWidth(1); java.lang.String str5 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.rtrim(""); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0124"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; java.lang.String str7 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("--", options9); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); }
public void test0125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0125"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.defaultNewLine; java.lang.StringBuffer stringBuffer3 = null; org.apache.commons.cli.Options options5 = null; try { java.lang.StringBuffer stringBuffer8 = helpFormatter0.renderOptions(stringBuffer3, (-2), options5, (int) (byte) 10, (int) (short) 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n"); }
public void test0126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0126"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); try { java.lang.String str11 = helpFormatter0.createPadding((int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0127"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLongOptPrefix("                                                 "); helpFormatter0.setSyntaxPrefix("                                                 "); java.lang.StringBuffer stringBuffer11 = null; try { java.lang.StringBuffer stringBuffer15 = helpFormatter0.renderWrappedText(stringBuffer11, (int) (byte) 0, 10, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0128"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); int int11 = helpFormatter0.findWrapPos("\n", (int) ' ', 3); java.lang.StringBuffer stringBuffer12 = null; try { java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderWrappedText(stringBuffer12, (int) (short) 10, (int) '4', "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); }
public void test0129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0129"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter2 = null; org.apache.commons.cli.Options options5 = null; try { helpFormatter0.printUsage(printWriter2, (int) (byte) 0, "hi!", options5); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); }
public void test0130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0130"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.util.Comparator comparator5 = helpFormatter0.optionComparator; java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printWrapped(printWriter6, (-1), 52, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertNotNull(comparator5); }
public void test0131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0131"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.getLongOptPrefix(); java.lang.Class<?> wildcardClass6 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test0132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0132"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.io.PrintWriter printWriter13 = null; try { helpFormatter0.printWrapped(printWriter13, 74, 74, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); }
public void test0133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0133"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp("--", "                                                 ", options7, " ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); }
public void test0134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0134"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultLongOptPrefix = ""; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp(10, " ", "hi!", options8, "\n", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0135"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str11 = helpFormatter10.defaultSyntaxPrefix; java.util.Comparator comparator12 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator12; java.util.Comparator comparator14 = null; helpFormatter0.setOptionComparator(comparator14); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertNotNull(comparator12); }
public void test0136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0136"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setWidth(1); java.lang.String str5 = helpFormatter0.getNewLine(); java.lang.Class<?> wildcardClass6 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n"); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test0137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0137"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("usage: ", "--", options10, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0138"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); java.lang.StringBuffer stringBuffer8 = null; try { java.lang.StringBuffer stringBuffer12 = helpFormatter0.renderWrappedText(stringBuffer8, 3, (int) '#', "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); }
public void test0139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0139"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultNewLine = "                                                 "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0140"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; helpFormatter0.defaultOptPrefix = "arg"; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); }
public void test0141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0141"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str14 = helpFormatter0.getArgName(); helpFormatter0.defaultDescPad = 1; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test0142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0142"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.util.Comparator comparator13 = helpFormatter0.getOptionComparator(); java.io.PrintWriter printWriter14 = null; try { helpFormatter0.printWrapped(printWriter14, 0, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertNotNull(comparator13); }
public void test0143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0143"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "--"; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printUsage(printWriter6, 0, "", options9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0144"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.Options options5 = null; try { helpFormatter0.printHelp((-1), "                                                  ", "     ", options5, "", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); }
public void test0145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0145"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setArgName("--"); helpFormatter0.setArgName("hi!"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0146"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setLongOptSeparator("     "); helpFormatter0.setDescPadding(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); }
public void test0147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0147"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp("usage: ", options6, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0148"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("usage: ", options11); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0149"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.setLongOptSeparator("arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); }
public void test0150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0150"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); helpFormatter6.setOptPrefix(""); helpFormatter6.defaultLongOptPrefix = ""; java.lang.String str11 = helpFormatter6.defaultLongOptPrefix; java.lang.String str12 = helpFormatter6.getNewLine(); java.lang.String str13 = helpFormatter6.defaultOptPrefix; helpFormatter6.setDescPadding(74); java.util.Comparator comparator16 = helpFormatter6.getOptionComparator(); helpFormatter0.optionComparator = comparator16; int int21 = helpFormatter0.findWrapPos("                                                 ", 0, (int) '4'); java.lang.StringBuffer stringBuffer22 = null; org.apache.commons.cli.Options options24 = null; try { java.lang.StringBuffer stringBuffer27 = helpFormatter0.renderOptions(stringBuffer22, 0, options24, (int) '#', (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52); }
public void test0151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0151"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = 0; java.io.PrintWriter printWriter10 = null; try { helpFormatter0.printWrapped(printWriter10, (int) (short) 1, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0152"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.StringBuffer stringBuffer2 = null; try { java.lang.StringBuffer stringBuffer6 = helpFormatter0.renderWrappedText(stringBuffer2, (int) (short) -1, 0, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0153"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.StringBuffer stringBuffer1 = null; org.apache.commons.cli.Options options3 = null; try { java.lang.StringBuffer stringBuffer6 = helpFormatter0.renderOptions(stringBuffer1, (int) ' ', options3, (int) (short) -1, 100); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } }
public void test0154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0154"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); helpFormatter0.setSyntaxPrefix(" "); java.lang.StringBuffer stringBuffer12 = null; org.apache.commons.cli.Options options14 = null; try { java.lang.StringBuffer stringBuffer17 = helpFormatter0.renderOptions(stringBuffer12, (int) (short) -1, options14, 10, (-1)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); }
public void test0155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0155"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultNewLine = " "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test0156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0156"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp("hi!", "hi!", options15, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0157"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printWrapped(printWriter6, (int) (byte) 10, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test0158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0158"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultLeftPad; java.lang.StringBuffer stringBuffer3 = null; try { java.lang.StringBuffer stringBuffer7 = helpFormatter0.renderWrappedText(stringBuffer3, (int) (byte) 10, 0, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0159"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.util.Comparator comparator5 = helpFormatter0.optionComparator; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp("                                                  ", options7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertNotNull(comparator5); }
public void test0160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0160"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptPrefix(""); int int5 = helpFormatter0.getDescPadding(); java.lang.StringBuffer stringBuffer6 = null; try { java.lang.StringBuffer stringBuffer10 = helpFormatter0.renderWrappedText(stringBuffer6, 0, (int) (short) -1, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); }
public void test0161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0161"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str15 = helpFormatter0.createPadding(3); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "  " + "'", str15, "  "); }
public void test0162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0162"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.lang.String str5 = helpFormatter0.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter6.getLeftPadding(); helpFormatter6.defaultNewLine = ""; helpFormatter6.defaultDescPad = '4'; helpFormatter6.setNewLine(""); int int17 = helpFormatter6.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator18 = helpFormatter6.optionComparator; helpFormatter0.setOptionComparator(comparator18); java.lang.String str20 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter21 = null; org.apache.commons.cli.Options options23 = null; try { helpFormatter0.printOptions(printWriter21, (int) (byte) 1, options23, 0, 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                                 " + "'", str5, "                                                 "); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n"); }
public void test0163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0163"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); }
public void test0164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0164"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.defaultDescPad = (byte) 1; java.io.PrintWriter printWriter14 = null; org.apache.commons.cli.Options options18 = null; try { helpFormatter0.printHelp(printWriter14, (int) (byte) 1, "\n", "  ", options18, (int) (short) 1, 0, "-", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); }
public void test0165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0165"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp("arg", options6, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); }
public void test0166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0166"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultOptPrefix = ""; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp(" ", options7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test0167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0167"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); int int5 = helpFormatter0.defaultLeftPad; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.StringBuffer stringBuffer7 = null; try { java.lang.StringBuffer stringBuffer11 = helpFormatter0.renderWrappedText(stringBuffer7, (int) (short) 10, (int) (short) 100, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); }
public void test0168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0168"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp((int) (byte) 10, "                                                  ", "", options9, "\n", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0169"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); int int10 = helpFormatter0.defaultLeftPad; java.lang.String str11 = helpFormatter0.defaultOptPrefix; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test0170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0170"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.io.PrintWriter printWriter13 = null; try { helpFormatter0.printWrapped(printWriter13, 0, (-1), "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0171"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); helpFormatter0.defaultWidth = (short) 0; java.lang.String str14 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); }
public void test0172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0172"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); helpFormatter0.setSyntaxPrefix(" "); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp((int) '#', "--", " ", options15, "arg", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); }
public void test0173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0173"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); helpFormatter0.defaultWidth = ' '; java.lang.Class<?> wildcardClass12 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test0174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0174"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, 1, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(comparator10); }
public void test0175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0175"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.StringBuffer stringBuffer9 = null; try { java.lang.StringBuffer stringBuffer13 = helpFormatter0.renderWrappedText(stringBuffer9, (-2), 100, ""); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); }
public void test0176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0176"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.setDescPadding((int) (short) 0); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp(52, "usage: ", " ", options8, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0177"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.defaultNewLine; java.lang.String str10 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); }
public void test0178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0178"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultDescPad; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setWidth(1); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("", "arg", options10, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); }
public void test0179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0179"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); java.io.PrintWriter printWriter5 = null; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp(printWriter5, 100, "-", "usage: ", options9, (int) (byte) 10, (int) (byte) -1, "--", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0180"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp("hi!", options12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0181"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; java.util.Comparator comparator10 = helpFormatter0.optionComparator; java.lang.Class<?> wildcardClass11 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test0182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0182"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.getArgName(); helpFormatter10.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); helpFormatter15.setOptPrefix(""); helpFormatter15.defaultLongOptPrefix = ""; java.lang.String str20 = helpFormatter15.defaultLongOptPrefix; java.lang.String str21 = helpFormatter15.getNewLine(); java.lang.String str22 = helpFormatter15.defaultOptPrefix; helpFormatter15.setDescPadding(74); java.util.Comparator comparator25 = helpFormatter15.getOptionComparator(); helpFormatter10.optionComparator = comparator25; helpFormatter0.optionComparator = comparator25; helpFormatter0.setDescPadding((int) ' '); java.io.PrintWriter printWriter30 = null; org.apache.commons.cli.Options options33 = null; try { helpFormatter0.printUsage(printWriter30, 3, "                                                  ", options33); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(comparator25); }
public void test0183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0183"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setArgName("-"); java.lang.String str5 = helpFormatter0.createPadding(0); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0184"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding((int) ' '); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("hi!", " ", options8, "                                                 ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); }
public void test0185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0185"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setOptPrefix(" "); helpFormatter0.defaultLongOptPrefix = "arg"; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); }
public void test0186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0186"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.getOptionComparator(); java.lang.Class<?> wildcardClass5 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertNotNull(wildcardClass5); }
public void test0187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0187"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getWidth(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); }
public void test0188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0188"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); helpFormatter5.setOptPrefix(""); helpFormatter5.defaultLongOptPrefix = ""; java.lang.String str10 = helpFormatter5.defaultLongOptPrefix; java.lang.String str11 = helpFormatter5.getNewLine(); java.lang.String str12 = helpFormatter5.defaultOptPrefix; helpFormatter5.setDescPadding(74); java.util.Comparator comparator15 = helpFormatter5.getOptionComparator(); helpFormatter0.optionComparator = comparator15; helpFormatter0.defaultWidth = '#'; java.io.PrintWriter printWriter19 = null; org.apache.commons.cli.Options options22 = null; try { helpFormatter0.printUsage(printWriter19, 0, "hi!", options22); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNotNull(comparator15); }
public void test0189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0189"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp("                                                  ", options7, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test0190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0190"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.defaultLeftPad = (short) 1; org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); helpFormatter9.setOptPrefix(""); helpFormatter9.defaultLongOptPrefix = ""; java.lang.String str14 = helpFormatter9.defaultLongOptPrefix; java.lang.String str15 = helpFormatter9.getNewLine(); java.util.Comparator comparator16 = helpFormatter9.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); int int18 = helpFormatter17.getLeftPadding(); helpFormatter17.defaultNewLine = ""; java.lang.String str21 = helpFormatter17.defaultOptPrefix; helpFormatter17.setLongOptPrefix(" "); helpFormatter17.defaultDescPad = (short) 10; java.lang.String str26 = helpFormatter17.defaultArgName; java.util.Comparator comparator27 = helpFormatter17.optionComparator; helpFormatter9.setOptionComparator(comparator27); helpFormatter0.setOptionComparator(comparator27); java.lang.StringBuffer stringBuffer30 = null; org.apache.commons.cli.Options options32 = null; try { java.lang.StringBuffer stringBuffer35 = helpFormatter0.renderOptions(stringBuffer30, (-1), options32, 52, (int) ' '); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n"); org.junit.Assert.assertNotNull(comparator16); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-" + "'", str21, "-"); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "arg" + "'", str26, "arg"); org.junit.Assert.assertNotNull(comparator27); }
public void test0191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0191"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp("", options12); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0192"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.getWidth(); java.lang.String str9 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); }
public void test0193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0193"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setLongOptSeparator("usage: "); helpFormatter0.defaultSyntaxPrefix = ""; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); }
public void test0194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0194"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.defaultNewLine; helpFormatter0.defaultOptPrefix = "                                                 "; int int11 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); }
public void test0195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0195"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setWidth(1); java.lang.String str5 = helpFormatter0.getNewLine(); int int6 = helpFormatter0.defaultWidth; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0196"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = 0; helpFormatter0.setDescPadding((int) 'a'); helpFormatter0.setLongOptSeparator("arg"); helpFormatter0.defaultLongOptPrefix = "hi!"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0197"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultWidth = (short) -1; int int11 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); }
public void test0198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0198"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.getOptionComparator(); java.lang.String str5 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp(printWriter6, (int) ' ', "usage: ", "usage: ", options10, (int) ' ', 0, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0199"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.Class<?> wildcardClass8 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test0200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0200"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); java.lang.String str12 = helpFormatter0.createPadding(100); java.io.PrintWriter printWriter13 = null; try { helpFormatter0.printWrapped(printWriter13, 1, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                  " + "'", str12, "                                                  "); }
public void test0201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0201"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLongOptPrefix("                                                 "); helpFormatter0.setSyntaxPrefix("                                                 "); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp("usage: ", options12, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0202"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); int int16 = helpFormatter0.getLeftPadding(); java.io.PrintWriter printWriter17 = null; org.apache.commons.cli.Options options20 = null; try { helpFormatter0.printUsage(printWriter17, 100, "     ", options20); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); }
public void test0203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0203"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); helpFormatter0.defaultDescPad = 10; java.lang.String str12 = helpFormatter0.getArgName(); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp("arg", "                                                 ", options15, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); }
public void test0204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0204"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); java.lang.String str14 = helpFormatter0.rtrim("--"); java.io.PrintWriter printWriter15 = null; try { helpFormatter0.printWrapped(printWriter15, (int) '#', (int) 'a', "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "--" + "'", str14, "--"); }
public void test0205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0205"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("arg", options9, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test0206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0206"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); helpFormatter0.defaultSyntaxPrefix = " "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); }
public void test0207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0207"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printWrapped(printWriter8, (int) '4', "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test0208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0208"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); helpFormatter0.setLongOptPrefix(""); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); }
public void test0209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0209"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.setDescPadding((int) (short) 0); java.lang.String str5 = helpFormatter0.getOptPrefix(); helpFormatter0.defaultSyntaxPrefix = "hi!"; java.lang.Class<?> wildcardClass8 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test0210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0210"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); int int2 = helpFormatter0.getWidth(); java.lang.StringBuffer stringBuffer3 = null; try { java.lang.StringBuffer stringBuffer7 = helpFormatter0.renderWrappedText(stringBuffer3, 74, (int) (short) 10, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0211"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp((-2), "-", "-", options15, "  ", false); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0212"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultDescPad = 'a'; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("hi!", options11); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0213"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setLongOptSeparator("usage: "); org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp((int) (short) -1, "                                                  ", "                          ", options13, " ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); }
public void test0214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0214"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setLongOptPrefix("                                                 "); int int8 = helpFormatter0.findWrapPos("--", (int) (short) -1, (int) (byte) 100); org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp(0, "", "                                                 ", options12, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test0215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0215"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); java.lang.String str14 = helpFormatter0.getSyntaxPrefix(); int int18 = helpFormatter0.findWrapPos("", (int) (short) 10, (int) (byte) 1); java.io.PrintWriter printWriter19 = null; try { helpFormatter0.printUsage(printWriter19, (int) (byte) 10, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "usage: " + "'", str14, "usage: "); org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1)); }
public void test0216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0216"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultLeftPad; java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printWrapped(printWriter6, (int) (short) 10, (int) (byte) 10, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); }
public void test0217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0217"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); helpFormatter0.defaultLeftPad = '4'; helpFormatter0.defaultLongOptPrefix = "                                                  "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0218"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.getOptPrefix(); helpFormatter0.setLongOptSeparator("                                                  "); helpFormatter0.setDescPadding((int) (short) 0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0219"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultLeftPad = (byte) -1; java.io.PrintWriter printWriter7 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp(printWriter7, (-2), "  ", "", options11, 3, (int) (byte) 10, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); }
public void test0220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0220"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.getOptionComparator(); java.lang.String str5 = helpFormatter0.getOptPrefix(); java.lang.String str6 = helpFormatter0.defaultLongOptPrefix; java.util.Comparator comparator7 = helpFormatter0.optionComparator; java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printUsage(printWriter8, 74, "hi!", options11); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); org.junit.Assert.assertNotNull(comparator7); }
public void test0221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0221"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); int int9 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test0222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0222"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp(printWriter12, (int) (short) 10, "", "                          ", options16, (int) '4', (int) (short) 100, "\n", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); }
public void test0223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0223"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printOptions(printWriter6, (int) (short) 0, options8, (int) (short) 100, (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0224"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; java.lang.StringBuffer stringBuffer7 = null; try { java.lang.StringBuffer stringBuffer11 = helpFormatter0.renderWrappedText(stringBuffer7, (int) '#', (int) '4', "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); }
public void test0225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0225"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding((int) ' '); helpFormatter0.defaultDescPad = (byte) -1; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); }
public void test0226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0226"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultSyntaxPrefix = "                                                 "; try { java.lang.String str23 = helpFormatter0.createPadding((int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); }
public void test0227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0227"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding((int) ' '); java.lang.Class<?> wildcardClass6 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test0228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0228"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); java.lang.StringBuffer stringBuffer11 = null; org.apache.commons.cli.Options options13 = null; try { java.lang.StringBuffer stringBuffer16 = helpFormatter0.renderOptions(stringBuffer11, 100, options13, 0, 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0229"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); int int10 = helpFormatter0.defaultLeftPad; int int11 = helpFormatter0.getWidth(); org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp("arg", options13); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); }
public void test0230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0230"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "--"; java.lang.String str5 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultWidth = (short) 1; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0231"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; helpFormatter0.setWidth((-1)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0232"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(1); java.lang.String str11 = helpFormatter0.getOptPrefix(); java.lang.Class<?> wildcardClass12 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-" + "'", str11, "-"); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test0233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0233"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); int int2 = helpFormatter0.getWidth(); java.io.PrintWriter printWriter3 = null; org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printUsage(printWriter3, 3, "", options6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0234"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); java.lang.String str11 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test0235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0235"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getArgName(); helpFormatter0.setDescPadding(0); int int12 = helpFormatter0.defaultDescPad; helpFormatter0.defaultWidth = 3; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0); }
public void test0236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0236"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); java.lang.String str11 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); }
public void test0237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0237"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp(printWriter8, (int) (short) 10, "usage: ", "arg", options12, (int) (short) 1, 52, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test0238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0238"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str10 = helpFormatter0.rtrim("-"); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printUsage(printWriter11, (int) (short) 1, " ", options14); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); }
public void test0239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0239"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); helpFormatter0.setLongOptSeparator(" "); helpFormatter0.defaultArgName = "                                                 "; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test0240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0240"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str11 = helpFormatter10.defaultSyntaxPrefix; java.util.Comparator comparator12 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator12; java.io.PrintWriter printWriter14 = null; org.apache.commons.cli.Options options18 = null; try { helpFormatter0.printHelp(printWriter14, (int) (byte) 1, "--", "-", options18, (int) '#', (int) (short) 1, "                                                  ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertNotNull(comparator12); }
public void test0241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0241"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.defaultNewLine; java.lang.String str9 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp("--", "--", options12, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test0242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0242"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter10 = null; try { helpFormatter0.printUsage(printWriter10, 97, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); }
public void test0243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0243"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; int int8 = helpFormatter0.getLeftPadding(); java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printUsage(printWriter9, (int) (short) 1, "arg", options12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0244"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); int int11 = helpFormatter0.getLeftPadding(); java.util.Comparator comparator12 = helpFormatter0.optionComparator; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertNotNull(comparator12); }
public void test0245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0245"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); helpFormatter0.defaultLongOptPrefix = "-"; helpFormatter0.setLongOptSeparator("-"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0246"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); java.lang.String str10 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "arg" + "'", str10, "arg"); }
public void test0247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0247"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; int int9 = helpFormatter0.findWrapPos("                                                 ", (int) (short) 0, (int) (short) 10); int int10 = helpFormatter0.defaultWidth; java.io.PrintWriter printWriter11 = null; try { helpFormatter0.printWrapped(printWriter11, 97, (int) (short) 100, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74); }
public void test0248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0248"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("                          ", options9, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); }
public void test0249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0249"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); helpFormatter0.defaultOptPrefix = "                                                 "; java.util.Comparator comparator13 = helpFormatter0.getOptionComparator(); java.lang.StringBuffer stringBuffer14 = null; try { java.lang.StringBuffer stringBuffer18 = helpFormatter0.renderWrappedText(stringBuffer14, (int) (byte) 1, 0, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertNotNull(comparator13); }
public void test0250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0250"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultLeftPad; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.setNewLine("usage: "); java.lang.StringBuffer stringBuffer7 = null; try { java.lang.StringBuffer stringBuffer11 = helpFormatter0.renderWrappedText(stringBuffer7, (int) '#', 0, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0251"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.createPadding(52); java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printWrapped(printWriter6, (-2), "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                          " + "'", str5, "                          "); }
public void test0252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0252"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setLongOptPrefix("                                                 "); helpFormatter0.defaultWidth = (short) 100; java.lang.String str7 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); }
public void test0253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0253"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.lang.String str5 = helpFormatter0.createPadding(52); java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printWrapped(printWriter6, (-2), "     "); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                          " + "'", str5, "                          "); }
public void test0254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0254"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = (short) 1; helpFormatter0.setLongOptSeparator("arg"); java.lang.String str15 = helpFormatter0.defaultArgName; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter16.getLeftPadding(); helpFormatter16.defaultNewLine = ""; helpFormatter16.defaultDescPad = '4'; helpFormatter16.setNewLine(""); int int27 = helpFormatter16.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator28 = helpFormatter16.optionComparator; helpFormatter0.optionComparator = comparator28; helpFormatter0.setWidth(1); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1)); org.junit.Assert.assertNotNull(comparator28); }
public void test0255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0255"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptSeparator("-"); java.lang.StringBuffer stringBuffer7 = null; try { java.lang.StringBuffer stringBuffer11 = helpFormatter0.renderWrappedText(stringBuffer7, (int) (short) -1, (int) (byte) 1, "-"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0256"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.lang.String str5 = helpFormatter0.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter6.getLeftPadding(); helpFormatter6.defaultNewLine = ""; helpFormatter6.defaultDescPad = '4'; helpFormatter6.setNewLine(""); int int17 = helpFormatter6.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator18 = helpFormatter6.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultWidth = (short) 0; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                                 " + "'", str5, "                                                 "); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertNotNull(comparator18); }
public void test0257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0257"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp("                          ", options7, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0258"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("\n"); helpFormatter0.setLongOptSeparator("  "); helpFormatter0.setOptPrefix(" "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); }
public void test0259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0259"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter13.getLeftPadding(); helpFormatter13.defaultNewLine = ""; helpFormatter13.setDescPadding(10); java.lang.String str19 = helpFormatter13.defaultNewLine; helpFormatter13.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.setOptPrefix(""); helpFormatter22.defaultLongOptPrefix = ""; java.lang.String str27 = helpFormatter22.defaultLongOptPrefix; java.lang.String str28 = helpFormatter22.getNewLine(); java.util.Comparator comparator29 = helpFormatter22.getOptionComparator(); helpFormatter13.optionComparator = comparator29; helpFormatter0.optionComparator = comparator29; org.apache.commons.cli.Options options34 = null; try { helpFormatter0.printHelp("", "\n", options34, "                          ", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\n" + "'", str28, "\n"); org.junit.Assert.assertNotNull(comparator29); }
public void test0260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0260"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); java.io.PrintWriter printWriter19 = null; org.apache.commons.cli.Options options23 = null; try { helpFormatter0.printHelp(printWriter19, (int) (byte) 10, "arg", "                                                 ", options23, (int) (short) 1, (int) ' ', " ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); }
public void test0261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0261"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.defaultLongOptPrefix; java.lang.String str13 = helpFormatter10.getOptPrefix(); java.util.Comparator comparator14 = helpFormatter10.optionComparator; java.util.Comparator comparator15 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator15; int int17 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertNotNull(comparator15); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); }
public void test0262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0262"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator9 = helpFormatter0.getOptionComparator(); java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp(printWriter10, (int) '4', "  ", "  ", options14, 0, 0, "  ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator9); }
public void test0263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0263"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.getLongOptSeparator(); int int6 = helpFormatter0.getDescPadding(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3); }
public void test0264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0264"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); java.lang.String str19 = helpFormatter0.getLongOptPrefix(); java.lang.String str20 = helpFormatter0.getOptPrefix(); java.lang.String str21 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--" + "'", str19, "--"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-" + "'", str20, "-"); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "arg" + "'", str21, "arg"); }
public void test0265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0265"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp((int) ' ', "", "", options11, "", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0266"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultLongOptPrefix = "\n"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0267"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); java.lang.String str8 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printOptions(printWriter9, (int) (byte) 0, options11, 0, 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0268"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "--"; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp((int) 'a', "--", " ", options10, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); }
public void test0269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0269"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; int int2 = helpFormatter0.getWidth(); helpFormatter0.setNewLine(""); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0270"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.setWidth((int) (short) 0); int int5 = helpFormatter0.getDescPadding(); java.lang.String str6 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!"); }
public void test0271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0271"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("                                                  ", options8, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); }
public void test0272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0272"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); int int11 = helpFormatter0.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator12 = helpFormatter0.optionComparator; helpFormatter0.defaultArgName = "                                                 "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1)); org.junit.Assert.assertNotNull(comparator12); }
public void test0273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0273"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str10 = helpFormatter0.rtrim("-"); helpFormatter0.defaultArgName = "-"; helpFormatter0.defaultOptPrefix = "                                                  "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); }
public void test0274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0274"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator7 = null; helpFormatter0.setOptionComparator(comparator7); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); }
public void test0275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0275"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultLeftPad; helpFormatter0.setSyntaxPrefix(""); java.lang.String str6 = helpFormatter0.rtrim("     "); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0276"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; helpFormatter0.defaultArgName = ""; helpFormatter0.setLongOptSeparator("                          "); org.junit.Assert.assertNotNull(comparator1); }
public void test0277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0277"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); java.lang.String str16 = helpFormatter0.defaultArgName; helpFormatter0.defaultOptPrefix = "--"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); }
public void test0278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0278"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.defaultNewLine; java.lang.String str9 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printHelp("                                                 ", "", options12, "-", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test0279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0279"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; helpFormatter0.setLongOptPrefix(""); try { java.lang.String str16 = helpFormatter0.createPadding((-1)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0280"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.setNewLine("--"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0281"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setWidth(1); helpFormatter0.defaultArgName = " "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0282"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str10 = helpFormatter0.rtrim("-"); org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp("--", "                                                 ", options13, "\n", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); }
public void test0283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0283"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter4 = null; try { helpFormatter0.printWrapped(printWriter4, (-1), "arg"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); }
public void test0284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0284"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.Class<?> wildcardClass11 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test0285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0285"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.getOptionComparator(); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp(printWriter6, 97, "                                                  ", "", options10, 0, 0, " ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test0286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0286"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp((int) (short) -1, "", "usage: ", options16, "                          "); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test0287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0287"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("-", options10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator8); }
public void test0288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0288"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); int int5 = helpFormatter0.defaultLeftPad; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp((int) '#', "  ", "     ", options9, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); }
public void test0289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0289"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLongOptPrefix("                                                 "); int int9 = helpFormatter0.getDescPadding(); java.lang.Class<?> wildcardClass10 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test0290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0290"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); java.lang.String str12 = helpFormatter0.createPadding(100); int int13 = helpFormatter0.getDescPadding(); helpFormatter0.setWidth(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                  " + "'", str12, "                                                  "); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52); }
public void test0291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0291"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getArgName(); java.lang.String str15 = helpFormatter0.getSyntaxPrefix(); org.apache.commons.cli.Options options19 = null; try { helpFormatter0.printHelp((int) (byte) 10, "arg", "                                                  ", options19, "  ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); }
public void test0292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0292"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); int int11 = helpFormatter0.getWidth(); helpFormatter0.defaultOptPrefix = " "; helpFormatter0.setNewLine(" "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); }
public void test0293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0293"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultLeftPad; helpFormatter0.setOptPrefix("-"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); }
public void test0294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0294"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp("arg", options15); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test0295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0295"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); helpFormatter0.defaultLeftPad = '4'; java.lang.String str13 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); }
public void test0296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0296"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter6 = null; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printUsage(printWriter6, 52, "                                                  ", options9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0297"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.lang.String str7 = helpFormatter0.defaultNewLine; int int8 = helpFormatter0.getWidth(); java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printUsage(printWriter9, 3, "", options12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); }
public void test0298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0298"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; int int8 = helpFormatter0.getLeftPadding(); helpFormatter0.setNewLine("  "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0299"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultOptPrefix = "usage: "; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("hi!", "                                                 ", options11, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0300"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str14 = helpFormatter0.getArgName(); java.util.Comparator comparator15 = helpFormatter0.optionComparator; helpFormatter0.setWidth(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertNotNull(comparator15); }
public void test0301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0301"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.io.PrintWriter printWriter2 = null; org.apache.commons.cli.Options options6 = null; try { helpFormatter0.printHelp(printWriter2, 10, "                                                  ", "hi!", options6, 3, (int) (byte) 0, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); }
public void test0302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0302"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setSyntaxPrefix("\n"); int int5 = helpFormatter0.getWidth(); helpFormatter0.setArgName("arg"); java.lang.String str8 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n"); }
public void test0303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0303"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultLeftPad = (short) 10; int int12 = helpFormatter0.getWidth(); java.lang.String str13 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str14 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0304"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; org.apache.commons.cli.HelpFormatter helpFormatter4 = new org.apache.commons.cli.HelpFormatter(); helpFormatter4.setOptPrefix(""); helpFormatter4.defaultLongOptPrefix = ""; java.lang.String str9 = helpFormatter4.defaultLongOptPrefix; helpFormatter4.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter12 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator13 = helpFormatter12.optionComparator; int int14 = helpFormatter12.getLeftPadding(); int int15 = helpFormatter12.defaultLeftPad; java.lang.String str17 = helpFormatter12.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter18.getLeftPadding(); helpFormatter18.defaultNewLine = ""; helpFormatter18.defaultDescPad = '4'; helpFormatter18.setNewLine(""); int int29 = helpFormatter18.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator30 = helpFormatter18.optionComparator; helpFormatter12.setOptionComparator(comparator30); helpFormatter4.setOptionComparator(comparator30); helpFormatter0.optionComparator = comparator30; int int34 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix("                          "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); org.junit.Assert.assertNotNull(comparator13); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "                                                 " + "'", str17, "                                                 "); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1)); org.junit.Assert.assertNotNull(comparator30); org.junit.Assert.assertTrue("'" + int34 + "' != '" + 74 + "'", int34 == 74); }
public void test0305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0305"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "                                                 "; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp(" ", "  ", options11, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0306"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix(""); helpFormatter0.setOptPrefix("arg"); int int9 = helpFormatter0.getWidth(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); }
public void test0307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0307"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; int int16 = helpFormatter0.findWrapPos("", (-1), (int) (short) 0); java.lang.String str17 = helpFormatter0.defaultOptPrefix; org.apache.commons.cli.HelpFormatter helpFormatter18 = new org.apache.commons.cli.HelpFormatter(); int int19 = helpFormatter18.getLeftPadding(); helpFormatter18.defaultNewLine = ""; helpFormatter18.setDescPadding(10); helpFormatter18.setSyntaxPrefix(" "); java.util.Comparator comparator26 = helpFormatter18.getOptionComparator(); helpFormatter0.setOptionComparator(comparator26); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "--" + "'", str17, "--"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertNotNull(comparator26); }
public void test0308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0308"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getSyntaxPrefix(); java.lang.String str2 = helpFormatter0.defaultNewLine; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n"); }
public void test0309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0309"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); int int6 = helpFormatter0.getDescPadding(); java.lang.String str7 = helpFormatter0.getNewLine(); int int8 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); }
public void test0310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0310"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; int int4 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1); }
public void test0311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0311"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultDescPad; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("hi!", "usage: ", options8, " ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); }
public void test0312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0312"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printOptions(printWriter8, 0, options10, (int) '4', (int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertNotNull(comparator7); }
public void test0313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0313"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.getOptionComparator(); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator6 = null; helpFormatter0.optionComparator = comparator6; java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printOptions(printWriter8, 0, options10, (int) '#', (int) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); }
public void test0314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0314"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; int int5 = helpFormatter0.defaultDescPad; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); }
public void test0315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0315"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; int int3 = helpFormatter0.getWidth(); helpFormatter0.setLongOptPrefix("     "); int int6 = helpFormatter0.getDescPadding(); java.lang.String str7 = helpFormatter0.getNewLine(); int int8 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int3 + "' != '" + 74 + "'", int3 == 74); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n"); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0316"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = 0; helpFormatter0.setDescPadding((int) 'a'); java.io.PrintWriter printWriter12 = null; try { helpFormatter0.printUsage(printWriter12, (int) (short) -1, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0317"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultArgName = "                                                 "; int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.setNewLine(" "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test0318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0318"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultDescPad; java.io.PrintWriter printWriter5 = null; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp(printWriter5, 10, "                          ", "\n", options9, (int) (short) -1, (-2), "--", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0319"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; int int16 = helpFormatter0.findWrapPos("", (-1), (int) (short) 0); org.apache.commons.cli.Options options19 = null; try { helpFormatter0.printHelp("-", " ", options19, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1)); }
public void test0320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0320"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test0321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0321"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getArgName(); int int5 = helpFormatter0.findWrapPos("arg", 0, (int) (byte) 10); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("                                                 ", "--", options8, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1)); }
public void test0322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0322"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultDescPad = 0; helpFormatter0.defaultWidth = 1; org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); }
public void test0323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0323"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); helpFormatter0.setLongOptSeparator(" "); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter6.getLeftPadding(); helpFormatter6.defaultNewLine = ""; helpFormatter6.defaultDescPad = '4'; helpFormatter6.setNewLine(""); int int17 = helpFormatter6.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator18 = helpFormatter6.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.setLeftPadding((int) ' '); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertNotNull(comparator18); }
public void test0324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0324"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; helpFormatter0.setOptPrefix("hi!"); java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp(printWriter10, 52, "usage: ", "arg", options14, 3, (int) (short) 1, "     ", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0325"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); int int10 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultOptPrefix = "                                                  "; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); }
public void test0326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0326"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultArgName = "--"; int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultSyntaxPrefix = ""; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test0327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0327"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLeftPad = 0; java.lang.String str9 = helpFormatter0.defaultNewLine; java.lang.String str10 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); }
public void test0328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0328"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("\n"); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLeftPadding((int) ' '); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test0329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0329"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultSyntaxPrefix = "--"; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp((int) (byte) -1, "\n", "hi!", options8, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); }
public void test0330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0330"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; java.util.Comparator comparator2 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.defaultArgName; java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultNewLine = ""; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertNotNull(comparator2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arg" + "'", str3, "arg"); org.junit.Assert.assertNotNull(comparator4); }
public void test0331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0331"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLongOptPrefix("                                                 "); int int9 = helpFormatter0.getDescPadding(); java.util.Comparator comparator10 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); org.junit.Assert.assertNotNull(comparator10); }
public void test0332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0332"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0333"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printUsage(printWriter9, 97, "hi!", options12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test0334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0334"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); int int2 = helpFormatter0.getWidth(); helpFormatter0.defaultOptPrefix = "  "; java.io.PrintWriter printWriter5 = null; org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printOptions(printWriter5, 52, options7, (-2), (-2)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0335"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); helpFormatter0.setOptPrefix("arg"); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0336"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.lang.String str5 = helpFormatter0.getNewLine(); java.lang.String str6 = helpFormatter0.defaultNewLine; java.io.PrintWriter printWriter7 = null; try { helpFormatter0.printUsage(printWriter7, (int) (short) 10, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); }
public void test0337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0337"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; java.lang.String str11 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, ""); }
public void test0338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0338"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.defaultLongOptPrefix = "arg"; helpFormatter0.defaultArgName = "--"; }
public void test0339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0339"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); helpFormatter0.defaultOptPrefix = "usage: "; java.io.PrintWriter printWriter15 = null; try { helpFormatter0.printUsage(printWriter15, 52, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); }
public void test0340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0340"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.String str11 = helpFormatter0.getArgName(); java.lang.String str12 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setLongOptSeparator("                                                  "); java.lang.StringBuffer stringBuffer15 = null; org.apache.commons.cli.Options options17 = null; try { java.lang.StringBuffer stringBuffer20 = helpFormatter0.renderOptions(stringBuffer15, (int) 'a', options17, (int) (byte) 1, (int) (byte) 10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test0341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0341"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultDescPad; java.lang.String str6 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); }
public void test0342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0342"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str9 = helpFormatter0.getOptPrefix(); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); }
public void test0343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0343"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.setOptPrefix(""); helpFormatter22.defaultLongOptPrefix = ""; java.lang.String str27 = helpFormatter22.defaultLongOptPrefix; helpFormatter22.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator31 = helpFormatter30.optionComparator; int int32 = helpFormatter30.getLeftPadding(); int int33 = helpFormatter30.defaultLeftPad; java.lang.String str35 = helpFormatter30.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter36 = new org.apache.commons.cli.HelpFormatter(); int int37 = helpFormatter36.getLeftPadding(); helpFormatter36.defaultNewLine = ""; helpFormatter36.defaultDescPad = '4'; helpFormatter36.setNewLine(""); int int47 = helpFormatter36.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator48 = helpFormatter36.optionComparator; helpFormatter30.setOptionComparator(comparator48); helpFormatter22.setOptionComparator(comparator48); helpFormatter0.setOptionComparator(comparator48); helpFormatter0.setDescPadding(0); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertNotNull(comparator31); org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1); org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                 " + "'", str35, "                                                 "); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1); org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1)); org.junit.Assert.assertNotNull(comparator48); }
public void test0344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0344"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); int int9 = helpFormatter8.getLeftPadding(); helpFormatter8.defaultNewLine = ""; java.lang.String str12 = helpFormatter8.defaultOptPrefix; helpFormatter8.setLongOptPrefix(" "); helpFormatter8.defaultDescPad = (short) 10; java.lang.String str17 = helpFormatter8.defaultArgName; java.util.Comparator comparator18 = helpFormatter8.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.apache.commons.cli.Options options23 = null; try { helpFormatter0.printHelp("                                                 ", options23, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "arg" + "'", str17, "arg"); org.junit.Assert.assertNotNull(comparator18); }
public void test0345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0345"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultDescPad; java.util.Comparator comparator6 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); org.junit.Assert.assertNotNull(comparator6); }
public void test0346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0346"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultOptPrefix; int int9 = helpFormatter0.findWrapPos("  ", (int) (short) 0, (int) (byte) 100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); }
public void test0347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0347"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLeftPadding((int) (byte) 0); helpFormatter0.setLongOptPrefix("                                                 "); helpFormatter0.setSyntaxPrefix("                                                 "); helpFormatter0.setNewLine("                          "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0348"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); helpFormatter0.setLeftPadding(52); java.lang.String str13 = helpFormatter0.rtrim("-"); helpFormatter0.setLeftPadding((int) 'a'); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test0349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0349"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setWidth(0); java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printWrapped(printWriter8, (-1), (int) (byte) 10, "                                                 "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0350"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); java.lang.String str11 = helpFormatter0.getArgName(); helpFormatter0.defaultArgName = ""; helpFormatter0.setDescPadding((int) '4'); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator10); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "arg" + "'", str11, "arg"); }
public void test0351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0351"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = (short) 1; helpFormatter0.setLongOptSeparator("arg"); java.lang.String str15 = helpFormatter0.defaultArgName; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); int int17 = helpFormatter16.getLeftPadding(); helpFormatter16.defaultNewLine = ""; helpFormatter16.defaultDescPad = '4'; helpFormatter16.setNewLine(""); int int27 = helpFormatter16.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator28 = helpFormatter16.optionComparator; helpFormatter0.optionComparator = comparator28; org.apache.commons.cli.HelpFormatter helpFormatter30 = new org.apache.commons.cli.HelpFormatter(); int int31 = helpFormatter30.getLeftPadding(); helpFormatter30.defaultNewLine = ""; helpFormatter30.setDescPadding(10); java.lang.String str36 = helpFormatter30.defaultNewLine; helpFormatter30.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter39 = new org.apache.commons.cli.HelpFormatter(); helpFormatter39.setOptPrefix(""); helpFormatter39.defaultLongOptPrefix = ""; java.lang.String str44 = helpFormatter39.defaultLongOptPrefix; java.lang.String str45 = helpFormatter39.getNewLine(); java.util.Comparator comparator46 = helpFormatter39.getOptionComparator(); helpFormatter30.optionComparator = comparator46; helpFormatter0.optionComparator = comparator46; java.lang.String str49 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "arg" + "'", str15, "arg"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1)); org.junit.Assert.assertNotNull(comparator28); org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1); org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, ""); org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, ""); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\n" + "'", str45, "\n"); org.junit.Assert.assertNotNull(comparator46); org.junit.Assert.assertEquals("'" + str49 + "' != '" + "arg" + "'", str49, "arg"); }
public void test0352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0352"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); helpFormatter0.setArgName("arg"); java.lang.String str8 = helpFormatter0.createPadding((int) ' '); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "                " + "'", str8, "                "); }
public void test0353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0353"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); helpFormatter0.defaultArgName = "\n"; java.lang.StringBuffer stringBuffer18 = null; org.apache.commons.cli.Options options20 = null; try { java.lang.StringBuffer stringBuffer23 = helpFormatter0.renderOptions(stringBuffer18, (int) (short) -1, options20, (int) '#', 97); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0354"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); helpFormatter0.setLeftPadding(52); java.util.Comparator comparator12 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertNotNull(comparator12); }
public void test0355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0355"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setLongOptSeparator("     "); java.lang.String str9 = helpFormatter0.getOptPrefix(); helpFormatter0.setOptPrefix("usage: "); int int12 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10); }
public void test0356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0356"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); java.lang.String str16 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options19 = null; try { helpFormatter0.printHelp("", "\n", options19, "", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "arg" + "'", str16, "arg"); }
public void test0357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0357"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; helpFormatter0.setArgName("arg"); int int8 = helpFormatter0.defaultDescPad; java.io.PrintWriter printWriter9 = null; org.apache.commons.cli.Options options12 = null; try { helpFormatter0.printUsage(printWriter9, (int) (byte) 0, " ", options12); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); }
public void test0358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0358"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter5 = new org.apache.commons.cli.HelpFormatter(); helpFormatter5.setOptPrefix(""); helpFormatter5.defaultLongOptPrefix = ""; java.lang.String str10 = helpFormatter5.defaultLongOptPrefix; java.lang.String str11 = helpFormatter5.getNewLine(); java.lang.String str12 = helpFormatter5.defaultOptPrefix; helpFormatter5.setDescPadding(74); java.util.Comparator comparator15 = helpFormatter5.getOptionComparator(); helpFormatter0.optionComparator = comparator15; helpFormatter0.defaultSyntaxPrefix = ""; java.lang.Class<?> wildcardClass19 = helpFormatter0.getClass(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, ""); org.junit.Assert.assertNotNull(comparator15); org.junit.Assert.assertNotNull(wildcardClass19); }
public void test0359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0359"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getLeftPadding(); java.lang.String str12 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!"); }
public void test0360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0360"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.createPadding(1); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator12 = helpFormatter0.optionComparator; java.lang.String str13 = helpFormatter0.getNewLine(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertNotNull(comparator12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test0361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0361"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.defaultNewLine; helpFormatter0.defaultArgName = "                                                  "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0362"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; java.lang.String str9 = helpFormatter0.getNewLine(); helpFormatter0.setOptPrefix("                                                 "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test0363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0363"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); java.lang.String str9 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultLeftPad = 10; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); }
public void test0364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0364"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); helpFormatter0.defaultOptPrefix = "usage: "; java.lang.String str15 = helpFormatter0.defaultOptPrefix; helpFormatter0.setArgName("  "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "usage: " + "'", str15, "usage: "); }
public void test0365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0365"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp(printWriter10, 3, "hi!", "usage: ", options14, 0, (int) (short) 1, "                ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0366"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.defaultNewLine; java.lang.StringBuffer stringBuffer7 = null; org.apache.commons.cli.Options options9 = null; try { java.lang.StringBuffer stringBuffer12 = helpFormatter0.renderOptions(stringBuffer7, (int) (short) 100, options9, (int) ' ', 52); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test0367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0367"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; java.lang.StringBuffer stringBuffer13 = null; try { java.lang.StringBuffer stringBuffer17 = helpFormatter0.renderWrappedText(stringBuffer13, (int) (byte) 1, 100, "hi!"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test0368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0368"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = '4'; helpFormatter0.setWidth((int) (short) 10); java.io.PrintWriter printWriter12 = null; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printUsage(printWriter12, 74, "-", options15); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0369"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setSyntaxPrefix("\n"); org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp("                          ", "                                                  ", options7, "", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } }
public void test0370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0370"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; java.lang.Class<?> wildcardClass6 = helpFormatter0.getClass(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test0371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0371"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.lang.String str5 = helpFormatter0.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter6.getLeftPadding(); helpFormatter6.defaultNewLine = ""; helpFormatter6.defaultDescPad = '4'; helpFormatter6.setNewLine(""); int int17 = helpFormatter6.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator18 = helpFormatter6.optionComparator; helpFormatter0.setOptionComparator(comparator18); java.lang.String str20 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = '#'; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                                 " + "'", str5, "                                                 "); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertNotNull(comparator18); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n"); }
public void test0372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0372"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); int int3 = helpFormatter0.defaultDescPad; java.lang.Class<?> wildcardClass4 = helpFormatter0.getClass(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3); org.junit.Assert.assertNotNull(wildcardClass4); }
public void test0373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0373"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); java.lang.String str10 = helpFormatter0.getLongOptSeparator(); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printUsage(printWriter11, (int) ' ', " ", options14); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); }
public void test0374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0374"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setDescPadding(1); java.lang.String str15 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "--" + "'", str15, "--"); }
public void test0375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0375"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); int int9 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("                                                  "); java.lang.String str13 = helpFormatter0.defaultSyntaxPrefix; java.lang.StringBuffer stringBuffer14 = null; org.apache.commons.cli.Options options16 = null; try { java.lang.StringBuffer stringBuffer19 = helpFormatter0.renderOptions(stringBuffer14, 52, options16, 97, (int) (byte) 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test0376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0376"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.defaultLeftPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0377"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str13 = helpFormatter0.defaultSyntaxPrefix; java.io.PrintWriter printWriter14 = null; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printOptions(printWriter14, 0, options16, (int) '#', (-2)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test0378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0378"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); int int5 = helpFormatter0.defaultLeftPad; java.lang.String str6 = helpFormatter0.getLongOptPrefix(); java.io.PrintWriter printWriter7 = null; org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printOptions(printWriter7, (int) (byte) -1, options9, 0, (int) (short) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "--" + "'", str6, "--"); }
public void test0379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0379"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str4 = helpFormatter0.createPadding(10); org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp((int) 'a', "", " ", options8, "hi!", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str4 + "' != '" + "     " + "'", str4, "     "); }
public void test0380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0380"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); java.lang.String str13 = helpFormatter0.defaultLongOptPrefix; int int14 = helpFormatter0.defaultWidth; java.lang.String str15 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultDescPad = '4'; org.apache.commons.cli.Options options21 = null; try { helpFormatter0.printHelp((int) (short) 10, " ", "     ", options21, "hi!", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74 + "'", int14 == 74); org.junit.Assert.assertEquals("'" + str15 + "' != '" + " " + "'", str15, " "); }
public void test0381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0381"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setArgName("hi!"); java.lang.String str9 = helpFormatter0.defaultArgName; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!"); }
public void test0382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0382"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.defaultSyntaxPrefix = "                                                 "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); }
public void test0383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0383"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); java.lang.String str7 = helpFormatter0.defaultArgName; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test0384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0384"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); java.lang.String str10 = helpFormatter0.createPadding(1); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator12 = helpFormatter0.optionComparator; java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.Options options17 = null; try { helpFormatter0.printHelp(printWriter13, (int) (short) -1, " ", "usage: ", options17, (-2), (-2), "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + " " + "'", str11, " "); org.junit.Assert.assertNotNull(comparator12); }
public void test0385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0385"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); helpFormatter0.setLongOptSeparator("-"); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp((-1), " ", "                ", options10, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0386"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setLongOptSeparator("     "); java.lang.String str9 = helpFormatter0.getOptPrefix(); java.lang.String str10 = helpFormatter0.defaultLongOptPrefix; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp("--", "                ", options13, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-" + "'", str9, "-"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "--" + "'", str10, "--"); }
public void test0387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0387"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); java.lang.String str9 = helpFormatter0.defaultLongOptPrefix; java.lang.StringBuffer stringBuffer10 = null; try { java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderWrappedText(stringBuffer10, (int) '#', (int) (short) 10, "usage: "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); }
public void test0388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0388"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); java.lang.String str4 = helpFormatter0.defaultOptPrefix; int int5 = helpFormatter0.defaultWidth; helpFormatter0.defaultLongOptPrefix = "--"; org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); helpFormatter8.setOptPrefix(""); helpFormatter8.defaultLongOptPrefix = ""; java.lang.String str13 = helpFormatter8.defaultLongOptPrefix; helpFormatter8.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator17 = helpFormatter16.optionComparator; int int18 = helpFormatter16.getLeftPadding(); int int19 = helpFormatter16.defaultLeftPad; java.lang.String str21 = helpFormatter16.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); int int23 = helpFormatter22.getLeftPadding(); helpFormatter22.defaultNewLine = ""; helpFormatter22.defaultDescPad = '4'; helpFormatter22.setNewLine(""); int int33 = helpFormatter22.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator34 = helpFormatter22.optionComparator; helpFormatter16.setOptionComparator(comparator34); helpFormatter8.setOptionComparator(comparator34); helpFormatter0.optionComparator = comparator34; org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, ""); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                 " + "'", str21, "                                                 "); org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1); org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1)); org.junit.Assert.assertNotNull(comparator34); }
public void test0389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0389"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.setWidth(3); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0390"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.setWidth(1); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("", "arg", options10, "                                                 ", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); }
public void test0391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0391"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setSyntaxPrefix("                                                  "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test0392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0392"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); helpFormatter0.setLongOptSeparator("-"); java.lang.String str11 = helpFormatter0.getSyntaxPrefix(); java.lang.String str13 = helpFormatter0.createPadding(100); helpFormatter0.defaultSyntaxPrefix = "     "; helpFormatter0.setDescPadding(3); java.lang.String str18 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                  " + "'", str13, "                                                  "); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "     " + "'", str18, "     "); }
public void test0393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0393"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultArgName = "--"; int int9 = helpFormatter0.defaultLeftPad; helpFormatter0.setLeftPadding(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "usage: " + "'", str5, "usage: "); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); }
public void test0394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0394"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; helpFormatter0.setOptPrefix(""); java.lang.String str7 = helpFormatter0.defaultArgName; helpFormatter0.setLongOptPrefix("                                                 "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test0395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0395"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; helpFormatter0.setOptPrefix(""); java.lang.String str8 = helpFormatter0.rtrim("usage: "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage:" + "'", str8, "usage:"); }
public void test0396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0396"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); helpFormatter0.setWidth((int) '4'); helpFormatter0.setLongOptSeparator("\n"); helpFormatter0.defaultArgName = "hi!"; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); }
public void test0397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0397"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); java.lang.String str6 = helpFormatter0.defaultOptPrefix; org.apache.commons.cli.Options options8 = null; try { helpFormatter0.printHelp("     ", options8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); }
public void test0398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0398"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; helpFormatter0.setArgName("arg"); java.lang.String str8 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "usage: " + "'", str8, "usage: "); }
public void test0399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0399"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; helpFormatter0.setOptPrefix(""); java.lang.String str7 = helpFormatter0.defaultArgName; java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printWrapped(printWriter8, 10, (int) (short) 0, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test0400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0400"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.getOptPrefix(); helpFormatter0.setLongOptSeparator("                                                  "); org.apache.commons.cli.Options options9 = null; try { helpFormatter0.printHelp("hi!", options9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0401"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); int int9 = helpFormatter0.getDescPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3); }
public void test0402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0402"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.getArgName(); java.lang.String str5 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setDescPadding(74); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("arg", "                ", options10, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "arg" + "'", str4, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + " " + "'", str5, " "); }
public void test0403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0403"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); java.lang.String str9 = helpFormatter0.defaultLongOptPrefix; java.io.PrintWriter printWriter10 = null; try { helpFormatter0.printWrapped(printWriter10, 97, " "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); }
public void test0404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0404"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptPrefix(""); int int5 = helpFormatter0.getDescPadding(); java.lang.String str6 = helpFormatter0.defaultArgName; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg"); }
public void test0405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0405"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLeftPadding((int) ' '); int int10 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32); }
public void test0406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0406"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = (short) 1; helpFormatter0.setNewLine("                                                 "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0407"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.findWrapPos("", 100, (int) (byte) 0); helpFormatter0.defaultNewLine = "     "; java.lang.String str9 = helpFormatter0.getArgName(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0408"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding(10); int int9 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.getLeftPadding(); helpFormatter0.setLongOptSeparator("                                                  "); java.lang.String str13 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "--" + "'", str13, "--"); }
public void test0409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0409"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); helpFormatter0.defaultOptPrefix = "arg"; int int12 = helpFormatter0.defaultLeftPad; java.io.PrintWriter printWriter13 = null; try { helpFormatter0.printWrapped(printWriter13, (int) (byte) 1, (int) ' ', "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); }
public void test0410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0410"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; int int13 = helpFormatter0.getWidth(); helpFormatter0.setOptPrefix(" "); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 74 + "'", int13 == 74); }
public void test0411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0411"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp((int) (byte) 100, "hi!", "                          ", options14, "                          ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0412"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.util.Comparator comparator8 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(0); java.lang.String str11 = helpFormatter0.getArgName(); java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.lang.String str14 = helpFormatter0.createPadding(0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator8); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0413"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultLeftPad = (short) 10; int int12 = helpFormatter0.getWidth(); java.lang.String str13 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.defaultWidth = '#'; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74 + "'", int12 == 74); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); }
public void test0414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0414"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; int int2 = helpFormatter0.getWidth(); java.lang.String str3 = helpFormatter0.defaultOptPrefix; java.lang.String str4 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "usage: " + "'", str4, "usage: "); }
public void test0415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0415"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); helpFormatter0.setSyntaxPrefix(" "); org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp(10, "                          ", "                                                 ", options15, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); }
public void test0416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0416"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str2 = helpFormatter0.getLongOptPrefix(); helpFormatter0.defaultLongOptPrefix = "arg"; int int5 = helpFormatter0.defaultDescPad; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); }
public void test0417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0417"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); helpFormatter0.setNewLine(""); java.lang.String str6 = helpFormatter0.defaultNewLine; java.lang.String str7 = helpFormatter0.defaultSyntaxPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "usage: " + "'", str7, "usage: "); }
public void test0418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0418"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp((int) (short) 100, "usage:", "", options10, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0419"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultOptPrefix; int int6 = helpFormatter0.getDescPadding(); java.lang.String str7 = helpFormatter0.getArgName(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test0420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0420"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; helpFormatter0.setSyntaxPrefix(""); helpFormatter0.defaultOptPrefix = "                                                 "; helpFormatter0.setLongOptPrefix("     "); int int16 = helpFormatter0.getLeftPadding(); org.apache.commons.cli.HelpFormatter helpFormatter17 = new org.apache.commons.cli.HelpFormatter(); helpFormatter17.setOptPrefix(""); helpFormatter17.defaultLongOptPrefix = ""; java.lang.String str22 = helpFormatter17.defaultLongOptPrefix; java.lang.String str23 = helpFormatter17.getNewLine(); java.lang.String str24 = helpFormatter17.defaultOptPrefix; helpFormatter17.setDescPadding(74); helpFormatter17.setLeftPadding(52); int int29 = helpFormatter17.defaultWidth; helpFormatter17.setDescPadding((int) (short) 0); java.util.Comparator comparator32 = helpFormatter17.getOptionComparator(); helpFormatter0.setOptionComparator(comparator32); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n"); org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, ""); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 74 + "'", int29 == 74); org.junit.Assert.assertNotNull(comparator32); }
public void test0421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0421"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getLongOptPrefix(); java.lang.String str12 = helpFormatter0.createPadding(100); java.lang.String str13 = helpFormatter0.getLongOptPrefix(); java.util.Comparator comparator14 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("-"); java.util.Comparator comparator17 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + " " + "'", str10, " "); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                  " + "'", str12, "                                                  "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + " " + "'", str13, " "); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertNotNull(comparator17); }
public void test0422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0422"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setSyntaxPrefix("usage: "); java.lang.String str5 = helpFormatter0.getArgName(); java.lang.String str6 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arg" + "'", str5, "arg"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); }
public void test0423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0423"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.getWidth(); org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printHelp("", options10); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); }
public void test0424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0424"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultNewLine; helpFormatter0.defaultWidth = (short) -1; helpFormatter0.setLongOptSeparator("usage: "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); }
public void test0425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0425"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); helpFormatter0.setLeftPadding(52); java.lang.String str13 = helpFormatter0.rtrim("arg"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "arg" + "'", str13, "arg"); }
public void test0426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0426"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getArgName(); helpFormatter0.setDescPadding(0); helpFormatter0.defaultDescPad = (short) 100; java.util.Comparator comparator14 = helpFormatter0.optionComparator; java.lang.String str15 = helpFormatter0.getNewLine(); try { java.lang.String str17 = helpFormatter0.createPadding((int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); }
public void test0427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0427"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int8 = helpFormatter0.defaultLeftPad; helpFormatter0.setNewLine("-"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); }
public void test0428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0428"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); int int4 = helpFormatter0.getDescPadding(); helpFormatter0.defaultArgName = "                                                 "; helpFormatter0.defaultLongOptPrefix = "  "; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0429"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); helpFormatter0.setWidth((-2)); java.lang.String str13 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLongOptPrefix = "                "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); }
public void test0430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0430"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; int int5 = helpFormatter0.defaultLeftPad; int int6 = helpFormatter0.defaultLeftPad; int int10 = helpFormatter0.findWrapPos("                                                 ", (int) (byte) 100, (-2)); int int14 = helpFormatter0.findWrapPos("", 100, 74); int int15 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1)); org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1)); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test0431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0431"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; java.lang.String str4 = helpFormatter0.createPadding(10); int int8 = helpFormatter0.findWrapPos("", 10, (int) ' '); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "     " + "'", str4, "     "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1)); }
public void test0432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0432"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setLongOptPrefix(" "); java.lang.String str10 = helpFormatter0.getSyntaxPrefix(); java.io.PrintWriter printWriter11 = null; org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printOptions(printWriter11, (int) ' ', options13, 1, (int) (short) -1); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "usage: " + "'", str10, "usage: "); }
public void test0433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0433"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); helpFormatter0.setDescPadding(3); org.apache.commons.cli.Options options13 = null; try { helpFormatter0.printHelp((-1), "usage: ", "     ", options13, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); }
public void test0434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0434"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); helpFormatter0.defaultSyntaxPrefix = "usage: "; java.lang.String str14 = helpFormatter0.getArgName(); java.util.Comparator comparator15 = helpFormatter0.optionComparator; java.lang.String str16 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "arg" + "'", str14, "arg"); org.junit.Assert.assertNotNull(comparator15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + " " + "'", str16, " "); }
public void test0435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0435"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int6 = helpFormatter0.findWrapPos("-", 100, (-1)); helpFormatter0.defaultWidth = (short) 100; java.lang.String str9 = helpFormatter0.getNewLine(); java.util.Comparator comparator10 = helpFormatter0.getOptionComparator(); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1)); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n"); org.junit.Assert.assertNotNull(comparator10); }
public void test0436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0436"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.setLongOptPrefix("                                                 "); helpFormatter0.defaultWidth = (short) 100; java.lang.String str7 = helpFormatter0.getSyntaxPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "usage: " + "'", str7, "usage: "); }
public void test0437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0437"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); helpFormatter0.defaultOptPrefix = "--"; helpFormatter0.defaultDescPad = 0; helpFormatter0.setLongOptPrefix("usage:"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); }
public void test0438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0438"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.setSyntaxPrefix(" "); int int11 = helpFormatter0.findWrapPos("arg", (int) (byte) -1, (int) (byte) -1); helpFormatter0.setWidth(74); java.lang.String str14 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-2) + "'", int11 == (-2)); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-" + "'", str14, "-"); }
public void test0439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0439"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.setArgName("--"); helpFormatter0.defaultArgName = ""; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); }
public void test0440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0440"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.defaultLongOptPrefix = "hi!"; helpFormatter0.setWidth((int) (short) 0); int int5 = helpFormatter0.getDescPadding(); int int6 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1); }
public void test0441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0441"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); helpFormatter0.setWidth((int) '4'); int int11 = helpFormatter0.defaultWidth; helpFormatter0.setNewLine("hi!"); java.lang.StringBuffer stringBuffer14 = null; org.apache.commons.cli.Options options16 = null; try { java.lang.StringBuffer stringBuffer19 = helpFormatter0.renderOptions(stringBuffer14, (int) '#', options16, (int) (short) 10, (int) (byte) 100); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52); }
public void test0442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0442"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); java.lang.String str7 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setNewLine("usage: "); helpFormatter0.setOptPrefix(" "); java.lang.String str13 = helpFormatter0.createPadding((int) ' '); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                " + "'", str13, "                "); }
public void test0443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0443"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.Options options5 = null; try { helpFormatter0.printHelp("                          ", options5, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "usage: " + "'", str3, "usage: "); }
public void test0444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0444"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; java.lang.String str9 = helpFormatter0.defaultArgName; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("usage:", options11, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); }
public void test0445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0445"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); helpFormatter0.setLongOptSeparator(" "); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter6.getLeftPadding(); helpFormatter6.defaultNewLine = ""; helpFormatter6.defaultDescPad = '4'; helpFormatter6.setNewLine(""); int int17 = helpFormatter6.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator18 = helpFormatter6.optionComparator; helpFormatter0.setOptionComparator(comparator18); helpFormatter0.setLongOptPrefix("  "); helpFormatter0.setWidth((-2)); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertNotNull(comparator18); }
public void test0446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0446"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.rtrim("                                                 "); org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp(52, "                                                  ", "  ", options11, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0447"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); helpFormatter0.defaultArgName = "hi!"; java.lang.String str9 = helpFormatter0.createPadding((int) (byte) 10); int int10 = helpFormatter0.defaultDescPad; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "     " + "'", str9, "     "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10); }
public void test0448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0448"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); java.lang.String str3 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setWidth(0); helpFormatter0.defaultNewLine = "     "; java.lang.String str9 = helpFormatter0.createPadding(0); helpFormatter0.setDescPadding(74); helpFormatter0.defaultArgName = "  "; org.junit.Assert.assertEquals("'" + str3 + "' != '" + " " + "'", str3, " "); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test0449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0449"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.defaultLeftPad = 10; java.lang.String str6 = helpFormatter0.defaultSyntaxPrefix; java.lang.String str7 = helpFormatter0.getOptPrefix(); java.io.PrintWriter printWriter8 = null; try { helpFormatter0.printWrapped(printWriter8, (-2), "usage:"); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -2"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "usage: " + "'", str6, "usage: "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-" + "'", str7, "-"); }
public void test0450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0450"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.defaultLeftPad = (short) 10; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printHelp(100, "", "                ", options15, "     ", false); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); }
public void test0451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0451"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getArgName(); helpFormatter0.setDescPadding(0); helpFormatter0.defaultDescPad = (short) 100; java.util.Comparator comparator14 = helpFormatter0.optionComparator; java.lang.String str15 = helpFormatter0.getNewLine(); helpFormatter0.defaultSyntaxPrefix = ""; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); }
public void test0452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0452"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; helpFormatter0.setArgName("--"); org.apache.commons.cli.HelpFormatter helpFormatter7 = new org.apache.commons.cli.HelpFormatter(); int int8 = helpFormatter7.getLeftPadding(); helpFormatter7.defaultNewLine = ""; helpFormatter7.setDescPadding(10); helpFormatter7.setSyntaxPrefix(" "); int int15 = helpFormatter7.defaultLeftPad; helpFormatter7.setLeftPadding(1); java.util.Comparator comparator18 = helpFormatter7.optionComparator; helpFormatter0.setOptionComparator(comparator18); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertNotNull(comparator18); }
public void test0453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0453"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); helpFormatter0.setArgName("hi!"); java.io.PrintWriter printWriter9 = null; try { helpFormatter0.printWrapped(printWriter9, (int) (short) 0, (int) (short) 0, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); }
public void test0454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0454"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.lang.String str13 = helpFormatter0.defaultNewLine; java.lang.String str14 = helpFormatter0.getLongOptPrefix(); int int15 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, ""); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); }
public void test0455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0455"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str7 = helpFormatter0.getNewLine(); java.lang.String str8 = helpFormatter0.defaultLongOptPrefix; java.lang.String str9 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, ""); }
public void test0456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0456"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); int int3 = helpFormatter0.defaultLeftPad; java.lang.String str5 = helpFormatter0.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter6 = new org.apache.commons.cli.HelpFormatter(); int int7 = helpFormatter6.getLeftPadding(); helpFormatter6.defaultNewLine = ""; helpFormatter6.defaultDescPad = '4'; helpFormatter6.setNewLine(""); int int17 = helpFormatter6.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator18 = helpFormatter6.optionComparator; helpFormatter0.setOptionComparator(comparator18); org.apache.commons.cli.Options options23 = null; try { helpFormatter0.printHelp((int) (short) 10, "hi!", "                                                  ", options23, "--"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                                                 " + "'", str5, "                                                 "); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1); org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1)); org.junit.Assert.assertNotNull(comparator18); }
public void test0457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0457"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; helpFormatter0.defaultDescPad = 0; org.apache.commons.cli.HelpFormatter helpFormatter8 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator9 = helpFormatter8.optionComparator; int int10 = helpFormatter8.getLeftPadding(); int int11 = helpFormatter8.defaultLeftPad; java.lang.String str13 = helpFormatter8.createPadding((int) 'a'); org.apache.commons.cli.HelpFormatter helpFormatter14 = new org.apache.commons.cli.HelpFormatter(); int int15 = helpFormatter14.getLeftPadding(); helpFormatter14.defaultNewLine = ""; helpFormatter14.defaultDescPad = '4'; helpFormatter14.setNewLine(""); int int25 = helpFormatter14.findWrapPos("\n", (int) ' ', 3); java.util.Comparator comparator26 = helpFormatter14.optionComparator; helpFormatter8.setOptionComparator(comparator26); helpFormatter0.setOptionComparator(comparator26); int int29 = helpFormatter0.getLeftPadding(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertNotNull(comparator9); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                 " + "'", str13, "                                                 "); org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1); org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1)); org.junit.Assert.assertNotNull(comparator26); org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1); }
public void test0458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0458"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; int int2 = helpFormatter0.getWidth(); java.lang.String str3 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptSeparator("                                                 "); java.lang.String str7 = helpFormatter0.createPadding((int) (byte) 100); org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                  " + "'", str7, "                                                  "); }
public void test0459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0459"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str7 = helpFormatter0.getNewLine(); java.lang.String str8 = helpFormatter0.defaultNewLine; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, ""); }
public void test0460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0460"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); java.util.Comparator comparator4 = helpFormatter0.optionComparator; java.lang.String str5 = helpFormatter0.defaultOptPrefix; helpFormatter0.defaultWidth = (short) 0; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertNotNull(comparator4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-" + "'", str5, "-"); }
public void test0461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0461"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.defaultLeftPad; helpFormatter0.defaultLongOptPrefix = ""; helpFormatter0.setWidth(0); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0462"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultSyntaxPrefix; helpFormatter0.setSyntaxPrefix("arg"); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "usage: " + "'", str12, "usage: "); }
public void test0463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0463"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.defaultSyntaxPrefix; int int2 = helpFormatter0.getWidth(); helpFormatter0.setDescPadding((int) '4'); org.apache.commons.cli.Options options7 = null; try { helpFormatter0.printHelp(" ", "", options7, "arg", false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str1 + "' != '" + "usage: " + "'", str1, "usage: "); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 74 + "'", int2 == 74); }
public void test0464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0464"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getLongOptPrefix(); java.util.Comparator comparator10 = helpFormatter0.optionComparator; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--" + "'", str9, "--"); org.junit.Assert.assertNotNull(comparator10); }
public void test0465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0465"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); int int13 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertTrue("'" + int13 + "' != '" + 74 + "'", int13 == 74); }
public void test0466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0466"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultDescPad = 'a'; java.lang.String str10 = helpFormatter0.defaultNewLine; int int14 = helpFormatter0.findWrapPos("--", 0, (int) (short) 0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, ""); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0); }
public void test0467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0467"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.defaultWidth; java.util.Comparator comparator9 = helpFormatter0.optionComparator; java.lang.StringBuffer stringBuffer10 = null; try { java.lang.StringBuffer stringBuffer14 = helpFormatter0.renderWrappedText(stringBuffer10, 0, 0, "     "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); org.junit.Assert.assertNotNull(comparator9); }
public void test0468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0468"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultArgName; java.lang.String str3 = helpFormatter0.defaultNewLine; helpFormatter0.setDescPadding((int) ' '); java.io.PrintWriter printWriter6 = null; try { helpFormatter0.printWrapped(printWriter6, (int) (short) 100, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n"); }
public void test0469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0469"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); java.lang.String str13 = helpFormatter0.getSyntaxPrefix(); java.util.Comparator comparator14 = helpFormatter0.optionComparator; org.apache.commons.cli.Options options16 = null; try { helpFormatter0.printHelp("usage:", options16, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "usage: " + "'", str13, "usage: "); org.junit.Assert.assertNotNull(comparator14); }
public void test0470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0470"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.util.Comparator comparator7 = helpFormatter0.getOptionComparator(); java.lang.Class<?> wildcardClass8 = helpFormatter0.getClass(); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertNotNull(comparator7); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test0471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0471"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getLongOptSeparator(); java.lang.String str7 = helpFormatter0.getLongOptSeparator(); int int8 = helpFormatter0.defaultWidth; int int9 = helpFormatter0.defaultWidth; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + " " + "'", str6, " "); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74); org.junit.Assert.assertTrue("'" + int9 + "' != '" + 74 + "'", int9 == 74); }
public void test0472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0472"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.defaultArgName; java.lang.String str7 = helpFormatter0.getLongOptSeparator(); try { int int11 = helpFormatter0.findWrapPos("usage: ", (int) (short) 1, (int) (byte) -1); org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1"); } catch (java.lang.StringIndexOutOfBoundsException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "arg" + "'", str6, "arg"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + " " + "'", str7, " "); }
public void test0473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0473"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); java.lang.String str7 = helpFormatter0.defaultOptPrefix; helpFormatter0.setDescPadding(74); helpFormatter0.setLeftPadding(52); java.lang.String str13 = helpFormatter0.rtrim("-"); java.lang.StringBuffer stringBuffer14 = null; try { java.lang.StringBuffer stringBuffer18 = helpFormatter0.renderWrappedText(stringBuffer14, (int) (short) 1, 100, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-" + "'", str13, "-"); }
public void test0474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0474"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultSyntaxPrefix; int int10 = helpFormatter0.getWidth(); int int11 = helpFormatter0.defaultDescPad; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3); }
public void test0475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0475"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int9 = helpFormatter0.findWrapPos(" ", (int) (byte) 10, (int) '4'); helpFormatter0.defaultOptPrefix = "arg"; int int12 = helpFormatter0.defaultLeftPad; java.lang.String str14 = helpFormatter0.rtrim("\n"); helpFormatter0.setSyntaxPrefix("     "); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, ""); }
public void test0476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0476"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.StringBuffer stringBuffer5 = null; try { java.lang.StringBuffer stringBuffer9 = helpFormatter0.renderWrappedText(stringBuffer5, (int) ' ', (int) (short) -1, "\n"); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0477"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.lang.String str6 = helpFormatter0.getOptPrefix(); java.lang.String str7 = helpFormatter0.getNewLine(); helpFormatter0.defaultOptPrefix = ""; helpFormatter0.setNewLine(""); java.lang.String str12 = helpFormatter0.getArgName(); org.apache.commons.cli.HelpFormatter helpFormatter13 = new org.apache.commons.cli.HelpFormatter(); int int14 = helpFormatter13.getLeftPadding(); helpFormatter13.defaultNewLine = ""; helpFormatter13.setDescPadding(10); java.lang.String str19 = helpFormatter13.defaultNewLine; helpFormatter13.setDescPadding(10); org.apache.commons.cli.HelpFormatter helpFormatter22 = new org.apache.commons.cli.HelpFormatter(); helpFormatter22.setOptPrefix(""); helpFormatter22.defaultLongOptPrefix = ""; java.lang.String str27 = helpFormatter22.defaultLongOptPrefix; java.lang.String str28 = helpFormatter22.getNewLine(); java.util.Comparator comparator29 = helpFormatter22.getOptionComparator(); helpFormatter13.optionComparator = comparator29; helpFormatter0.optionComparator = comparator29; helpFormatter0.defaultOptPrefix = ""; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-" + "'", str6, "-"); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, ""); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, ""); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, ""); org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\n" + "'", str28, "\n"); org.junit.Assert.assertNotNull(comparator29); }
public void test0478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0478"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); helpFormatter0.setNewLine("\n"); org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0479"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str10 = helpFormatter0.rtrim("-"); java.lang.String str11 = helpFormatter0.defaultLongOptPrefix; java.lang.String str12 = helpFormatter0.getOptPrefix(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-" + "'", str10, "-"); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "--" + "'", str11, "--"); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-" + "'", str12, "-"); }
public void test0480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0480"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; int int2 = helpFormatter0.getLeftPadding(); java.lang.String str4 = helpFormatter0.rtrim("-"); java.io.PrintWriter printWriter5 = null; try { helpFormatter0.printUsage(printWriter5, 97, "     "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0481"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.lang.String str5 = helpFormatter0.getNewLine(); helpFormatter0.setWidth(1); java.lang.String str8 = helpFormatter0.getLongOptSeparator(); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + " " + "'", str8, " "); }
public void test0482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0482"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); java.lang.String str8 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setLongOptSeparator("hi!"); int int11 = helpFormatter0.getWidth(); java.lang.String str12 = helpFormatter0.defaultLongOptPrefix; java.util.Comparator comparator13 = helpFormatter0.getOptionComparator(); helpFormatter0.setNewLine("-"); org.apache.commons.cli.Options options18 = null; try { helpFormatter0.printHelp(" ", "usage:", options18, ""); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "--" + "'", str8, "--"); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 74 + "'", int11 == 74); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "--" + "'", str12, "--"); org.junit.Assert.assertNotNull(comparator13); }
public void test0483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0483"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.util.Comparator comparator1 = helpFormatter0.optionComparator; java.lang.String str3 = helpFormatter0.rtrim(""); helpFormatter0.setLongOptSeparator(" "); helpFormatter0.setSyntaxPrefix("usage: "); helpFormatter0.defaultWidth = 100; org.junit.Assert.assertNotNull(comparator1); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, ""); }
public void test0484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0484"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setDescPadding(10); java.util.Comparator comparator6 = helpFormatter0.optionComparator; helpFormatter0.setLongOptPrefix("hi!"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); int int11 = helpFormatter10.getLeftPadding(); java.lang.String str12 = helpFormatter10.getArgName(); helpFormatter10.setSyntaxPrefix("usage: "); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); helpFormatter15.setOptPrefix(""); helpFormatter15.defaultLongOptPrefix = ""; java.lang.String str20 = helpFormatter15.defaultLongOptPrefix; java.lang.String str21 = helpFormatter15.getNewLine(); java.lang.String str22 = helpFormatter15.defaultOptPrefix; helpFormatter15.setDescPadding(74); java.util.Comparator comparator25 = helpFormatter15.getOptionComparator(); helpFormatter10.optionComparator = comparator25; helpFormatter0.optionComparator = comparator25; int int28 = helpFormatter0.defaultLeftPad; java.lang.StringBuffer stringBuffer29 = null; org.apache.commons.cli.Options options31 = null; try { java.lang.StringBuffer stringBuffer34 = helpFormatter0.renderOptions(stringBuffer29, 32, options31, (int) (short) 10, (int) (byte) 1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertNotNull(comparator6); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1); org.junit.Assert.assertEquals("'" + str12 + "' != '" + "arg" + "'", str12, "arg"); org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n"); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, ""); org.junit.Assert.assertNotNull(comparator25); org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1); }
public void test0485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0485"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.defaultWidth = 0; helpFormatter0.setDescPadding((int) 'a'); helpFormatter0.setLongOptSeparator("arg"); int int14 = helpFormatter0.getDescPadding(); org.apache.commons.cli.HelpFormatter helpFormatter15 = new org.apache.commons.cli.HelpFormatter(); int int16 = helpFormatter15.getLeftPadding(); helpFormatter15.defaultNewLine = ""; helpFormatter15.setDescPadding(10); helpFormatter15.setSyntaxPrefix(" "); java.util.Comparator comparator23 = helpFormatter15.getOptionComparator(); helpFormatter0.optionComparator = comparator23; java.lang.String str25 = helpFormatter0.defaultLongOptPrefix; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1); org.junit.Assert.assertNotNull(comparator23); org.junit.Assert.assertEquals("'" + str25 + "' != '" + "--" + "'", str25, "--"); }
public void test0486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0486"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str11 = helpFormatter10.defaultSyntaxPrefix; java.util.Comparator comparator12 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator12; java.lang.String str14 = helpFormatter0.defaultNewLine; java.lang.StringBuffer stringBuffer15 = null; org.apache.commons.cli.Options options17 = null; try { java.lang.StringBuffer stringBuffer20 = helpFormatter0.renderOptions(stringBuffer15, (int) (byte) 100, options17, 10, (int) '#'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertNotNull(comparator12); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n"); }
public void test0487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0487"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.defaultLongOptPrefix = ""; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; java.lang.String str6 = helpFormatter0.getNewLine(); helpFormatter0.setSyntaxPrefix(" "); java.lang.String str9 = helpFormatter0.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter10 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str11 = helpFormatter10.defaultSyntaxPrefix; java.util.Comparator comparator12 = helpFormatter10.optionComparator; helpFormatter0.optionComparator = comparator12; helpFormatter0.defaultDescPad = (byte) 0; org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, ""); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); org.junit.Assert.assertEquals("'" + str11 + "' != '" + "usage: " + "'", str11, "usage: "); org.junit.Assert.assertNotNull(comparator12); }
public void test0488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0488"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str5 = helpFormatter0.defaultLongOptPrefix; int int6 = helpFormatter0.defaultWidth; java.lang.String str7 = helpFormatter0.getLongOptPrefix(); helpFormatter0.setOptPrefix("\n"); org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp("usage:", options11, false); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "--" + "'", str5, "--"); org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "--" + "'", str7, "--"); }
public void test0489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0489"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultDescPad; helpFormatter0.defaultNewLine = " "; java.io.PrintWriter printWriter7 = null; org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp(printWriter7, 100, "-", "                ", options11, 1, 0, "                                                 ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); }
public void test0490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0490"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); helpFormatter0.setOptPrefix(""); helpFormatter0.setWidth(1); java.lang.String str5 = helpFormatter0.getNewLine(); helpFormatter0.defaultLeftPad = (short) 1; java.io.PrintWriter printWriter8 = null; org.apache.commons.cli.Options options10 = null; try { helpFormatter0.printOptions(printWriter8, 52, options10, 1, 52); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n"); }
public void test0491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0491"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; helpFormatter0.defaultDescPad = '4'; helpFormatter0.setNewLine(""); helpFormatter0.setSyntaxPrefix(""); java.io.PrintWriter printWriter10 = null; org.apache.commons.cli.Options options14 = null; try { helpFormatter0.printHelp(printWriter10, (int) (short) 1, "--", "     ", options14, 1, (int) ' ', "                          ", true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0492"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; helpFormatter0.setLongOptPrefix(" "); helpFormatter0.defaultDescPad = (short) 10; helpFormatter0.defaultSyntaxPrefix = ""; helpFormatter0.setLongOptPrefix(""); java.io.PrintWriter printWriter13 = null; org.apache.commons.cli.Options options15 = null; try { helpFormatter0.printOptions(printWriter13, 0, options15, (-2), (-2)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); }
public void test0493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0493"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultNewLine = ""; helpFormatter0.setWidth((int) (byte) 100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test0494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0494"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); java.lang.String str8 = helpFormatter0.rtrim("-"); java.lang.String str9 = helpFormatter0.getLongOptSeparator(); helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.defaultArgName = "\n"; helpFormatter0.defaultNewLine = "usage: "; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-" + "'", str8, "-"); org.junit.Assert.assertEquals("'" + str9 + "' != '" + " " + "'", str9, " "); }
public void test0495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0495"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; int int4 = helpFormatter0.defaultWidth; java.util.Comparator comparator5 = helpFormatter0.getOptionComparator(); helpFormatter0.setArgName("\n"); org.apache.commons.cli.Options options11 = null; try { helpFormatter0.printHelp(0, "", "                ", options11, "arg"); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: cmdLineSyntax not provided"); } catch (java.lang.IllegalArgumentException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74); org.junit.Assert.assertNotNull(comparator5); }
public void test0496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0496"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.getArgName(); helpFormatter0.defaultNewLine = "\n"; helpFormatter0.defaultLeftPad = (byte) -1; helpFormatter0.setLongOptSeparator(""); org.apache.commons.cli.HelpFormatter helpFormatter9 = new org.apache.commons.cli.HelpFormatter(); int int10 = helpFormatter9.getLeftPadding(); helpFormatter9.defaultNewLine = ""; helpFormatter9.setDescPadding(10); helpFormatter9.setSyntaxPrefix(" "); java.util.Comparator comparator17 = helpFormatter9.getOptionComparator(); helpFormatter0.setOptionComparator(comparator17); java.lang.String str19 = helpFormatter0.getLongOptPrefix(); java.io.PrintWriter printWriter20 = null; try { helpFormatter0.printWrapped(printWriter20, (-1), (int) (byte) 100, "                                                  "); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { } org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "arg" + "'", str2, "arg"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1); org.junit.Assert.assertNotNull(comparator17); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "--" + "'", str19, "--"); }
public void test0497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0497"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); int int8 = helpFormatter0.getDescPadding(); java.lang.String str9 = helpFormatter0.getArgName(); helpFormatter0.setDescPadding(0); helpFormatter0.defaultDescPad = (short) 100; java.util.Comparator comparator14 = helpFormatter0.optionComparator; java.lang.String str15 = helpFormatter0.getNewLine(); org.apache.commons.cli.HelpFormatter helpFormatter16 = new org.apache.commons.cli.HelpFormatter(); helpFormatter16.setOptPrefix(""); helpFormatter16.defaultLongOptPrefix = ""; java.lang.String str21 = helpFormatter16.defaultLongOptPrefix; java.lang.String str22 = helpFormatter16.getNewLine(); helpFormatter16.setSyntaxPrefix(" "); java.lang.String str25 = helpFormatter16.defaultSyntaxPrefix; org.apache.commons.cli.HelpFormatter helpFormatter26 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str27 = helpFormatter26.defaultSyntaxPrefix; java.util.Comparator comparator28 = helpFormatter26.optionComparator; helpFormatter16.optionComparator = comparator28; helpFormatter0.setOptionComparator(comparator28); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "arg" + "'", str9, "arg"); org.junit.Assert.assertNotNull(comparator14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, ""); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, ""); org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n"); org.junit.Assert.assertEquals("'" + str25 + "' != '" + " " + "'", str25, " "); org.junit.Assert.assertEquals("'" + str27 + "' != '" + "usage: " + "'", str27, "usage: "); org.junit.Assert.assertNotNull(comparator28); }
public void test0498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0498"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); java.lang.String str1 = helpFormatter0.getArgName(); helpFormatter0.defaultLeftPad = 1; org.junit.Assert.assertEquals("'" + str1 + "' != '" + "arg" + "'", str1, "arg"); }
public void test0499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0499"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); helpFormatter0.defaultNewLine = ""; java.lang.String str4 = helpFormatter0.defaultOptPrefix; java.lang.String str6 = helpFormatter0.rtrim(""); int int7 = helpFormatter0.getDescPadding(); helpFormatter0.defaultWidth = 0; java.util.Comparator comparator10 = helpFormatter0.optionComparator; helpFormatter0.defaultLeftPad = 52; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-" + "'", str4, "-"); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, ""); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3); org.junit.Assert.assertNotNull(comparator10); }
public void test0500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0500"); org.apache.commons.cli.HelpFormatter helpFormatter0 = new org.apache.commons.cli.HelpFormatter(); int int1 = helpFormatter0.getLeftPadding(); java.lang.String str2 = helpFormatter0.defaultLongOptPrefix; java.lang.String str3 = helpFormatter0.getOptPrefix(); int int4 = helpFormatter0.defaultDescPad; helpFormatter0.setOptPrefix(""); java.lang.String str7 = helpFormatter0.defaultArgName; helpFormatter0.defaultDescPad = 0; org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "--" + "'", str2, "--"); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-" + "'", str3, "-"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "arg" + "'", str7, "arg"); }
public void test00() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); int int0 = helpFormatter0.getWidth(); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(74, int0); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); }
public void test01() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setLongOptPrefix("usage: "); assertEquals("usage: ", helpFormatter0.getLongOptPrefix()); }
public void test02() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); int int0 = helpFormatter0.getDescPadding(); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals(3, int0); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); }
public void test03() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setLongOptSeparator("-"); assertEquals("-", helpFormatter0.getLongOptSeparator()); }
public void test04() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setNewLine("w_]i0)k@S"); assertEquals("w_]i0)k@S", helpFormatter0.getNewLine()); }
public void test05() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setArgName("--"); assertEquals("--", helpFormatter0.getArgName()); }
public void test06() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); try { helpFormatter0.printHelp((PrintWriter) null, 3, "-", "-", options0, 3, 3, "-"); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { verifyException("org.apache.commons.cli.HelpFormatter", e); } }
public void test07() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setSyntaxPrefix("arg"); assertEquals("arg", helpFormatter0.getSyntaxPrefix()); }
public void test09() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); try { helpFormatter0.printHelp("-", (Options) null); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { verifyException("org.apache.commons.cli.HelpFormatter", e); } }
public void test10() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getLongOptSeparator(); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(" ", string0); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); }
public void test11() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setWidth((-1079)); assertEquals((-1079), helpFormatter0.defaultWidth); }
public void test12() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setOptPrefix("-"); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(74, helpFormatter0.defaultWidth); }
public void test13() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); int int0 = helpFormatter0.getLeftPadding(); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals(1, int0); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("-", helpFormatter0.getOptPrefix()); }
public void test14() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setDescPadding(3); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(" ", helpFormatter0.getLongOptSeparator()); }
public void test15() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); assertEquals(3, helpFormatter0.defaultDescPad); Options options0 = new Options(); helpFormatter0.printHelp("\n", "--", options0, "--"); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); }
public void test16() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getNewLine(); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("\n", string0); assertEquals("-", helpFormatter0.getOptPrefix()); }
public void test17() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getLongOptPrefix(); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("--", string0); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(74, helpFormatter0.defaultWidth); }
public void test18() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getSyntaxPrefix(); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", string0); assertEquals(1, helpFormatter0.defaultLeftPad); }
public void test19() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.getOptPrefix(); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("-", string0); assertEquals(74, helpFormatter0.defaultWidth); }
public void test20() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); helpFormatter0.setOptionComparator(comparator0); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(74, helpFormatter0.defaultWidth); }
public void test21() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); helpFormatter0.setOptionComparator((Comparator) null); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(74, helpFormatter0.defaultWidth); }
public void test22() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); try { helpFormatter0.printHelp(1, (String) null, (String) null, options0, (String) null, false); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.cli.HelpFormatter", e); } }
public void test23() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); try { helpFormatter0.printHelp(1, "", "", options0, "", true); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.cli.HelpFormatter", e); } }
public void test24() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); helpFormatter0.printHelp(74, "-", " ", options0, "usage: ", false); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); }
public void test25() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); OptionGroup optionGroup0 = new OptionGroup(); Option option0 = new Option("arg", ")o", false, ""); optionGroup0.addOption(option0); Option option1 = new Option("", "arg"); OptionGroup optionGroup1 = optionGroup0.addOption(option1); options0.addOptionGroup(optionGroup1); helpFormatter0.printHelp("arg", options0, true); assertEquals(3, helpFormatter0.defaultDescPad); }
public void test26() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); OptionGroup optionGroup0 = new OptionGroup(); Option option0 = new Option("arg", "org.apache.commons.cli.Util"); OptionGroup optionGroup1 = optionGroup0.addOption(option0); optionGroup0.setRequired(true); options0.addOptionGroup(optionGroup1); try { helpFormatter0.printHelp((-2), "\n", "arg", options0, "usage: ", true); fail("Expecting exception: StringIndexOutOfBoundsException"); } catch(StringIndexOutOfBoundsException e) { } }
public void test28() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); OptionGroup optionGroup0 = new OptionGroup(); Option option0 = new Option("arg", false, "--"); OptionGroup optionGroup1 = optionGroup0.addOption(option0); options0.addOptionGroup(optionGroup1); option0.setArgName(""); option0.setArgs(35); helpFormatter0.printHelp(3, "  ", "--", options0, " ", true); assertEquals(3, helpFormatter0.defaultDescPad); assertEquals(74, helpFormatter0.defaultWidth); }
public void test29() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); Option option0 = new Option("arg", "--"); option0.setArgName("--"); option0.setArgs((-2)); options0.addOption(option0); helpFormatter0.printHelp(882, "--", "usage: ", options0, "usage: ", true); assertEquals("-", helpFormatter0.getOptPrefix()); }
public void test30() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); options0.addOption((String) null, "\n", true, "-"); helpFormatter0.printHelp(3, "--", "usage: ", options0, "--", true); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("--", helpFormatter0.getLongOptPrefix()); assertEquals(74, helpFormatter0.defaultWidth); }
public void test31() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); Option option0 = new Option("q", "usage: "); options0.addOption(option0); options0.addOption("arg", "\n", true, "arg"); helpFormatter0.printHelp(3, "--", "-", options0, "--", true); assertEquals("arg", helpFormatter0.getArgName()); assertEquals(3, helpFormatter0.defaultDescPad); }
public void test32() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); helpFormatter0.setLeftPadding(59); options0.addOption("arg", "\n", true, "arg"); helpFormatter0.printHelp(3, "--", "-", options0, "--", true); assertEquals(59, helpFormatter0.defaultLeftPad); }
public void test33() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); Options options0 = new Options(); Option option0 = new Option("arg", (String) null); options0.addOption(option0); helpFormatter0.printHelp(3, "arg", "arg", options0, "-", true); assertEquals(3, helpFormatter0.defaultDescPad); }
public void test35() throws Throwable { HelpFormatter helpFormatter0 = new HelpFormatter(); String string0 = helpFormatter0.rtrim((String) null); assertEquals(3, helpFormatter0.defaultDescPad); assertNull(string0); assertEquals(" ", helpFormatter0.getLongOptSeparator()); assertEquals("usage: ", helpFormatter0.getSyntaxPrefix()); assertEquals(1, helpFormatter0.defaultLeftPad); assertEquals(74, helpFormatter0.defaultWidth); assertEquals("-", helpFormatter0.getOptPrefix()); assertEquals("arg", helpFormatter0.getArgName()); assertEquals("--", helpFormatter0.getLongOptPrefix()); }
