public void test00() throws Throwable { Class<Boolean> class0 = Boolean.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class0); assertTrue(boolean0); }
public void test01() throws Throwable { Class<Float> class0 = Float.TYPE; Class<Character> class1 = Character.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertTrue(boolean0); }
public void test02() throws Throwable { String string0 = ClassUtils.getPackageCanonicalName("L;"); assertEquals("", string0); }
public void test03() throws Throwable { Class<?> class0 = ClassUtils.getClass("short[][]"); assertFalse(class0.isInterface()); }
public void test04() throws Throwable { String string0 = ClassUtils.getShortCanonicalName("[LRwX:;"); assertEquals("RwX:[]", string0); }
public void test05() throws Throwable { Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1); boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0); assertFalse(boolean0); }
public void test06() throws Throwable { ClassUtils classUtils0 = new ClassUtils(); String string0 = ClassUtils.getShortClassName((Object) classUtils0, "."); assertEquals("ClassUtils", string0); }
public void test07() throws Throwable { ClassLoader classLoader0 = ClassLoader.getSystemClassLoader(); try { ClassUtils.getClass(classLoader0, "."); fail("Expecting exception: ClassNotFoundException"); } catch(ClassNotFoundException e) { } }
public void test08() throws Throwable { String string0 = ClassUtils.getShortClassName((Object) null, (String) null); assertNull(string0); }
public void test09() throws Throwable { Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 4); String string0 = ClassUtils.getShortClassName(classArray0[0]); assertEquals("", string0); }
public void test10() throws Throwable { String string0 = ClassUtils.getShortClassName((String) null); assertEquals("", string0); }
public void test11() throws Throwable { String string0 = ClassUtils.getShortClassName(""); assertEquals("", string0); }
public void test12() throws Throwable { String string0 = ClassUtils.getShortClassName("[LMwX3:;"); assertEquals("MwX3:[]", string0); }
public void test13() throws Throwable { String string0 = ClassUtils.getShortCanonicalName("["); assertEquals("][]", string0); }
public void test14() throws Throwable { String string0 = ClassUtils.getShortClassName("[L"); assertEquals("L[]", string0); }
public void test15() throws Throwable { String string0 = ClassUtils.getShortClassName("[S"); assertEquals("short[]", string0); }
public void test16() throws Throwable { String string0 = ClassUtils.getShortCanonicalName("ibviY2TNZO.$xo"); assertEquals(".xo", string0); }
public void test17() throws Throwable { ClassUtils classUtils0 = new ClassUtils(); String string0 = ClassUtils.getPackageName((Object) classUtils0, "$"); assertEquals("org.apache.commons.lang3", string0); }
public void test18() throws Throwable { String string0 = ClassUtils.getPackageName((Object) null, "The stripAccents(String) method is not supported until Java 1.6"); assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0); }
public void test19() throws Throwable { String string0 = ClassUtils.getPackageName((Class<?>) null); assertEquals("", string0); }
public void test20() throws Throwable { String string0 = ClassUtils.getPackageCanonicalName((String) null); assertEquals("", string0); }
public void test21() throws Throwable { String string0 = ClassUtils.getPackageName(""); assertEquals("", string0); }
public void test22() throws Throwable { String string0 = ClassUtils.getPackageName("[boolean"); assertEquals("", string0); }
public void test23() throws Throwable { String string0 = ClassUtils.getPackageName("L"); assertEquals("", string0); }
public void test24() throws Throwable { Class<Float> class0 = Float.class; List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0); assertNotNull(list0); assertFalse(list0.isEmpty()); }
public void test25() throws Throwable { List<Class<?>> list0 = ClassUtils.getAllSuperclasses((Class<?>) null); assertNull(list0); }
public void test26() throws Throwable { Class<Short> class0 = Short.class; List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0); List<String> list1 = ClassUtils.convertClassesToClassNames(list0); assertNotNull(list1); assertEquals(2, list1.size()); }
public void test27() throws Throwable { List<Class<?>> list0 = ClassUtils.getAllInterfaces((Class<?>) null); assertNull(list0); }
public void test28() throws Throwable { List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses((List<String>) null); assertNull(list0); }
public void test29() throws Throwable { List<String> list0 = ClassUtils.convertClassesToClassNames((List<Class<?>>) null); assertNull(list0); }
public void test30() throws Throwable { LinkedList<String> linkedList0 = new LinkedList<String>(); linkedList0.add("_r:.hOQJ]=Uj+]Sy|"); List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0); List<String> list1 = ClassUtils.convertClassesToClassNames(list0); assertEquals(1, list1.size()); }
public void test31() throws Throwable { Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1); boolean boolean0 = ClassUtils.isAssignable(classArray0, (Class<?>[]) null); assertFalse(boolean0); }
public void test32() throws Throwable { boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null); assertTrue(boolean0); }
public void test33() throws Throwable { Class<String> class0 = String.class; Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1); classArray0[0] = class0; boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0); assertTrue(boolean0); }
public void test34() throws Throwable { Class<Character> class0 = Character.TYPE; boolean boolean0 = ClassUtils.isAssignable((Class<?>) null, class0, false); assertFalse(boolean0); }
public void test35() throws Throwable { Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 8); Class<Object> class0 = Object.class; boolean boolean0 = ClassUtils.isAssignable(classArray0[3], class0, true); assertTrue(boolean0); }
public void test36() throws Throwable { Class<Long> class0 = Long.TYPE; Class<Byte> class1 = Byte.TYPE; boolean boolean0 = ClassUtils.isAssignable(class1, class0, false); assertTrue(boolean0); }
public void test37() throws Throwable { Class<Double> class0 = Double.TYPE; Class<Double> class1 = Double.class; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertTrue(boolean0); }
public void test38() throws Throwable { Class<Object> class0 = Object.class; Class<Long> class1 = Long.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertFalse(boolean0); }
public void test39() throws Throwable { Class<Integer> class0 = Integer.class; Class<Double> class1 = Double.class; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertFalse(boolean0); }
public void test40() throws Throwable { Class<Double> class0 = Double.TYPE; Class<Double> class1 = Double.class; boolean boolean0 = ClassUtils.isAssignable(class0, class1, false); assertFalse(boolean0); }
public void test41() throws Throwable { Class<Integer> class0 = Integer.class; Class<Float> class1 = Float.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertTrue(boolean0); }
public void test42() throws Throwable { Class<Integer> class0 = Integer.class; Class<Long> class1 = Long.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertTrue(boolean0); }
public void test43() throws Throwable { Class<Character> class0 = Character.TYPE; Class<Integer> class1 = Integer.TYPE; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertFalse(boolean0); }
public void test44() throws Throwable { Class<Double> class0 = Double.TYPE; Class<Integer> class1 = Integer.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertTrue(boolean0); }
public void test45() throws Throwable { Class<Long> class0 = Long.class; Class<Float> class1 = Float.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertTrue(boolean0); }
public void test46() throws Throwable { Class<Double> class0 = Double.TYPE; Class<Long> class1 = Long.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertTrue(boolean0); }
public void test47() throws Throwable { Class<Short> class0 = Short.TYPE; Class<Long> class1 = Long.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertFalse(boolean0); }
public void test48() throws Throwable { Class<Integer> class0 = Integer.TYPE; Class<Boolean> class1 = Boolean.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertFalse(boolean0); }
public void test49() throws Throwable { Class<Double> class0 = Double.TYPE; Class<Short> class1 = Short.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertFalse(boolean0); }
public void test50() throws Throwable { Class<Float> class0 = Float.TYPE; Class<Boolean> class1 = Boolean.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, false); assertFalse(boolean0); }
public void test51() throws Throwable { Class<Integer> class0 = Integer.TYPE; Class<Character> class1 = Character.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertTrue(boolean0); }
public void test52() throws Throwable { Class<Character> class0 = Character.TYPE; Class<Long> class1 = Long.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, false); assertTrue(boolean0); }
public void test53() throws Throwable { Class<Character> class0 = Character.class; Class<Double> class1 = Double.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertTrue(boolean0); }
public void test54() throws Throwable { Class<Boolean> class0 = Boolean.TYPE; Class<Character> class1 = Character.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertFalse(boolean0); }
public void test55() throws Throwable { Class<Float> class0 = Float.TYPE; Class<Short> class1 = Short.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertTrue(boolean0); }
public void test56() throws Throwable { Class<Short> class0 = Short.class; Class<Integer> class1 = Integer.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertTrue(boolean0); }
public void test57() throws Throwable { Class<Short> class0 = Short.TYPE; Class<Long> class1 = Long.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertTrue(boolean0); }
public void test58() throws Throwable { Class<Boolean> class0 = Boolean.TYPE; Class<Short> class1 = Short.TYPE; boolean boolean0 = ClassUtils.isAssignable(class1, class0, false); assertFalse(boolean0); }
public void test59() throws Throwable { Class<Double> class0 = Double.TYPE; Class<Short> class1 = Short.TYPE; boolean boolean0 = ClassUtils.isAssignable(class1, class0, false); assertTrue(boolean0); }
public void test60() throws Throwable { Class<Byte> class0 = Byte.TYPE; Class<Short> class1 = Short.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, false); assertTrue(boolean0); }
public void test61() throws Throwable { Class<Integer> class0 = Integer.TYPE; Class<Byte> class1 = Byte.TYPE; boolean boolean0 = ClassUtils.isAssignable(class1, class0, false); assertTrue(boolean0); }
public void test62() throws Throwable { Class<Byte> class0 = Byte.TYPE; Class<Float> class1 = Float.TYPE; boolean boolean0 = ClassUtils.isAssignable(class0, class1, true); assertTrue(boolean0); }
public void test63() throws Throwable { Class<Character> class0 = Character.TYPE; Class<Byte> class1 = Byte.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertFalse(boolean0); }
public void test64() throws Throwable { Class<Double> class0 = Double.TYPE; Class<Byte> class1 = Byte.class; boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); assertTrue(boolean0); }
public void test65() throws Throwable { Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 14); Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0); assertEquals(14, classArray1.length); }
public void test66() throws Throwable { Class<Double> class0 = Double.class; Class<?> class1 = ClassUtils.primitiveToWrapper(class0); assertFalse(class1.isAnnotation()); }
public void test67() throws Throwable { Class<?>[] classArray0 = ClassUtils.primitivesToWrappers((Class<?>[]) null); assertNull(classArray0); }
public void test68() throws Throwable { Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 0); Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0); assertEquals(0, classArray1.length); }
public void test69() throws Throwable { Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 2); Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0); assertEquals(2, classArray1.length); }
public void test70() throws Throwable { Class<?>[] classArray0 = ClassUtils.wrappersToPrimitives((Class<?>[]) null); assertNull(classArray0); }
public void test71() throws Throwable { Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 0); Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0); assertEquals(0, classArray1.length); }
public void test72() throws Throwable { Class<?> class0 = ClassUtils.getClass("org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle", true); boolean boolean0 = ClassUtils.isInnerClass(class0); assertTrue(boolean0); }
public void test73() throws Throwable { boolean boolean0 = ClassUtils.isInnerClass((Class<?>) null); assertFalse(boolean0); }
public void test74() throws Throwable { Class<Object> class0 = Object.class; boolean boolean0 = ClassUtils.isInnerClass(class0); assertFalse(boolean0); }
public void test75() throws Throwable { Class<?> class0 = ClassUtils.getClass("double"); assertFalse(class0.isEnum()); }
public void test76() throws Throwable { // Undeclared exception! try { ClassUtils.getClass((String) null); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { // // className must not be null. // verifyException("org.apache.commons.lang3.ClassUtils", e); } }
public void test77() throws Throwable { try { ClassUtils.getClass("[]"); fail("Expecting exception: ClassNotFoundException"); } catch(ClassNotFoundException e) { } }
public void test78() throws Throwable { Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1); Class<?>[] classArray1 = ClassUtils.toClass(classArray0); assertNotNull(classArray1); assertEquals(1, classArray1.length); }
public void test79() throws Throwable { Class<?>[] classArray0 = ClassUtils.toClass((Object[]) null); assertNull(classArray0); }
public void test80() throws Throwable { Object[] objectArray0 = new Object[0]; Class<?>[] classArray0 = ClassUtils.toClass(objectArray0); assertEquals(0, classArray0.length); }
public void test81() throws Throwable { Class<String> class0 = String.class; Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1); classArray0[0] = class0; Class<?>[] classArray1 = ClassUtils.toClass(classArray0); assertEquals(1, classArray1.length); }
public void test82() throws Throwable { ClassUtils classUtils0 = new ClassUtils(); String string0 = ClassUtils.getShortCanonicalName((Object) classUtils0, "$"); assertEquals("ClassUtils", string0); }
public void test83() throws Throwable { String string0 = ClassUtils.getShortCanonicalName((Object) null, "The stripAccents(String) method is not supported until Java 1.6"); assertEquals("The stripAccents(String) method is not supported until Java 1.6", string0); }
public void test84() throws Throwable { Class<String> class0 = String.class; String string0 = ClassUtils.getShortCanonicalName(class0); assertEquals("String", string0); }
public void test85() throws Throwable { String string0 = ClassUtils.getShortCanonicalName((Class<?>) null); assertEquals("", string0); }
public void test86() throws Throwable { ClassUtils classUtils0 = new ClassUtils(); String string0 = ClassUtils.getPackageCanonicalName((Object) classUtils0, "."); assertEquals("org.apache.commons.lang3", string0); }
public void test87() throws Throwable { String string0 = ClassUtils.getPackageCanonicalName((Object) null, " in an array of "); assertEquals(" in an array of ", string0); }
public void test88() throws Throwable { Class<Double> class0 = Double.class; String string0 = ClassUtils.getPackageCanonicalName(class0); assertEquals("java.lang", string0); }
public void test89() throws Throwable { Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 1); String string0 = ClassUtils.getPackageCanonicalName(classArray0[0]); assertEquals("", string0); }
public void test90() throws Throwable { String string0 = ClassUtils.getShortCanonicalName("[L"); assertEquals("][]", string0); }
public void test91() throws Throwable { // Undeclared exception! try { ClassUtils.getShortCanonicalName("[]"); fail("Expecting exception: NullPointerException"); } catch(NullPointerException e) { } }
