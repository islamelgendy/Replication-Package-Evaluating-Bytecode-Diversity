public void test001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test001"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(10.0f, (float) 10L, (int) (byte) 0); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test002"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = null; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation1 = null; // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation0, rotation1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test003"); double[] doubleArray1 = new double[] { (byte) 1 }; double[] doubleArray2 = new double[] {}; boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray1, doubleArray2); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection4 = null; double[] doubleArray6 = new double[] { 0 }; double[] doubleArray8 = new double[] { 0 }; double[] doubleArray10 = new double[] { 0 }; double[] doubleArray12 = new double[] { 0 }; double[] doubleArray14 = new double[] { 0 }; double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray1, orderDirection4, doubleArray15); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray15, (-6.053272382792838d)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 5x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray15); }
public void test004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test004"); double[] doubleArray1 = new double[] { (byte) 1 }; double[] doubleArray2 = new double[] {}; boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray1, doubleArray2); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection4 = null; double[] doubleArray6 = new double[] { 0 }; double[] doubleArray8 = new double[] { 0 }; double[] doubleArray10 = new double[] { 0 }; double[] doubleArray12 = new double[] { 0 }; double[] doubleArray14 = new double[] { 0 }; double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray1, orderDirection4, doubleArray15); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation18 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray15, (double) '#'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 5x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray15); }
public void test005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test005"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder85 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray86 = rotation84.getAngles(rotationOrder85); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); }
public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); double[] doubleArray5 = new double[] { (short) 1, (-1.0d), (byte) 1, 100, 32 }; double[] doubleArray11 = new double[] { (short) 1, (-1.0d), (byte) 1, 100, 32 }; double[] doubleArray17 = new double[] { (short) 1, (-1.0d), (byte) 1, 100, 32 }; double[] doubleArray23 = new double[] { (short) 1, (-1.0d), (byte) 1, 100, 32 }; double[][] doubleArray24 = new double[][] { doubleArray5, doubleArray11, doubleArray17, doubleArray23 }; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray24, (double) 1079574538L); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 4x5 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 1.0, 100.0, 32.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 1.0, 100.0, 32.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, -1.0, 1.0, 100.0, 32.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, -1.0, 1.0, 100.0, 32.0]"); org.junit.Assert.assertNotNull(doubleArray24); }
public void test007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test007"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 3628800.0d, (double) (byte) 1, 0.6702668260599606d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test008"); double[] doubleArray3 = new double[] { (byte) 10, 10.0d, (-0.8414709848078965d) }; double[][] doubleArray4 = new double[][] { doubleArray3 }; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray4, (double) (-1)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 1x3 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0, 10.0, -0.8414709848078965]"); org.junit.Assert.assertNotNull(doubleArray4); }
public void test009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test009"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 10, (double) ' ', 9.999999999999998d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test010"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, (double) 100, (double) 32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation85.applyInverseTo(vector3D92); double double94 = vector3D92.getX(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); }
public void test011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test011"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, (-0.7853981633974483d)); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test012"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D30.scalarMultiply(0.6244726102307315d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector86); }
public void test013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test013"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) 10.0f, (double) 35.0f); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double12 = vector3D8.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double13 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D5, vector3D11); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double23 = vector3D19.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double24 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D16, vector3D22); boolean boolean25 = vector3D16.isInfinite(); double double26 = vector3D5.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math.geometry.Space space27 = vector3D16.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double34 = vector3D30.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D33); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double41 = vector3D37.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D40); double double42 = vector3D40.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double49 = vector3D45.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D48); double double50 = vector3D48.getDelta(); double double51 = vector3D40.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D48); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D54, vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double72 = vector3D68.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D71); double double73 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D65, vector3D71); boolean boolean74 = vector3D65.isInfinite(); double double75 = vector3D54.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = vector3D65.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double83 = vector3D79.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = vector3D76.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = vector3D40.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D84); double double86 = vector3D33.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D16, vector3D33); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation87.revert(); double double89 = rotation88.getQ1(); double double90 = rotation88.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation88.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, (double) 100, (double) 32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = rotation88.applyInverseTo(vector3D95); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector97 = vector3D2.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D96); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(space27); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.7345682747147468d + "'", double42 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.7345682747147468d + "'", double50 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0000000000000002d + "'", double86 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertNotNull(vector3D96); org.junit.Assert.assertNotNull(euclidean3DVector97); }
public void test014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test014"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double16 = vector3D12.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D9, vector3D15); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D20, vector3D26); boolean boolean29 = vector3D20.isInfinite(); double double30 = vector3D9.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.Space space31 = vector3D20.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = vector3D44.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); double double55 = vector3D44.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double65 = vector3D61.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D64); double double66 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D58, vector3D64); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double76 = vector3D72.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D75); double double77 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D69, vector3D75); boolean boolean78 = vector3D69.isInfinite(); double double79 = vector3D58.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D69); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = vector3D69.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double87 = vector3D83.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D80.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = vector3D44.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D88); double double90 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D88); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D37); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector93 = vector3D37.scalarMultiply(100.0d); double double94 = vector3D37.getNormSq(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector95 = vector3D2.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(space31); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.7345682747147468d + "'", double46 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0000000000000002d + "'", double90 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector93); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0000000000000002d + "'", double94 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector95); }
public void test015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test015"); double[] doubleArray6 = new double[] { 0.99999994f, (-1.0f), (-0.428182669496151d), 7.6293945E-6f, 1.791759469228055d, 30 }; double[] doubleArray13 = new double[] { 0.99999994f, (-1.0f), (-0.428182669496151d), 7.6293945E-6f, 1.791759469228055d, 30 }; double[][] doubleArray14 = new double[][] { doubleArray6, doubleArray13 }; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray14, 100.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 2x6 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.9999999403953552, -1.0, -0.428182669496151, 7.62939453125E-6, 1.791759469228055, 30.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.9999999403953552, -1.0, -0.428182669496151, 7.62939453125E-6, 1.791759469228055, 30.0]"); org.junit.Assert.assertNotNull(doubleArray14); }
public void test016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test016"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = vector3D5.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double18 = vector3D14.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D17); double double19 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D11, vector3D17); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double29 = vector3D25.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D28); double double30 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D22, vector3D28); boolean boolean31 = vector3D22.isInfinite(); double double32 = vector3D11.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double33 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D8, vector3D22); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D5, vector3D22); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double42 = vector3D38.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double52 = vector3D48.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); double double53 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D45, vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double63 = vector3D59.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); double double64 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D56, vector3D62); boolean boolean65 = vector3D56.isInfinite(); double double66 = vector3D45.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double67 = vector3D38.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double79 = vector3D75.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D78); double double80 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D72, vector3D78); double double81 = vector3D69.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D72); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, vector3D38, (double) (-1.0f), vector3D69); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D5, vector3D82, vector3D83, vector3D84); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7345682747147468d + "'", double7 == 0.7345682747147468d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertTrue("'" + double81 + "' != '" + Double.POSITIVE_INFINITY + "'", double81 == Double.POSITIVE_INFINITY); }
public void test017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test017"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = vector3D12.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = vector3D20.getDelta(); double double23 = vector3D12.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D26, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D37, vector3D43); boolean boolean46 = vector3D37.isInfinite(); double double47 = vector3D26.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = vector3D37.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double55 = vector3D51.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D48.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D12.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D61.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector63 = vector3D56.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, 3.6535299896840334E43d); double double66 = rotation65.getQ2(); double double67 = rotation65.getQ1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = rotation65.applyTo(vector3D68); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7345682747147468d + "'", double14 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7345682747147468d + "'", double22 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0000000000000002d + "'", double58 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.6702668260599606d + "'", double62 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector63); org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.4795218342206279d) + "'", double66 == (-0.4795218342206279d)); org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-0.3078974289323514d) + "'", double67 == (-0.3078974289323514d)); }
public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double26 = vector3D22.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D19, vector3D25); boolean boolean28 = vector3D19.isInfinite(); double double29 = vector3D8.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math.geometry.Space space30 = vector3D19.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double37 = vector3D33.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = vector3D43.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double52 = vector3D48.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); double double53 = vector3D51.getDelta(); double double54 = vector3D43.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double64 = vector3D60.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D57, vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); boolean boolean77 = vector3D68.isInfinite(); double double78 = vector3D57.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = vector3D68.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = vector3D79.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D43.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double89 = vector3D36.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation5.applyInverseTo(vector3D36); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder92 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray93 = rotation5.getAngles(rotationOrder92); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(space30); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.7345682747147468d + "'", double45 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.7345682747147468d + "'", double53 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0000000000000002d + "'", double89 == 1.0000000000000002d); org.junit.Assert.assertNotNull(vector3D91); }
public void test019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test019"); double[] doubleArray1 = new double[] { (byte) 1 }; double[] doubleArray2 = new double[] {}; boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray1, doubleArray2); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection4 = null; double[] doubleArray6 = new double[] { 0 }; double[] doubleArray8 = new double[] { 0 }; double[] doubleArray10 = new double[] { 0 }; double[] doubleArray12 = new double[] { 0 }; double[] doubleArray14 = new double[] { 0 }; double[][] doubleArray15 = new double[][] { doubleArray6, doubleArray8, doubleArray10, doubleArray12, doubleArray14 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray1, orderDirection4, doubleArray15); double[] doubleArray18 = new double[] { (byte) 1 }; double[] doubleArray19 = new double[] {}; boolean boolean20 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray18, doubleArray19); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection21 = null; double[] doubleArray23 = new double[] { 0 }; double[] doubleArray25 = new double[] { 0 }; double[] doubleArray27 = new double[] { 0 }; double[] doubleArray29 = new double[] { 0 }; double[] doubleArray31 = new double[] { 0 }; double[][] doubleArray32 = new double[][] { doubleArray23, doubleArray25, doubleArray27, doubleArray29, doubleArray31 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray18, orderDirection21, doubleArray32); double double34 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray1, doubleArray18); double[] doubleArray36 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray1, 10); double[] doubleArray38 = new double[] { 0.0d }; double[][] doubleArray39 = new double[][] { doubleArray38 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray1, doubleArray39); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation42 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray39, 8.065817517094494E67d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 1x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray39); }
public void test020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test020"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis(); double double96 = rotation94.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation85.applyTo(rotation94); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = rotation85.getAxis(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 6.09767964807105d + "'", double96 == 6.09767964807105d); org.junit.Assert.assertNotNull(rotation97); org.junit.Assert.assertNotNull(vector3D98); }
public void test021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test021"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); double double87 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D79, vector3D85); boolean boolean88 = vector3D79.isInfinite(); double double89 = vector3D68.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = vector3D79.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D65.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = vector3D65.orthogonal(); double double93 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, 2.7681156723791426E13d); java.text.NumberFormat numberFormat96 = null; // The following exception was thrown during execution in test generation try { java.lang.String str97 = vector3D2.toString(numberFormat96); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + Double.POSITIVE_INFINITY + "'", double93 == Double.POSITIVE_INFINITY); }
public void test022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test022"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(101.0d, 2.9074628577456127E58d, 0.0d, 16384.0d, false); }
public void test023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test023"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 2.7681156723791426E13d, 1.151665335034499d, 3.4965075614664802d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test024"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double26 = vector3D22.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D19, vector3D25); boolean boolean28 = vector3D19.isInfinite(); double double29 = vector3D8.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math.geometry.Space space30 = vector3D19.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double37 = vector3D33.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = vector3D43.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double52 = vector3D48.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); double double53 = vector3D51.getDelta(); double double54 = vector3D43.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double64 = vector3D60.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D57, vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); boolean boolean77 = vector3D68.isInfinite(); double double78 = vector3D57.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = vector3D68.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = vector3D79.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D43.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double89 = vector3D36.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation5.applyInverseTo(vector3D36); double double92 = vector3D91.getNormSq(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector94 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = vector3D91.add(0.0d, euclidean3DVector94); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(space30); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.7345682747147468d + "'", double45 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.7345682747147468d + "'", double53 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0000000000000002d + "'", double89 == 1.0000000000000002d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 8.73559866222816E35d + "'", double92 == 8.73559866222816E35d); }
public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 9700L, 1.053671212772351E-8d, (-0.7853981633974483d), (double) 3, false); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray7 = rotation5.getAngles(rotationOrder6); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } }
public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double95 = vector3D91.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D94); double double96 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D88, vector3D94); double double97 = vector3D85.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D88); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = vector3D30.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector99 = vector3D85.normalize(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(vector3D85); org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d); org.junit.Assert.assertTrue("'" + double97 + "' != '" + Double.POSITIVE_INFINITY + "'", double97 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(vector3D98); org.junit.Assert.assertNotNull(euclidean3DVector99); }
public void test027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test027"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double26 = vector3D22.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D19, vector3D25); boolean boolean28 = vector3D19.isInfinite(); double double29 = vector3D8.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math.geometry.Space space30 = vector3D19.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double37 = vector3D33.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = vector3D43.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double52 = vector3D48.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); double double53 = vector3D51.getDelta(); double double54 = vector3D43.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double64 = vector3D60.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D57, vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); boolean boolean77 = vector3D68.isInfinite(); double double78 = vector3D57.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = vector3D68.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = vector3D79.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D43.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double89 = vector3D36.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation5.applyInverseTo(vector3D36); double double92 = vector3D91.getX(); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(space30); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.7345682747147468d + "'", double45 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.7345682747147468d + "'", double53 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0000000000000002d + "'", double89 == 1.0000000000000002d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 9.3464424580843366E17d + "'", double92 == 9.3464424580843366E17d); }
public void test028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test028"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); double double87 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D79, vector3D85); boolean boolean88 = vector3D79.isInfinite(); double double89 = vector3D68.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = vector3D79.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D65.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = vector3D65.orthogonal(); double double93 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, 2.7681156723791426E13d); org.apache.commons.math.geometry.Space space96 = vector3D2.getSpace(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector97 = vector3D2.getZero(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + Double.POSITIVE_INFINITY + "'", double93 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(space96); org.junit.Assert.assertNotNull(euclidean3DVector97); }
public void test029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test029"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, 0.9999999999999998d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test030"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 2.6525285981219316E32d, 3.302190676759448d, 3.141592653589793d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test031"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 2L, (double) '#', 16384.0d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test032"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation85.revert(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation85.getAxis(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(rotation88); org.junit.Assert.assertNotNull(vector3D89); }
public void test033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test033"); double[] doubleArray4 = new double[] { 0.9999999958776927d, 2349.1269600363753d, 2.718281828459045d, 0.8500972684543622d }; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double14 = vector3D10.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D7, vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double25 = vector3D21.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D18, vector3D24); boolean boolean27 = vector3D18.isInfinite(); double double28 = vector3D7.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); org.apache.commons.math.geometry.Space space29 = vector3D18.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double36 = vector3D32.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D35); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double43 = vector3D39.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D42); double double44 = vector3D42.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double51 = vector3D47.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D50); double double52 = vector3D50.getDelta(); double double53 = vector3D42.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D50); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double63 = vector3D59.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); double double64 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D56, vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double74 = vector3D70.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D73); double double75 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D67, vector3D73); boolean boolean76 = vector3D67.isInfinite(); double double77 = vector3D56.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D67); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = vector3D67.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double85 = vector3D81.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = vector3D78.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = vector3D42.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D86); double double88 = vector3D35.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D18, vector3D35); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = rotation89.revert(); double[][] doubleArray91 = rotation90.getMatrix(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray4, doubleArray91); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 4"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.9999999958776927, 2349.1269600363753, 2.718281828459045, 0.8500972684543622]"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(space29); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.7345682747147468d + "'", double44 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.7345682747147468d + "'", double52 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0000000000000002d + "'", double88 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation90); org.junit.Assert.assertNotNull(doubleArray91); }
public void test034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test034"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, (double) 100, (double) 32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation85.applyInverseTo(vector3D92); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) vector3D93); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D93); }
public void test035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test035"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, (double) 157247029); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test036"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis(); double double96 = rotation94.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation85.applyTo(rotation94); double[][] doubleArray98 = rotation97.getMatrix(); double double99 = rotation97.getQ2(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 6.09767964807105d + "'", double96 == 6.09767964807105d); org.junit.Assert.assertNotNull(rotation97); org.junit.Assert.assertNotNull(doubleArray98); org.junit.Assert.assertTrue("'" + double99 + "' != '" + (-6.09767964807105d) + "'", double99 == (-6.09767964807105d)); }
public void test037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test037"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 132.0d, 0.0d, (double) 41L); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test038"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 9700L, 1.053671212772351E-8d, (-0.7853981633974483d), (double) 3, false); double double6 = rotation5.getAngle(); double double7 = rotation5.getQ0(); org.junit.Assert.assertTrue(Double.isNaN(double6)); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9700.0d + "'", double7 == 9700.0d); }
public void test039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test039"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); double double89 = vector3D88.getNorm1(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d); }
public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = rotation5.applyTo(rotation7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D6); }
public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray2 = new double[] { (byte) 1 }; double[] doubleArray3 = new double[] {}; boolean boolean4 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray2, doubleArray3); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection5 = null; double[] doubleArray7 = new double[] { 0 }; double[] doubleArray9 = new double[] { 0 }; double[] doubleArray11 = new double[] { 0 }; double[] doubleArray13 = new double[] { 0 }; double[] doubleArray15 = new double[] { 0 }; double[][] doubleArray16 = new double[][] { doubleArray7, doubleArray9, doubleArray11, doubleArray13, doubleArray15 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray2, orderDirection5, doubleArray16); double[] doubleArray19 = new double[] { (byte) 1 }; double[] doubleArray20 = new double[] {}; boolean boolean21 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray19, doubleArray20); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection22 = null; double[] doubleArray24 = new double[] { 0 }; double[] doubleArray26 = new double[] { 0 }; double[] doubleArray28 = new double[] { 0 }; double[] doubleArray30 = new double[] { 0 }; double[] doubleArray32 = new double[] { 0 }; double[][] doubleArray33 = new double[][] { doubleArray24, doubleArray26, doubleArray28, doubleArray30, doubleArray32 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray19, orderDirection22, doubleArray33); double double35 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray2, doubleArray19); double[] doubleArray37 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray2, 10); double[] doubleArray39 = new double[] { 0.0d }; double[][] doubleArray40 = new double[][] { doubleArray39 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray2, doubleArray40); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException42 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) doubleArray40); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray40, (double) 41L); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 1x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray40); }
public void test042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test042"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double16 = vector3D12.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D9, vector3D15); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D20, vector3D26); boolean boolean29 = vector3D20.isInfinite(); double double30 = vector3D9.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double31 = vector3D2.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D20.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D20.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double43 = vector3D39.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D42); double double44 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D36, vector3D42); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D47, vector3D53); boolean boolean56 = vector3D47.isInfinite(); double double57 = vector3D36.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = vector3D47.negate(); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D47); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector60 = vector3D47.getZero(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation66.getAxis(); double double68 = euclidean3DVector60.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D67); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector60); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0000000065745156d + "'", double68 == 1.0000000065745156d); }
public void test043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test043"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation84.applyTo(rotation91); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder93 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray94 = rotation91.getAngles(rotationOrder93); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertNotNull(rotation92); }
public void test044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test044"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation84.getQ2(); double[][] doubleArray87 = rotation84.getMatrix(); double double88 = rotation84.getQ1(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(doubleArray87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); }
public void test045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test045"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = vector3D12.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = vector3D20.getDelta(); double double23 = vector3D12.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D26, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D37, vector3D43); boolean boolean46 = vector3D37.isInfinite(); double double47 = vector3D26.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = vector3D37.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double55 = vector3D51.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D48.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D12.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D61.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector63 = vector3D56.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, 3.6535299896840334E43d); double double66 = rotation65.getQ2(); double double67 = rotation65.getQ1(); double double68 = rotation65.getQ1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double78 = vector3D74.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D77); double double79 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D71, vector3D77); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double89 = vector3D85.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D88); double double90 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D82, vector3D88); boolean boolean91 = vector3D82.isInfinite(); double double92 = vector3D71.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = vector3D82.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = vector3D82.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation65.applyInverseTo(vector3D94); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7345682747147468d + "'", double14 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7345682747147468d + "'", double22 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0000000000000002d + "'", double58 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.6702668260599606d + "'", double62 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector63); org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.4795218342206279d) + "'", double66 == (-0.4795218342206279d)); org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-0.3078974289323514d) + "'", double67 == (-0.3078974289323514d)); org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-0.3078974289323514d) + "'", double68 == (-0.3078974289323514d)); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertNotNull(vector3D95); }
public void test046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test046"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation84.getQ3(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); }
public void test047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test047"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = vector3D60.getDelta(); double double63 = vector3D52.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double64 = vector3D44.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D44.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D27.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double67 = vector3D44.getNorm(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7345682747147468d + "'", double62 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d); }
public void test048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test048"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; double[] doubleArray4 = new double[] { (byte) 1 }; double[] doubleArray5 = new double[] {}; boolean boolean6 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray4, doubleArray5); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection7 = null; double[] doubleArray9 = new double[] { 0 }; double[] doubleArray11 = new double[] { 0 }; double[] doubleArray13 = new double[] { 0 }; double[] doubleArray15 = new double[] { 0 }; double[] doubleArray17 = new double[] { 0 }; double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray4, orderDirection7, doubleArray18); double[] doubleArray21 = new double[] { (byte) 1 }; double[] doubleArray22 = new double[] {}; boolean boolean23 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray21, doubleArray22); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection24 = null; double[] doubleArray26 = new double[] { 0 }; double[] doubleArray28 = new double[] { 0 }; double[] doubleArray30 = new double[] { 0 }; double[] doubleArray32 = new double[] { 0 }; double[] doubleArray34 = new double[] { 0 }; double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray21, orderDirection24, doubleArray35); double double37 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray4, doubleArray21); double[] doubleArray39 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, 10); double[] doubleArray41 = new double[] { 0.0d }; double[][] doubleArray42 = new double[][] { doubleArray41 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray4, doubleArray42); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException44 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) doubleArray42); org.apache.commons.math.exception.NullArgumentException nullArgumentException45 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) doubleArray42); org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException(localizable0, (java.lang.Object[]) doubleArray42); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray42, 9.332621544395286E157d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 1x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray42); }
public void test049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test049"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.Space space25 = vector3D14.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double32 = vector3D28.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D31); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = vector3D38.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double47 = vector3D43.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double48 = vector3D46.getDelta(); double double49 = vector3D38.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double59 = vector3D55.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D58); double double60 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D52, vector3D58); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double70 = vector3D66.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D69); double double71 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D63, vector3D69); boolean boolean72 = vector3D63.isInfinite(); double double73 = vector3D52.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = vector3D63.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double81 = vector3D77.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D80); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D74.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D77); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = vector3D38.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); double double84 = vector3D31.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D31); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation85.revert(); double double87 = rotation86.getQ1(); double double88 = rotation86.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation86.revert(); double double90 = rotation86.getAngle(); double double91 = rotation86.getQ1(); // The following exception was thrown during execution in test generation try { double double92 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation0, rotation86); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(space25); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.7345682747147468d + "'", double40 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.7345682747147468d + "'", double48 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0000000000000002d + "'", double84 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertNotNull(rotation89); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); }
public void test050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test050"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.079574528E9d, 0.0d, (double) 31, (-1.0d), false); double double6 = rotation5.getQ0(); double double7 = rotation5.getQ1(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.079574528E9d + "'", double6 == 1.079574528E9d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test051"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) (-1023)); double double36 = rotation35.getQ1(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.2196074225483417d + "'", double36 == 0.2196074225483417d); }
public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); double double7 = rotation5.getQ2(); double double8 = rotation5.getQ2(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 6.09767964807105d + "'", double7 == 6.09767964807105d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.09767964807105d + "'", double8 == 6.09767964807105d); }
public void test053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test053"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder86 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray87 = rotation85.getAngles(rotationOrder86); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); }
public void test054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test054"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.6816705556107615d, (double) 1072693249, 6.691673596021348E41d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test055"); double[][] doubleArray0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray0, 0.054831135561607555d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test056"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.3010299956639812d, 3.982478439757621E7d, (double) 0L); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test057"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 10, (double) (byte) 0, 52.0d, (-9.698065313833758E7d), false); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = null; // The following exception was thrown during execution in test generation try { double double7 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation5, rotation6); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test058"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D4 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double11 = vector3D7.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D4, vector3D10); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double22 = vector3D18.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D15, vector3D21); boolean boolean24 = vector3D15.isInfinite(); double double25 = vector3D4.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = vector3D15.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector27 = vector3D1.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); java.lang.Object obj28 = null; boolean boolean29 = vector3D26.equals(obj28); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D26, 0.7345682747147468d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) 1.0795744E9f, vector3D26); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(euclidean3DVector27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); }
public void test059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test059"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D30.scalarMultiply(100.0d); double double87 = vector3D30.getNormSq(); boolean boolean88 = vector3D30.isNaN(); java.text.NumberFormat numberFormat89 = null; // The following exception was thrown during execution in test generation try { java.lang.String str90 = vector3D30.toString(numberFormat89); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0000000000000002d + "'", double87 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); }
public void test060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test060"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = vector3D14.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double32 = vector3D28.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D31); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D25.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = vector3D28.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D39, vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = vector3D53.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D58.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = vector3D61.getDelta(); double double64 = vector3D53.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double65 = vector3D45.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector66 = vector3D45.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = vector3D28.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation0.applyTo(vector3D28); double double69 = rotation0.getAngle(); org.junit.Assert.assertNotNull(rotation0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.7345682747147468d + "'", double55 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.7345682747147468d + "'", double63 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); }
public void test061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test061"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) 32, (double) 10.0f); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D6, vector3D12); boolean boolean15 = vector3D6.isInfinite(); double double16 = vector3D6.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double23 = vector3D19.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double24 = vector3D22.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); double double32 = vector3D30.getDelta(); double double33 = vector3D22.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double43 = vector3D39.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D42); double double44 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D36, vector3D42); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D47, vector3D53); boolean boolean56 = vector3D47.isInfinite(); double double57 = vector3D36.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = vector3D47.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double65 = vector3D61.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D64); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D58.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = vector3D22.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D22); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double79 = vector3D75.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D78); double double80 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D72, vector3D78); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double90 = vector3D86.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D89); double double91 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D83, vector3D89); boolean boolean92 = vector3D83.isInfinite(); double double93 = vector3D72.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = vector3D83.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector95 = vector3D69.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D94); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = vector3D69.orthogonal(); double double97 = vector3D6.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D69); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = vector3D2.add(0.6702668260599606d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D69); double double99 = vector3D98.getZ(); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.6957086881730823d + "'", double16 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.7345682747147468d + "'", double24 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.7345682747147468d + "'", double32 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertNotNull(euclidean3DVector95); org.junit.Assert.assertNotNull(vector3D96); org.junit.Assert.assertTrue("'" + double97 + "' != '" + Double.POSITIVE_INFINITY + "'", double97 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(vector3D98); org.junit.Assert.assertTrue(Double.isNaN(double99)); }
public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; java.text.NumberFormat numberFormat3 = null; java.lang.String str4 = vector3D2.toString(numberFormat3); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException10 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable6, (java.lang.Number) 0, (java.lang.Number) Double.NaN, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException14 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 10L, (java.lang.Number) 0.7345682747147467d, (int) (byte) 1); numberIsTooSmallException10.addSuppressed((java.lang.Throwable) nonMonotonousSequenceException14); java.lang.Throwable[] throwableArray16 = numberIsTooSmallException10.getSuppressed(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) vector3D2, localizable5, (java.lang.Object[]) throwableArray16); double double18 = vector3D2.getNormSq(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = vector3D0.add(2.220446049250313E-16d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D2); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = vector3D2.getZero(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double34 = vector3D30.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = vector3D33.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double42 = vector3D38.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D41); double double43 = vector3D41.getDelta(); double double44 = vector3D33.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D47, vector3D53); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double65 = vector3D61.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D64); double double66 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D58, vector3D64); boolean boolean67 = vector3D58.isInfinite(); double double68 = vector3D47.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D58); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = vector3D58.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double76 = vector3D72.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = vector3D69.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D72); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = vector3D33.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D77); double double79 = vector3D26.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D77); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double83 = vector3D82.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector84 = vector3D77.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = vector3D20.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D82, (double) 1072702979L); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{(NaN); (NaN); (NaN)}" + "'", str4, "{(NaN); (NaN); (NaN)}"); org.junit.Assert.assertNotNull(throwableArray16); org.junit.Assert.assertTrue(Double.isNaN(double18)); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.7345682747147468d + "'", double35 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.7345682747147468d + "'", double43 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0000000000000002d + "'", double79 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.6702668260599606d + "'", double83 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector84); org.junit.Assert.assertNotNull(vector3D85); }
public void test063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test063"); double[] doubleArray1 = new double[] { (byte) 1 }; double[] doubleArray2 = new double[] {}; boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray1, doubleArray2); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray1); double[] doubleArray6 = new double[] { (byte) 1 }; double[] doubleArray7 = new double[] {}; boolean boolean8 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray6, doubleArray7); double[] doubleArray10 = new double[] { (byte) 1 }; double[] doubleArray11 = new double[] {}; boolean boolean12 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray10, doubleArray11); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray10); boolean boolean14 = org.apache.commons.math.util.MathUtils.equals(doubleArray7, doubleArray10); double double15 = org.apache.commons.math.util.MathUtils.distance(doubleArray1, doubleArray10); double double16 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray1); double[] doubleArray18 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray1, (int) (short) 1); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection22 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException24 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 0.9873536182198484d, (java.lang.Number) 4.9E-324d, 1072693249, orderDirection22, false); org.apache.commons.math.exception.util.Localizable localizable25 = null; org.apache.commons.math.exception.util.Localizable localizable26 = null; double[] doubleArray28 = new double[] { (byte) 1 }; double[] doubleArray29 = new double[] {}; boolean boolean30 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray28, doubleArray29); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection31 = null; double[] doubleArray33 = new double[] { 0 }; double[] doubleArray35 = new double[] { 0 }; double[] doubleArray37 = new double[] { 0 }; double[] doubleArray39 = new double[] { 0 }; double[] doubleArray41 = new double[] { 0 }; double[][] doubleArray42 = new double[][] { doubleArray33, doubleArray35, doubleArray37, doubleArray39, doubleArray41 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray28, orderDirection31, doubleArray42); double[] doubleArray45 = new double[] { (byte) 1 }; double[] doubleArray46 = new double[] {}; boolean boolean47 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray45, doubleArray46); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection48 = null; double[] doubleArray50 = new double[] { 0 }; double[] doubleArray52 = new double[] { 0 }; double[] doubleArray54 = new double[] { 0 }; double[] doubleArray56 = new double[] { 0 }; double[] doubleArray58 = new double[] { 0 }; double[][] doubleArray59 = new double[][] { doubleArray50, doubleArray52, doubleArray54, doubleArray56, doubleArray58 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray45, orderDirection48, doubleArray59); double double61 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray28, doubleArray45); double[] doubleArray63 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray28, 10); double[] doubleArray65 = new double[] { 0.0d }; double[][] doubleArray66 = new double[][] { doubleArray65 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray28, doubleArray66); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException68 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable26, (java.lang.Object[]) doubleArray66); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException69 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable25, (java.lang.Object[]) doubleArray66); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray18, orderDirection22, doubleArray66); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation72 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray66, (double) 1079574538L); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 1x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]"); org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]"); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray66); }
public void test064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test064"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation6.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation6.getAxis(); double[][] doubleArray9 = rotation6.getMatrix(); org.apache.commons.math.exception.NullArgumentException nullArgumentException10 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) doubleArray9); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(doubleArray9); }
public void test065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test065"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D10, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); boolean boolean30 = vector3D21.isInfinite(); double double31 = vector3D10.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math.geometry.Space space32 = vector3D21.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = vector3D53.getDelta(); double double56 = vector3D45.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double66 = vector3D62.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); double double67 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D65); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double77 = vector3D73.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); double double78 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D70, vector3D76); boolean boolean79 = vector3D70.isInfinite(); double double80 = vector3D59.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D70.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double88 = vector3D84.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = vector3D81.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = vector3D45.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D89); double double91 = vector3D38.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D89); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation7.applyInverseTo(vector3D38); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector94 = vector3D0.subtract((-1024.0d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.MINUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = vector3D95.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D97 = vector3D96.getZero(); double double98 = vector3D0.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D97); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(space32); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.7345682747147468d + "'", double55 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0000000000000002d + "'", double91 == 1.0000000000000002d); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertNotNull(euclidean3DVector94); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertNotNull(vector3D96); org.junit.Assert.assertNotNull(vector3D97); org.junit.Assert.assertTrue(Double.isNaN(double98)); }
public void test066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test066"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = vector3D60.getDelta(); double double63 = vector3D52.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double64 = vector3D44.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D44.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D27.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double67 = vector3D27.getNormSq(); boolean boolean68 = vector3D27.isInfinite(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7345682747147468d + "'", double62 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0000000000000002d + "'", double67 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); }
public void test067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test067"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis(); double double96 = rotation94.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation85.applyTo(rotation94); double double98 = rotation94.getQ3(); double double99 = rotation94.getQ3(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 6.09767964807105d + "'", double96 == 6.09767964807105d); org.junit.Assert.assertNotNull(rotation97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.0d + "'", double98 == 1.0d); org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.0d + "'", double99 == 1.0d); }
public void test068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test068"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); double double65 = rotation64.getQ1(); double double66 = rotation64.getQ1(); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder67 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray68 = rotation64.getAngles(rotationOrder67); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); }
public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = vector3D60.getDelta(); double double63 = vector3D52.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double64 = vector3D44.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D44.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D27.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector67 = vector3D66.getZero(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7345682747147468d + "'", double62 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(euclidean3DVector67); }
public void test070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test070"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D12, vector3D18); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double30 = vector3D26.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D23, vector3D29); boolean boolean32 = vector3D23.isInfinite(); double double33 = vector3D12.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D23); double double34 = vector3D5.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D23); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D39, vector3D45); double double48 = vector3D36.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D39); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, vector3D5, (double) (-1.0f), vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.crossProduct(vector3D0, vector3D36); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, (double) 157247029L); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = rotation52.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(vector3D50); org.junit.Assert.assertNotNull(rotation53); }
public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D10, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double25 = vector3D21.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = vector3D24.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = vector3D32.getDelta(); double double35 = vector3D24.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double56 = vector3D52.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); double double57 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D49, vector3D55); boolean boolean58 = vector3D49.isInfinite(); double double59 = vector3D38.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = vector3D49.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double67 = vector3D63.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = vector3D60.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.angle(vector3D10, vector3D24); double double71 = vector3D10.getNormInf(); java.lang.String str72 = vector3D10.toString(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D7.crossProduct((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D10); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector75 = vector3D10.scalarMultiply(21.492980144031275d); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.7345682747147468d + "'", double26 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.7345682747147468d + "'", double34 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.6702668260599606d + "'", double71 == 0.6702668260599606d); org.junit.Assert.assertEquals("'" + str72 + "' != '" + "{0.4; 0.62; 0.67}" + "'", str72, "{0.4; 0.62; 0.67}"); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertNotNull(euclidean3DVector75); }
public void test072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test072"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; double[] doubleArray4 = new double[] { (byte) 1 }; double[] doubleArray5 = new double[] {}; boolean boolean6 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray4, doubleArray5); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection7 = null; double[] doubleArray9 = new double[] { 0 }; double[] doubleArray11 = new double[] { 0 }; double[] doubleArray13 = new double[] { 0 }; double[] doubleArray15 = new double[] { 0 }; double[] doubleArray17 = new double[] { 0 }; double[][] doubleArray18 = new double[][] { doubleArray9, doubleArray11, doubleArray13, doubleArray15, doubleArray17 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray4, orderDirection7, doubleArray18); double[] doubleArray21 = new double[] { (byte) 1 }; double[] doubleArray22 = new double[] {}; boolean boolean23 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray21, doubleArray22); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection24 = null; double[] doubleArray26 = new double[] { 0 }; double[] doubleArray28 = new double[] { 0 }; double[] doubleArray30 = new double[] { 0 }; double[] doubleArray32 = new double[] { 0 }; double[] doubleArray34 = new double[] { 0 }; double[][] doubleArray35 = new double[][] { doubleArray26, doubleArray28, doubleArray30, doubleArray32, doubleArray34 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray21, orderDirection24, doubleArray35); double double37 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray4, doubleArray21); double[] doubleArray39 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, 10); double[] doubleArray41 = new double[] { 0.0d }; double[][] doubleArray42 = new double[][] { doubleArray41 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray4, doubleArray42); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException44 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) doubleArray42); org.apache.commons.math.exception.NullArgumentException nullArgumentException45 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) doubleArray42); org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException(localizable0, (java.lang.Object[]) doubleArray42); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray42, 2.3803323798721885d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 1x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray42); }
public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = vector3D60.getDelta(); double double63 = vector3D52.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double64 = vector3D44.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D44.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D27.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = vector3D44.scalarMultiply((-0.8390715290764524d)); double double69 = vector3D44.getNormInf(); boolean boolean70 = vector3D44.isInfinite(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7345682747147468d + "'", double62 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.6702668260599606d + "'", double69 == 0.6702668260599606d); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); }
public void test074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test074"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); double[][] doubleArray65 = rotation64.getMatrix(); double double66 = rotation64.getQ3(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); }
public void test075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test075"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.9873536182198484d, 0.0d, (-9.698065313833758E7d)); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test076"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 10.0f, (java.lang.Number) 20.793438379014997d, (int) (byte) -1); boolean boolean4 = nonMonotonousSequenceException3.getStrict(); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); boolean boolean17 = vector3D8.isInfinite(); double double18 = vector3D8.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double25 = vector3D21.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = vector3D24.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = vector3D32.getDelta(); double double35 = vector3D24.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double56 = vector3D52.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); double double57 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D49, vector3D55); boolean boolean58 = vector3D49.isInfinite(); double double59 = vector3D38.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = vector3D49.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double67 = vector3D63.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = vector3D60.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation70 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D8, vector3D24); double[][] doubleArray71 = rotation70.getMatrix(); org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException((java.lang.Throwable) nonMonotonousSequenceException3, localizable5, (java.lang.Object[]) doubleArray71); org.apache.commons.math.exception.util.ExceptionContext exceptionContext73 = nonMonotonousSequenceException3.getContext(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.6957086881730823d + "'", double18 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.7345682747147468d + "'", double26 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.7345682747147468d + "'", double34 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertNotNull(exceptionContext73); }
public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 1.8189894E-12f, (double) (byte) 0, (double) 2L, 0.9286091799025756d, true); }
public void test078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test078"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double7 = vector3D3.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D6); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double14 = vector3D10.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = vector3D13.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double22 = vector3D18.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = vector3D21.getDelta(); double double24 = vector3D13.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double34 = vector3D30.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D27, vector3D33); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); boolean boolean47 = vector3D38.isInfinite(); double double48 = vector3D27.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = vector3D38.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double56 = vector3D52.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D49.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = vector3D13.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = vector3D6.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double63 = vector3D62.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector64 = vector3D57.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation66 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D62, 3.6535299896840334E43d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(363.7393755555636d, (double) 1.0795744E9f, (double) 0L); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(2.1856605344040803E-4d, vector3D62, 132.0d, vector3D69, (double) (-18), vector3D71, 2349.1269600363753d, vector3D76); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7345682747147468d + "'", double15 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.7345682747147468d + "'", double23 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0000000000000002d + "'", double59 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.6702668260599606d + "'", double63 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector64); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); }
public void test079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test079"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.079574528E9d, 0.0d, (double) 31, (-1.0d), false); double double6 = rotation5.getAngle(); org.junit.Assert.assertTrue(Double.isNaN(double6)); }
public void test080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test080"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-3.8708399E8d), (double) 98L, 0.6405902461256647d, (-4.9E-324d), false); }
public void test081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test081"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 3.332894621696E12d, 1.0365302901348903d, (double) 1.8189894E-12f); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test082"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, (double) 100, (double) 32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation85.applyInverseTo(vector3D92); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation85.applyTo(vector3D94); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D93); }
public void test083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test083"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis(); double double96 = rotation94.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation85.applyTo(rotation94); double double98 = rotation97.getQ3(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 6.09767964807105d + "'", double96 == 6.09767964807105d); org.junit.Assert.assertNotNull(rotation97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + (-1.0d) + "'", double98 == (-1.0d)); }
public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = vector3D12.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = vector3D20.getDelta(); double double23 = vector3D12.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D26, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D37, vector3D43); boolean boolean46 = vector3D37.isInfinite(); double double47 = vector3D26.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = vector3D37.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double55 = vector3D51.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D48.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D12.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D61.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector63 = vector3D56.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, 3.6535299896840334E43d); double double66 = rotation65.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation65.getAxis(); boolean boolean69 = vector3D67.equals((java.lang.Object) 4.624972813284271d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = vector3D67.orthogonal(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7345682747147468d + "'", double14 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7345682747147468d + "'", double22 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0000000000000002d + "'", double58 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.6702668260599606d + "'", double62 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector63); org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.4795218342206279d) + "'", double66 == (-0.4795218342206279d)); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(vector3D70); }
public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; java.text.NumberFormat numberFormat4 = null; java.lang.String str5 = vector3D3.toString(numberFormat4); org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.exception.util.Localizable localizable7 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException11 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable7, (java.lang.Number) 0, (java.lang.Number) Double.NaN, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException15 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 10L, (java.lang.Number) 0.7345682747147467d, (int) (byte) 1); numberIsTooSmallException11.addSuppressed((java.lang.Throwable) nonMonotonousSequenceException15); java.lang.Throwable[] throwableArray17 = numberIsTooSmallException11.getSuppressed(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) vector3D3, localizable6, (java.lang.Object[]) throwableArray17); double double19 = vector3D3.getNormSq(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = vector3D1.add(2.220446049250313E-16d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); double double32 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D24, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double42 = vector3D38.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D41); double double43 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D35, vector3D41); boolean boolean44 = vector3D35.isInfinite(); double double45 = vector3D24.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D35); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D21, vector3D35); double double47 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D35); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.05308358714605824d, vector3D35); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation54 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation54.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation54.getAxis(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector57 = vector3D56.normalize(); double double58 = vector3D48.distance1(euclidean3DVector57); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{(NaN); (NaN); (NaN)}" + "'", str5, "{(NaN); (NaN); (NaN)}"); org.junit.Assert.assertNotNull(throwableArray17); org.junit.Assert.assertTrue(Double.isNaN(double19)); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + Double.POSITIVE_INFINITY + "'", double46 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double47)); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(euclidean3DVector57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0900143064974794d + "'", double58 == 1.0900143064974794d); }
public void test086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test086"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = vector3D14.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double32 = vector3D28.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D31); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D25.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = vector3D28.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D39, vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = vector3D53.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D58.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = vector3D61.getDelta(); double double64 = vector3D53.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double65 = vector3D45.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector66 = vector3D45.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = vector3D28.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation0.applyTo(vector3D28); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder69 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray70 = rotation0.getAngles(rotationOrder69); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertNotNull(rotation0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.7345682747147468d + "'", double55 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.7345682747147468d + "'", double63 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); }
public void test087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test087"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D30.scalarMultiply(1.0795745269752887E11d); java.text.NumberFormat numberFormat87 = null; // The following exception was thrown during execution in test generation try { java.lang.String str88 = vector3D30.toString(numberFormat87); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector86); }
public void test088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test088"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = vector3D12.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = vector3D20.getDelta(); double double23 = vector3D12.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D26, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D37, vector3D43); boolean boolean46 = vector3D37.isInfinite(); double double47 = vector3D26.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = vector3D37.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double55 = vector3D51.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D48.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D12.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D61.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector63 = vector3D56.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, 3.6535299896840334E43d); double[][] doubleArray66 = rotation65.getMatrix(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7345682747147468d + "'", double14 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7345682747147468d + "'", double22 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0000000000000002d + "'", double58 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.6702668260599606d + "'", double62 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector63); org.junit.Assert.assertNotNull(doubleArray66); }
public void test089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test089"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double[][] doubleArray86 = rotation85.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation85.applyTo(rotation88); double[][] doubleArray90 = rotation85.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = rotation85.applyTo(rotation91); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(rotation88); org.junit.Assert.assertNotNull(rotation89); org.junit.Assert.assertNotNull(doubleArray90); }
public void test090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test090"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; java.text.NumberFormat numberFormat3 = null; java.lang.String str4 = vector3D2.toString(numberFormat3); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException10 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable6, (java.lang.Number) 0, (java.lang.Number) Double.NaN, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException14 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 10L, (java.lang.Number) 0.7345682747147467d, (int) (byte) 1); numberIsTooSmallException10.addSuppressed((java.lang.Throwable) nonMonotonousSequenceException14); java.lang.Throwable[] throwableArray16 = numberIsTooSmallException10.getSuppressed(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) vector3D2, localizable5, (java.lang.Object[]) throwableArray16); double double18 = vector3D2.getNormSq(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = vector3D0.add(2.220446049250313E-16d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D2); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double30 = vector3D26.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D23, vector3D29); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double41 = vector3D37.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D40); double double42 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D34, vector3D40); boolean boolean43 = vector3D34.isInfinite(); double double44 = vector3D23.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D34); double double45 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D20, vector3D34); double double46 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D34); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation48 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D34, (double) 52); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{(NaN); (NaN); (NaN)}" + "'", str4, "{(NaN); (NaN); (NaN)}"); org.junit.Assert.assertNotNull(throwableArray16); org.junit.Assert.assertTrue(Double.isNaN(double18)); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double46)); }
public void test091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test091"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D30.scalarMultiply(100.0d); double double87 = vector3D30.getNormSq(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector88 = vector3D30.getZero(); double double89 = vector3D30.getNormInf(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0000000000000002d + "'", double87 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.6702668260599606d + "'", double89 == 0.6702668260599606d); }
public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double16 = vector3D12.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D9, vector3D15); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D20, vector3D26); boolean boolean29 = vector3D20.isInfinite(); double double30 = vector3D9.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double31 = vector3D2.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D20.getZero(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double49 = vector3D45.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D48); double double50 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D42, vector3D48); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double60 = vector3D56.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D59); double double61 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D53, vector3D59); boolean boolean62 = vector3D53.isInfinite(); double double63 = vector3D42.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double64 = vector3D35.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = vector3D53.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D20.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = vector3D67.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = vector3D67.negate(); org.apache.commons.math.exception.util.Localizable localizable70 = null; java.lang.Object[] objArray71 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) vector3D69, localizable70, objArray71); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = vector3D74.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = vector3D74.negate(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis(); double double85 = rotation83.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation83.applyInverseTo(vector3D86); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D74.add((-1.9910581420683684d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D86); double double89 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D73, vector3D88); double double90 = vector3D69.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D88); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D69.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = vector3D65.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D69); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue(Double.isNaN(double89)); org.junit.Assert.assertTrue(Double.isNaN(double90)); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertNotNull(vector3D92); }
public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException4 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 100.0f, (java.lang.Number) Double.POSITIVE_INFINITY, (int) (short) 10); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; double[] doubleArray9 = new double[] { (byte) 1 }; double[] doubleArray10 = new double[] {}; boolean boolean11 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray9, doubleArray10); double[] doubleArray13 = new double[] { (byte) 1 }; double[] doubleArray14 = new double[] {}; boolean boolean15 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray13, doubleArray14); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection16 = null; double[] doubleArray18 = new double[] { 0 }; double[] doubleArray20 = new double[] { 0 }; double[] doubleArray22 = new double[] { 0 }; double[] doubleArray24 = new double[] { 0 }; double[] doubleArray26 = new double[] { 0 }; double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray13, orderDirection16, doubleArray27); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, doubleArray27); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException30 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable6, (java.lang.Number) (short) 1, (java.lang.Object[]) doubleArray27); org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) nonMonotonousSequenceException4, localizable5, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException32 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray27); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray27, 2.041394030645261d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 5x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray27); }
public void test094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test094"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException4 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 100.0f, (java.lang.Number) Double.POSITIVE_INFINITY, (int) (short) 10); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; double[] doubleArray9 = new double[] { (byte) 1 }; double[] doubleArray10 = new double[] {}; boolean boolean11 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray9, doubleArray10); double[] doubleArray13 = new double[] { (byte) 1 }; double[] doubleArray14 = new double[] {}; boolean boolean15 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray13, doubleArray14); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection16 = null; double[] doubleArray18 = new double[] { 0 }; double[] doubleArray20 = new double[] { 0 }; double[] doubleArray22 = new double[] { 0 }; double[] doubleArray24 = new double[] { 0 }; double[] doubleArray26 = new double[] { 0 }; double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray13, orderDirection16, doubleArray27); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, doubleArray27); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException30 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable6, (java.lang.Number) (short) 1, (java.lang.Object[]) doubleArray27); org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) nonMonotonousSequenceException4, localizable5, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException32 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray27); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray27, Double.NaN); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 5x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray27); }
public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray3 = new double[] { (byte) 1 }; double[] doubleArray4 = new double[] {}; boolean boolean5 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray3, doubleArray4); double[] doubleArray7 = new double[] { (byte) 1 }; double[] doubleArray8 = new double[] {}; boolean boolean9 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray7, doubleArray8); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = null; double[] doubleArray12 = new double[] { 0 }; double[] doubleArray14 = new double[] { 0 }; double[] doubleArray16 = new double[] { 0 }; double[] doubleArray18 = new double[] { 0 }; double[] doubleArray20 = new double[] { 0 }; double[][] doubleArray21 = new double[][] { doubleArray12, doubleArray14, doubleArray16, doubleArray18, doubleArray20 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray7, orderDirection10, doubleArray21); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray3, doubleArray21); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException24 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable0, (java.lang.Number) (short) 1, (java.lang.Object[]) doubleArray21); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation26 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray21, (double) 1079574528); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 5x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]"); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray21); }
public void test096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test096"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); double double7 = rotation5.getQ2(); double double8 = rotation5.getQ0(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 6.09767964807105d + "'", double7 == 6.09767964807105d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.033252629052738d + "'", double8 == 9.033252629052738d); }
public void test097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test097"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double[][] doubleArray86 = rotation85.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation85.applyTo(rotation88); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder90 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray91 = rotation89.getAngles(rotationOrder90); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(rotation88); org.junit.Assert.assertNotNull(rotation89); }
public void test098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test098"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); double double85 = vector3D30.getY(); double double86 = vector3D30.getNorm(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.6244726102307315d + "'", double85 == 0.6244726102307315d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.0d + "'", double86 == 1.0d); }
public void test099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test099"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D30.scalarMultiply(100.0d); double double87 = vector3D30.getNormSq(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector88 = vector3D30.getZero(); boolean boolean89 = vector3D30.isNaN(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0000000000000002d + "'", double87 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector88); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); }
public void test100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test100"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); double double65 = rotation64.getQ1(); double double66 = rotation64.getQ1(); double double67 = rotation64.getQ2(); double double68 = rotation64.getQ1(); double double69 = rotation64.getQ0(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d); }
public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation6.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation6.getAxis(); double[][] doubleArray9 = rotation6.getMatrix(); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException10 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray9); org.apache.commons.math.exception.util.ExceptionContext exceptionContext11 = mathArithmeticException10.getContext(); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertNotNull(exceptionContext11); }
public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); org.apache.commons.math.geometry.Space space65 = vector3D18.getSpace(); int int66 = space65.getDimension(); int int67 = space65.getDimension(); int int68 = space65.getDimension(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(space65); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3); org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3); org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3); }
public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 100.0f, (java.lang.Number) Double.POSITIVE_INFINITY, (int) (short) 10); org.apache.commons.math.exception.util.Localizable localizable4 = null; org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double26 = vector3D22.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D19, vector3D25); boolean boolean28 = vector3D19.isInfinite(); double double29 = vector3D8.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math.geometry.Space space30 = vector3D19.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double37 = vector3D33.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = vector3D43.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double52 = vector3D48.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); double double53 = vector3D51.getDelta(); double double54 = vector3D43.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double64 = vector3D60.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D57, vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); boolean boolean77 = vector3D68.isInfinite(); double double78 = vector3D57.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = vector3D68.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = vector3D79.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D43.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double89 = vector3D36.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D36); double double91 = rotation90.getQ2(); double[][] doubleArray92 = rotation90.getMatrix(); org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException(localizable5, (java.lang.Object[]) doubleArray92); org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException((java.lang.Throwable) nonMonotonousSequenceException3, localizable4, (java.lang.Object[]) doubleArray92); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(space30); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.7345682747147468d + "'", double45 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.7345682747147468d + "'", double53 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0000000000000002d + "'", double89 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); org.junit.Assert.assertNotNull(doubleArray92); }
public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D30.scalarMultiply(100.0d); double double87 = vector3D30.getNormSq(); org.apache.commons.math.geometry.Space space88 = vector3D30.getSpace(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0000000000000002d + "'", double87 == 1.0000000000000002d); org.junit.Assert.assertNotNull(space88); }
public void test105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test105"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); double double7 = rotation5.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = rotation5.applyInverseTo(vector3D8); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector10 = vector3D8.negate(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(euclidean3DVector10); }
public void test106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test106"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.079574528E9d, 0.0d, (double) 31, (-1.0d), false); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert(); org.junit.Assert.assertNotNull(rotation6); }
public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-0.6241063992932315d), 3.332894621696E12d, (-0.7853981633974483d), (double) (-11L), false); double double6 = rotation5.getAngle(); org.junit.Assert.assertTrue(Double.isNaN(double6)); }
public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0.0f, 2979.3803161142273d, 101.0d, 1.0000000000000002d, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D8.getNorm(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double16 = vector3D12.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = vector3D15.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); boolean boolean41 = vector3D32.isInfinite(); double double42 = vector3D21.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double43 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D18, vector3D32); double double44 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D15, vector3D32); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector45 = vector3D8.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double46 = vector3D8.getDelta(); double double47 = vector3D8.getX(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double57 = vector3D53.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D50, vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double68 = vector3D64.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D61, vector3D67); boolean boolean70 = vector3D61.isInfinite(); double double71 = vector3D50.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double81 = vector3D77.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D80); double double82 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D74, vector3D80); boolean boolean83 = vector3D74.isInfinite(); double double84 = vector3D50.dotProduct((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); org.apache.commons.math.geometry.Space space85 = vector3D50.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = vector3D8.crossProduct((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D50); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation5.applyTo(vector3D50); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D50.getZero(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.7345682747147468d + "'", double17 == 0.7345682747147468d); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertTrue("'" + double43 + "' != '" + Double.POSITIVE_INFINITY + "'", double43 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector45); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.7345682747147468d + "'", double46 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.4009692518823901d + "'", double47 == 0.4009692518823901d); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0000000000000002d + "'", double84 == 1.0000000000000002d); org.junit.Assert.assertNotNull(space85); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); }
public void test109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test109"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation7.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D12, vector3D18); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double30 = vector3D26.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D23, vector3D29); boolean boolean32 = vector3D23.isInfinite(); double double33 = vector3D12.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D23); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = vector3D23.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector35 = vector3D9.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D34); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D9, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = rotation7.applyInverseTo(rotation37); double[][] doubleArray39 = rotation7.getMatrix(); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException40 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable0, (java.lang.Number) (-9.999999f), (java.lang.Object[]) doubleArray39); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertNotNull(euclidean3DVector35); org.junit.Assert.assertNotNull(rotation38); org.junit.Assert.assertNotNull(doubleArray39); }
public void test110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test110"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = vector3D60.getDelta(); double double63 = vector3D52.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double64 = vector3D44.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D44.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D27.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double67 = vector3D27.getZ(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = rotation73.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = rotation73.getAxis(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector76 = vector3D75.normalize(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector77 = vector3D27.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7345682747147468d + "'", double62 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.6702668260599606d + "'", double67 == 0.6702668260599606d); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(euclidean3DVector76); org.junit.Assert.assertNotNull(euclidean3DVector77); }
public void test111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test111"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis(); double[][] doubleArray8 = rotation5.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation10 = rotation5.applyTo(rotation9); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(doubleArray8); }
public void test112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test112"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D10, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); boolean boolean30 = vector3D21.isInfinite(); double double31 = vector3D10.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math.geometry.Space space32 = vector3D21.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = vector3D53.getDelta(); double double56 = vector3D45.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double66 = vector3D62.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); double double67 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D65); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double77 = vector3D73.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); double double78 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D70, vector3D76); boolean boolean79 = vector3D70.isInfinite(); double double80 = vector3D59.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D70.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double88 = vector3D84.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = vector3D81.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = vector3D45.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D89); double double91 = vector3D38.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D89); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation7.applyInverseTo(vector3D38); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector94 = vector3D0.subtract((-1024.0d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double95 = vector3D0.getX(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(space32); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.7345682747147468d + "'", double55 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0000000000000002d + "'", double91 == 1.0000000000000002d); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertNotNull(euclidean3DVector94); org.junit.Assert.assertTrue(Double.isNaN(double95)); }
public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); double double85 = rotation84.getQ2(); double double86 = rotation84.getQ2(); double double87 = rotation84.getQ2(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); }
public void test114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test114"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(4.827119634E10d, (double) (-100L), (-9.79006006351717d), 1.7229210080217563d, true); }
public void test115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test115"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); double double7 = rotation5.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation8 = rotation5.revert(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); org.junit.Assert.assertNotNull(rotation8); }
public void test116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test116"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis(); double double96 = rotation94.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation85.applyTo(rotation94); double double98 = rotation94.getQ3(); double double99 = rotation94.getQ1(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 6.09767964807105d + "'", double96 == 6.09767964807105d); org.junit.Assert.assertNotNull(rotation97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.0d + "'", double98 == 1.0d); org.junit.Assert.assertTrue("'" + double99 + "' != '" + 1.079574538E9d + "'", double99 == 1.079574538E9d); }
public void test117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test117"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = vector3D60.getDelta(); double double63 = vector3D52.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double64 = vector3D44.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D44.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D27.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double73 = vector3D69.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D72); double double74 = vector3D72.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.MINUS_I; double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D72, vector3D75); double double77 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D66, vector3D75); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = vector3D75.scalarMultiply((double) 0); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7345682747147468d + "'", double62 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.7345682747147468d + "'", double74 == 0.7345682747147468d); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.40096925188239d + "'", double76 == 1.40096925188239d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 4.391417376346165d + "'", double77 == 4.391417376346165d); org.junit.Assert.assertNotNull(vector3D79); }
public void test118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test118"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = vector3D60.getDelta(); double double63 = vector3D52.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double64 = vector3D44.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D44.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D27.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double67 = vector3D27.getAlpha(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7345682747147468d + "'", double62 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d); }
public void test119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test119"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = vector3D14.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D0.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); java.lang.Object obj27 = null; boolean boolean28 = vector3D25.equals(obj27); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation30 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D25, 0.7345682747147468d); double[][] doubleArray31 = rotation30.getMatrix(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray31); }
public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation92.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation92.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation85.applyInverseTo(rotation92); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder96 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray97 = rotation95.getAngles(rotationOrder96); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertNotNull(rotation95); }
public void test121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test121"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) 32, (double) 10.0f); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D6, vector3D12); boolean boolean15 = vector3D6.isInfinite(); double double16 = vector3D6.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double23 = vector3D19.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double24 = vector3D22.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); double double32 = vector3D30.getDelta(); double double33 = vector3D22.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double43 = vector3D39.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D42); double double44 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D36, vector3D42); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D47, vector3D53); boolean boolean56 = vector3D47.isInfinite(); double double57 = vector3D36.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = vector3D47.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double65 = vector3D61.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D64); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D58.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = vector3D22.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation68 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D6, vector3D22); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double79 = vector3D75.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D78); double double80 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D72, vector3D78); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double90 = vector3D86.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D89); double double91 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D83, vector3D89); boolean boolean92 = vector3D83.isInfinite(); double double93 = vector3D72.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = vector3D83.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector95 = vector3D69.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D94); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = vector3D69.orthogonal(); double double97 = vector3D6.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D69); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = vector3D2.add(0.6702668260599606d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D69); double double99 = vector3D69.getNorm(); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.6957086881730823d + "'", double16 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.7345682747147468d + "'", double24 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.7345682747147468d + "'", double32 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertNotNull(vector3D58); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertNotNull(euclidean3DVector95); org.junit.Assert.assertNotNull(vector3D96); org.junit.Assert.assertTrue("'" + double97 + "' != '" + Double.POSITIVE_INFINITY + "'", double97 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(vector3D98); org.junit.Assert.assertTrue("'" + double99 + "' != '" + Double.POSITIVE_INFINITY + "'", double99 == Double.POSITIVE_INFINITY); }
public void test122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test122"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = vector3D12.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = vector3D20.getDelta(); double double23 = vector3D12.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D26, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D37, vector3D43); boolean boolean46 = vector3D37.isInfinite(); double double47 = vector3D26.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = vector3D37.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double55 = vector3D51.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D48.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D12.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D61.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector63 = vector3D56.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, 3.6535299896840334E43d); double double66 = rotation65.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation65.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = vector3D67.negate(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7345682747147468d + "'", double14 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7345682747147468d + "'", double22 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0000000000000002d + "'", double58 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.6702668260599606d + "'", double62 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector63); org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.4795218342206279d) + "'", double66 == (-0.4795218342206279d)); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); }
public void test123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test123"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation92.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = rotation92.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation85.applyInverseTo(rotation92); double[][] doubleArray96 = rotation85.getMatrix(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertNotNull(vector3D94); org.junit.Assert.assertNotNull(rotation95); org.junit.Assert.assertNotNull(doubleArray96); }
public void test124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test124"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = vector3D16.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double25 = vector3D21.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = vector3D24.getDelta(); double double27 = vector3D16.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double28 = vector3D8.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double35 = vector3D31.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D34); double double36 = vector3D16.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D31); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = vector3D31.normalize(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector38 = vector3D37.getZero(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.MINUS_K; double double40 = vector3D39.getNormSq(); double double41 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D37, vector3D39); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation43 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D37, 0.0d); double double44 = rotation43.getQ3(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.7345682747147468d + "'", double18 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.7345682747147468d + "'", double26 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(euclidean3DVector38); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0d + "'", double40 == 1.0d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.8277126831424906d + "'", double41 == 1.8277126831424906d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-0.0d) + "'", double44 == (-0.0d)); }
public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 161.87410369014313d, (double) 18.0f, (double) 41L); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test126"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D10, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); boolean boolean30 = vector3D21.isInfinite(); double double31 = vector3D10.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D21.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector33 = vector3D7.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation5.applyInverseTo(rotation35); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = rotation35.getAxis(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(euclidean3DVector33); org.junit.Assert.assertNotNull(rotation36); org.junit.Assert.assertNotNull(vector3D37); }
public void test127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test127"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = vector3D12.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = vector3D20.getDelta(); double double23 = vector3D12.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D26, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D37, vector3D43); boolean boolean46 = vector3D37.isInfinite(); double double47 = vector3D26.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = vector3D37.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double55 = vector3D51.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D48.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D12.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D61.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector63 = vector3D56.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, 3.6535299896840334E43d); double double66 = vector3D61.getNorm(); double double67 = vector3D61.getAlpha(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7345682747147468d + "'", double14 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7345682747147468d + "'", double22 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0000000000000002d + "'", double58 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.6702668260599606d + "'", double62 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector63); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d); }
public void test128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test128"); double[] doubleArray1 = new double[] { (byte) 1 }; double[] doubleArray2 = new double[] {}; boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray1, doubleArray2); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray1); double[] doubleArray6 = new double[] { (byte) 1 }; double[] doubleArray7 = new double[] {}; boolean boolean8 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray6, doubleArray7); double[] doubleArray10 = new double[] { (byte) 1 }; double[] doubleArray11 = new double[] {}; boolean boolean12 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray10, doubleArray11); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray10); boolean boolean14 = org.apache.commons.math.util.MathUtils.equals(doubleArray7, doubleArray10); double double15 = org.apache.commons.math.util.MathUtils.distance(doubleArray1, doubleArray10); int int16 = org.apache.commons.math.util.MathUtils.hash(doubleArray10); double[] doubleArray18 = new double[] { (byte) 1 }; double[] doubleArray19 = new double[] {}; boolean boolean20 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray18, doubleArray19); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray18); double[] doubleArray23 = new double[] { (byte) 1 }; double[] doubleArray24 = new double[] {}; boolean boolean25 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray23, doubleArray24); double[] doubleArray27 = new double[] { (byte) 1 }; double[] doubleArray28 = new double[] {}; boolean boolean29 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray27, doubleArray28); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray27); boolean boolean31 = org.apache.commons.math.util.MathUtils.equals(doubleArray24, doubleArray27); double double32 = org.apache.commons.math.util.MathUtils.distance(doubleArray18, doubleArray27); double double33 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray18); double[] doubleArray35 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray18, (int) (short) 1); boolean boolean36 = org.apache.commons.math.util.MathUtils.equals(doubleArray10, doubleArray35); double[] doubleArray38 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray35, (double) 1); org.apache.commons.math.util.MathUtils.checkOrder(doubleArray35); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation45 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = rotation45.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double57 = vector3D53.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D50, vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double68 = vector3D64.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D61, vector3D67); boolean boolean70 = vector3D61.isInfinite(); double double71 = vector3D50.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = vector3D61.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector73 = vector3D47.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D72); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D47, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation76 = rotation45.applyInverseTo(rotation75); double[][] doubleArray77 = rotation45.getMatrix(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray35, doubleArray77); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 1"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]"); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1072693279 + "'", int16 == 1072693279); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0]"); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]"); org.junit.Assert.assertNotNull(vector3D46); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertNotNull(euclidean3DVector73); org.junit.Assert.assertNotNull(rotation76); org.junit.Assert.assertNotNull(doubleArray77); }
public void test129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test129"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.5430806348152435d, 9.179881164491475d, (double) 3L, (double) 100.0f, false); double double6 = rotation5.getQ1(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 9.179881164491475d + "'", double6 == 9.179881164491475d); }
public void test130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test130"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = rotation85.revert(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertNotNull(rotation86); }
public void test131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test131"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D10, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); boolean boolean30 = vector3D21.isInfinite(); double double31 = vector3D10.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D21.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector33 = vector3D7.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation5.applyInverseTo(rotation35); double double37 = rotation36.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = rotation36.getAxis(); double double39 = rotation36.getQ1(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(euclidean3DVector33); org.junit.Assert.assertNotNull(rotation36); org.junit.Assert.assertTrue(Double.isNaN(double37)); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertTrue(Double.isNaN(double39)); }
public void test132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test132"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, 0.8620394103101474d, 8.259397137504762E70d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis(); double double96 = rotation94.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation85.applyTo(rotation94); double double98 = rotation97.getQ0(); double double99 = rotation97.getAngle(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 6.09767964807105d + "'", double96 == 6.09767964807105d); org.junit.Assert.assertNotNull(rotation97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + (-9.033252629052738d) + "'", double98 == (-9.033252629052738d)); org.junit.Assert.assertTrue(Double.isNaN(double99)); }
public void test134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test134"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = vector3D5.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double14 = vector3D10.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = vector3D13.getDelta(); double double16 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = vector3D13.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector18 = vector3D13.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); boolean boolean41 = vector3D32.isInfinite(); double double42 = vector3D21.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = vector3D32.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = vector3D43.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = vector3D46.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D46); double double54 = rotation53.getQ1(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7345682747147468d + "'", double7 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7345682747147468d + "'", double15 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(euclidean3DVector18); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); }
public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); double double34 = vector3D33.getNormInf(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = vector3D33.getZero(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double56 = vector3D52.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); double double57 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D49, vector3D55); boolean boolean58 = vector3D49.isInfinite(); double double59 = vector3D38.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = vector3D49.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double67 = vector3D63.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = vector3D60.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = vector3D63.normalize(); double double70 = vector3D69.getNormInf(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D35, vector3D69); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.6702668260599606d + "'", double34 == 0.6702668260599606d); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.6702668260599606d + "'", double70 == 0.6702668260599606d); }
public void test136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test136"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 9700L, 1.053671212772351E-8d, (-0.7853981633974483d), (double) 3, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) 1079574538L, 0.0d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = rotation5.applyTo(vector3D8); double double10 = vector3D8.getNorm1(); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.382349300424506d + "'", double10 == 1.382349300424506d); }
public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); double double65 = rotation64.getQ1(); double double66 = rotation64.getQ1(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = rotation64.revert(); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder68 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray69 = rotation67.getAngles(rotationOrder68); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertNotNull(rotation67); }
public void test138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test138"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double[][] doubleArray86 = rotation85.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation85.applyTo(rotation88); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.079574528E9d, 0.0d, (double) 31, (-1.0d), false); double double96 = rotation95.getQ0(); double double97 = org.apache.commons.math.geometry.euclidean.threed.Rotation.distance(rotation89, rotation95); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(rotation88); org.junit.Assert.assertNotNull(rotation89); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.079574528E9d + "'", double96 == 1.079574528E9d); org.junit.Assert.assertTrue(Double.isNaN(double97)); }
public void test139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test139"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis(); double[][] doubleArray8 = rotation5.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = rotation5.getAxis(); double[][] doubleArray10 = rotation5.getMatrix(); double double11 = rotation5.getAngle(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertTrue(Double.isNaN(double11)); }
public void test140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test140"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, (double) 100, (double) 32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation85.applyInverseTo(vector3D92); double double94 = vector3D92.getZ(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 32.0d + "'", double94 == 32.0d); }
public void test141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test141"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis(); double double96 = rotation94.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation85.applyTo(rotation94); double double98 = rotation97.getQ1(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 6.09767964807105d + "'", double96 == 6.09767964807105d); org.junit.Assert.assertNotNull(rotation97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + (-1.079574538E9d) + "'", double98 == (-1.079574538E9d)); }
public void test142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test142"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; java.lang.Object[] objArray8 = new java.lang.Object[] { 1.0f, '#', '4', 10.0f }; org.apache.commons.math.exception.NullArgumentException nullArgumentException9 = new org.apache.commons.math.exception.NullArgumentException(localizable3, objArray8); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException10 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable1, (java.lang.Number) (short) -1, objArray8); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, objArray8); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException15 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 10.0f, (java.lang.Number) 20.793438379014997d, (int) (byte) -1); boolean boolean16 = nonMonotonousSequenceException15.getStrict(); org.apache.commons.math.exception.util.Localizable localizable17 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D20, vector3D26); boolean boolean29 = vector3D20.isInfinite(); double double30 = vector3D20.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double37 = vector3D33.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = vector3D36.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = vector3D44.getDelta(); double double47 = vector3D36.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double57 = vector3D53.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D50, vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double68 = vector3D64.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D61, vector3D67); boolean boolean70 = vector3D61.isInfinite(); double double71 = vector3D50.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = vector3D61.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double79 = vector3D75.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D78); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = vector3D72.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D75); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D36.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D80); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation82 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D36); double[][] doubleArray83 = rotation82.getMatrix(); org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) nonMonotonousSequenceException15, localizable17, (java.lang.Object[]) doubleArray83); mathIllegalArgumentException11.addSuppressed((java.lang.Throwable) mathException84); org.junit.Assert.assertNotNull(objArray8); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[1.0, #, 4, 10.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[1.0, #, 4, 10.0]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.6957086881730823d + "'", double30 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.7345682747147468d + "'", double38 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.7345682747147468d + "'", double46 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(doubleArray83); }
public void test143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test143"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = vector3D5.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double22 = vector3D18.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = vector3D21.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double30 = vector3D26.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = vector3D29.getDelta(); double double32 = vector3D21.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double42 = vector3D38.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D41); double double43 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D35, vector3D41); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D46, vector3D52); boolean boolean55 = vector3D46.isInfinite(); double double56 = vector3D35.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D46.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double64 = vector3D60.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = vector3D57.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D21.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); double double67 = vector3D14.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double71 = vector3D70.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector72 = vector3D65.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D70, 3.6535299896840334E43d); double double75 = vector3D70.getNorm(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector76 = vector3D5.subtract(2.7182818284590455d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7345682747147468d + "'", double7 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.7345682747147468d + "'", double23 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.7345682747147468d + "'", double31 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0000000000000002d + "'", double67 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.6702668260599606d + "'", double71 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector72); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d); org.junit.Assert.assertNotNull(euclidean3DVector76); }
public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D30.scalarMultiply(1.0795745269752887E11d); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector87 = null; // The following exception was thrown during execution in test generation try { double double88 = vector3D30.distanceInf(euclidean3DVector87); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector86); }
public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder6 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray7 = rotation5.getAngles(rotationOrder6); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } }
public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis(); org.apache.commons.math.geometry.Space space8 = vector3D7.getSpace(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(space8); }
public void test147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test147"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis(); double double96 = rotation94.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation85.applyTo(rotation94); double double98 = rotation94.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D99 = rotation94.getAxis(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 6.09767964807105d + "'", double96 == 6.09767964807105d); org.junit.Assert.assertNotNull(rotation97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.0d + "'", double98 == 1.0d); org.junit.Assert.assertNotNull(vector3D99); }
public void test148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test148"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double16 = vector3D12.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D9, vector3D15); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D20, vector3D26); boolean boolean29 = vector3D20.isInfinite(); double double30 = vector3D9.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double31 = vector3D2.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D20.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D20, vector3D33); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 52.0f); double double37 = rotation36.getQ1(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-0.3057624914054009d) + "'", double37 == (-0.3057624914054009d)); }
public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray2 = new double[] { (byte) 1 }; double[] doubleArray3 = new double[] {}; boolean boolean4 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray2, doubleArray3); double[] doubleArray6 = new double[] { (byte) 1 }; double[] doubleArray7 = new double[] {}; boolean boolean8 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray6, doubleArray7); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray6); boolean boolean10 = org.apache.commons.math.util.MathUtils.equals(doubleArray3, doubleArray6); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; double[] doubleArray13 = new double[] { (byte) 1 }; double[] doubleArray14 = new double[] {}; boolean boolean15 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray13, doubleArray14); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection16 = null; double[] doubleArray18 = new double[] { 0 }; double[] doubleArray20 = new double[] { 0 }; double[] doubleArray22 = new double[] { 0 }; double[] doubleArray24 = new double[] { 0 }; double[] doubleArray26 = new double[] { 0 }; double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray13, orderDirection16, doubleArray27); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray6, orderDirection11, doubleArray27); org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException(localizable0, (java.lang.Object[]) doubleArray27); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation32 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray27, (double) 9); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 5x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]"); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray27); }
public void test150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test150"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double4 = vector3D3.getNorm(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); boolean boolean17 = vector3D8.isInfinite(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = vector3D8.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D3.subtract(0.0d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) 30, vector3D3); double double21 = vector3D3.getX(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation27.getAxis(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector30 = vector3D29.normalize(); double double31 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.angle(vector3D3, vector3D29); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D29.orthogonal(); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.4009692518823901d + "'", double21 == 0.4009692518823901d); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertNotNull(euclidean3DVector30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.983370962257916d + "'", double31 == 1.983370962257916d); org.junit.Assert.assertNotNull(vector3D32); }
public void test151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test151"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D10, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); boolean boolean30 = vector3D21.isInfinite(); double double31 = vector3D10.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D21.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector33 = vector3D7.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation5.applyInverseTo(rotation35); double[][] doubleArray37 = rotation5.getMatrix(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray37, 1.916729449409635d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: unable to orthogonalize matrix in 10 iterations"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(euclidean3DVector33); org.junit.Assert.assertNotNull(rotation36); org.junit.Assert.assertNotNull(doubleArray37); }
public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.999999999999999E69d, 0.7591741244664781d, (-9.033252629052738d), 1.7160033436347992d, true); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert(); double double7 = rotation5.getQ3(); org.junit.Assert.assertNotNull(rotation6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.7160033436347995E-70d + "'", double7 == 1.7160033436347995E-70d); }
public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); boolean boolean12 = vector3D3.isInfinite(); double double13 = vector3D3.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = vector3D19.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = vector3D27.getDelta(); double double30 = vector3D19.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double40 = vector3D36.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D39); double double41 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D33, vector3D39); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double51 = vector3D47.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D50); double double52 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D44, vector3D50); boolean boolean53 = vector3D44.isInfinite(); double double54 = vector3D33.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = vector3D44.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D58.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D55.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D58); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = vector3D19.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D3, vector3D19); double[][] doubleArray66 = rotation65.getMatrix(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException67 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) doubleArray66); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray66, 0.8657694832396587d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.6957086881730823d + "'", double13 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.7345682747147468d + "'", double21 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.7345682747147468d + "'", double29 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D64); org.junit.Assert.assertNotNull(doubleArray66); }
public void test154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test154"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.999999999999999E69d, 0.7591741244664781d, (-9.033252629052738d), 1.7160033436347992d, true); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector7 = null; // The following exception was thrown during execution in test generation try { double double8 = vector3D6.distanceInf(euclidean3DVector7); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D6); }
public void test155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test155"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((-103.27892990343184d), 0.0d, (double) 18.0f, (-1.5707963267948966d), true); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.junit.Assert.assertNotNull(vector3D6); }
public void test156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test156"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.1102230246251565E-16d, (-0.45054953406980713d), 20.796610300773242d, (double) 0, true); double double6 = rotation5.getAngle(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.141592653589793d + "'", double6 == 3.141592653589793d); }
public void test157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test157"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.1102230246251565E-16d, (-0.45054953406980713d), 20.796610300773242d, (double) 0, true); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert(); org.junit.Assert.assertNotNull(rotation6); }
public void test158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test158"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D10, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); boolean boolean30 = vector3D21.isInfinite(); double double31 = vector3D10.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math.geometry.Space space32 = vector3D21.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = vector3D53.getDelta(); double double56 = vector3D45.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double66 = vector3D62.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); double double67 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D59, vector3D65); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double77 = vector3D73.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); double double78 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D70, vector3D76); boolean boolean79 = vector3D70.isInfinite(); double double80 = vector3D59.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D70); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D70.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double88 = vector3D84.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = vector3D81.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = vector3D45.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D89); double double91 = vector3D38.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D89); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation92 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D21, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation7.applyInverseTo(vector3D38); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector94 = vector3D0.subtract((-1024.0d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = vector3D0.scalarMultiply(147.4131591025766d); double double97 = vector3D96.getZ(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(space32); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.7345682747147468d + "'", double55 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0000000000000002d + "'", double91 == 1.0000000000000002d); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertNotNull(euclidean3DVector94); org.junit.Assert.assertNotNull(vector3D96); org.junit.Assert.assertTrue(Double.isNaN(double97)); }
public void test159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test159"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = vector3D14.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double32 = vector3D28.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D31); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D25.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = vector3D28.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D28, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D39, vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = vector3D53.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D58.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = vector3D61.getDelta(); double double64 = vector3D53.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double65 = vector3D45.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector66 = vector3D45.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = vector3D28.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = rotation0.applyTo(vector3D28); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.orthogonal(); org.junit.Assert.assertNotNull(rotation0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(vector3D34); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.7345682747147468d + "'", double55 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.7345682747147468d + "'", double63 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector66); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); }
public void test160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test160"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = vector3D14.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D0.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D29.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D29.orthogonal(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector58 = vector3D56.scalarMultiply(0.0d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, 5.298292365610485d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation28.applyInverseTo(rotation60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation60.getAxis(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(euclidean3DVector58); org.junit.Assert.assertNotNull(rotation61); org.junit.Assert.assertNotNull(vector3D62); }
public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); double double65 = rotation64.getQ1(); double double66 = rotation64.getQ1(); double double67 = rotation64.getQ1(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (-1), (double) 97L, (double) 100.00001f, 31.0d, false); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation74 = rotation64.applyInverseTo(rotation73); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(rotation74); }
public void test162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test162"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = vector3D16.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double25 = vector3D21.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = vector3D24.getDelta(); double double27 = vector3D16.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double37 = vector3D33.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D30, vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double48 = vector3D44.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); double double49 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D41, vector3D47); boolean boolean50 = vector3D41.isInfinite(); double double51 = vector3D30.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D41); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = vector3D41.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double59 = vector3D55.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D58); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = vector3D52.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = vector3D16.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.angle(vector3D2, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double73 = vector3D69.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D72); double double74 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D66, vector3D72); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double84 = vector3D80.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D83); double double85 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D77, vector3D83); boolean boolean86 = vector3D77.isInfinite(); double double87 = vector3D66.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D77); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((-1.5574077246549023d), vector3D66); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = vector3D88.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D89); double double91 = vector3D89.getNormInf(); org.apache.commons.math.geometry.Space space92 = vector3D89.getSpace(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.7345682747147468d + "'", double18 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.7345682747147468d + "'", double26 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(vector3D60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.7316592469266796d + "'", double91 == 0.7316592469266796d); org.junit.Assert.assertNotNull(space92); }
public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 101L, (-30.055369951229576d), (double) 1.07957466E9f, (-1024.0d), false); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis(); double double13 = rotation11.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = rotation11.applyInverseTo(vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation5.applyInverseTo(vector3D14); double double17 = rotation5.getQ0(); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 101.0d + "'", double17 == 101.0d); }
public void test164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test164"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.079574528E9d, 0.0d, (double) 31, (-1.0d), false); double double6 = rotation5.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = rotation5.revert(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double18 = vector3D14.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D17); double double19 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D11, vector3D17); double double20 = vector3D8.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double30 = vector3D26.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D23, vector3D29); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double49 = vector3D29.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double50 = vector3D8.dotProduct((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); boolean boolean51 = vector3D37.isInfinite(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D58.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D55, vector3D61); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double73 = vector3D69.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D72); double double74 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D66, vector3D72); boolean boolean75 = vector3D66.isInfinite(); double double76 = vector3D55.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D66); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = vector3D66.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector78 = vector3D52.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D77); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = vector3D52.orthogonal(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector81 = vector3D79.scalarMultiply(0.0d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); double double83 = vector3D79.getNormSq(); double double84 = vector3D79.getZ(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = rotation5.applyInverseTo(vector3D79); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 31.0d + "'", double6 == 31.0d); org.junit.Assert.assertNotNull(rotation7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double50)); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertNotNull(vector3D77); org.junit.Assert.assertNotNull(euclidean3DVector78); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertNotNull(euclidean3DVector81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue(Double.isNaN(double83)); org.junit.Assert.assertTrue(Double.isNaN(double84)); org.junit.Assert.assertNotNull(vector3D85); }
public void test165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test165"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D4 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double11 = vector3D7.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D4, vector3D10); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double22 = vector3D18.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D15, vector3D21); boolean boolean24 = vector3D15.isInfinite(); double double25 = vector3D4.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = vector3D15.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector27 = vector3D1.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation29 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D1, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) (-8516736541997678255L), vector3D1); boolean boolean31 = vector3D30.isNaN(); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(euclidean3DVector27); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); double double12 = vector3D0.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double22 = vector3D18.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D15, vector3D21); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double30 = vector3D26.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = vector3D29.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); double double40 = vector3D29.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double41 = vector3D21.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double42 = vector3D0.dotProduct((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, (double) 45L); double double45 = rotation44.getQ2(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.7345682747147468d + "'", double31 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double42)); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.3042271394340984d + "'", double45 == 0.3042271394340984d); }
public void test167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test167"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector86 = vector3D30.scalarMultiply(100.0d); double double87 = vector3D30.getNormSq(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector88 = vector3D30.getZero(); double double89 = vector3D30.getNorm(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector86); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0000000000000002d + "'", double87 == 1.0000000000000002d); org.junit.Assert.assertNotNull(euclidean3DVector88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0d + "'", double89 == 1.0d); }
public void test168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test168"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder86 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray87 = rotation84.getAngles(rotationOrder86); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); }
public void test169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test169"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); double double85 = rotation84.getQ3(); double double86 = rotation84.getQ2(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); }
public void test170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test170"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, (double) 100, (double) 32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation85.applyInverseTo(vector3D92); double double94 = rotation85.getQ2(); double[][] doubleArray95 = rotation85.getMatrix(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); org.junit.Assert.assertNotNull(doubleArray95); }
public void test171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test171"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = vector3D16.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double25 = vector3D21.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = vector3D24.getDelta(); double double27 = vector3D16.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double28 = vector3D8.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double29 = vector3D16.getNormInf(); double double30 = vector3D16.getNormInf(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D31.negate(); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D16, vector3D31); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double41 = vector3D37.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D40); double double42 = vector3D40.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double49 = vector3D45.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D48); double double50 = vector3D48.getDelta(); double double51 = vector3D40.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D48); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = vector3D48.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector53 = vector3D48.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double63 = vector3D59.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); double double64 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D56, vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double74 = vector3D70.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D73); double double75 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D67, vector3D73); boolean boolean76 = vector3D67.isInfinite(); double double77 = vector3D56.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D67); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = vector3D67.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double85 = vector3D81.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D84); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = vector3D78.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = vector3D81.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D48, vector3D81); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D94 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double95 = vector3D91.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D94); double double96 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D48, vector3D94); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D16, vector3D48); double[][] doubleArray98 = rotation97.getMatrix(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.7345682747147468d + "'", double18 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.7345682747147468d + "'", double26 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.6702668260599606d + "'", double29 == 0.6702668260599606d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.6702668260599606d + "'", double30 == 0.6702668260599606d); org.junit.Assert.assertNotNull(vector3D31); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0945599555233236d + "'", double34 == 1.0945599555233236d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.7345682747147468d + "'", double42 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.7345682747147468d + "'", double50 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(euclidean3DVector53); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertNotNull(vector3D78); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertTrue("'" + double95 + "' != '" + 0.0d + "'", double95 == 0.0d); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d); org.junit.Assert.assertNotNull(doubleArray98); }
public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis(); double[][] doubleArray8 = rotation5.getMatrix(); java.lang.Class<?> wildcardClass9 = rotation5.getClass(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test173"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = vector3D16.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double25 = vector3D21.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double26 = vector3D24.getDelta(); double double27 = vector3D16.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D24); double double28 = vector3D8.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double35 = vector3D31.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D34); double double36 = vector3D16.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D31); double double37 = vector3D31.getNormSq(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation39 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D31, (double) 51L); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = rotation39.getAxis(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.7345682747147468d + "'", double18 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.7345682747147468d + "'", double26 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0000000000000002d + "'", double37 == 1.0000000000000002d); org.junit.Assert.assertNotNull(vector3D40); }
public void test174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test174"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0.0f, 2979.3803161142273d, 101.0d, 1.0000000000000002d, false); double double6 = rotation5.getQ1(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2979.3803161142273d + "'", double6 == 2979.3803161142273d); }
public void test175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test175"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, 0.0d, 1.382349300424506d, 22.24871540768837d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = rotation5.revert(); double double7 = rotation6.getQ1(); org.junit.Assert.assertNotNull(rotation6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.079574538E9d + "'", double7 == 1.079574538E9d); }
public void test177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test177"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); double double87 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D79, vector3D85); boolean boolean88 = vector3D79.isInfinite(); double double89 = vector3D68.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = vector3D79.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D65.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = vector3D65.orthogonal(); double double93 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, 2.7681156723791426E13d); org.apache.commons.math.geometry.Space space96 = vector3D2.getSpace(); int int97 = space96.getDimension(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + Double.POSITIVE_INFINITY + "'", double93 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(space96); org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3); }
public void test178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test178"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation85.applyTo(vector3D86); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); }
public void test179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test179"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = vector3D14.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D0.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = vector3D0.orthogonal(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector29 = vector3D27.scalarMultiply(0.0d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, 5.298292365610485d); double double32 = vector3D27.getNorm(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D27.scalarMultiply(1.2323671327895391d); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(euclidean3DVector29); org.junit.Assert.assertTrue(Double.isNaN(double32)); org.junit.Assert.assertNotNull(euclidean3DVector34); }
public void test180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test180"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = vector3D5.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double14 = vector3D10.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = vector3D13.getDelta(); double double16 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = vector3D13.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector18 = vector3D13.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); boolean boolean41 = vector3D32.isInfinite(); double double42 = vector3D21.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = vector3D32.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = vector3D43.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = vector3D46.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D46); double double54 = rotation53.getAngle(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = rotation53.getAxis(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7345682747147468d + "'", double7 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7345682747147468d + "'", double15 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(euclidean3DVector18); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertNotNull(vector3D55); }
public void test181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test181"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation84.getQ2(); double[][] doubleArray87 = rotation84.getMatrix(); double double88 = rotation84.getQ3(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(doubleArray87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); }
public void test182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test182"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 48271196340L, (double) 35, 14.202575730137095d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test183"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) (-18), 0.0d, (-0.356407136945152d)); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test184"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.079574528E9d, 0.0d, (double) 31, (-1.0d), false); double double6 = rotation5.getQ1(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test185"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = vector3D14.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D0.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = vector3D0.orthogonal(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector29 = vector3D27.scalarMultiply(0.0d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation31 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, 5.298292365610485d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double43 = vector3D39.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D42); double double44 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D36, vector3D42); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D50 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double54 = vector3D50.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D53); double double55 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D47, vector3D53); boolean boolean56 = vector3D47.isInfinite(); double double57 = vector3D36.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); double double58 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D33, vector3D47); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector59 = vector3D27.subtract((double) 2046, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertNotNull(euclidean3DVector29); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(euclidean3DVector59); }
public void test186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test186"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double18 = vector3D14.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D17); double double19 = vector3D17.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double26 = vector3D22.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = vector3D25.getDelta(); double double28 = vector3D17.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D31, vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double49 = vector3D45.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D48); double double50 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D42, vector3D48); boolean boolean51 = vector3D42.isInfinite(); double double52 = vector3D31.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D42); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = vector3D42.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double60 = vector3D56.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D59); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = vector3D53.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D17.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); double double63 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.angle(vector3D3, vector3D17); double double64 = vector3D3.getNormInf(); java.lang.String str65 = vector3D3.toString(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = vector3D67.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = vector3D67.negate(); org.apache.commons.math.exception.util.Localizable localizable70 = null; java.lang.Object[] objArray71 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) vector3D69, localizable70, objArray71); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = vector3D74.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = vector3D74.negate(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation83 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = rotation83.getAxis(); double double85 = rotation83.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation83.applyInverseTo(vector3D86); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D74.add((-1.9910581420683684d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D86); double double89 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D73, vector3D88); double double90 = vector3D69.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D88); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, vector3D3, (double) (-9700L), vector3D88); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.7345682747147468d + "'", double19 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.7345682747147468d + "'", double27 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.6702668260599606d + "'", double64 == 0.6702668260599606d); org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{0.4; 0.62; 0.67}" + "'", str65, "{0.4; 0.62; 0.67}"); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertNotNull(vector3D68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertNotNull(vector3D76); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d); org.junit.Assert.assertNotNull(vector3D86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue(Double.isNaN(double89)); org.junit.Assert.assertTrue(Double.isNaN(double90)); }
public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double4 = vector3D3.getNorm(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); boolean boolean17 = vector3D8.isInfinite(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = vector3D8.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D3.subtract(0.0d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) 30, vector3D3); double double21 = vector3D3.getX(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = vector3D3.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.MINUS_J; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation25 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D23, (-11013.232874703393d)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = vector3D3.crossProduct((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D23); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector28 = vector3D23.scalarMultiply((double) 6L); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.4009692518823901d + "'", double21 == 0.4009692518823901d); org.junit.Assert.assertNotNull(vector3D22); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertNotNull(vector3D26); org.junit.Assert.assertNotNull(euclidean3DVector28); }
public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) (short) 10, (double) (-3407872), 49.407010626447445d, 22.24871540768837d, false); double double6 = rotation5.getQ2(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 49.407010626447445d + "'", double6 == 49.407010626447445d); }
public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); java.lang.String str85 = vector3D30.toString(); java.lang.String str86 = vector3D30.toString(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{0.4; 0.62; 0.67}" + "'", str85, "{0.4; 0.62; 0.67}"); org.junit.Assert.assertEquals("'" + str86 + "' != '" + "{0.4; 0.62; 0.67}" + "'", str86, "{0.4; 0.62; 0.67}"); }
public void test190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test190"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.Space space25 = vector3D14.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double32 = vector3D28.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D31); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = vector3D38.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double47 = vector3D43.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D46); double double48 = vector3D46.getDelta(); double double49 = vector3D38.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double59 = vector3D55.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D58); double double60 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D52, vector3D58); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double70 = vector3D66.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D69); double double71 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D63, vector3D69); boolean boolean72 = vector3D63.isInfinite(); double double73 = vector3D52.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = vector3D63.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double81 = vector3D77.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D80); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D74.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D77); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = vector3D38.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); double double84 = vector3D31.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D14, vector3D31); java.lang.String str86 = vector3D31.toString(); double double87 = vector3D31.getX(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) 157247029, vector3D31, (double) 5363466260L, vector3D89); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(space25); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.7345682747147468d + "'", double40 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.7345682747147468d + "'", double48 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertNotNull(vector3D74); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.0000000000000002d + "'", double84 == 1.0000000000000002d); org.junit.Assert.assertEquals("'" + str86 + "' != '" + "{0.4; 0.62; 0.67}" + "'", str86, "{0.4; 0.62; 0.67}"); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.4009692518823901d + "'", double87 == 0.4009692518823901d); }
public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double26 = vector3D22.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D19, vector3D25); boolean boolean28 = vector3D19.isInfinite(); double double29 = vector3D8.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math.geometry.Space space30 = vector3D19.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double37 = vector3D33.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = vector3D43.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double52 = vector3D48.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); double double53 = vector3D51.getDelta(); double double54 = vector3D43.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double64 = vector3D60.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D57, vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); boolean boolean77 = vector3D68.isInfinite(); double double78 = vector3D57.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = vector3D68.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = vector3D79.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D43.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double89 = vector3D36.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation5.applyInverseTo(vector3D36); double double92 = vector3D91.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D96 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(Double.NEGATIVE_INFINITY, (double) 31, (double) (short) 1); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector97 = vector3D96.getZero(); double double98 = vector3D91.dotProduct(euclidean3DVector97); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(space30); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.7345682747147468d + "'", double45 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.7345682747147468d + "'", double53 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0000000000000002d + "'", double89 == 1.0000000000000002d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.3957773939515577E-8d + "'", double92 == 1.3957773939515577E-8d); org.junit.Assert.assertNotNull(euclidean3DVector97); org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.0d + "'", double98 == 0.0d); }
public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 101L, (-30.055369951229576d), (double) 1.07957466E9f, (-1024.0d), false); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis(); double double13 = rotation11.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = rotation11.applyInverseTo(vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = rotation5.applyInverseTo(vector3D14); double double17 = vector3D16.getNorm(); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertTrue(Double.isNaN(double17)); }
public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D27.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D27, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double62 = vector3D60.getDelta(); double double63 = vector3D52.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); double double64 = vector3D44.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector65 = vector3D44.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D66 = vector3D27.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double73 = vector3D69.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D72); double double74 = vector3D72.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.MINUS_I; double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D72, vector3D75); double double77 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D66, vector3D75); boolean boolean78 = vector3D66.isNaN(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7345682747147468d + "'", double62 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector65); org.junit.Assert.assertNotNull(vector3D66); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.7345682747147468d + "'", double74 == 0.7345682747147468d); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.40096925188239d + "'", double76 == 1.40096925188239d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 4.391417376346165d + "'", double77 == 4.391417376346165d); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); }
public void test194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test194"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = vector3D1.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = vector3D1.negate(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation10 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = rotation10.getAxis(); double double12 = rotation10.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = rotation10.applyInverseTo(vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = vector3D1.add((-1.9910581420683684d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) (-9603), vector3D15); boolean boolean17 = vector3D15.isNaN(); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); }
public void test195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test195"); org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D4 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double11 = vector3D7.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D4, vector3D10); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double22 = vector3D18.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D15, vector3D21); boolean boolean24 = vector3D15.isInfinite(); double double25 = vector3D4.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); org.apache.commons.math.geometry.Space space26 = vector3D15.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double40 = vector3D36.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D39); double double41 = vector3D39.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double48 = vector3D44.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); double double49 = vector3D47.getDelta(); double double50 = vector3D39.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double60 = vector3D56.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D59); double double61 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D53, vector3D59); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double71 = vector3D67.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D70); double double72 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D64, vector3D70); boolean boolean73 = vector3D64.isInfinite(); double double74 = vector3D53.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D64); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = vector3D64.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double82 = vector3D78.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = vector3D75.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D78); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = vector3D39.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D83); double double85 = vector3D32.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D15, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation86.revert(); double double88 = rotation87.getQ1(); double double89 = rotation87.getQ3(); double[][] doubleArray90 = rotation87.getMatrix(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException91 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) doubleArray90); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException92 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 35L, (java.lang.Object[]) doubleArray90); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(space26); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.7345682747147468d + "'", double41 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.7345682747147468d + "'", double49 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0000000000000002d + "'", double85 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation87); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertNotNull(doubleArray90); }
public void test196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test196"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); double double12 = vector3D0.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D3); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double22 = vector3D18.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D15, vector3D21); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double30 = vector3D26.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double31 = vector3D29.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); double double40 = vector3D29.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double41 = vector3D21.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); double double42 = vector3D0.dotProduct((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D29); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation44 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D29, (double) 45L); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.crossProduct(vector3D29, vector3D45); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.7345682747147468d + "'", double31 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double42)); }
public void test197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test197"); org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation7 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.079574528E9d, 0.0d, (double) 31, (-1.0d), false); double[][] doubleArray8 = rotation7.getMatrix(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) (-2.5138477123978046E97d), localizable1, (java.lang.Object[]) doubleArray8); org.junit.Assert.assertNotNull(doubleArray8); }
public void test198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test198"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation85.revert(); double double89 = rotation85.getAngle(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = rotation85.applyTo(vector3D90); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(rotation88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); }
public void test199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test199"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.MINUS_K; double double1 = vector3D0.getNormSq(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D4 = vector3D2.negate(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation11 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = rotation11.getAxis(); double double13 = rotation11.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = rotation11.applyInverseTo(vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = vector3D2.add((-1.9910581420683684d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double17 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D0, vector3D2); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D3); org.junit.Assert.assertNotNull(vector3D4); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertNotNull(vector3D15); org.junit.Assert.assertNotNull(vector3D16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.4142135623730951d + "'", double17 == 1.4142135623730951d); }
public void test200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test200"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); java.lang.String str85 = vector3D30.toString(); double double86 = vector3D30.getX(); double double87 = vector3D30.getNorm1(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{0.4; 0.62; 0.67}" + "'", str85, "{0.4; 0.62; 0.67}"); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.4009692518823901d + "'", double86 == 0.4009692518823901d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.6957086881730823d + "'", double87 == 1.6957086881730823d); }
public void test201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test201"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double[][] doubleArray86 = rotation85.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation89 = rotation85.applyTo(rotation88); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder90 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray91 = rotation85.getAngles(rotationOrder90); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException; message: Euler angles singularity"); } catch (org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(rotation88); org.junit.Assert.assertNotNull(rotation89); }
public void test202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test202"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = vector3D14.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D0.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D29.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D29.orthogonal(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector58 = vector3D56.scalarMultiply(0.0d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, 5.298292365610485d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation28.applyInverseTo(rotation60); double double62 = rotation28.getAngle(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(euclidean3DVector58); org.junit.Assert.assertNotNull(rotation61); org.junit.Assert.assertTrue(Double.isNaN(double62)); }
public void test203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test203"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double16 = vector3D12.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D9, vector3D15); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D20, vector3D26); boolean boolean29 = vector3D20.isInfinite(); double double30 = vector3D9.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double31 = vector3D2.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D20.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D20, vector3D33); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, (double) 52.0f); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation36.revert(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertTrue(Double.isNaN(double34)); org.junit.Assert.assertNotNull(rotation37); }
public void test204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test204"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 101L, (-30.055369951229576d), (double) 1.07957466E9f, (-1024.0d), false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double12 = vector3D8.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double13 = vector3D11.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = vector3D19.getDelta(); double double22 = vector3D11.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = vector3D19.negate(); double double24 = vector3D23.getZ(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double34 = vector3D30.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D33); double double35 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D27, vector3D33); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D38, vector3D44); boolean boolean47 = vector3D38.isInfinite(); double double48 = vector3D27.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = vector3D38.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double56 = vector3D52.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D49.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double58 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D23, vector3D49); org.apache.commons.math.geometry.Space space59 = vector3D23.getSpace(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector60 = vector3D23.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = rotation5.applyInverseTo(vector3D23); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector62 = vector3D61.getZero(); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.7345682747147468d + "'", double13 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.7345682747147468d + "'", double21 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(vector3D23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.6702668260599606d) + "'", double24 == (-0.6702668260599606d)); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertNotNull(space59); org.junit.Assert.assertNotNull(euclidean3DVector60); org.junit.Assert.assertNotNull(vector3D61); org.junit.Assert.assertNotNull(euclidean3DVector62); }
public void test205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test205"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation88 = rotation85.revert(); double double89 = rotation85.getAngle(); double double90 = rotation85.getAngle(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = rotation85.applyTo(vector3D91); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(rotation88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); }
public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 0.0f, 2979.3803161142273d, 101.0d, 1.0000000000000002d, false); double[][] doubleArray6 = rotation5.getMatrix(); org.junit.Assert.assertNotNull(doubleArray6); }
public void test207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test207"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = vector3D12.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = vector3D20.getDelta(); double double23 = vector3D12.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D26, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D37, vector3D43); boolean boolean46 = vector3D37.isInfinite(); double double47 = vector3D26.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = vector3D37.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double55 = vector3D51.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D48.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D12.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D61.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector63 = vector3D56.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, 3.6535299896840334E43d); double double66 = rotation65.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation65.getAxis(); double double68 = rotation65.getQ2(); double double69 = rotation65.getQ1(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7345682747147468d + "'", double14 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7345682747147468d + "'", double22 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0000000000000002d + "'", double58 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.6702668260599606d + "'", double62 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector63); org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.4795218342206279d) + "'", double66 == (-0.4795218342206279d)); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-0.4795218342206279d) + "'", double68 == (-0.4795218342206279d)); org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-0.3078974289323514d) + "'", double69 == (-0.3078974289323514d)); }
public void test208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test208"); org.apache.commons.math.geometry.euclidean.threed.RotationOrder rotationOrder0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(rotationOrder0, (double) 28L, (double) 101L, 0.693153649196163d); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ1(); double double88 = rotation85.getQ2(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d); }
public void test210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test210"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = vector3D5.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double14 = vector3D10.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); double double15 = vector3D13.getDelta(); double double16 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = vector3D13.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector18 = vector3D13.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); boolean boolean41 = vector3D32.isInfinite(); double double42 = vector3D21.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = vector3D32.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = vector3D43.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D46); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = vector3D46.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation53 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D46); double double54 = vector3D46.getZ(); double double55 = vector3D46.getNorm(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7345682747147468d + "'", double7 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7345682747147468d + "'", double15 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertNotNull(euclidean3DVector18); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(vector3D51); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.6702668260599606d + "'", double54 == 0.6702668260599606d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d); }
public void test211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test211"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = rotation94.getAxis(); double double96 = rotation94.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation97 = rotation85.applyTo(rotation94); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D98 = rotation94.getAxis(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector99 = vector3D98.getZero(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 6.09767964807105d + "'", double96 == 6.09767964807105d); org.junit.Assert.assertNotNull(rotation97); org.junit.Assert.assertNotNull(vector3D98); org.junit.Assert.assertNotNull(euclidean3DVector99); }
public void test212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test212"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.MINUS_J; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, (-11013.232874703393d)); double double3 = rotation2.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation4 = rotation2.revert(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); org.junit.Assert.assertNotNull(rotation4); }
public void test213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test213"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = vector3D0.negate(); org.apache.commons.math.exception.util.Localizable localizable3 = null; java.lang.Object[] objArray4 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) vector3D2, localizable3, objArray4); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = vector3D7.negate(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation16 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = rotation16.getAxis(); double double18 = rotation16.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = rotation16.applyInverseTo(vector3D19); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = vector3D7.add((-1.9910581420683684d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D6, vector3D21); double double23 = vector3D2.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double24 = vector3D2.getX(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); org.junit.Assert.assertNotNull(vector3D19); org.junit.Assert.assertNotNull(vector3D20); org.junit.Assert.assertNotNull(vector3D21); org.junit.Assert.assertTrue(Double.isNaN(double22)); org.junit.Assert.assertTrue(Double.isNaN(double23)); org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d)); }
public void test214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test214"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException4 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 100.0f, (java.lang.Number) Double.POSITIVE_INFINITY, (int) (short) 10); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; double[] doubleArray9 = new double[] { (byte) 1 }; double[] doubleArray10 = new double[] {}; boolean boolean11 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray9, doubleArray10); double[] doubleArray13 = new double[] { (byte) 1 }; double[] doubleArray14 = new double[] {}; boolean boolean15 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray13, doubleArray14); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection16 = null; double[] doubleArray18 = new double[] { 0 }; double[] doubleArray20 = new double[] { 0 }; double[] doubleArray22 = new double[] { 0 }; double[] doubleArray24 = new double[] { 0 }; double[] doubleArray26 = new double[] { 0 }; double[][] doubleArray27 = new double[][] { doubleArray18, doubleArray20, doubleArray22, doubleArray24, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray13, orderDirection16, doubleArray27); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, doubleArray27); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException30 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable6, (java.lang.Number) (short) 1, (java.lang.Object[]) doubleArray27); org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException((java.lang.Throwable) nonMonotonousSequenceException4, localizable5, (java.lang.Object[]) doubleArray27); org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException notARotationMatrixException32 = new org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException(localizable0, (java.lang.Object[]) doubleArray27); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation34 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray27, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException; message: a 5x1 matrix cannot be a rotation matrix"); } catch (org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0]"); org.junit.Assert.assertNotNull(doubleArray27); }
public void test215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test215"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation5.getAxis(); double[][] doubleArray8 = rotation5.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double32 = vector3D28.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D31); double double33 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D25, vector3D31); boolean boolean34 = vector3D25.isInfinite(); double double35 = vector3D14.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = vector3D25.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector37 = vector3D11.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D36); double double38 = vector3D11.getNormSq(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = vector3D11.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.5430806348152437d, vector3D39); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = rotation5.applyTo(vector3D40); double double42 = rotation5.getQ2(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertNotNull(vector3D9); org.junit.Assert.assertNotNull(vector3D11); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(euclidean3DVector37); org.junit.Assert.assertTrue("'" + double38 + "' != '" + Double.POSITIVE_INFINITY + "'", double38 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertNotNull(vector3D41); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 6.09767964807105d + "'", double42 == 6.09767964807105d); }
public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 101L, (-30.055369951229576d), (double) 1.07957466E9f, (-1024.0d), false); double double6 = rotation5.getQ1(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-30.055369951229576d) + "'", double6 == (-30.055369951229576d)); }
public void test217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test217"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation0 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = rotation0.getAxis(); double double2 = rotation0.getQ0(); org.junit.Assert.assertNotNull(rotation0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test218"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); double[][] doubleArray65 = rotation64.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation67 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(doubleArray65, 3.653529989684034E43d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(doubleArray65); }
public void test219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test219"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation84.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = rotation84.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D87.orthogonal(); org.apache.commons.math.geometry.Space space89 = vector3D88.getSpace(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(space89); }
public void test220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test220"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.079574528E9d, 0.0d, (double) 31, (-1.0d), false); double double6 = rotation5.getQ0(); double double7 = rotation5.getQ2(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.079574528E9d + "'", double6 == 1.079574528E9d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 31.0d + "'", double7 == 31.0d); }
public void test221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test221"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = rotation6.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double18 = vector3D14.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D17); double double19 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D11, vector3D17); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double29 = vector3D25.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D28); double double30 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D22, vector3D28); boolean boolean31 = vector3D22.isInfinite(); double double32 = vector3D11.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D22); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = vector3D22.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector34 = vector3D8.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D33); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D8, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation37 = rotation6.applyInverseTo(rotation36); double[][] doubleArray38 = rotation6.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException notARotationMatrixException39 = new org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException(localizable0, (java.lang.Object[]) doubleArray38); // The following exception was thrown during execution in test generation try { java.lang.Object obj41 = notARotationMatrixException39.getContext(""); org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This class is deprecated; calling this method is a bug."); } catch (java.lang.UnsupportedOperationException e) { // Expected exception. } org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(vector3D33); org.junit.Assert.assertNotNull(euclidean3DVector34); org.junit.Assert.assertNotNull(rotation37); org.junit.Assert.assertNotNull(doubleArray38); }
public void test222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test222"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double12 = vector3D8.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D11); double double13 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D5, vector3D11); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double23 = vector3D19.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double24 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D16, vector3D22); boolean boolean25 = vector3D16.isInfinite(); double double26 = vector3D5.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = vector3D16.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double34 = vector3D30.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D33); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = vector3D27.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = vector3D30.normalize(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation38 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D30, (double) (-1023)); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double48 = vector3D44.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); double double49 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D41, vector3D47); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double56 = vector3D52.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); double double57 = vector3D55.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double64 = vector3D60.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = vector3D63.getDelta(); double double66 = vector3D55.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double67 = vector3D47.distance1((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector68 = vector3D47.normalize(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = vector3D30.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = vector3D47.scalarMultiply((-0.8390715290764524d)); double double72 = vector3D47.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector73 = vector3D47.getZero(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.053671212772351E-8d, vector3D1, 5.556986945999465E-24d, vector3D47); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(vector3D27); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.7345682747147468d + "'", double57 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.7345682747147468d + "'", double65 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(euclidean3DVector68); org.junit.Assert.assertNotNull(vector3D69); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.6702668260599606d + "'", double72 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector73); }
public void test223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test223"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation2 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, (double) 1077805056); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test224"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double4 = vector3D3.getNorm(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); boolean boolean17 = vector3D8.isInfinite(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = vector3D8.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector19 = vector3D3.subtract(0.0d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D((double) 30, vector3D3); double double21 = vector3D3.getX(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation27 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = rotation27.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = rotation27.getAxis(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector30 = vector3D29.normalize(); double double31 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.angle(vector3D3, vector3D29); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = vector3D45.negate(); double double50 = vector3D49.getZ(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double60 = vector3D56.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D59); double double61 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D53, vector3D59); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double71 = vector3D67.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D70); double double72 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D64, vector3D70); boolean boolean73 = vector3D64.isInfinite(); double double74 = vector3D53.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D64); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = vector3D64.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double82 = vector3D78.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = vector3D75.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D78); double double84 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D49, vector3D75); double double85 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(vector3D18); org.junit.Assert.assertNotNull(euclidean3DVector19); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.4009692518823901d + "'", double21 == 0.4009692518823901d); org.junit.Assert.assertNotNull(vector3D28); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertNotNull(euclidean3DVector30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.983370962257916d + "'", double31 == 1.983370962257916d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(vector3D49); org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.6702668260599606d) + "'", double50 == (-0.6702668260599606d)); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.6702668251336698d + "'", double85 == 0.6702668251336698d); }
public void test225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test225"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); double[][] doubleArray88 = rotation85.getMatrix(); double double89 = rotation85.getQ0(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(doubleArray88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1.0d) + "'", double89 == (-1.0d)); }
public void test226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test226"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation((double) 9700L, 1.053671212772351E-8d, (-0.7853981633974483d), (double) 3, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double12 = vector3D8.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D11); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); double double64 = vector3D11.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double68 = vector3D67.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector69 = vector3D62.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D67); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation71 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D67, 3.6535299896840334E43d); double double72 = rotation71.getQ0(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation73 = rotation5.applyTo(rotation71); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0000000000000002d + "'", double64 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.6702668260599606d + "'", double68 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector69); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.6405902461256647d + "'", double72 == 0.6405902461256647d); org.junit.Assert.assertNotNull(rotation73); }
public void test227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test227"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D4 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double11 = vector3D7.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D10); double double12 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D4, vector3D10); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double22 = vector3D18.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); double double23 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D15, vector3D21); boolean boolean24 = vector3D15.isInfinite(); double double25 = vector3D4.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); org.apache.commons.math.geometry.Space space26 = vector3D15.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double40 = vector3D36.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D39); double double41 = vector3D39.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double48 = vector3D44.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); double double49 = vector3D47.getDelta(); double double50 = vector3D39.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D59 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double60 = vector3D56.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D59); double double61 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D53, vector3D59); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D70 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double71 = vector3D67.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D70); double double72 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D64, vector3D70); boolean boolean73 = vector3D64.isInfinite(); double double74 = vector3D53.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D64); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = vector3D64.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double82 = vector3D78.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = vector3D75.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D78); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D84 = vector3D39.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D83); double double85 = vector3D32.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation86 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D15, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation87 = rotation86.revert(); double[][] doubleArray88 = rotation87.getMatrix(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = rotation87.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = org.apache.commons.math.geometry.euclidean.threed.Rotation.IDENTITY; org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = rotation87.applyTo(rotation90); double[][] doubleArray92 = rotation87.getMatrix(); org.apache.commons.math.exception.NullArgumentException nullArgumentException93 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) doubleArray92); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException94 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray92); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(space26); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.7345682747147468d + "'", double41 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.7345682747147468d + "'", double49 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d); org.junit.Assert.assertNotNull(vector3D75); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertNotNull(vector3D84); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0000000000000002d + "'", double85 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation87); org.junit.Assert.assertNotNull(doubleArray88); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertNotNull(rotation90); org.junit.Assert.assertNotNull(rotation91); org.junit.Assert.assertNotNull(doubleArray92); }
public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = vector3D0.negate(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation9 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = rotation9.getAxis(); double double11 = rotation9.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = rotation9.applyInverseTo(vector3D12); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = vector3D0.add((-1.9910581420683684d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double24 = vector3D20.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D23); double double25 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D17, vector3D23); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double35 = vector3D31.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D34); double double36 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D28, vector3D34); boolean boolean37 = vector3D28.isInfinite(); double double38 = vector3D17.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D28); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D39 = vector3D28.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = vector3D39.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D42); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.ZERO; double double49 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D39, vector3D48); double double50 = vector3D39.getZ(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.POSITIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; java.text.NumberFormat numberFormat55 = null; java.lang.String str56 = vector3D54.toString(numberFormat55); org.apache.commons.math.exception.util.Localizable localizable57 = null; org.apache.commons.math.exception.util.Localizable localizable58 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException62 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable58, (java.lang.Number) 0, (java.lang.Number) Double.NaN, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException66 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 10L, (java.lang.Number) 0.7345682747147467d, (int) (byte) 1); numberIsTooSmallException62.addSuppressed((java.lang.Throwable) nonMonotonousSequenceException66); java.lang.Throwable[] throwableArray68 = numberIsTooSmallException62.getSuppressed(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) vector3D54, localizable57, (java.lang.Object[]) throwableArray68); double double70 = vector3D54.getNormSq(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = vector3D52.add(2.220446049250313E-16d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = vector3D39.subtract(0.3240512624743061d, (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector74 = vector3D52.scalarMultiply(30.162848702026007d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation75 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D12, vector3D52); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertNotNull(vector3D1); org.junit.Assert.assertNotNull(vector3D2); org.junit.Assert.assertNotNull(vector3D10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d); org.junit.Assert.assertNotNull(vector3D12); org.junit.Assert.assertNotNull(vector3D13); org.junit.Assert.assertNotNull(vector3D14); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(vector3D39); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertNotNull(vector3D47); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.6702668260599606d + "'", double49 == 0.6702668260599606d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.6702668260599606d) + "'", double50 == (-0.6702668260599606d)); org.junit.Assert.assertNotNull(vector3D52); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{(NaN); (NaN); (NaN)}" + "'", str56, "{(NaN); (NaN); (NaN)}"); org.junit.Assert.assertNotNull(throwableArray68); org.junit.Assert.assertTrue(Double.isNaN(double70)); org.junit.Assert.assertNotNull(vector3D71); org.junit.Assert.assertNotNull(vector3D72); org.junit.Assert.assertNotNull(euclidean3DVector74); }
public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); double double7 = rotation5.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = rotation5.getAxis(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d); org.junit.Assert.assertNotNull(vector3D8); }
public void test230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test230"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(Double.NEGATIVE_INFINITY, (double) 31, (double) (short) 1); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector4 = vector3D3.getZero(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation6 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D3, 4.644298430695373d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D10, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); boolean boolean30 = vector3D21.isInfinite(); double double31 = vector3D10.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D21.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector33 = vector3D7.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = vector3D7.getNormSq(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = vector3D7.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = rotation6.applyInverseTo(vector3D35); org.junit.Assert.assertNotNull(euclidean3DVector4); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(euclidean3DVector33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(vector3D35); org.junit.Assert.assertNotNull(vector3D36); }
public void test231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test231"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation85 = rotation84.revert(); double double86 = rotation85.getQ1(); double double87 = rotation85.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = rotation85.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(0.0d, (double) 100, (double) 32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D93 = rotation85.applyInverseTo(vector3D92); java.lang.String str94 = vector3D92.toString(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D95 = vector3D92.orthogonal(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector97 = vector3D92.scalarMultiply(1.0000000000000002d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertNotNull(rotation85); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D93); org.junit.Assert.assertEquals("'" + str94 + "' != '" + "{0; 100; 32}" + "'", str94, "{0; 100; 32}"); org.junit.Assert.assertNotNull(vector3D95); org.junit.Assert.assertNotNull(euclidean3DVector97); }
public void test232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test232"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); double double7 = vector3D5.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double18 = vector3D14.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D17); double double19 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D11, vector3D17); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D28 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double29 = vector3D25.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D28); double double30 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D22, vector3D28); boolean boolean31 = vector3D22.isInfinite(); double double32 = vector3D11.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D22); double double33 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D8, vector3D22); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D5, vector3D22); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double41 = vector3D37.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D40); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D47 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double48 = vector3D44.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D47); double double49 = vector3D47.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double56 = vector3D52.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); double double57 = vector3D55.getDelta(); double double58 = vector3D47.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double68 = vector3D64.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D67); double double69 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D61, vector3D67); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D78 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double79 = vector3D75.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D78); double double80 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D72, vector3D78); boolean boolean81 = vector3D72.isInfinite(); double double82 = vector3D61.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D72); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = vector3D72.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double90 = vector3D86.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D89); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D91 = vector3D83.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = vector3D47.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D91); double double93 = vector3D40.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D91); double double94 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance(vector3D5, vector3D91); // The following exception was thrown during execution in test generation try { org.apache.commons.math.geometry.euclidean.threed.Rotation rotation96 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D91, (double) 1073741824L); org.junit.Assert.fail("Expected anonymous exception"); } catch (java.lang.ArithmeticException e) { // Expected exception. if (!e.getClass().isAnonymousClass()) { org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName()); } } org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.7345682747147468d + "'", double7 == 0.7345682747147468d); org.junit.Assert.assertNotNull(vector3D8); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.7345682747147468d + "'", double49 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.7345682747147468d + "'", double57 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertNotNull(vector3D83); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(vector3D91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.0000000000000002d + "'", double93 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d); }
public void test233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test233"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.Space space24 = vector3D13.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); double double39 = vector3D37.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double46 = vector3D42.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); double double47 = vector3D45.getDelta(); double double48 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D45); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double58 = vector3D54.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); double double59 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D51, vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double69 = vector3D65.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); double double70 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D62, vector3D68); boolean boolean71 = vector3D62.isInfinite(); double double72 = vector3D51.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D73 = vector3D62.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D76 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double80 = vector3D76.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D81 = vector3D73.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D76); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = vector3D37.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); double double83 = vector3D30.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D81); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation84 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D13, vector3D30); double double85 = rotation84.getQ0(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(space24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.7345682747147468d + "'", double39 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.7345682747147468d + "'", double47 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d); org.junit.Assert.assertNotNull(vector3D73); org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d); org.junit.Assert.assertNotNull(vector3D81); org.junit.Assert.assertNotNull(vector3D82); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000002d + "'", double83 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d); }
public void test234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test234"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D3 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double10 = vector3D6.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D9); double double11 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D3, vector3D9); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D14, vector3D20); boolean boolean23 = vector3D14.isInfinite(); double double24 = vector3D3.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = vector3D14.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector26 = vector3D0.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation28 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D0, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector55 = vector3D29.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D29.orthogonal(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector58 = vector3D56.scalarMultiply(0.0d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation60 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D56, 5.298292365610485d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation61 = rotation28.applyInverseTo(rotation60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = rotation28.getAxis(); org.junit.Assert.assertNotNull(vector3D0); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(vector3D25); org.junit.Assert.assertNotNull(euclidean3DVector26); org.junit.Assert.assertNotNull(vector3D29); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertNotNull(euclidean3DVector55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(euclidean3DVector58); org.junit.Assert.assertNotNull(rotation61); org.junit.Assert.assertNotNull(vector3D62); }
public void test235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test235"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(1.079574528E9d, 0.0d, (double) 31, (-1.0d), false); double double6 = rotation5.getQ2(); double double7 = rotation5.getAngle(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 31.0d + "'", double6 == 31.0d); org.junit.Assert.assertTrue(Double.isNaN(double7)); }
public void test236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test236"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D6 = rotation5.getAxis(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D10 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double17 = vector3D13.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D16); double double18 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D10, vector3D16); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D21 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double28 = vector3D24.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); double double29 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D21, vector3D27); boolean boolean30 = vector3D21.isInfinite(); double double31 = vector3D10.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D21); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D21.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector33 = vector3D7.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation35 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D7, 1.079574538E9d); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation36 = rotation5.applyInverseTo(rotation35); double double37 = rotation36.getQ1(); double double38 = rotation36.getQ3(); org.junit.Assert.assertNotNull(vector3D6); org.junit.Assert.assertNotNull(vector3D7); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertNotNull(euclidean3DVector33); org.junit.Assert.assertNotNull(rotation36); org.junit.Assert.assertTrue(Double.isNaN(double37)); org.junit.Assert.assertTrue(Double.isNaN(double38)); }
public void test237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test237"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D13 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D16 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double20 = vector3D16.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); double double21 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D13, vector3D19); boolean boolean22 = vector3D13.isInfinite(); double double23 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D13); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D24 = vector3D13.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D27 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D30 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double31 = vector3D27.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D30); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = vector3D24.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D27); boolean boolean33 = vector3D27.isInfinite(); java.lang.Object obj34 = null; boolean boolean35 = vector3D27.equals(obj34); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = vector3D36.negate(); org.apache.commons.math.exception.util.Localizable localizable39 = null; java.lang.Object[] objArray40 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) vector3D38, localizable39, objArray40); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.ZERO; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.PLUS_I; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D45 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation52 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D53 = rotation52.getAxis(); double double54 = rotation52.getQ3(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NaN; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = rotation52.applyInverseTo(vector3D55); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D43.add((-1.9910581420683684d), (org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D55); double double58 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distance1(vector3D42, vector3D57); double double59 = vector3D38.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector60 = vector3D38.normalize(); double double61 = vector3D27.distanceSq(euclidean3DVector60); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(vector3D24); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(vector3D32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(vector3D36); org.junit.Assert.assertNotNull(vector3D37); org.junit.Assert.assertNotNull(vector3D38); org.junit.Assert.assertNotNull(vector3D42); org.junit.Assert.assertNotNull(vector3D43); org.junit.Assert.assertNotNull(vector3D44); org.junit.Assert.assertNotNull(vector3D45); org.junit.Assert.assertNotNull(vector3D53); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d); org.junit.Assert.assertNotNull(vector3D55); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue(Double.isNaN(double58)); org.junit.Assert.assertTrue(Double.isNaN(double59)); org.junit.Assert.assertNotNull(euclidean3DVector60); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2.80193850376478d + "'", double61 == 2.80193850376478d); }
public void test238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test238"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double9 = vector3D5.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D8); double double10 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D2, vector3D8); boolean boolean11 = vector3D2.isInfinite(); double double12 = vector3D2.getNorm1(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double19 = vector3D15.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D18); double double20 = vector3D18.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = vector3D26.getDelta(); double double29 = vector3D18.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D35 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D38 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double39 = vector3D35.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D38); double double40 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D32, vector3D38); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D46 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double50 = vector3D46.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D49); double double51 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D43, vector3D49); boolean boolean52 = vector3D43.isInfinite(); double double53 = vector3D32.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = vector3D43.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double61 = vector3D57.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D60); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D62 = vector3D54.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D57); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = vector3D18.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D62); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation64 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, vector3D18); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.NEGATIVE_INFINITY; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); double double87 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D79, vector3D85); boolean boolean88 = vector3D79.isInfinite(); double double89 = vector3D68.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D79); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D90 = vector3D79.negate(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector91 = vector3D65.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D90); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D92 = vector3D65.orthogonal(); double double93 = vector3D2.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D65); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D2, 2.7681156723791426E13d); double double96 = rotation95.getQ1(); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.6957086881730823d + "'", double12 == 1.6957086881730823d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7345682747147468d + "'", double20 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.7345682747147468d + "'", double28 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(vector3D54); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(vector3D62); org.junit.Assert.assertNotNull(vector3D63); org.junit.Assert.assertNotNull(vector3D65); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertNotNull(vector3D90); org.junit.Assert.assertNotNull(euclidean3DVector91); org.junit.Assert.assertNotNull(vector3D92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + Double.POSITIVE_INFINITY + "'", double93 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-0.1703758816464326d) + "'", double96 == (-0.1703758816464326d)); }
public void test239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test239"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, number1, (java.lang.Number) (byte) -1, false); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D15 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double16 = vector3D12.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D15); double double17 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D9, vector3D15); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D23 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double27 = vector3D23.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D26); double double28 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D20, vector3D26); boolean boolean29 = vector3D20.isInfinite(); double double30 = vector3D9.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.Space space31 = vector3D20.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D34 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double38 = vector3D34.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D41 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D44 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double45 = vector3D41.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D44); double double46 = vector3D44.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D49 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D52 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double53 = vector3D49.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); double double54 = vector3D52.getDelta(); double double55 = vector3D44.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D52); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D58 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D64 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double65 = vector3D61.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D64); double double66 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D58, vector3D64); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D69 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D72 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D75 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double76 = vector3D72.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D75); double double77 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D69, vector3D75); boolean boolean78 = vector3D69.isInfinite(); double double79 = vector3D58.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D69); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D80 = vector3D69.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D83 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D86 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double87 = vector3D83.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D86); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D80.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D83); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D89 = vector3D44.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D88); double double90 = vector3D37.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D88); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation91 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D20, vector3D37); double double92 = rotation91.getQ2(); double[][] doubleArray93 = rotation91.getMatrix(); org.apache.commons.math.MathException mathException94 = new org.apache.commons.math.MathException(localizable6, (java.lang.Object[]) doubleArray93); org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException(localizable5, (java.lang.Object[]) doubleArray93); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) mathException95); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(space31); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.7345682747147468d + "'", double46 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.7345682747147468d + "'", double54 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertNotNull(vector3D80); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertNotNull(vector3D89); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1.0000000000000002d + "'", double90 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d); org.junit.Assert.assertNotNull(doubleArray93); }
public void test240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test240"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(9.033252629052738d, 1.079574538E9d, 6.09767964807105d, (double) (short) 1, false); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D8 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D11 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D14 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double15 = vector3D11.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D14); double double16 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D8, vector3D14); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D19 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D22 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double26 = vector3D22.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D25); double double27 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D19, vector3D25); boolean boolean28 = vector3D19.isInfinite(); double double29 = vector3D8.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D19); org.apache.commons.math.geometry.Space space30 = vector3D19.getSpace(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D33 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D36 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double37 = vector3D33.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D36); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = vector3D43.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double52 = vector3D48.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); double double53 = vector3D51.getDelta(); double double54 = vector3D43.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D60 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D63 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double64 = vector3D60.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D63); double double65 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D57, vector3D63); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D68 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D71 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D74 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double75 = vector3D71.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D74); double double76 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D68, vector3D74); boolean boolean77 = vector3D68.isInfinite(); double double78 = vector3D57.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D68); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D79 = vector3D68.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D82 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double86 = vector3D82.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D85); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D87 = vector3D79.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D82); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D88 = vector3D43.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); double double89 = vector3D36.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D87); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation90 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D19, vector3D36); double double91 = rotation90.getQ2(); double double92 = rotation90.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation93 = rotation90.revert(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation94 = rotation93.revert(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation95 = rotation5.applyTo(rotation93); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d); org.junit.Assert.assertNotNull(space30); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.7345682747147468d + "'", double45 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.7345682747147468d + "'", double53 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d); org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertNotNull(vector3D79); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(vector3D87); org.junit.Assert.assertNotNull(vector3D88); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1.0000000000000002d + "'", double89 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d); org.junit.Assert.assertNotNull(rotation93); org.junit.Assert.assertNotNull(rotation94); org.junit.Assert.assertNotNull(rotation95); }
public void test241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test241"); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation5 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(0.0d, (double) 54881158701L, (-0.8813735870195429d), 8.881784197001252E-16d, false); }
public void test242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test242"); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D2 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D5 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double6 = vector3D2.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D5); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D9 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D12 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double13 = vector3D9.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D12); double double14 = vector3D12.getDelta(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D17 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D20 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double21 = vector3D17.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); double double22 = vector3D20.getDelta(); double double23 = vector3D12.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D20); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D26 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D29 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D32 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double33 = vector3D29.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D32); double double34 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D26, vector3D32); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D37 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D40 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double44 = vector3D40.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D43); double double45 = org.apache.commons.math.geometry.euclidean.threed.Vector3D.distanceInf(vector3D37, vector3D43); boolean boolean46 = vector3D37.isInfinite(); double double47 = vector3D26.distance((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D37); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D48 = vector3D37.negate(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D51 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D54 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double55 = vector3D51.distanceInf((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D54); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D56 = vector3D48.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D51); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D57 = vector3D12.add((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); double double58 = vector3D5.distanceSq((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D56); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D61 = new org.apache.commons.math.geometry.euclidean.threed.Vector3D(1.0d, 0.7345682747147467d); double double62 = vector3D61.getNormInf(); org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D> euclidean3DVector63 = vector3D56.subtract((org.apache.commons.math.geometry.Vector<org.apache.commons.math.geometry.euclidean.threed.Euclidean3D>) vector3D61); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation65 = new org.apache.commons.math.geometry.euclidean.threed.Rotation(vector3D61, 3.6535299896840334E43d); double double66 = rotation65.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Vector3D vector3D67 = rotation65.getAxis(); double double68 = rotation65.getQ2(); org.apache.commons.math.geometry.euclidean.threed.Rotation rotation69 = rotation65.revert(); double double70 = rotation69.getQ2(); double double71 = rotation69.getQ0(); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.7345682747147468d + "'", double14 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.7345682747147468d + "'", double22 == 0.7345682747147468d); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(vector3D48); org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d); org.junit.Assert.assertNotNull(vector3D56); org.junit.Assert.assertNotNull(vector3D57); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0000000000000002d + "'", double58 == 1.0000000000000002d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.6702668260599606d + "'", double62 == 0.6702668260599606d); org.junit.Assert.assertNotNull(euclidean3DVector63); org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-0.4795218342206279d) + "'", double66 == (-0.4795218342206279d)); org.junit.Assert.assertNotNull(vector3D67); org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-0.4795218342206279d) + "'", double68 == (-0.4795218342206279d)); org.junit.Assert.assertNotNull(rotation69); org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-0.4795218342206279d) + "'", double70 == (-0.4795218342206279d)); org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-0.6405902461256647d) + "'", double71 == (-0.6405902461256647d)); }
