public void test00() throws Throwable { double[][] doubleArray0 = new double[3][3]; Rotation rotation0 = new Rotation(doubleArray0, 3913.958); Rotation.distance(rotation0, rotation0); }
public void test01() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; Rotation rotation1 = rotation0.revert(); assertEquals((-1.0), rotation1.getQ0(), 0.01); assertEquals(0.0, rotation1.getQ2(), 0.01); assertEquals(0.0, rotation1.getQ1(), 0.01); assertEquals(0.0, rotation1.getQ3(), 0.01); }
public void test02() throws Throwable { Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY; Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0); double double0 = rotation0.getQ3(); assertEquals(Double.NaN, double0, 0.01); }
public void test03() throws Throwable { Rotation rotation0 = new Rotation(311.0068281309633, 311.0068281309633, 311.0068281309633, 311.0068281309633, false); double double0 = rotation0.getQ1(); assertEquals(311.0068281309633, rotation0.getQ0(), 0.01); assertEquals(311.0068281309633, rotation0.getQ2(), 0.01); assertEquals(311.0068281309633, double0, 0.01); assertEquals(311.0068281309633, rotation0.getQ3(), 0.01); }
public void test04() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; double double0 = rotation0.getQ2(); assertEquals(0.0, double0, 0.01); }
public void test05() throws Throwable { Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY; Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0); double double0 = rotation0.getQ0(); assertEquals(Double.NaN, double0, 0.01); }
public void test06() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.XYZ; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); double[][] doubleArray1 = new double[3][5]; doubleArray1[0] = doubleArray0; Rotation rotation1 = null; try { rotation1 = new Rotation(doubleArray1, 0.0); fail("Expecting exception: Exception"); } catch(Throwable e) { // // a 3x3 matrix cannot be a rotation matrix // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test07() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.XZX; Rotation rotation0 = new Rotation(rotationOrder0, (-0.5), (-0.5), (-8.0E298)); double[][] doubleArray0 = rotation0.getMatrix(); assertEquals(3, doubleArray0.length); Rotation rotation1 = new Rotation(doubleArray0, 989.83100217457); assertEquals((-0.23836299731486169), rotation1.getQ2(), 0.01); assertEquals(0.23836299731486169, rotation0.getQ2(), 0.01); assertEquals((-0.9436564753613543), rotation0.getQ1(), 0.01); assertEquals(0.06627066142637239, rotation1.getQ3(), 0.01); }
public void test08() throws Throwable { Rotation rotation0 = new Rotation((-0.9732354749425349), (-0.9732354749425349), (-0.9732354749425349), 1.6320064742381655E7, true); RotationOrder rotationOrder0 = RotationOrder.XZX; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test09() throws Throwable { Vector3D vector3D0 = Vector3D.ZERO; Rotation rotation0 = null; try { rotation0 = new Rotation(vector3D0, 1856.0); fail("Expecting exception: ArithmeticException"); } catch(ArithmeticException e) { // // zero norm for rotation axis // verifyException("org.apache.commons.math.MathRuntimeException", e); } }
public void test10() throws Throwable { double[][] doubleArray0 = new double[0][6]; Rotation rotation0 = null; try { rotation0 = new Rotation(doubleArray0, 1.1102230246251565E-16); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { // // 0 // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test11() throws Throwable { double[][] doubleArray0 = new double[3][5]; Rotation rotation0 = null; try { rotation0 = new Rotation(doubleArray0, 0.9999999999); fail("Expecting exception: Exception"); } catch(Throwable e) { // // a 3x5 matrix cannot be a rotation matrix // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test12() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.XYZ; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); double[][] doubleArray1 = new double[3][5]; doubleArray1[0] = doubleArray0; doubleArray1[1] = doubleArray0; Rotation rotation1 = null; try { rotation1 = new Rotation(doubleArray1, 0.0); fail("Expecting exception: Exception"); } catch(Throwable e) { // // a 3x3 matrix cannot be a rotation matrix // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test13() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.XYX; Rotation rotation0 = new Rotation(rotationOrder0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308); double[][] doubleArray0 = rotation0.getMatrix(); Rotation rotation1 = new Rotation(doubleArray0, 1.7976931348623157E308); assertEquals((-0.0024809544878424674), rotation0.getQ0(), 0.01); assertEquals(1.2310535552449626E-5, rotation1.getQ1(), 0.01); assertEquals(0.0, rotation1.getQ3(), 0.01); assertEquals((-0.9999969223519042), rotation0.getQ2(), 0.01); }
public void test14() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.XZX; Rotation rotation0 = new Rotation(rotationOrder0, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308); double[][] doubleArray0 = rotation0.getMatrix(); Rotation rotation1 = new Rotation(doubleArray0, 1.7976931348623157E308); assertEquals((-0.9999969223519042), rotation0.getQ3(), 0.01); assertEquals(0.0, rotation1.getQ2(), 0.01); assertEquals(0.002480954487842468, rotation1.getQ0(), 0.01); assertEquals((-1.2310535552449627E-5), rotation0.getQ1(), 0.01); }
public void test15() throws Throwable { Vector3D vector3D0 = Vector3D.ZERO; Rotation rotation0 = null; try { rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // zero norm for rotation defining vector // verifyException("org.apache.commons.math.MathRuntimeException", e); } }
public void test16() throws Throwable { Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY; Vector3D vector3D1 = Vector3D.ZERO; Rotation rotation0 = null; try { rotation0 = new Rotation(vector3D0, vector3D1, vector3D0, vector3D0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // zero norm for rotation defining vector // verifyException("org.apache.commons.math.MathRuntimeException", e); } }
public void test17() throws Throwable { Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY; Vector3D vector3D1 = Vector3D.ZERO; Rotation rotation0 = null; try { rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // zero norm for rotation defining vector // verifyException("org.apache.commons.math.MathRuntimeException", e); } }
public void test18() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_K; Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0); Rotation rotation0 = null; try { rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // zero norm for rotation defining vector // verifyException("org.apache.commons.math.MathRuntimeException", e); } }
public void test19() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_K; Vector3D vector3D1 = Vector3D.PLUS_I; Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1); assertEquals(0.0, rotation0.getQ1(), 0.01); }
public void test20() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_I; Vector3D vector3D1 = Vector3D.MINUS_J; Rotation rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D0); assertEquals(0.7071067811865475, rotation0.getQ1(), 0.01); }
public void test21() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_K; Vector3D vector3D1 = new Vector3D((-0.1), (-0.1)); Vector3D vector3D2 = Vector3D.PLUS_I; Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D1, vector3D2); assertEquals((-0.0917255959334822), rotation0.getQ2(), 0.01); }
public void test22() throws Throwable { Vector3D vector3D0 = Vector3D.ZERO; Rotation rotation0 = null; try { rotation0 = new Rotation(vector3D0, vector3D0); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // zero norm for rotation defining vector // verifyException("org.apache.commons.math.MathRuntimeException", e); } }
public void test23() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_I; Vector3D vector3D1 = new Vector3D((-3165.8539959), vector3D0, (-3165.8539959), vector3D0, (-2595.23686251389), vector3D0); Rotation rotation0 = new Rotation(vector3D1, vector3D0); RotationOrder rotationOrder0 = RotationOrder.XYX; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test24() throws Throwable { Rotation rotation0 = new Rotation((-0.1), (-0.1), (-0.1), (-0.1), false); Vector3D vector3D0 = rotation0.getAxis(); assertEquals((-0.5773502691896256), vector3D0.getY(), 0.01); assertEquals((-0.5773502691896256), vector3D0.getX(), 0.01); assertEquals(1.7320508075688767, vector3D0.getNorm1(), 0.01); assertEquals((-0.5773502691896256), vector3D0.getZ(), 0.01); }
public void test25() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; Vector3D vector3D0 = rotation0.getAxis(); assertEquals(1.0, vector3D0.getX(), 0.01); assertEquals(1.0, vector3D0.getNormSq(), 0.01); }
public void test26() throws Throwable { Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY; Rotation rotation0 = new Rotation(vector3D0, vector3D0); Vector3D vector3D1 = rotation0.getAxis(); assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01); }
public void test27() throws Throwable { double[][] doubleArray0 = new double[3][3]; Rotation rotation0 = new Rotation(doubleArray0, 3913.958); Rotation rotation1 = rotation0.applyInverseTo(rotation0); double double0 = Rotation.distance(rotation1, rotation1); assertEquals(3.0165111299968106, double0, 0.01); assertEquals((-0.25), rotation1.getQ0(), 0.01); assertEquals(0.0, rotation1.getQ1(), 0.01); }
public void test28() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; double double0 = rotation0.getAngle(); assertEquals(0.0, double0, 0.01); }
public void test29() throws Throwable { Vector3D vector3D0 = Vector3D.NaN; Rotation rotation0 = new Rotation(vector3D0, vector3D0); double double0 = Rotation.distance(rotation0, rotation0); assertEquals(Double.NaN, double0, 0.01); }
public void test30() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_I; Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0); RotationOrder rotationOrder0 = RotationOrder.ZXZ; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertEquals(3, doubleArray0.length); }
public void test31() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.XYZ; Rotation rotation0 = new Rotation((-0.1), (-0.1), (-0.1), 402442.07376740675, false); try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test32() throws Throwable { Rotation rotation0 = new Rotation(1.5, 2756.065375, 1.5, 1.5, false); RotationOrder rotationOrder0 = RotationOrder.XYZ; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test33() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.XZY; Rotation rotation0 = new Rotation((-0.1), 0.0416870174, (-686.64099664035), (-0.1), false); try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test34() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.XZY; Rotation rotation0 = new Rotation((-18.71281009672201), 0.0416870174, 0.0416870174, (-18.71281009672201), false); try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test35() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.XZY; Rotation rotation0 = Rotation.IDENTITY; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01); }
public void test36() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.YXZ; Rotation rotation0 = new Rotation((-18.71281009672201), (-18.71281009672201), 0.0416870174, (-18.71281009672201), false); try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test37() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.YXZ; Rotation rotation0 = new Rotation((-18.71281009672201), 0.0416870174, 0.0416870174, (-18.71281009672201), false); try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test38() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.YXZ; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01); }
public void test39() throws Throwable { Rotation rotation0 = new Rotation(1.0698219031952798E7, 963.51741, 963.51741, (-199.84737664), false); RotationOrder rotationOrder0 = RotationOrder.YZX; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test40() throws Throwable { Rotation rotation0 = new Rotation(1.0698219031952798E7, 963.51741, 963.51741, 1.0698219031952798E7, false); RotationOrder rotationOrder0 = RotationOrder.YZX; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test41() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.YZX; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01); }
public void test42() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.ZXY; Rotation rotation0 = Rotation.IDENTITY; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01); }
public void test43() throws Throwable { Rotation rotation0 = new Rotation(0.1, (-1164.448896031811), (-1164.448896031811), 7.782818743633559, false); RotationOrder rotationOrder0 = RotationOrder.ZXY; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test44() throws Throwable { Rotation rotation0 = new Rotation(0.1, (-1163.299863033), (-1163.299863033), 1.997844754509471E-9, false); RotationOrder rotationOrder0 = RotationOrder.ZXY; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test45() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.ZYX; Rotation rotation0 = new Rotation((-0.1), (-0.1), (-0.1), 402442.07376740675, false); try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test46() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.ZYX; Rotation rotation0 = new Rotation(1673.47, (-730.4736022), 1673.47, (-730.4736022), true); try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Cardan angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test47() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.ZYX; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01); }
public void test48() throws Throwable { Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY; Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0); RotationOrder rotationOrder0 = RotationOrder.XYX; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01); }
public void test49() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.XYX; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test50() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_I; Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0); RotationOrder rotationOrder0 = RotationOrder.XZX; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01); }
public void test51() throws Throwable { RotationOrder rotationOrder0 = RotationOrder.XZX; Rotation rotation0 = Rotation.IDENTITY; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test52() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_I; Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0); RotationOrder rotationOrder0 = RotationOrder.YXY; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01); }
public void test53() throws Throwable { Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 0.0, false); RotationOrder rotationOrder0 = RotationOrder.YXY; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test54() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.YXY; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test55() throws Throwable { Vector3D vector3D0 = Vector3D.NaN; Rotation rotation0 = new Rotation(vector3D0, vector3D0); RotationOrder rotationOrder0 = RotationOrder.YZY; double[] doubleArray0 = rotation0.getAngles(rotationOrder0); assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01); }
public void test56() throws Throwable { Vector3D vector3D0 = Vector3D.MINUS_I; Vector3D vector3D1 = Vector3D.PLUS_I; Rotation rotation0 = new Rotation(vector3D0, vector3D1); RotationOrder rotationOrder0 = RotationOrder.YZY; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test57() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.YZY; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test58() throws Throwable { Vector3D vector3D0 = Vector3D.PLUS_J; Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0); double[] doubleArray0 = rotation0.getAngles((RotationOrder) null); assertEquals(3, doubleArray0.length); }
public void test59() throws Throwable { Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 0.0, false); RotationOrder rotationOrder0 = RotationOrder.ZXZ; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test60() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.ZXZ; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test61() throws Throwable { Rotation rotation0 = new Rotation(0.0, 0.0, 0.0, 0.0, false); try { rotation0.getAngles((RotationOrder) null); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test62() throws Throwable { Rotation rotation0 = Rotation.IDENTITY; RotationOrder rotationOrder0 = RotationOrder.ZYZ; try { rotation0.getAngles(rotationOrder0); fail("Expecting exception: Exception"); } catch(Exception e) { // // Euler angles singularity // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
public void test63() throws Throwable { double[][] doubleArray0 = new double[3][3]; Rotation rotation0 = null; try { rotation0 = new Rotation(doubleArray0, (-0.19)); fail("Expecting exception: Exception"); } catch(Throwable e) { // // unable to orthogonalize matrix in 10 iterations // verifyException("org.apache.commons.math.geometry.euclidean.threed.Rotation", e); } }
