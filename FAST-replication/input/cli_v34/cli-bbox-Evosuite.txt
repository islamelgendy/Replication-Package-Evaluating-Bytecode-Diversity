public void test00() throws Throwable { Option option0 = new Option("ee", "ee"); option0.setValueSeparator('_'); option0.setArgs('_'); option0.addValueForProcessing("NO_ARGS_ALLOWED"); assertEquals('_', option0.getValueSeparator()); }
public void test01() throws Throwable { Option option0 = new Option("$", "$"); String string0 = option0.getDescription(); assertNotNull(string0); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test02() throws Throwable { Option option0 = new Option("", ""); option0.getArgName(); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test03() throws Throwable { Option option0 = new Option("JQLWN", "JQLWN"); option0.setOptionalArg(true); boolean boolean0 = option0.acceptsArg(); assertTrue(option0.hasOptionalArg()); assertTrue(boolean0); }
public void test04() throws Throwable { Option option0 = new Option("j", "j"); option0.setRequired(false); assertFalse(option0.isRequired()); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test05() throws Throwable { Option option0 = new Option((String) null, true, (String) null); option0.getKey(); assertEquals(1, option0.getArgs()); }
public void test06() throws Throwable { Option option0 = new Option("j", false, "j"); option0.setType((Class) null); String string0 = option0.toString(); assertEquals("[ option: j :: j ]", string0); assertEquals((-1), option0.getArgs()); }
public void test07() throws Throwable { Option option0 = new Option((String) null, false, (String) null); option0.isRequired(); assertEquals((-1), option0.getArgs()); }
public void test08() throws Throwable { Option option0 = new Option("", ""); option0.getValuesList(); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test09() throws Throwable { Option option0 = new Option((String) null, false, (String) null); option0.getLongOpt(); assertEquals((-1), option0.getArgs()); }
public void test10() throws Throwable { Option option0 = new Option("", ""); try { option0.getId(); fail("Expecting exception: StringIndexOutOfBoundsException"); } catch(StringIndexOutOfBoundsException e) { } }
public void test11() throws Throwable { Option option0 = new Option("e", "e"); try { option0.addValue("e"); fail("Expecting exception: UnsupportedOperationException"); } catch(UnsupportedOperationException e) { verifyException("org.apache.commons.cli.Option", e); } }
public void test12() throws Throwable { Option option0 = new Option((String) null, (String) null); Option option1 = (Option)option0.clone(); boolean boolean0 = option0.equals(option1); assertTrue(boolean0); assertNotSame(option1, option0); assertEquals((-1), option1.getArgs()); }
public void test13() throws Throwable { Option option0 = new Option((String) null, (String) null); Object object0 = option0.getType(); assertNotNull(object0); assertEquals((-1), option0.getArgs()); }
public void test14() throws Throwable { Option option0 = new Option("j", "j"); option0.setDescription("j"); assertFalse(option0.hasLongOpt()); assertEquals((-1), option0.getArgs()); }
public void test15() throws Throwable { Option option0 = new Option("", ""); String string0 = option0.getOpt(); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); assertNotNull(string0); }
public void test16() throws Throwable { Option option0 = new Option("", ""); assertFalse(option0.hasLongOpt()); option0.setLongOpt(""); String string0 = option0.toString(); assertEquals("[ option:  :: :: class java.lang.String ]", string0); }
public void test17() throws Throwable { Option option0 = new Option("", ""); int int0 = option0.getArgs(); assertFalse(option0.hasLongOpt()); assertEquals((-1), int0); }
public void test18() throws Throwable { Option option0 = new Option("", "", true, ""); option0.clearValues(); assertEquals(1, option0.getArgs()); }
public void test19() throws Throwable { Option option0 = new Option("VXNe", "VXNe"); Option option1 = new Option("VXNe", "VXNe", false, "VXNe"); boolean boolean0 = option0.equals(option1); assertFalse(boolean0); assertEquals((-1), option1.getArgs()); }
public void test20() throws Throwable { Option option0 = new Option("", ""); boolean boolean0 = option0.hasLongOpt(); assertEquals((-1), option0.getArgs()); assertFalse(boolean0); }
public void test21() throws Throwable { Option option0 = new Option("", "", true, ""); boolean boolean0 = option0.hasLongOpt(); assertTrue(boolean0); assertEquals(1, option0.getArgs()); }
public void test22() throws Throwable { Option option0 = new Option("F", "F"); assertFalse(option0.hasArgs()); option0.setArgs((-2)); assertTrue(option0.hasArgs()); option0.addValueForProcessing("F"); option0.getValues(); assertTrue(option0.hasArg()); }
public void test23() throws Throwable { Option option0 = new Option("", ""); boolean boolean0 = option0.hasArgName(); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); assertFalse(boolean0); }
public void test24() throws Throwable { Option option0 = new Option("", ""); option0.setArgName(""); boolean boolean0 = option0.hasArgName(); assertEquals((-1), option0.getArgs()); assertFalse(boolean0); assertFalse(option0.hasLongOpt()); }
public void test25() throws Throwable { Option option0 = new Option("Y", "Y"); option0.setArgName("Y"); boolean boolean0 = option0.hasArgName(); assertTrue(boolean0); }
public void test26() throws Throwable { Option option0 = new Option("j", "j"); option0.setArgs(63); option0.toString(); assertEquals(63, option0.getArgs()); }
public void test27() throws Throwable { Option option0 = new Option("j", "j"); assertEquals((-1), option0.getArgs()); option0.setArgs((-2)); String string0 = option0.toString(); assertEquals("[ option: j [ARG...] :: j :: class java.lang.String ]", string0); }
public void test28() throws Throwable { Option option0 = new Option("", ""); try { option0.addValueForProcessing(""); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { verifyException("org.apache.commons.cli.Option", e); } }
public void test29() throws Throwable { Option option0 = new Option("", "", true, ""); option0.setValueSeparator('N'); option0.addValueForProcessing("NO_ARGS_ALLOWED"); assertEquals('N', option0.getValueSeparator()); }
public void test30() throws Throwable { Option option0 = new Option((String) null, (String) null, true, (String) null); option0.addValueForProcessing((String) null); try { option0.addValueForProcessing((String) null); fail("Expecting exception: RuntimeException"); } catch(RuntimeException e) { verifyException("org.apache.commons.cli.Option", e); } }
public void test31() throws Throwable { Option option0 = new Option("Vi", true, "Vi"); option0.addValueForProcessing("Vi"); option0.getValue("Vi"); assertFalse(option0.hasLongOpt()); assertFalse(option0.hasValueSeparator()); }
public void test32() throws Throwable { Option option0 = new Option("", ""); String string0 = option0.getValue(""); assertNotNull(string0); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test33() throws Throwable { Option option0 = new Option("PE7Ippu8", "PE7Ippu8"); option0.setArgs((-2)); option0.addValueForProcessing("PE7Ippu8"); try { option0.getValue((-2)); fail("Expecting exception: ArrayIndexOutOfBoundsException"); } catch(ArrayIndexOutOfBoundsException e) { } }
public void test34() throws Throwable { Option option0 = new Option("_bsI", "_bsI"); option0.getValue((-2)); assertEquals((-1), option0.getArgs()); assertFalse(option0.hasLongOpt()); }
public void test35() throws Throwable { Option option0 = new Option("", ""); String[] stringArray0 = option0.getValues(); assertFalse(option0.hasLongOpt()); assertEquals((-1), option0.getArgs()); assertNull(stringArray0); }
public void test36() throws Throwable { Option option0 = new Option((String) null, true, (String) null); String string0 = option0.toString(); assertEquals("[ option: null [ARG] :: null :: class java.lang.String ]", string0); }
public void test37() throws Throwable { Option option0 = new Option((String) null, (String) null); Option option1 = new Option("RD_iyf", true, "RD_iyf"); boolean boolean0 = option1.equals(option0); assertFalse(option1.hasLongOpt()); assertFalse(boolean0); assertEquals((-1), option0.getArgs()); }
public void test38() throws Throwable { Option option0 = new Option((String) null, (String) null); boolean boolean0 = option0.equals(option0); assertEquals((-1), option0.getArgs()); assertTrue(boolean0); }
public void test39() throws Throwable { Option option0 = new Option((String) null, (String) null); boolean boolean0 = option0.equals((Object) null); assertFalse(boolean0); assertEquals((-1), option0.getArgs()); }
public void test40() throws Throwable { Option option0 = new Option("j", "j"); boolean boolean0 = option0.equals("j"); assertEquals((-1), option0.getArgs()); assertFalse(boolean0); assertFalse(option0.hasLongOpt()); }
public void test41() throws Throwable { Option option0 = new Option("", "", false, ""); Option option1 = new Option("", ""); boolean boolean0 = option0.equals(option1); assertFalse(boolean0); assertEquals((-1), option1.getArgs()); }
public void test42() throws Throwable { Option option0 = new Option((String) null, "VXNe"); Option option1 = new Option("VXNe", "VXNe", false, "VXNe"); boolean boolean0 = option0.equals(option1); assertEquals((-1), option1.getArgs()); assertFalse(option0.hasLongOpt()); assertFalse(boolean0); }
public void test43() throws Throwable { Option option0 = new Option("", "", false, ""); Option option1 = new Option("", "", false, ""); boolean boolean0 = option0.equals(option1); assertEquals((-1), option1.getArgs()); assertTrue(boolean0); }
public void test44() throws Throwable { Option option0 = new Option((String) null, true, (String) null); option0.hashCode(); }
public void test45() throws Throwable { Option option0 = new Option("", "", false, ""); option0.hashCode(); assertEquals((-1), option0.getArgs()); }
public void test46() throws Throwable { Option option0 = new Option("", ""); boolean boolean0 = option0.requiresArg(); assertFalse(boolean0); assertFalse(option0.hasLongOpt()); assertEquals((-1), option0.getArgs()); }
public void test47() throws Throwable { Option option0 = new Option("j", "j"); option0.setOptionalArg(true); boolean boolean0 = option0.requiresArg(); assertTrue(option0.hasOptionalArg()); assertFalse(boolean0); }
public void test48() throws Throwable { Option option0 = new Option("", ""); assertFalse(option0.hasArgs()); option0.setArgs((-2)); boolean boolean0 = option0.requiresArg(); assertTrue(boolean0); }
public void test49() throws Throwable { Option option0 = new Option("", ""); assertFalse(option0.hasArgs()); option0.setArgs((-2)); option0.addValueForProcessing(""); boolean boolean0 = option0.requiresArg(); assertFalse(boolean0); }
public void test00() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArgs(0); assertNotNull(optionBuilder0); }
public void test01() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.isRequired(); assertNotNull(optionBuilder0); }
public void test02() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.withValueSeparator('h'); assertNotNull(optionBuilder0); }
public void test03() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArg(); assertNotNull(optionBuilder0); }
public void test05() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.isRequired(true); assertNotNull(optionBuilder0); }
public void test06() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.withArgName("wWBsVPJ>:~j)"); assertNotNull(optionBuilder0); }
public void test07() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.withValueSeparator(); assertNotNull(optionBuilder0); }
public void test08() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArg(); assertNotNull(optionBuilder0); }
public void test09() throws Throwable { Class<String> class0 = String.class; OptionBuilder optionBuilder0 = OptionBuilder.withType(class0); assertNotNull(optionBuilder0); }
public void test10() throws Throwable { try { OptionBuilder.create('|'); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.cli.OptionValidator", e); } }
public void test11() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArgs(); assertNotNull(optionBuilder0); }
public void test12() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs((-2100)); assertNotNull(optionBuilder0); }
public void test13() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasOptionalArgs(); assertNotNull(optionBuilder0); }
public void test14() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.withDescription("zZ[*uO]"); assertNotNull(optionBuilder0); }
public void test15() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArg(false); assertNotNull(optionBuilder0); }
public void test16() throws Throwable { OptionBuilder optionBuilder0 = OptionBuilder.hasArg(true); assertNotNull(optionBuilder0); }
public void test17() throws Throwable { try { OptionBuilder.create(); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { verifyException("org.apache.commons.cli.OptionBuilder", e); } }
