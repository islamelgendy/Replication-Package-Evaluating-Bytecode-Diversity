public void test00() throws Throwable { Complex complex0 = Complex.ZERO; String string0 = complex0.I.toString(); assertEquals("(0.0, 1.0)", string0); }
public void test01() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.pow(complex0); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test02() throws Throwable { Complex complex0 = Complex.ZERO; ComplexField complexField0 = complex0.I.getField(); assertNotNull(complexField0); }
public void test03() throws Throwable { Complex complex0 = Complex.valueOf(2342.0); boolean boolean0 = complex0.isNaN(); assertEquals(2342.0, complex0.getReal(), 0.01); assertFalse(boolean0); assertFalse(complex0.isInfinite()); assertEquals(0.0, complex0.getImaginary(), 0.01); }
public void test04() throws Throwable { Complex complex0 = Complex.valueOf(203.8789574); Complex complex1 = complex0.pow(203.8789574); assertFalse(complex1.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01); assertEquals(0.0, complex0.getImaginary(), 0.01); }
public void test05() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.pow((-394.0)); assertFalse(complex1.isInfinite()); assertEquals(Double.NaN, complex1.getReal(), 0.01); assertTrue(complex1.isNaN()); }
public void test06() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.pow((-381.0409743846416)); assertFalse(complex1.isInfinite()); assertTrue(complex1.equals((Object)complex0)); assertEquals(-0.0, complex1.getImaginary(), 0.01); }
public void test07() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.ZERO.subtract(Double.NaN); double double0 = complex1.abs(); assertEquals(Double.NaN, double0, 0.01); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test08() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.asin(); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test09() throws Throwable { Complex complex0 = Complex.valueOf(470.0, Double.POSITIVE_INFINITY); Complex complex1 = complex0.acos(); assertTrue(complex1.isNaN()); assertEquals(470.0, complex0.getReal(), 0.01); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test10() throws Throwable { Complex complex0 = new Complex((-394.0), (-394.0)); Complex complex1 = complex0.NaN.add((-394.0)); assertEquals((-394.0), complex0.getReal(), 0.01); assertFalse(complex0.isInfinite()); assertFalse(complex0.isNaN()); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertEquals((-394.0), complex0.getImaginary(), 0.01); }
public void test11() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.ONE.add(Double.NaN); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test12() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.I.add((-568.01282629)); assertEquals((-568.01282629), complex1.getReal(), 0.01); assertEquals(1.0, complex1.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertFalse(complex1.isNaN()); }
public void test13() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.INF.conjugate(); boolean boolean0 = complex0.equals(complex1); assertTrue(complex1.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01); assertFalse(boolean0); assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01); }
public void test14() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.NaN.divide(complex0); assertTrue(complex1.isNaN()); }
public void test15() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.INF.sqrt1z(); Complex complex2 = complex0.ZERO.divide(complex1); assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01); assertEquals(0.0, complex0.getImaginary(), 0.01); assertEquals(Double.NaN, complex2.getImaginary(), 0.01); assertEquals(Double.NaN, complex1.getReal(), 0.01); }
public void test16() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = Complex.ZERO; Complex complex2 = complex0.ZERO.divide(complex1); assertEquals(Double.NaN, complex2.getReal(), 0.01); }
public void test17() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = Complex.INF; Complex complex2 = complex0.divide(complex1); assertNotSame(complex2, complex0); assertEquals(0.0, complex2.getReal(), 0.01); }
public void test18() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.atan(); assertEquals(Double.NaN, complex1.getReal(), 0.01); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test19() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.atan(); assertEquals(0.0, complex1.getImaginary(), 0.01); assertEquals(0.0, complex1.getReal(), 0.01); assertTrue(complex1.equals((Object)complex0)); }
public void test20() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.NaN.divide(Double.NaN); assertTrue(complex1.isNaN()); }
public void test21() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.ONE.divide(0.0); assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01); }
public void test22() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.ZERO.divide(Double.NaN); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test23() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY); assertEquals(0.0, complex1.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test24() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.divide(0.0); assertTrue(complex1.isNaN()); }
public void test25() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.ONE.divide(3.1415923753520403); assertEquals(0.0, complex1.getImaginary(), 0.01); assertEquals(0.31830991437517164, complex1.getReal(), 0.01); assertFalse(complex1.isNaN()); assertFalse(complex1.isInfinite()); }
public void test26() throws Throwable { Complex complex0 = Complex.valueOf((-1949.1393722), (-1949.1393722)); boolean boolean0 = complex0.equals(complex0); assertFalse(complex0.isNaN()); assertTrue(boolean0); assertEquals((-1949.1393722), complex0.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertEquals((-1949.1393722), complex0.getReal(), 0.01); }
public void test27() throws Throwable { Complex complex0 = Complex.valueOf((-1949.1393722), (-1949.1393722)); boolean boolean0 = complex0.equals("+GL"); assertEquals((-1949.1393722), complex0.getImaginary(), 0.01); assertFalse(complex0.isInfinite()); assertFalse(boolean0); assertEquals((-1949.1393722), complex0.getReal(), 0.01); assertFalse(complex0.isNaN()); }
public void test28() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.INF.sqrt1z(); boolean boolean0 = complex0.equals(complex1); assertFalse(complex1.equals((Object)complex0)); assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01); assertEquals(Double.NaN, complex1.getReal(), 0.01); assertFalse(complex1.isInfinite()); assertFalse(boolean0); }
public void test29() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = Complex.ZERO; boolean boolean0 = complex0.equals(complex1); assertFalse(boolean0); assertFalse(complex1.equals((Object)complex0)); }
public void test30() throws Throwable { Complex complex0 = Complex.valueOf(2342.0); Complex complex1 = (Complex)complex0.readResolve(); boolean boolean0 = complex0.equals(complex1); assertFalse(complex1.isInfinite()); assertFalse(complex1.isNaN()); assertEquals(2342.0, complex0.getReal(), 0.01); assertEquals(0.0, complex0.getImaginary(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); assertTrue(boolean0); }
public void test31() throws Throwable { Complex complex0 = Complex.I; complex0.ZERO.hashCode(); }
public void test32() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.INF.pow(0.761594155955765); Complex complex2 = complex0.multiply(complex1); assertNotSame(complex2, complex1); assertEquals(Double.NaN, complex2.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); }
public void test33() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = Complex.INF; Complex complex2 = complex0.multiply(complex1); assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01); }
public void test34() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = Complex.valueOf((-1492.3868757430862), Double.POSITIVE_INFINITY); Complex complex2 = complex0.multiply(complex1); assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01); assertTrue(complex1.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01); assertEquals((-1492.3868757430862), complex1.getReal(), 0.01); }
public void test35() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.pow((-394.0)); assertSame(complex1, complex0); }
public void test36() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.pow(Double.NaN); assertEquals(Double.NaN, complex1.getReal(), 0.01); }
public void test37() throws Throwable { Complex complex0 = Complex.valueOf(203.8789574, Double.POSITIVE_INFINITY); Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY); assertEquals(203.8789574, complex0.getReal(), 0.01); assertTrue(complex1.isInfinite()); assertTrue(complex0.isInfinite()); assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01); }
public void test38() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.ZERO.multiply(Double.POSITIVE_INFINITY); assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01); }
public void test39() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.NaN.negate(); assertSame(complex1, complex0); }
public void test40() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.NaN.subtract(complex0); assertEquals(Double.NaN, complex1.getReal(), 0.01); }
public void test41() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.INF.sqrt1z(); Complex complex2 = complex1.sqrt1z(); assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01); assertEquals(Double.NaN, complex1.getReal(), 0.01); assertEquals(Double.NaN, complex2.getReal(), 0.01); assertEquals(Double.NaN, complex2.getImaginary(), 0.01); }
public void test42() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.subtract((-619.4081)); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); }
public void test43() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.subtract((-2775.223988517569)); assertFalse(complex1.isNaN()); assertEquals(1.0, complex1.getImaginary(), 0.01); assertEquals(2775.223988517569, complex1.getReal(), 0.01); assertFalse(complex1.isInfinite()); }
public void test44() throws Throwable { Complex complex0 = Complex.INF; Complex complex1 = complex0.pow(2.0); Complex complex2 = complex1.acos(); assertTrue(complex2.equals((Object)complex1)); assertNotSame(complex2, complex1); assertFalse(complex1.isInfinite()); }
public void test45() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.INF.sqrt1z(); Complex complex2 = complex1.asin(); assertEquals(0.0, complex0.getImaginary(), 0.01); assertTrue(complex2.equals((Object)complex1)); assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01); assertFalse(complex1.isInfinite()); assertEquals(Double.NaN, complex1.getReal(), 0.01); }
public void test46() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.atan(); assertTrue(complex1.isNaN()); }
public void test47() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.cos(); assertFalse(complex1.isInfinite()); assertEquals(1.0, complex1.getReal(), 0.01); assertFalse(complex1.isNaN()); assertEquals(-0.0, complex1.getImaginary(), 0.01); }
public void test48() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.INF.sqrt1z(); Complex complex2 = complex1.cos(); assertTrue(complex2.equals((Object)complex1)); assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01); assertEquals(Double.NaN, complex1.getReal(), 0.01); }
public void test49() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.cosh(); assertFalse(complex1.isInfinite()); assertFalse(complex1.isNaN()); assertEquals(1.0, complex1.getReal(), 0.01); assertEquals(0.0, complex1.getImaginary(), 0.01); }
public void test50() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.cosh(); assertTrue(complex1.isNaN()); }
public void test51() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.sin(); assertFalse(complex1.isNaN()); assertEquals(0.0, complex1.getReal(), 0.01); assertFalse(complex1.isInfinite()); assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01); }
public void test52() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.sinh(); Complex complex2 = complex1.sin(); assertSame(complex2, complex1); }
public void test53() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.I.sqrt(); assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01); assertEquals(0.7071067811865476, complex1.getReal(), 0.01); assertFalse(complex1.isNaN()); assertFalse(complex1.isInfinite()); }
public void test54() throws Throwable { Complex complex0 = Complex.ONE; Complex complex1 = complex0.acos(); assertEquals(-0.0, complex1.getImaginary(), 0.01); assertEquals(0.0, complex1.getReal(), 0.01); }
public void test55() throws Throwable { Complex complex0 = Complex.ZERO; Complex complex1 = complex0.INF.tan(); assertFalse(complex1.isInfinite()); assertEquals(Double.NaN, complex1.getReal(), 0.01); assertTrue(complex1.isNaN()); }
public void test56() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.tan(); assertEquals(Double.NaN, complex1.getReal(), 0.01); }
public void test57() throws Throwable { Complex complex0 = Complex.NaN; Complex complex1 = complex0.INF.tanh(); assertFalse(complex1.isInfinite()); assertEquals(Double.NaN, complex1.getImaginary(), 0.01); assertTrue(complex1.isNaN()); assertNotSame(complex1, complex0); }
public void test58() throws Throwable { Complex complex0 = Complex.I; Complex complex1 = complex0.NaN.tanh(); assertEquals(Double.NaN, complex1.getReal(), 0.01); }
public void test59() throws Throwable { Complex complex0 = Complex.I; List<Complex> list0 = complex0.NaN.nthRoot(1740033596); assertFalse(list0.contains(complex0)); }
public void test60() throws Throwable { Complex complex0 = Complex.NaN; // Undeclared exception! try { complex0.I.nthRoot((-3713)); fail("Expecting exception: IllegalArgumentException"); } catch(IllegalArgumentException e) { // // cannot compute nth root for null or negative n: -3,713 // verifyException("org.apache.commons.math.complex.Complex", e); } }
public void test61() throws Throwable { Complex complex0 = Complex.ZERO; List<Complex> list0 = complex0.ONE.nthRoot(1857); assertFalse(list0.contains(complex0)); assertEquals(1857, list0.size()); assertEquals(0.0, complex0.getReal(), 0.01); assertEquals(0.0, complex0.getImaginary(), 0.01); }
public void test62() throws Throwable { Complex complex0 = Complex.NaN; List<Complex> list0 = complex0.INF.nthRoot(1257572799); assertFalse(list0.contains(complex0)); }
public void test63() throws Throwable { Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN); assertEquals(Double.NaN, complex0.getReal(), 0.01); }
public void test64() throws Throwable { Complex complex0 = Complex.valueOf(426.5315, Double.NaN); assertEquals(Double.NaN, complex0.getReal(), 0.01); }
public void test65() throws Throwable { Complex complex0 = Complex.valueOf(Double.NaN); assertEquals(Double.NaN, complex0.getImaginary(), 0.01); }
